{"version":3,"file":"multi-entry.js","sources":["themes/amorfati/vendor/search/algolia.js"],"sourcesContent":["((window, document) => {\n  const { themePrefix, instantsearch } = window;\n  if (!instantsearch) return;\n  const algoliaSearch = ({\n    searchBoxId,\n    inputId,\n    searchBtnId,\n    hitsId,\n    statusId,\n    widgetClasses = {},\n    noResultTemplate,\n    itemTemplate,\n    stateMsg = {\n      loading: `Loading...`,\n      error: `Search failed, please try again later.`,\n      idle: `%d results found.`,\n    },\n    truncateLen = 200,\n  }) => {\n    // customize Search Box\n    const { connectSearchBox } = instantsearch.connectors;\n    const renderSearchBox = (renderOptions, isFirstRender) => {\n      const { query, refine, searchAsYouType, widgetParams } = renderOptions;\n      if (isFirstRender) {\n        const input = document.querySelector(`${inputId}`);\n        const searchBtn = document.querySelector(`${searchBtnId}`);\n        input.addEventListener(`input`, (event) => {\n          searchAsYouType && refine(event.target.value);\n        });\n        input.addEventListener(`keyup`, (event) => {\n          const { key } = event;\n          if (key.toLowerCase() === `enter`) refine(event.target.value);\n        });\n        searchBtn.addEventListener(`click`, () => {\n          refine(input.value);\n        });\n      }\n      widgetParams.container.querySelector(`${inputId}`).value = query;\n    };\n    const customSearchBox = connectSearchBox(renderSearchBox);\n    const getLenWithoutTag = (str) => {\n      return (\n        str.length -\n        (str.match(/(<mark\\s*.*?>|<\\/mark>)/g) || []).join(``).length -\n        (str.match(/\\&[^;]+;/g) || []).length\n      );\n    };\n    const truncateContent = (content) => {\n      const paragraphs = content.split(`\\n`);\n      const firstMatchIdx = paragraphs.findIndex((html) =>\n        html.includes(`<mark`)\n      );\n\n      let str = paragraphs[firstMatchIdx] || ``,\n        len = getLenWithoutTag(str),\n        step = 1,\n        direction = -1;\n\n      while (len < truncateLen) {\n        if (direction < 0) {\n          str = [paragraphs[firstMatchIdx + step * direction] || ``, str].join(\n            `\\n`\n          );\n        } else {\n          str = [\n            str,\n            paragraphs[firstMatchIdx + step++ * direction] || ``,\n          ].join(`\\n`);\n        }\n        str = str.replace(/\\n(\\s|\\t|\\n)+/g, `\\n`);\n        len = getLenWithoutTag(str);\n        direction = direction * -1;\n      }\n      return str.replace(/\\n/g, `<br>`).replace(/&amp;/g, `&`);\n    };\n\n    const searchClient = algoliasearch(`{algoliaAppId}`, `{algoliaApiKey}`);\n    const search = instantsearch({\n      indexName: `{algoliaIndexName}`,\n      searchClient,\n      searchFunction(helper) {\n        if (helper.state.query && helper.state.query.length > 1) {\n          helper.setQueryParameter(\"typoTolerance\", false).search();\n        }\n      },\n    });\n\n    search.on(`render`, () => {\n      const container = document.querySelector(`${statusId}`);\n      if (!container) return;\n      const resultCount = search.helper.lastResults?.hits?.length;\n      switch (search.status) {\n        case `loading`:\n        case `error`:\n          container.textContent = stateMsg.loading;\n          break;\n        case `idle`:\n          container.textContent = stateMsg.idle.replace(\n            /%d/,\n            Number.isInteger(resultCount) ? resultCount : ``\n          );\n          break;\n      }\n    });\n\n    search.addWidgets([\n      customSearchBox({\n        container: document.querySelector(`${searchBoxId}`),\n        searchAsYouType: false,\n      }),\n      instantsearch.widgets.hits({\n        container: hitsId,\n        cssClasses: { ...widgetClasses },\n        transformItems(items) {\n          return items.map((item) => {\n            return {\n              ...item,\n              _highlightResult: Object.fromEntries(\n                Object.entries(item._highlightResult).map(([key, value]) => {\n                  if (key.startsWith(`content`)) {\n                    key = `content`;\n                  }\n                  return [[key], value];\n                })\n              ),\n            };\n          });\n        },\n        templates: {\n          empty(results) {\n            return `${noResultTemplate.replace(/{query}/g, results.query)}`;\n          },\n          item(hit) {\n            return itemTemplate({\n              themePrefix,\n              permalink: hit.permalink,\n              title: instantsearch.highlight({ hit, attribute: `title` }),\n              content: truncateContent(\n                instantsearch.highlight({ hit, attribute: `content` })\n              ),\n              tags: hit.tags\n                .slice(0, 3)\n                .map((tag, idx) => {\n                  return `#${instantsearch.highlight({\n                    hit,\n                    attribute: `tags.${idx}`,\n                  })}`;\n                })\n                .sort((a, b) => {\n                  if (a.includes(`<mark`) && b.includes(`<mark`)) {\n                    return a.length - b.length;\n                  }\n                  if (b.includes(`<mark`)) return 1;\n                  return a.length - b.length;\n                }),\n            });\n          },\n        },\n      }),\n    ]);\n    search.start();\n  };\n  window.uis.set(`search`, algoliaSearch);\n})(window, document);\n"],"names":["window","document","themePrefix","instantsearch","uis","set","searchBoxId","searchBtnId","inputId","statusId","hitsId","widgetClasses","c","itemTemplate","noResultTemplate","stateMsg","loading","error","idle","truncateLen","connectSearchBox","connectors","customSearchBox","renderOptions","isFirstRender","query","refine","searchAsYouType","widgetParams","input","querySelector","searchBtn","addEventListener","event","target","value","key","toLowerCase","container","getLenWithoutTag","str","length","match","join","truncateContent","content","paragraphs","split","firstMatchIdx","findIndex","html","includes","len","step","direction","replace","searchClient","algoliasearch","search","indexName","searchFunction","helper","state","setQueryParameter","on","resultCount","lastResults","hits","status","textContent","Number","isInteger","addWidgets","widgets","cssClasses","transformItems","items","map","item","_highlightResult","Object","fromEntries","entries","startsWith","templates","empty","results","hit","permalink","title","highlight","attribute","tags","slice","tag","idx","sort","a","b","start"],"mappings":"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"}