/// Slightly lighten a color
/// @param {Color} $color color to tint
/// @param {Number} $percentage percentage of `$color`
/// @return {Color}

@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

/// Slightly darken a color
/// @param {Color} $color color to shade
/// @param {Number} $percentage percentage of `$color`
/// @return {Color}

@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

/// Remove units from a given value
/// @param {Number} numbers containing units
/// @return {Number}

@function stripUnit($num) {
  @return math.div($num, ($num * 0 + 1));
}

/// Convert a given value in rem
/// @param {Number} value to convert
/// @param {Number} the value that is the basis for the conversion
/// @return {Number}

@function convertRem($value, $base-value) {
  @if not $base-value {
    @error "not defined $base-value";
  }

  $value: math.div(stripUnit($value), stripUnit($base-value)) * 1rem;
  @if ($value == 0rem) {
    $value: 0;
  } // Turn 0rem into 0
  @return $value;
}

/// get font size from sizes of divided evenly
/// between the minimum and maximum values
/// @param {Number} divided step
/// @return {Number}

@function getFontSize($step) {
  @if not $font-size-largest {
    @error "can not found $font-size-largest";
  }
  @if not $font-size-smallest {
    @error "can not found $font-size-smallest";
  }
  @if not $font-size-step-count {
    @error "can not found $font-size-step-count";
  }

  @if ($step > $font-size-step-count) {
    $step: $font-size-step-count;
  }

  $result: math.div(
      ($font-size-largest - $font-size-smallest),
      ($font-size-step-count - 1)
    ) * ($step - 1) + $font-size-smallest;

  @return convertRem($result, $font-size-smallest);
}
