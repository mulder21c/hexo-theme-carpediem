/// Slightly lighten a color by mixing with white
/// @param {Color} $color color to tint
/// @param {Number} $percentage percentage of `$color`
/// @return {Color}
/// @example
///   tint(#f00, 10)
///   // #ff1a1a
///
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

/// Slightly darken a color by mixing with black
/// @param {Color} $color color to shade
/// @param {Number} $percentage percentage of `$color`
/// @return {Color}
/// @example
///   shade(#f00, 10)
///   // #e60000
///
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

/// Remove units from a given value
/// @param {Number} $num numbers containing units
/// @return {Number}
/// @example
///   stripUnit(16px)
///   // 16
///
@function stripUnit($num) {
  @return math.div($num, ($num * 0 + 1));
}

/// Convert a given value in rem
/// @param {Number} $value value to convert
/// @param {Number} $base-value the value that is the basis for the conversion
/// @return {Number}
/// @example
///   convertRem(32px, 16px)
///   // 2
///
@function convertRem($value, $base-value) {
  @if not $base-value {
    @error "not defined $base-value";
  }

  $value: math.div(stripUnit($value), stripUnit($base-value)) * 1rem;
  @if ($value == 0rem) {
    $value: 0;
  } // Turn 0rem into 0
  @return $value;
}

/// get font size from sizes of divided evenly
/// between the minimum and maximum values
/// @param {Number} $step divided step
/// @return {Number}
/// @example
///   getFontSize(2)
///   // get the second smallest font size
///
@function getFontSize($step) {
  @if not $font-size-largest {
    @error "can not found $font-size-largest";
  }
  @if not $font-size-smallest {
    @error "can not found $font-size-smallest";
  }
  @if not $font-size-step-count {
    @error "can not found $font-size-step-count";
  }

  @if ($step > $font-size-step-count) {
    $step: $font-size-step-count;
  }

  $result: math.div(
      ($font-size-largest - $font-size-smallest),
      ($font-size-step-count - 1)
    ) * ($step - 1) + $font-size-smallest;

  @return convertRem($result, $font-size-smallest);
}

/// get rgb(r, g, b) format from Hex color
/// @param {Color} $color Hex color
/// @return {Color}
/// @example
///   toRGB(#fff);
///   // 255,255,255
///
@function toRGB($color) {
  @if (alpha($color) == 1) {
    @return red($color), green($color), blue($color);
  } @else {
    @return null;
  }
}

/// url encode
/// @param {Color} $color the color in name, hex or rgb format
/// @return {String}
/// @example
///   encodeColor(#f00)
///   // "%23FF0000"
///
@function encodeColor($color) {
  @if type-of($color) == "color" {
    $hex: str-slice(ie-hex-str($color), 4);
    $color: unquote("#{$hex}");
  }
  $color: "%23" + $color;
  @return $color;
}
