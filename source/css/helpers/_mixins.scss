/// generate media query for responsive
/// @param {String} $breakpoint breakpoint name
/// @example
///   @include respond-to(tablet) { ... }
///   // @media(min-width: 768px) { ... }
///
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: #{inspect(map-get($breakpoints, $breakpoint))}) {
      @content;
    }
  } @else {
    @warn "no value could be retrieved from `#{$breakpoint}`. ";
  }
}

/// generate at-rule for font-face
/// @param {String} $name font's name to be used for font-family
/// @param {String} $path path to font files based on a web root
/// @param {String} $filename name of file without extension
/// @param {Number} $weight font-weight
/// @param {String} $style font-style
/// @param {List} $exts space-delimited list of font file extensions
/// @param {String} $range range of unicode
/// @example
///   @include font-face(
///     "Noto Serif",
///     "/fonts/noto/",
///     "noto-serif-kr-400",
///     400,
///     normal,
///     woff woff2,
///     null
///   );
///   // font-family: "Noto Serif";
///   // src: url("/fonts/noto/noto-serif-kr-400.woff") format("woff"),url("/fonts/noto/noto-serif-kr-400.woff2") format("woff2");
///   // font-weight: 400;
///   // font-style: normal;
///
@mixin font-face(
  $name,
  $path,
  $filename,
  $weight: 400,
  $style: normal,
  $exts: woff2 woff ttf otf,
  $range: null
) {
  $src: null;

  $formats: (
    otf: "opentype",
    ttf: "truetype",
  );

  @each $ext in $exts {
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append(
      $src,
      url(quote($path + $filename + "." + $ext)) format(quote($format)),
      comma
    );
  }

  @font-face {
    font-family: quote($name);
    src: $src;
    font-weight: $weight;
    font-style: $style;
    unicode-range: $range;
  }
}

/// generate prefers-color-scheme media query
/// and block for [data-scheme="{scheme}"] selector
/// @param {String} $scheme color scheme to apply the style to
/// @example
///   @include colorScheme(dark) { ... }
///   // selector[data-scheme=dark] { ... }
///   // @media(prefers-color-scheme: dark) { ... }
///
@mixin colorScheme($scheme) {
  $schemes: ("light", "dark");

  @if (index($schemes, $scheme)) {
    @if ($scheme == "light") {
      @content;
      @media (prefers-color-scheme: dark) {
        @if (#{&} == ":root") {
          &[data-scheme="light"] {
            @content;
          }
        } @else {
          :root[data-scheme="light"] & {
            @content;
          }
        }
      }
    } @else if ($scheme == "dark") {
      @if (#{&} == ":root") {
        &[data-scheme="dark"] {
          @content;
        }
      } @else {
        :root[data-scheme="dark"] & {
          @content;
        }
      }
      @media (prefers-color-scheme: dark) {
        @content;
      }
    } @else {
      @warn "no value could be retrieved from `#{$scheme}`. ";
    }
  }
}

/// generate @keyframes rules
/// @param {String} $name the name of keyframe
/// @example
///   @include keyframes(bounce) { ... }
///   // @keyframes bounce { ... }
///
@mixin keyframes($name) {
  @if not $name or $name == "" {
    @warn "not defined animation name.";
  } @else {
    @keyframes #{$name} {
      @content;
    }
  }
}

/// generate properties for animation
/// @param {Map} $options
/// @param {String} $options.name - the name of animation
/// @param {Number} $options.duration [0] - the length of time that an animation should take to complete one cycle
/// @param {String} $options.func [ease-in-out] - how an animation progresses through the duration of each cycle
/// @param {Number} $options.delay [0] - the amount of time to wait from applying the animation to an element before beginning to perform the animation
/// @param {Number} $options.iteration [1] - the number of times an animation sequence should be played before stopping
/// @param {String} $options.direction [normal] - whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.
/// @param {String} $options.fill [none] - how a CSS animation applies styles to its target before and after its execution
/// @param {String} $options.state [running] - whether an animation is running or paused
/// @example
///   @include animation((name: bounce, duration: 1s));
///   // animation-name: bounce;
///   // animation-duration: 1s;
///   // animation-timing-function: ease-in-out;
///   // animation-delay: 0s;
///   // animation-iteration-count: 1;
///   // animation-direction: normal;
///   // animation-fill-mode: none;
///   // animation-play-state: running;
///
@mixin animation($options) {
  $default: (
    name: "",
    duration: 0s,
    func: ease-in-out,
    delay: 0s,
    iteration: 1,
    direction: normal,
    fill: none,
    state: running,
  );
  $config: map-merge($default, $options);

  $name: map-get($config, name);
  $duration: map-get($config, duration);
  $func: map-get($config, func);
  $delay: map-get($config, delay);
  $iteration: map-get($config, iteration);
  $direction: map-get($config, direction);
  $fill: map-get($config, fill);
  $state: map-get($config, state);

  @if not $name or $name == "" {
    @warn "not defined animation name.";
  } @else {
    @media (prefers-reduced-motion: no-preference) {
      animation-name: $name;
      animation-duration: $duration;
      animation-timing-function: $func;
      animation-delay: $delay;
      animation-iteration-count: $iteration;
      animation-direction: $direction;
      animation-fill-mode: $fill;
      animation-play-state: $state;
    }
  }
}

/// visually hidden for screen reader
/// @example
///   @include sr-only;
///
@mixin sr-only {
  overflow: hidden !important;
  position: relative !important;
  z-index: -1 !important;
  margin: -1px !important;
  padding: 0 !important;
  border: 0 !important;
  width: 1px !important;
  height: 1px !important;
  clip-path: inset(50%) !important;
}

/// generate ellipsis by lines
/// @param {Number} $line-to-show the number of lines
/// @example
///   @include lineEllipsis(1);
///   // overflow: hidden;
///   // text-overflow: ellipsis;
///   // white-space: nowrap;
///
///   @include lineEllipsis(3);
///   // overflow: hidden;
///   // text-overflow: ellipsis;
///   // display: block;
///   // display: -webkit-box;
///   // -webkit-box-orient: vertical;
///   // -webkit-line-clamp: 3;
///
@mixin lineEllipsis($line-to-show) {
  overflow: hidden;
  text-overflow: ellipsis;
  @if $line-to-show == 1 {
    white-space: nowrap;
  } @else {
    display: block;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $line-to-show;
  }
}

/// generate css variable for color in two ways that are hex code and r, g, b
/// @param {Map} $colorMap map containing variable's name & color value
/// @example
///   @include defineColorVar((--background-color: $color-neutral-05));
///   // --background-color: #f2f2f2;
///   // --background-color-rgb: 242,242,242;
///
@mixin defineColorVar($colorMap) {
  @each $name, $color in $colorMap {
    $rgb: toRGB($color);
    #{$name}: $color;
    @if ($rgb) {
      #{$name}-rgb: $rgb;
    }
  }
}

@mixin fitViewport($options) {
  $breakpoint: map-get($options, breakpoint);
  $margin-horizontal: map-get($options, margin);

  max-width: 100vw;
  max-height: 100vh;
  margin-right: -1 * $margin-horizontal;
  margin-left: -1 * $margin-horizontal;
  object-fit: contain;

  @include respond-to($breakpoint) {
    max-width: 100%;
    max-height: 640px;
    margin-right: unset;
    margin-left: unset;
    width: auto;
  }
}
