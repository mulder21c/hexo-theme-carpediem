//- @pugdoc
  name: switchButton
  description: switch button component
  beforeEach: |
    include /components/utils/util
  arguments:
    - {object} props
    - |
      {string} [props.id] the value of switch button's id attribute
      and label's for attribute <br>
      If not specified, an auto-generated id is assigned.
    - {string} [props.name] the value of switch button's name attribute
    - |
      {string} [props.label] label of switch button <br>
      If do not specify this value, you must author and style label element.
    - |
      {boolean} [props.checked] [`false`] the check state of switch button <br>
      If checked then switch has on state, otherwise has off state
    - {string|number} [props.value] the value of switch button's value attribute
    - |
      {string} [props.labelPosition] [`right`] Where the label is located
      relative to the visual indicator<br>One of `left`, `right`
    - {object} [props.inputAttrs] the attrs for input:checkbox
  examples:
    - |
      // basic switch button
      +switchButton({
        label: `alarm`,
        checked: true,
      })

      // using block instead of label property
      +switchButton({
        checked: true,
      }) switch button

      // using separated label element
      +switchButton({
        id: `no-label-switch`,
        checked: false,
      })
      label(for="no-label-switch") switch button

mixin switchButton(props = {})
  -
    site.components.add(`switch`);

    // define types
    const switchBtnProps = {
      id: PropTypes.string,
      name: PropTypes.string,
      label: PropTypes.string,
      checked: PropTypes.bool,
      value: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number,
      ]),
      labelPosition: PropTypes.oneOf([
        `left`,
        `right`,
      ]),
      inputAttrs: PropTypes.object,
    };

    // verifying props
    validateProps(switchBtnProps)(props);

    // merge user-supplied options with the defaults
    const defaultProps = {
      id: generate_uid(),
      checked: false,
      labelPosition: `right`,
      inputAttrs: {},
    };
    const {
      id,
      name,
      label,
      checked,
      value,
      labelPosition,
      inputAttrs,
      ...attrs
    } = {
      ...defaultProps,
      ...props,
    };

    const { prefix } = theme;
    const isReverse = [`left`].includes(labelPosition);
    const btnClassName = [
      `${prefix}-switch__btn`,
      { [`${prefix}-switch__btn--reverse`]: isReverse }
    ];

  span(class=`${prefix}-switch`)&attributes(attrs)
    input(
      type= `checkbox`
      id= id
      name= name || null
      value= value || null
      checked= checked
      class= `${prefix}-switch__control`
    )&attributes(inputAttrs)
    span(
      class= btnClassName
      aria-hidden= `true`
    )
    if (label || block)
      label(
        for= id
        class= `${prefix}-switch__label`
      )
        if (label)
          = label
        block
    else
      span(
        class= `${prefix}-switch__label`
        aria-hidden= `true`
      )
