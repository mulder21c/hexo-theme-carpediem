//- @pugdoc
  name: switchButton
  description: create switch button
  beforeEach: |
    include ../../utils/util
  arguments:
    - {object} props
    - {string} [props.name] the value of switch button's name attribute
    - |
      {string} [props.id] the value of switch button's id attribute
      and label's for attribute <br>
      If not specified, an auto-generated id is assigned.
    - |
      {string} [props.label] label of switch button <br>
      If do not specify this value, you must author and style label element.
    - {boolean} [props.checked] the state of switch button
    - {string|number} [props.value] the value of switch button
    - |
      {string} [props.labelPosition] ['right'] Where the label is located
      relative to the visual indicator<br>One of `'left'`, `'right'`
    - {object} [props.inputAttrs] the attrs for input:checkbox
  examples:
    - |
      // basic
      +switchButton({
        label: 'alarm',
        checked: true
      })
      // using block instead of label property
      +switchButton({
        label: 'alarm',
        checked: true
      }) switch button
      // using separated label element
      +switchButton({
        checked: false,
        id: `no-label-switch`
      })
      label(for="no-label-switch") switch button
mixin switchButton(props)
  -
    // verifying props
    const switchBtnProps = {
      label: PropTypes.string,
      name: PropTypes.string,
      checked: PropTypes.bool,
      id: PropTypes.string,
      value: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number,
      ]),
      labelPosition: PropTypes.oneOf([
        `left`,
        `right`,
      ]),
      inputAttrs: PropTypes.object,
    };
    const switchBtnValidate = validateProps(switchBtnProps);
    const defaults = {
      labelPosition: `right`,
      inputAttrs: {},
    };
    const {
      checked,
      label,
      id,
      name,
      labelPosition,
      value,
      inputAttrs,
      ...attrs
    } = {
      ...defaults,
      ...props,
    };
    switchBtnValidate({
      label,
      checked,
      id,
      value,
      labelPosition
    });

    const {prefix} = theme;
    const uid = id || generateUid();
    const isReverse = [`left`].includes(labelPosition);
    const btnClassName = [
      `${prefix}-switch__btn`,
      { [`${prefix}-switch__btn--reverse`]: isReverse }
    ];

  span(class=`${prefix}-switch`)&attributes(attrs)
    input(
      type= `checkbox`
      id= uid
      name= name
      value= value
      checked= checked
      class= `${prefix}-switch__control`
    )&attributes(inputAttrs)
    span(
      class= btnClassName
      aria-hidden= `true`
    )
    if (label || block)
      label(
        for= uid
        class= `${prefix}-switch__label`
      )
        if (label)
          = label
        block
    else
      span(
        class= `${prefix}-switch__label`
        aria-hidden= `true`
      )
