//- @pugdoc
  name: checkbox
  description: checkbox component
  beforeEach: |
    include ../../utils/util
  arguments:
    - {object} props
    - |
      {string} [props.id] the value of checkbox's id attribute
      and label's for attribute <br>
      If not specified, an auto-generated id is assigned.
    - {string} [props.name] the value of checkbox's name attribute
    - |
      {string} [props.label] label of checkbox <br>
      If do not specify this value, you should provide label as block
      or separated label element
    - {boolean} [props.checked] [false] the checked state of checkbox
    - {string|number} [props.value] the value of checkbox
    - |
      {string} [props.labelPosition] ['right'] Where the label is located
      relative to the visual indicator<br>
      One of `'top'`, `'left'`, `'right'`, `'bottom'`
    - {string} [props.labelClassName] [``] the class name for label element
    - {object} [props.inputAttrs] [{}] the attrs for input:checkbox
  examples:
    - |
      // basic
      +checkbox({
        label: 'agree',
        checked: true
      })

      // using block instead of label property
      +checkbox({
        name: 'answer',
        value: 1
      }) check label

      // using separated label element
      +checkbox({
        id: "no-label-checkbox",
        checked: false,
      })
      label(for="no-label-checkbox") checkbox

mixin checkbox(props = {})
  -
    site.components.add(`checkboxes`);

    // define types
    const chkProps = {
      id: PropTypes.string,
      name: PropTypes.string,
      label: PropTypes.string,
      checked: PropTypes.bool,
      value: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number,
      ]),
      labelPosition: PropTypes.oneOf([
        `top`,
        `left`,
        `right`,
        `bottom`,
      ]),
      labelClassName: PropTypes.string,
      inputAttrs: PropTypes.object,
    };

    // verifying props
    validateProps(chkProps)(props);

    // merge user-supplied options with the defaults
    const defaultProps = {
      id: generateUid(),
      checked: false,
      labelPosition: `right`,
      labelClassName: ``,
      inputAttrs: {},
    };

    const {
      id,
      name,
      label,
      checked,
      labelPosition,
      value,
      labelClassName: lblClassName,
      inputAttrs,
      class: className,
      ...attrs
    } = {
      ...defaultProps,
      ...props,
    };

    const { prefix } = theme;
    const isReverse = [`left`, `top`].includes(labelPosition);
    const isColumn = [`top`, `bottom`].includes(labelPosition);
    const labelClassName = [
      `${prefix}-checkbox__label`,
      { [`${prefix}-checkbox__label--reverse`]: isReverse },
      { [`${prefix}-checkbox__label--column`]: isColumn },
      ...(Array.isArray(lblClassName) ? lblClassName : [lblClassName] ),
    ];

  span(
    class= [
      `${prefix}-checkbox`,
      ...(Array.isArray(className) ? className : [className]),
    ]
  )&attributes(attrs)
    input(
      type= `checkbox`
      id= id
      name= name || null
      value= value || null
      checked= checked
      class= `${prefix}-checkbox__control`
    )&attributes(inputAttrs)
    if (label || block)
      label(
        for= id
        class= labelClassName
      )
        if (label)
          = label
        block
    else
      span(
        class= labelClassName
        aria-hidden= `true`
      )
