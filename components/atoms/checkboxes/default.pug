//- @pugdoc
  name: checkbox
  description: create input checkbox element
  beforeEach: |
    include ../../utils/util
  arguments:
    - {object} props
    - {string} [props.name] the value of checkbox's name attribute
    - |
      {string} [props.id] the value of checkbox's id attribute
      and label's for attribute <br>
      If not specified, an auto-generated id is assigned.
    - |
      {string} [props.label] label of checkbox <br>
      If do not specify this value, you should provide label as block
      or separated label element
    - {boolean} [props.checked] the checked state of checkbox
    - {string|number} [props.value] the value of checkbox
    - |
      {string} [props.labelPosition] ['right'] Where the label is located
      relative to the visual indicator<br>
      One of `'top'`, `'left'`, `'right'`, `'bottom'`
    - {string} [props.labelClassName] the class name for label element
  examples:
    - |
      // basic
      +checkbox({
        label: 'agree',
        checked: true
      })
      // using block instead of label property
      +checkbox({
        name: 'answer',
        value: 1
      }) check label
      // using separated label element
      +checkbox({
        checked: false,
        id: "no-label-checkbox"
      })
      label(for="no-label-checkbox") checkbox

mixin checkbox(props)
  -
    // verifying props
    const chkProps = {
      label: PropTypes.string,
      name: PropTypes.string,
      checked: PropTypes.bool,
      id: PropTypes.string,
      value: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number,
      ]),
      labelPosition: PropTypes.oneOf([
        `top`,
        `left`,
        `right`,
        `bottom`,
      ]),
      labelClassName: PropTypes.string,
    };
    const chkValidate = validateProps(chkProps);
    const defaults = {
      labelPosition: `right`,
      labelClassName: null
    };
    const {
      checked,
      label,
      id,
      name,
      labelPosition,
      value,
      labelClassName: lblClassName,
      class: cn,
      ...attrs
    } = {
      ...defaults,
      ...props,
    };
    chkValidate({
      label,
      checked,
      id,
      name,
      value,
      labelPosition,
      labelClassName: lblClassName
    });

    const {prefix} = theme;
    const uid = id || generateUid();
    const isReverse = [`left`, `top`].includes(labelPosition);
    const isColumn = [`top`, `bottom`].includes(labelPosition);
    const labelClassName = [
      `${prefix}-checkbox__label`,
      { [`${prefix}-checkbox__label--reverse`]: isReverse },
      { [`${prefix}-checkbox__label--column`]: isColumn },
      ...(Array.isArray(lblClassName) ? lblClassName : [lblClassName] ),
    ];
  span(
    class=[
      `${prefix}-checkbox`,
      ...(Array.isArray(cn) ? cn : [cn])
    ]
  )
    input(
      type= `checkbox`
      id= uid
      name= name
      value= value
      checked= checked
      class= `${prefix}-checkbox__control`
    )&attributes(attrs)
    if (label || block)
      label(
        for= uid
        class= labelClassName
      )
        if (label)
          = label
        block
    else
      span(
        class= labelClassName
        aria-hidden= `true`
      )
