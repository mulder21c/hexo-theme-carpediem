//- @pugdoc
  name: radio
  description: create input radio element
  beforeEach: |
    include ../../utils/util
  arguments:
    - {object} props
    - {string} props.name name of radio
    - {string|number|boolean} props.value the value of radio
    - |
      {string} [props.label] label of radio<br>
      If do not specify this value, you should provide label
      as block or separated label element
    - |
      {string} [props.id] the value of radio's id attribute
      and label's for attribute
    - {boolean} [props.checked] the checked state of radio
    - |
      {string} [props.labelPosition] ['right'] Where the label is located
      relative to the visual indicator<br>
      One of `'top'`, `'left'`, `'right'`, `'bottom'`
    - {string} [props.labelClassName] the class name for label element
  examples:
    - |
      // basic
      +radio({label: 'yes', name: 'answer', value: 1})
      // using block instead of label property
      +radio({name: 'answer', value: 1}) radio button
      // using separated label element
      +radio({name: 'answer', id: "no-label", value: 1})
      label(for="no-label") radio button

mixin radio(props)
  -
    // verifying props
    const radioProps = {
      label: PropTypes.string,
      name: PropTypes.string.isRequired,
      checked: PropTypes.bool,
      id: PropTypes.string,
      value: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number,
        PropTypes.bool,
      ]).isRequired,
      labelPosition: PropTypes.oneOf([
        `top`,
        `left`,
        `right`,
        `bottom`,
      ]),
      labelClassName: PropTypes.string,
    };
    const radioValidate = validateProps(radioProps);
    const defaults = {
      labelPosition: `right`
    };
    const {
      checked,
      label,
      id,
      name,
      labelPosition,
      value,
      labelClassName: lblClassName,
      class: cn,
      ...attrs
    } = {
      ...defaults,
      ...props,
    };
    radioValidate({
      label,
      checked,
      id,
      name,
      value,
      labelPosition,
      labelClassName: lblClassName
    });

    const {prefix} = theme;
    const uid = id || generateUid();
    const isReverse = [`left`, `top`].includes(labelPosition);
    const isColumn = [`top`, `bottom`].includes(labelPosition);
    const labelClassName = [
      `${prefix}-radio__label`,
      { [`${prefix}-radio__label--reverse`]: isReverse },
      { [`${prefix}-radio__label--column`]: isColumn },
      ...(Array.isArray(lblClassName) ? lblClassName : [lblClassName] ),
    ];

  span(
    class=[`${prefix}-radio`,
    ...(Array.isArray(cn) ? cn : [cn])]
  )
    input(
      type="radio"
      id=uid
      name=name
      value=value
      checked=checked
      class=`${prefix}-radio__control`
    )&attributes(attrs)
    if (label || block)
      label(
        for=uid
        class=labelClassName
      )
        if (label)
          = label
        block
    else
      span(
        class=labelClassName
        aria-hidden="true"
      )
