//- @pugdoc
  name: heading
  description: heading component
  beforeEach: |
    include /components/utils/util
  arguments:
    - {object} props
    - {number} props.level the level(rank) of heading from 1 to 6
    - {string} [props.htmlString] the html string as content of heading
    - {boolean} [props.visible] [`true`] whether an element is visible or not
  slots:
    - headingSlot the slot for heading content
  examples:
    - |
      // basic heading
      +heading({ level: 1 }) heading

      // using html
      +heading({
        level: 1,
        htmlString: `<span>HTML heading</span>`
      })

      // using slot
      +heading({
        level: 1,
      })
        +headingSlot()
          | slot content


mixin heading(props = {})
  -
    // define types
    const headingProps = {
      level: PropTypes.number.custom(({prop}) => {
        if (Number.isInteger(prop) && prop > 0 && prop < 7) {
          return true;
        } else {
          throw new Error('level must be an integer between 1 and 6.');
        }
      }).isRequired,
      htmlString: PropTypes.string,
      visible: PropTypes.bool,
    };

    // verifying props
    validateProps(headingProps)(props);

    // merge user-supplied options with the defaults
    const defaultProps = {
      visible: true,
    };

    const {
      level,
      htmlString,
      visible,
      ...attrs
    } = {
      ...defaultProps,
      ...props,
    };

    const { prefix } = theme;
    const tag = `h${level}`;
    const className = [
      `${prefix}-heading--lv-${level}`,
      {[`sr-only`]: !visible}
    ];

    // declaring slots
    let headingSlot = null;

  mixin headingSlot
    - headingSlot = block;

  #{tag}(class= className)&attributes(attrs)
    block
    if (htmlString)
      | !{htmlString}
    if (headingSlot)
      - headingSlot();
