include /components/atoms/svg-icon/index

//- @pugdoc
  name: category
  description: category indicator
  beforeEach: |
    include /components/utils/util
    include /components/atoms/svg-icon/index
  arguments:
    - {object} props
    - {array} props.categories sequence of category
    - {string} props.visibleLabel the visible label for category
    - |
      {string} [props.level] [`lowest`] the level of category to be display
      <br> one of `lowest`, `top`, `all`
    - {boolean} [props.useLink] [`true`] whether to use link
    - |
      {string} [props.separator] [`>`] hierarchy separator
      <br> You can use icon(font awesome) name for separator

  examples:
    - |
      +category({
        categories: post.categories.toArray(),
        visibleLabel: `ðŸ“‚`,
        level: `top`,
        useLink: false,
        separator: `>`
      })

mixin category(props = {})
  -
    // define types
    const categoryProps = {
      categories: PropTypes.array.isRequired,
      visibleLabel: PropTypes.string.isRequired,
      level: PropTypes.oneOf([
        `lowest`,
        `top`,
        `all`,
      ]),
      useLink: PropTypes.bool,
      separator: PropTypes.string,
    };

    // verifying props
    validateProps(categoryProps)(props);

    // merge user-supplied options with the defaults
    const defaultProps = {
      level: `lowest`,
      useLink: true,
      separator: `>`,
    };

    const {
      categories,
      visibleLabel,
      level,
      useLink,
      separator,
      ...attrs
    } = {
      ...defaultProps,
      ...props,
    };

    /**
     * determine if given string is an icon name
     * @function isIconName
     * @pram {string} str the string to determine if it is an icon name
     * @return {boolean}
     */
    const isIconName = str => {
      if (str.length < 2) return false;
      if (/^[&\\]/.test(str)) return false; // HTML Entity
      return !!icon_info(str);
    };

    // get entries to display from categories
    const categoryEntries = ((level, categories) => {
      if (!categories.length) return { name: _p('label.no_category') }
      switch (level) {
        case "lowest":
          return categories.at(0);
        case "top":
          return categories.pop();
        case "all":
          return categories;
      }
    })(level, categories);
    const { prefix } = theme;
    const wrapper = (useLink && categories.length) ? `a` : `span`;

  span(
    class= `${prefix}-category`
  )&attributes(attrs)
    span(
      class= `${prefix}-category__label`
      role= `img`
      aria-label= `${_p('label.category')}`
    )= visibleLabel
    if (Array.isArray(categoryEntries))
      span(
        role= `list`
        class= `${prefix}-category__list`
      )
        each entry, idx in categoryEntries
          if idx > 0
            span(
              aria-hidden= `true`
              class= `${prefix}-category__separator`
            )
              if isIconName(separator)
                +svgIcon({
                  name: separator,
                  focusable: `false`,
                })
              else
                = separator
          span(
            role= `listitem`
            class= `${prefix}-category__content`
          )
            #{wrapper}(
              href= useLink ? full_url(entry.path) : null
            )= entry.name
    else
      #{wrapper}(
        href= useLink ? full_url(categoryEntries.path) : null
        class= `${prefix}-category__content`
      )= categoryEntries.name
