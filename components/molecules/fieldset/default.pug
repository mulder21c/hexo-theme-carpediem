//- @pugdoc
  name: fieldset
  description: group containing label and body
  beforeEach: |
    include /components/utils/util
  arguments:
    - {object} props
    - |
      {string} [props.direction] [row] how items are placed in the container
      <br>One of `row`, `column`
    - |
      {string} [props.alignItem] [start] alignment of items on the cross axis
      <br>One of `start`, `center`
    - |
      {integer} [props.labelWidthRatio] [3] the factor of label's width
      in the container
    - |
      {string|Array.<string>} [props.labelSlotClassName]
      the class name of label slot's container
    - |
      {string|Array.<string>} [props.bodySlotClassName]
      the class name of body slot's container
    - |
      {object} [props.labelSlotAttrs]
      the attributes of label slot's container
    - |
      {object} [props.bodySlotAttrs]
      the attributes of body slot's container
  slots:
    - fieldsetLabelSlot the slot for label of fieldset
    - fieldsetBodySlot the slot for body of fieldset
  examples:
    - |
      // row
      +fieldset({direction: `row`})
        +fieldsetLabelSlot label
        +fieldsetBodySlot
          p body

      // column
      +fieldset({direction: `column`})
        +fieldsetLabelSlot label
        +fieldsetBodySlot
          p body

mixin fieldset(props = {})
  -
    // define types
    const fieldsetProps = {
      direction: PropTypes.oneOf([
        `column`,
        `row`,
      ]).isRequired,
      alignItem: PropTypes.oneOf([
        `start`,
        `center`,
      ]),
      labelWidthRatio: PropTypes.number.custom(({prop, propName, props}) => {
        if (prop <= 0 || prop > 9) {
          throw new Error('rowSize must be an integer between 1 and 9.');
        }
        return true;
      }),
      labelSlotClassName: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.arrayOf(PropTypes.string),
      ]),
      bodySlotClassName: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.arrayOf(PropTypes.string),
      ]),
      labelSlotAttrs: PropTypes.object,
      bodySlotAttrs: PropTypes.object,
    };

    // verifying props
    validateProps(fieldsetProps)(props);

    // merge user-supplied options with the defaults
    const defaultProps = {
      uid: generateUid(),
      direction: `row`,
      alignItem: `start`,
      labelWidthRatio: 3,
    };
    const {
      uid,
      direction,
      alignItem,
      labelWidthRatio,
      labelSlotClassName = "",
      bodySlotClassName = "",
      labelSlotAttrs = {},
      bodySlotAttrs = {},
      ...attrs
    } = {
      ...defaultProps,
      ...props,
    };

    const id = labelSlotAttrs.id || uid;
    const { prefix } = theme;

    // declaring slots
    let fieldsetLabelSlot = null;
    let fieldsetBodySlot = null;
    const labelSlotClass = Array.isArray(labelSlotClassName)
      ? labelSlotClassName : [labelSlotClassName];
    const bodySlotClass = Array.isArray(bodySlotClassName)
      ? bodySlotClassName : [bodySlotClassName];

  mixin fieldsetLabelSlot
    - fieldsetLabelSlot = block;

  mixin fieldsetBodySlot
    - fieldsetBodySlot = block;

  div(
    role= `group`
    aria-labelledby= id
    class= [
      `${prefix}-field`,
      `${prefix}-field--${direction}`,
      { [`${prefix}-field--${alignItem}`]: direction == `row` },
    ]
  )&attributes(attrs)
    block
    div(
      id= id
      class= [
        `${prefix}-field__label`,
        {
          [`${prefix}-field__label--${labelWidthRatio * 10}`]: labelWidthRatio
        },
        ...labelSlotClass,
      ]
    )&attributes(labelSlotAttrs)
      - fieldsetLabelSlot();
    div(
      class= [
        `${prefix}-field__body`,
        ...bodySlotClass,
      ]
    )&attributes(bodySlotAttrs)
      - fieldsetBodySlot();
