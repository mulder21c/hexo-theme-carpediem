include /components/atoms/radios/default

//- @pugdoc
  name: radioSlider
  description: create radio group component
  see: test
  beforeEach: |
    include ../../utils/util
    include ../../atoms/radios/default
  arguments:
    - {object} props
    - {string} props.name attribute of radio
    - |
      {array} props.options the array that consists of options
      for radio component
    - |
      {string} [props.labelPosition] [`bottom`] Where the label is located
      relative to the visual indicator<br>One of `'top'`, `'bottom'`
  slots:
    - |
      radioSliderLabelSlot the slot for label.
      the number of slots must be equal to number of option items
  examples:
    - |
      // basic
      +radioSlider({
        name: `size`,
        labelPosition: `bottom`,
        options: [
          { label: `small`, value: `small`, },
          { label: `medium`, value: `medium`, },
          { label: `large`, value: `large`, },
        ],
      })

      // label with slot
      +radioSlider({
        name: `size2`,
        labelPosition: `bottom`,
        options: [
          { value: `small`, },
          { value: `medium`, },
          { value: `large`, },
        ],
      })
        +radioSliderLabelSlot small
        +radioSliderLabelSlot medium
        +radioSliderLabelSlot large

mixin radioSlider(props = {})
  -
    // define types
    const radioSliderProps = {
      name: PropTypes.string.isRequired,
      options: PropTypes.array.isRequired,
      labelPosition: PropTypes.oneOf([
        `top`,
        `bottom`,
      ]),
    };

    // verifying props
    validateProps(radioSliderProps)(props);

    // merge user-supplied options with the defaults
    const defaultProps = {
      labelPosition: `bottom`,
    };

    const {
      name,
      labelPosition,
      options,
      ...attrs
    } = {
      ...defaultProps,
      ...props,
    };

    const { prefix } = theme;

    // declaring slots
    const radioSliderLabelSlots = [];

  mixin radioSliderLabelSlot
    - radioSliderLabelSlots.push(block);

  div(
    class= [
      `${prefix}-radio-slider`,
    ]
  )&attributes(attrs)
    each option, idx in options
      -
        const radioOption = {
          id: generateUid(),
          name,
          labelPosition,
          ...option,
          class: `${prefix}-radio-slider__item`
        };
      if (idx !== 0)
        span(
          class= `${prefix}-radio-slider__bar`
          aria-hidden= `true`
        )
      +radio(radioOption)
        block
        if (radioSliderLabelSlots[idx])
          - radioSliderLabelSlots[idx]();
