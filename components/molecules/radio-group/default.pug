include /components/atoms/radios/default

//- @pugdoc
  name: radioGroup
  description: create radio group component
  see: test
  beforeEach: |
    include /components/utils/util
    include ../../atoms/radios/default
  arguments:
    - {object} props
    - {string} props.name attribute of radio
    - |
      {array} props.options the array that consists of options
      for radio component without name and labelPosition
    - {number} [props.columns] column counts
    - |
      {string} [props.labelPosition] [`right`] Where the label is located
      relative to the visual indicator<br>
      One of `'top'`, `'left'`, `'right'`, `'bottom'`
  slots:
    - |
      radioGroupLabelSlot the slot for label.
      the number of slots must be equal to number of option items
  examples:
    - |
      // basic
      +radioGroup({
        name: `job`,
        labelPosition: `right`,
        options: [
          { label: `designer`, value: `designer`, },
          { label: `publisher`, value: `publisher`, },
          { label: `frontend developer`, value: `frontend`, },
          { label: `devops`, value: `devops`, },
          { label: `iOS developer`, value: `ios`, },
        ],
      })
      // label with slot
      +radioGroup({
        name: `job2`,
        labelPosition: `right`,
        columns: 3,
        options: [
          { value: `designer`, },
          { value: `publisher`, },
          { value: `frontend`, }
        ],
      })
        +radioGroupLabelSlot 웹 디자이너
        +radioGroupLabelSlot 웹 퍼블리셔
        +radioGroupLabelSlot 프론트엔드 개발자
mixin radioGroup(props = {})
  -
    // verifying props
    const radioGroupProps = {
      name: PropTypes.string.isRequired,
      options: PropTypes.array.isRequired,
      columns: PropTypes.number,
      labelPosition: PropTypes.oneOf([
        `top`,
        `left`,
        `right`,
        `bottom`,
      ]),
    };

    // verifying props
    validateProps(radioGroupProps)(props);

    // merge user-supplied options with the defaults
    const defaultProps = {
      labelPosition: `right`,
    };

    const {
      name,
      options,
      columns,
      labelPosition,
      ...attrs
    } = {
      ...defaultProps,
      ...props,
    };

    const { prefix } = theme;

    // declaring slots
    const radioGroupLabelSlots = [];

  mixin radioGroupLabelSlot
    - radioGroupLabelSlots.push(block);

  div(
    class= [
      `${prefix}-radio-group`,
      { [`${prefix}-radio-group--col-${columns}`]: columns },
    ]
  )&attributes(attrs)
    each option, idx in options
      -
        const radioOption = {
          id: generateUid(),
          name,
          labelPosition,
          class: `${prefix}-radio-group__item`,
          ...option,
        };
      +radio(radioOption)
        block
        if (radioGroupLabelSlots[idx])
          - radioGroupLabelSlots[idx]();
