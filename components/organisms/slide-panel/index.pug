include /components/atoms/svg-icon/index
include /components/atoms/buttons/icon

//- @pugdoc
  name: slidePanel
  description: create a sliding panel
  beforeEach: |
    include ../../utils/util
    include ../../atoms/svg-icon/index
    include ../../atoms/buttons/icon
  arguments:
    - {object} props
    - {string} props.label the label of panel
    - {boolean} [props.useCloseBtn] [true] whether to use the close button
    - |
      {string} [props.closeBtnPosition] [`top-right`]
      the position of close button
    - |
      {string} [props.tag] [`section`]
      the HTML tag name for the element enclosing the panel
  slots:
    - panelBodySlot the slot for body of panel
  examples:
    - |
      +slidePanel({
        label: 'setting',
        useCloseBtn: true,
        closeBtnPosition: `top-right`,
        tag: 'div',
        class: '_side',
        id: 'slide-nav',
      })
        +panelBodySlot
          slide panel

mixin slidePanel(props = {})
  -
    site.components.add(`slide-panel`);

    // define types
    const slidePanelProps = {
      label: PropTypes.string.isRequired,
      useCloseBtn: PropTypes.bool,
      closeBtnPosition: PropTypes.oneOf([
        `top-left`,
        `top-right`,
        `bottom-left`,
        `bottom-right`,
      ]),
      tag: PropTypes.string,
    };

    // verifying props
    validateProps(slidePanelProps)(props);

    // merge user-supplied options with the defaults
    const defaultProps = {
      useCloseBtn: true,
      closeBtnPosition: `top-right`,
      tag: `section`,
    };

    const {
      label,
      useCloseBtn,
      closeBtnPosition,
      tag,
      id,
      class: className,
      ...attrs
    } = {
      ...defaultProps,
      ...props,
    };

    const { prefix } = theme;
    const [closeBtnPosY, closeBtnPosX] = closeBtnPosition.split(`-`);

    // declaring slots
    let panelBodySlot = null;

  mixin panelBodySlot
    - panelBodySlot = block;

  #{tag}.slide-panel(
    id= id
    aria-label= label
    role= `region`
    class= [
      `${prefix}-slide-panel`,
      useCloseBtn && `${prefix}-slide-panel--btn-${closeBtnPosY}`,
      className,
    ]
    hidden
  )&attributes(attrs)
    div(class =[
      `${className}__inner`,
    ])
      block
      - panelBodySlot && panelBodySlot();
    if (useCloseBtn)
      +iconButton({
        type: 'button',
        size: 'medium',
        appearance: 'ghost',
        icon: 'xmark',
        label: `close ${label}`,
        class: [
          `closer`,
          `${prefix}-slide-panel__btn-close`,
          `${prefix}-slide-panel__btn-close--${closeBtnPosY}`,
          `${prefix}-slide-panel__btn-close--${closeBtnPosX}`,
        ],
      })
