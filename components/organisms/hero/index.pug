//- @pugdoc
  name: hero
  description: hero component
  beforeEach: |
    include /components/utils/util
  arguments:
    - {object} props
    - {string} props.imgSrc the source url for hero image
    - {string} [props.bgColor] the background color in hex code
    - |
      {boolean} [props.fullWidth= false]
      whether to use full viewport width image
    - {number} [props.width] the width of hero image
    - {number} [props.height] the height of hero image
  examples:
    - |
      +hero({imgSrc: "hero.jpg"})

mixin hero(props)
  -
    props = props && {
      bgColor: undefined,
      fullWidth: false,
      width: undefined,
      height: undefined,
      ...props,
    };
    const regExpHexCode = /^([a-f0-9]{6}|[a-f0-9]{3})$/i;
    const urlRegExp = /^((https?):)?\/\//i;
    // define types
    const heroProps = {
      imgSrc: PropTypes.string.isRequired,
      bgColor: PropTypes.string.custom(({prop = ""}) => {
        if (prop === ``) return true;
        if (regExpHexCode.test(prop)) return true;
        else return new Error('The bgColor must be hex code.');
      }),
      fullWidth: PropTypes.bool,
      width: PropTypes.number,
      height: PropTypes.number,
    };

    // verifying props
    validateProps(heroProps)(props);

    const {
      imgSrc,
      bgColor,
      fullWidth,
      width,
      height,
      ...attrs
    } = props;

    const { prefix, img_sizes: {hero: responsiveConf} } = theme;
    const layout = page.layout;
    const regExpSource = /(.+)(\.\w+)$/i;
    const usedResponsiveImage = Boolean(responsiveConf?.extensions);
    const { small, large } = responsiveConf;
    const MIME_TYPES = {
      avif: `image/avif`,
      bmp: `image/bmp`,
      gif: `image/gif`,
      ico: `image/vnd.microsoft.icon`,
      jpg: `image/jpeg`,
      jpeg: `image/jpeg`,
      png: `image/png`,
      svg: `image/svg+xml`,
      tif: `image/tiff`,
      tiff: `image/tiff`,
      webp: `image/webp`,
    };

  div(
    class= [
      `${prefix}-hero`,
      {[`${prefix}-hero--${layout}`]: layout},
      {[`${prefix}-hero--with-color`]: Boolean(bgColor)},
      {[`${prefix}-hero--full`]: fullWidth}
    ]
    aria-hidden="true"
    style= bgColor && `background-color:#${bgColor};`
  )&attributes(attrs)
    -
      let assetPath = page.canonical_path && page.canonical_path;
      assetPath = assetPath.split("/").splice(0, 1).join("/");
      const canUsePicture
        = usedResponsiveImage && !urlRegExp.test(imgSrc)
          && imgSrc.includes(assetPath + '/');
    if canUsePicture
      picture(
        role="none"
      )
        each imgType in (responsiveConf && responsiveConf.extensions || [])
          -
            const src = url_for(imgSrc);
          source(
            media= `(max-width: ${large}px)`
            srcset= [
              [
                imgSrc.replace(regExpSource, `$1.large@2.${imgType}`),
                `2x`
              ].join(" "),
              [
                imgSrc.replace(regExpSource, `$1.large@1.${imgType}`),
                `1x`
              ].join(" ")
            ].join(", ")
            type= MIME_TYPES[imgType]
          )
          source(
            media= `(max-width: ${small}px)`
            srcset= [
              [
                imgSrc.replace(regExpSource, `$1.small@2.${imgType}`),
                `2x`
              ].join(" "),
              [
                imgSrc.replace(regExpSource, `$1.small@1.${imgType}`),
                `1x`
              ].join(" ")
            ].join(", ")
            type= MIME_TYPES[imgType]
          )
        img(
          src=imgSrc
          class= `${prefix}-hero__image`
          alt=""
          role="none"
          loading="lazy"
        )
    else
      img(
        src=imgSrc
        alt=""
        class= `${prefix}-hero__image`
        role="none"
      )
