//- @pugdoc
  name: hero
  description: hero component
  beforeEach: |
    include /components/utils/util
  arguments:
    - {object} props
    - {string} props.imgSrc the source url for hero image
    - {string} [props.bgColor] the background color in hex code
    - |
      {boolean} [props.fullWidth= false]
      whether to use full viewport width image
    - {number} [props.width] the width of hero image
    - {number} [props.height] the height of hero image
  examples:
    - |
      +hero({imgSrc: "hero.jpg"})

mixin hero(props)
  -
    props = props && {
      bgColor: undefined,
      fullWidth: false,
      width: undefined,
      height: undefined,
      ...props,
    };
    const regExpHexCode = /^([a-f0-9]{6}|[a-f0-9]{3})$/i;
    // define types
    const heroProps = {
      imgSrc: PropTypes.string.isRequired,
      bgColor: PropTypes.string.custom(({prop = ""}) => {
        if (prop === ``) return true;
        if (regExpHexCode.test(prop)) return true;
        else return new Error('The bgColor must be hex code.');
      }),
      fullWidth: PropTypes.bool,
      width: PropTypes.number,
      height: PropTypes.number,
    };

    // verifying props
    validateProps(heroProps)(props);

    const {
      imgSrc,
      bgColor,
      fullWidth,
      width,
      height,
      ...attrs
    } = props;

    const { prefix } = theme;
    const layout = page.layout;

  div(
    class= [
      `${prefix}-hero`,
      {[`${prefix}-hero--${layout}`]: layout},
      {[`${prefix}-hero--with-color`]: Boolean(bgColor)},
      {[`${prefix}-hero--full`]: fullWidth}
    ]
    aria-hidden="true"
    style= bgColor && `background-color:#${bgColor};`
  )&attributes(attrs)
    img(
      src=imgSrc
      alt=""
      width= width
      height= height
      class= `${prefix}-hero__image`
      role="none"
    )
