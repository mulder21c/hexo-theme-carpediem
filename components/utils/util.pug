- const stripFileName = (url) => url.replace(/([^\\\/]+)$/g, ``);
-
  const getTitle = () => {
    const { title, year, month, tag, category } = page;
    const { title: siteTitle, language } = config;
    let pageTitle = siteTitle;
    if (is_home()) pageTitle = title || siteTitle;
    if (is_post()) pageTitle = title || siteTitle;
    if (is_archive()) pageTitle = year
      ? _p(`title.archives.yearly`, year)
      : _p(`title.archives.default`);
    if (is_category()) pageTitle = category;
    if (is_tag()) pageTitle = _p(`title.tag`, tag, getJosa(tag, 'ì™€'));
    return pageTitle.includes(siteTitle)
      ? pageTitle
      : `${pageTitle} - ${siteTitle}`;
  };
-
  const getJsonLdProps = (page) => {
    // url is from global variable in Hexo
    const $url = url;
    // config is from global variable in Hexo
    const {
      description: $description,
      author: $author,
      profile_url: $profileUrl,
    } = config;
    const {
      title: $title,
      subtitle: $subtitle,
      tags: $tags,
      date: $date,
      updated: $updated,
      posts: $posts,
    } = page;
    const getDataType = type => {
      if (!type) return `Blog`;
      return {
        home: `Blog`,
        post: `BlogPosting`,
        collection: `CollectionPage`,
      }[type];
    };
    const representImg = representativeImage(page);

    const getType = type => ({ "@type": getDataType(type) });
    const getName = () => ({ "@name": getTitle() });
    const getUrl = () => ({ "url": stripFileName($url) });
    const getDescription = () => ({ "description": $description || undefined })
    const getCopyRightHolder = () => (
      {
        "copyrightHolder":
          $author ? { "@type": "Person",  "name": $author } : undefined
      }
    );
    const getImage = () => (
      {
        "image": representImg
          ? {
              "@type": "imageObject",
              "url": fullUrl(representImg.path),
              "width": representImg.width
                ? `${representImg.width}${representImg.wUnits}`
                : undefined,
              "height": representImg.height
                ? `${representImg.height}${representImg.hUnits}`
                : undefined,
            }
          : undefined,
      }
    );
    const getAuthor = () => {
      if (!$author) return undefined;
      return {
        "author": {
          "@type": "Person",
          "name": $author,
          "image": theme.profile.gravatar
              ? {
                  "@type": "imageObject",
                  "url": fullUrl(theme.profile.gravatar),
                }
              : undefined,
          "url": $profileUrl || undefined,
        }
      };
    };
    const getHeadline = () => ({ "headline": $title || undefined});
    const getAltHeadline = () => ({
      "alternativeHeadline": $subtitle || undefined,
    });
    const getKeywords = () => ({
      "keywords": $tags.toArray()
        .map(tag => tag.name)
        .join(', ') || undefined,
    });
    const getDateCreated = () => ({ "dateCreated": $date || undefined });
    const getDateModified = () => ({ "dateModified": $updated || undefined });
    const getPostLD = () => {
      return {
        ...getType(`post`),
        ...getName(),
        ...getUrl(),
        ...getDescription(),
        ...getCopyRightHolder(),
        ...getImage(),
        ...getAuthor(),
        ...getHeadline(),
        ...getAltHeadline(),
        ...getKeywords(),
        ...getDateCreated(),
        ...getDateModified(),
      };
    };
    const getItemList = () => {
      return $posts ? {
        "@type": "CollectionPage",
        "mainEntity": {
          "@type": "ItemList",
          "itemListElement": (
            is_archive()
              ? getArchivePosts(page.year)
              : $posts
            ).map(post => {
              const jsonLdProps = getJsonLdProps(post);
              return jsonLdProps.getPostLD();
            }),
        }
      } : undefined;
    };

    return {
      getType,
      getName,
      getUrl,
      getDescription,
      getCopyRightHolder,
      getImage,
      getAuthor,
      getPostLD,
      getItemList,
    };
  };

-
  const {
    PropTypes,
    checkProps,
    validateProps,
    areValidProps,
  } = site.vanillaPropTypes;
  const propTypesPreset = site.propTypesPreset;
-
  const isDevelopment = site.mode === "development";
