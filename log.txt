INFO  Validating config
INFO  Start processing
INFO  Successfully Component's JavaScript Bundled
INFO  Successfully Vendor's JavaScript Bundled
INFO  Start generating hero image database.
INFO  Generated hero image database.
INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.
<ref *1> _Document {
  title: 'Atomic Design + Storybook 적용 후기',
  thumbnail: '/upload/2021/thumbs/atomic-storybook-vue.jpg',
  hero: null,
  seo: {
    description: 'atomic design을 적용하고 storybook을 토대로 디자인 시스템을 구축해보며 실패 했던\n' +
      '이유와 적용 경험으로 얻은 것들을 풀어보고자 한다.\n',
    image: '/upload/2021/atomic-storybook-vue.jpg'
  },
  style: '.hero {\n' +
    '  &-wrapper {\n' +
    '    text-shadow:\n' +
    '      1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
    '      -1px -1px 1em rgba(20, 12, 24, 0.5);\n' +
    '  }\n' +
    '  &__image {\n' +
    '    opacity: 0.5\n' +
    '  }\n' +
    '}\n',
  date: Moment<2021-03-03T23:42:14+09:00>,
  _content: '\n' +
    '\n' +
    'ㄱ사에서 프로덕트를 만들며 [atomic design](https://atomicdesign.bradfrost.com/chapter-2/)을\n' +
    '적용하고 [storybook](https://storybook.js.org/)을 토대로 디자인 시스템을 구축해보기로\n' +
    '했다. 프로젝트 진행 초기에는 디자이너도 동의하는 부분이었지만 제대로 진행되지 못했고 결국\n' +
    '디자인 시스템을 구축하는 것은 실패로 돌아갔다.\n' +
    '\n' +
    '실패에 대한 이유와 적용 경험으로 얻은 것들을 풀어보고자 한다.\n' +
    '참고로 atomic design이나 storybook이 무엇인지는 글에 포함 시키지 않는다. 내가 글을 쓰는\n' +
    '것보다는 이미 좋은 글들이 많으니까 😁\n' +
    '\n' +
    '## 적용기\n' +
    '\n' +
    '### 실패 경험\n' +
    '\n' +
    '앞서 언급한 것처럼 입사 초 디자이너와 이야기 할 때에는storybook을 통한 디자인 시스템 구축에\n' +
    '대한 합의 점이 있었고, 이를 위해서 그 동안 관심을 가지고 있었던 atomic design을 본격적으로\n' +
    '적용해보기로 했었다.\n' +
    '\n' +
    '언제나 처음이 어렵듯이 처음 적용해 본 atomic design과 storybook은 제법 쉽지 않았다.\n' +
    '사실 당시의 storybook 버전과 Vue가 궁합이 안 맞아도 너무 안 맞았었기 때문에 발생되는 이슈가\n' +
    '많았던 것...\n' +
    '\n' +
    '하지만 이 문제를 미뤄두어도 일단 디자인 시스템 구축과 storybook 도입은 실패로 돌아 갔다.\n' +
    '\n' +
    '#### 일정 상의 문제\n' +
    '\n' +
    '일단은 개발 일정 상의 문제가 가장 크게 작용되었다.\n' +
    '\n' +
    '디자인 시스템을 구축하자면 디자이너와 긴밀하게 이야기가 진행되어야 하는데 도무지 그럴 시간적\n' +
    '여유가 없었다. 그도 그럴 것이 내가 입사한 4월부터 디자인 작업이 시작되었는데, 8월을 오픈\n' +
    '시점으로 둔 상태에서 7월에야 디자인이 나왔고 그마저도 계속 일부분은 완료되지 않고 미확정\n' +
    '상태로 진행되었다.\n' +
    '\n' +
    '디자인이 진행되고 있던 초기에는 Vue와 storybook을 통합하느라 시간을 보내고, API도 완료된\n' +
    '디자인 화면을 기준으로 만들고 있었으니 뒤로 갈 수록 개발 시간이 부족했고, 더구나 최초 예상\n' +
    '범위는 시간이 흐를 수록 점점 덩어리가 커져 가더니 MVP가 아니라 그냥 커다란 덩어리가 되어\n' +
    '버리는 통에 개발에만 시간을 쏟아도 모자를 지경이 되어버렸다. (실제로 일정 상에 문제가\n' +
    '생기기도 했다)\n' +
    '\n' +
    '#### 디자이너의 컴포넌트 단위에 대한 이해 부족\n' +
    '\n' +
    '두 번째 문제는 디자이너의 컴포넌트 단위에 대한 이해가 부족하다는 거였다. (어쩌면\n' +
    '커뮤니케이션의 문제일 수도 있다.)\n' +
    '\n' +
    '벡터 툴을 가지고 포토샵처럼 쓰는 것도 문제였지만, 예를 들어 버튼 컴포넌트의 경우 분명 같은\n' +
    '버튼 컴포넌트인데 동일한 스타일을 가지고 있지 않다. 가장 많게는 border-radius 사이즈가 너무\n' +
    '다양하게 나타났고, 종종 font-size나 font-weight가 차이가 났다.\n' +
    '\n' +
    '물론 디자이너의 눈에 이 페이지에서는 이렇게 보이는 게 이쁘다가 나올 수는 있다고 생각한다.\n' +
    '하지만 만들어야 하는 프로덕트는 아트웍이나 각각 개별 페이지 전자 인쇄물이 아니라, 여러\n' +
    '페이지로 구성되어 있는 하나의 웹사이트, 하나의 웹 어플리케이션이고 특히 컴포넌트 관점의 개발\n' +
    '도구를 사용하는 환경에서 개별 컴포넌트의 베리에이션 기준이 명확하지 않으면 전부 하드코딩해야\n' +
    '한다는 것이 된다.\n' +
    '\n' +
    '또한, 이 프로젝트에서는 디자인 변수를 미리 잡아두고 시작했는데 — 글꼴 크기 세트, 컬러 세트\n' +
    '등, 전달 받은 디자인 상에서 계속 사전 정의된 컬러 이름이 나오다가 갑자기 헥스 코드나 rgb(a)\n' +
    '값이 나타나서 확인해 보면 정의 된 값 이외의 것들이었다.\n' +
    '\n' +
    '문제는 이러한 것들이 적지 않게 튀어 나왔다는 것이고, 이미 color set을 정의해 둔 상태에서\n' +
    '어디에도 끼우기가 너무 어렵고 (그레이 색상을 12단계로 설정해 두었는데 갑자기 그 사이 어딘가의\n' +
    '값이 툭...), 해당 컬러 값이 얼마나 자주 사용 되는 지, 또 다른 어딘가의 사이 값이 추가로\n' +
    '존재하는지 확인 하려면 불필요하게 소비되는 리소스가 너무 많이 들어간다는 거였다.\n' +
    '\n' +
    '이러한 잦은 예상 외의 베리에이션이 나타나면서 하드 코딩이 잦게 발생되고, 결국은 CSS 규격화는\n' +
    '점점 물 건너 가며 template이나 organism 단위에서 CSS를 override하는 지저분한 상황이 연출\n' +
    '되기도 했다. (심하게는 시안 상에는 button 컴포넌트를 가져다 그려 놓았으나 실제는 체크 박스\n' +
    '기능인 것도 있었다.)\n' +
    '\n' +
    '어찌보면 커뮤니케이션이 원활하지 않았기 때문에 이 부분에 대한 협의가 이루어지지 않은 것도\n' +
    '있겠지만, 경험 상 퍼블리셔로서 일할 때부터 늘 디자이너와 겪는 마찰 부분이기도 하다.\n' +
    '\n' +
    '#### Nuxt와 Storybook의 궁합 문제\n' +
    '\n' +
    '세 번째 문제는 nuxt와 (당시의) storybook이 서로 궁합이 안 맞아도 너무 안 맞는다는 거였다.\n' +
    '\n' +
    'storybook에서 왜 오류가 나지?, 왜 안되지? 하고 구글링 해보면 issue로 등록되어 있거나\n' +
    'storybook 문제라는 stackoverflow의 답변들을 쉽게 발견할 수 있었다.\n' +
    '\n' +
    '본래는 온갖 해외 자료들을 뒤져가며 해결했던 그 모든 방법들을 포스팅 해보려고 했었는데, 어느\n' +
    '정도 바쁜 것들이 정리되고 본격적으로 포스팅을 시작해보기 위해 한 단계 한 단계 다시 사례를\n' +
    '만들려고 하니 버전업과 함께 해결되어 버려서 ㅋㅋㅋ (그래서 이슈 해결 보다는\n' +
    'nuxt-storybook으로 통합하는 것과 수동으로 한 땀 한 땀 통합하는 방법을 비교해서 올렸었다.)\n' +
    '\n' +
    '가장 짜증(?) 났던 것 중 하나가 mdx 포맷과 addon과 vue의 통합이 거지 같았... (addon-docs와\n' +
    'controls와 vue와 mdx가 만나면... 하하하...) 지금은 mdx를 이용해 넘나 잘 쓰고 있다.\n' +
    '\n' +
    '그리고 다른 개인 작업에서 storybook과 pug를 통합해보고 있다(읭?)\n' +
    '\n' +
    '### 재 시도\n' +
    '\n' +
    '작년 11월 IAT 세미나를 준비하면서 시연에 필요한 페이지를 Vue로 만들면서 다시 적용해봤다.\n' +
    '\n' +
    '이미 storybook 버전업으로 통합이 잘 되었고, 자잘한 버그 등의 이슈도 있었지만 다행히\n' +
    'github을 통해 issue로 등록할 때마다 nuxt-storybook 커뮤니티에서 빠르게 대응해줘서 금방\n' +
    '처리되었다.\n' +
    '\n' +
    '거기에 이직을 진행하는 과정에서 사전 과제가 나올 때마다 atomic design 방법론을 적용해서\n' +
    '만들면서 계속해서 storybook을 적용해갔고, 덕분에 이전 회사에서 완성하지 못했던 디자인\n' +
    '시스템을 page 단위까지 구축해볼 수 있었다. (뭐 그렇다고 잘 구축했다는 건 아니다. 그냥 해\n' +
    '봤다고...)\n' +
    '\n' +
    '그리고 현재는 hexo 블로그 테마를 새로 제작하면서 storybook + pug를 시도해보고 있다. (응??)\n' +
    '\n' +
    '## 실패를 피하려면,\n' +
    '\n' +
    '실패해보고 개인적으로 끝까지 storybook을 간소하게(?) 만들어보고 나니 드는 생각이, 컴포넌트\n' +
    '관점에서의 디자인 시스템 도입에 실패를 피하려면,\n' +
    '\n' +
    '- 일단 일정이 많이 들어갈 소지가 높다는 것을 염두해 두어야 하고\n' +
    '- 디자이너의 역할이 상당히 필요한 듯 하다,\n' +
    '\n' +
    '  구체적으로 이야기 해보면, 디자이너가 컴포넌트 관점에서의 개발이라는 컨셉을 이해하고 있어야\n' +
    '  하고 베리에이션의 기준을 명확히 할 수 있어야 할 것 같다.\n' +
    '  디자인부터 atom, molecule, organism 등에 대한 이해를 바탕으로 각 컴포넌트가 설계되고\n' +
    '  규격화 되어야 갈아엎고 다시 만들어야 할까 고민하는 상황이 없을 것 같다.\n' +
    '\n' +
    '- 컴포넌트를 어떻게 그룹핑하고 분류할 것인지, 서로 유기적으로 엮여야하는 인터랙션이 있다면\n' +
    '  어떻게 조합해서 이벤트 처리를 어떻게 할 것인지 등을 잘 고려해 두어야, 조립하다가\n' +
    '  재그룹핑하고 재분류하는 일을 줄일 수 있겠더라 (아, 이건 어쩔 수 없는 숙명이려나...)\n' +
    '  사실 이 부분은 지금도 만들어 볼 때마다 반복 중인 것 같기도 하다.\n' +
    '\n' +
    '## 고민 포인트\n' +
    '\n' +
    'atomic design과 storybook을 적용해가면서 몇 가지 고민 되는 포인트가 있었는데,\n' +
    '\n' +
    '첫째는 이걸 atom으로 두어야 하는가 molecule로 두어야 하는가의 고민이었다.\n' +
    '\n' +
    '한 예로 텍스트 필드 컴포넌트를 만드는데 참고한 UI Kit에서는 텍스트 필드에 항상 레이블과\n' +
    '오류 메세지가 함께 존재했고, 이 세 가지 요소 — 레이블, 입력 상자, 오류 메세지를 최소 단위로\n' +
    '보고 atom으로 두는 것이 적절할지, 아니면 아토믹 디자인에서 설명하는 텍스트 그대로 HTML\n' +
    '엘리먼트 단위를 atom으로 보고 컴포넌트는 molecule로 두어야 하는가의 고민이 반복될 수 밖에\n' +
    '없었다. (해당 UI Kit에서는 각 구성 요소가 분리된 더 작은 컴포넌트가 없었기 때문에 그 묶음을\n' +
    '최소 단위로 간주해서 atom으로 두는 걸 최종적으로 선택했다.)\n' +
    '\n' +
    '둘째는 Vue에서 이벤트 핸들링을 할 때는 `emit`을 사용해서 커스텀 이벤트를 상위 컴포넌트로\n' +
    '올려서 처리하는 방식을 권장하고 있는데, 이게 코드를 너무 지저분하게 만드는 듯한 느낌을 지우기\n' +
    '어려웠다. 더불어  Vue devtools에서도 한 번의 액션에 컴포넌트 중첩 수준 만큼에 해당하는\n' +
    '로그가 연달아 발생하니 추적 자체에도 제법 많은 시간을 써야 했다. 내 경우엔\n' +
    '[이벤트 핸들러를 props로 내려주는 방식](https://mulder21c.github.io/2021/01/24/pass-function-as-props-in-vue/)을\n' +
    '선택했는데, 이를 안티 패턴으로 보는 블로그 게시글도 있어서 다소 찜찜한 기분은 남아있다.\n' +
    '\n' +
    '셋째는 Vuex의 사용이었는데, atomic design의 컨셉 상 실제 데이터가 page 단위에서 바인딩\n' +
    '되는 형태를 따르다보니 atom, molecule, organism, template 단위에서는 Vuex 바인딩을\n' +
    '피하는 쪽으로 만들어야해서 적지 않게 props가 발생되는 느낌도 있었고, 때로는 너무 과하게\n' +
    '제한하는 건 아닐까 하는 생각도 들기도 했다. (하지만 내가 깊게 이해하지 못할 경우에는 우선\n' +
    '명세 같은 것을 최대한 존중하자는 주의라... 일단은 page에서만 Vuex에 접근하는 쪽을 유지하고\n' +
    '있다.)\n' +
    '\n' +
    '넷째는 앞서 "실패를 피하려면"에서도 마지막에 언급했던 것이지만, 어떤 컴포넌트를 조합하다 보면\n' +
    '어떻게 그룹핑 하고 어떻게 분류할 것인가가 계속 고민의 연속이 된다.\n' +
    '\n' +
    '예를 들어, modal dialog를 만드는데 dialog 껍데기와 닫기 버튼을 하나의 컴포넌트로 두고,\n' +
    'dialog 콘텐츠를 slot으로 처리해서 다른 컴포넌트가 slot으로 삽입되는 구조로 만들었는데 초점\n' +
    '관리에서 문제가 되어 버렸다. tab sequence가 양쪽 컴포넌트에 걸쳐 있다 보니 focus trap을\n' +
    '만들어야 하는데 이벤트 관리를 어떻게...\n' +
    '이리 저리 컴포넌트를 재그룹핑 해봐도 해결책이 보이지 않아 결국은 modal dialog 쪽에서\n' +
    'tabbable 엘리먼트들을 DOM에서 직접 가져와서 처리하는 방식으로 해결해두기는 했는데 인터랙션에\n' +
    '의한 컴포넌트 간의 상호작용을 고려했을 때 컴포넌트가 이렇게 두는 게 맞는지 계속 고민이다.\n' +
    '\n' +
    '다섯째는 내가 아직 Storybook을 어떻게 활용할 수 있는가에 대한 경험치 부족과 지식\n' +
    '부족이겠지만, docs와 story를 어떻게 구성해야 하는가다...\n' +
    '\n' +
    '현재는 생각 나는 대로 구성해보고 있지만, 썩 마음에 드는 건 아니다.\n' +
    '다른 기업들은 어떻게 생각하고 고민해서 어떤 방향으로 만들고 있는지, 어떻게 했더니 어떤 점이\n' +
    '어려웠었는지 이야기를 심도 있게 들어보고 싶다 ㅠㅠ\n' +
    '\n' +
    '## 어려웠던 점\n' +
    '\n' +
    '일단, 레퍼런스가 생각보다 많지 않았다.\n' +
    '다른 기업의 기술 블로그를 통해서 결과물의 일부분을 살짝 맛을 볼 수는 있는데, 결과물만 보는\n' +
    '것이지 과정을 보는 것이 아니다보니 어떤 목적과 목표를 가지고 어떻게 고민해서 만들어 왔는지의\n' +
    '여정을 보거나, 어떻게 하는 것이 모범 사례인지를 알기가 어렵다.\n' +
    '그냥 계속 남의 것을 염탐(?)하고 과정을 추측해 보는 방법 밖에는 없는걸까? 😥😥\n' +
    '\n' +
    '또, storybook이 기본적으로 react를 사용하고 있어서 그런지 다소 Vue에는 궁합이 부족한 부분이\n' +
    '더러 있고, 이걸 해결할 다른 방법을 찾는 게 쉽지 않다.\n' +
    '일례로 storybook의 소스 코드 뷰어가 react 문법을 기반으로 보여주기 때문에 실제로 보여주고\n' +
    '싶은 Vue 문법이 아니라서 이걸 별도로 보여줄 방법을 찾아야 하는가 혹은 그냥 둘 것인가 등의\n' +
    '고민 포인트가 생기고 해결은 당연히(?) 쉽지 않다. (내가 할 수 있는 건 github 이슈에 질문을\n' +
    '남기는 것 뿐...)\n' +
    '\n' +
    '더구나 주변에 이거 쓰는 사람 찾기가 어렵... 나란 놈은 인맥이 왜 이 모냥인거지...\n' +
    '\n' +
    '## 좋았던 점\n' +
    '\n' +
    '- 우선, atomic design의 컨셉 상 page 단위에 이르러서야 데이터가 바인딩 되기 때문에\n' +
    '  외부로부터 주입받아야 하는 데이터에 의존적이지 않은 컴포넌트 구현이 이루어지고 따라서\n' +
    '  재사용성이 매우 높아졌다.\n' +
    '  물론 반대로 이야기 하면, 그만큼 확장성과 추상성에 대한 고민을 해야 하고 생각 이상으로(?)\n' +
    '  수 많은 props가 탄생하기도... 쿨럭...\n' +
    '\n' +
    '- storybook이 있으니 컴포넌트에 어떤 props가 필수였는지 값에 대한 제한 사항은 무엇인지\n' +
    '  코드 레벨에서 확인하지 않아도 되니 편하더라.\n' +
    '  단지 한 쪽 브라우저에 storybook을 띄워 놓기만 하면 찾는 건 금방이니 코드를 보고 인식하는\n' +
    '  것보다 더 직관적이고 빠르다. (아, 물론 문서를 잘 작성했을 때의 이야기...)\n' +
    '\n' +
    '  그러고 보니, storybook이 jsdoc를 통한 유추가 좀 더 잘 되었으면 싶다. 내가 아직 몰라서\n' +
    '  그런 것일 수도 있지만, storybook + vue에서 props에 대한 문서화가 jsdoc으로는 이루어지지\n' +
    '  않는 것 같다. 이것만 잘 되어도 문서화가 코드 레벨에서 많이 정리 될 수 있을 거 같은데...\n' +
    '  (아, 오히려 컴포넌트 코드가 더 지저분해 보일 수도 있으니 별도 문서로 빼는 게 나을 수도\n' +
    '  있겠다는 생각도 들기도 한다.)\n' +
    '\n' +
    '- 내가 가진 기술 부채 중 한 가지가 TDD다. 그래서 컴포넌트에 대한 테스트가 다소 우려 사항\n' +
    '  중의 하나인데, storybook이 그 우려를 조금이나마 완화시켜 주고 있다.\n' +
    '\n' +
    '  storybook이 없을 때에는 한 개 컴포넌트만 렌더링 시켜서 확인하기에는 다소 불편해서 페이지\n' +
    '  단위에서 확인했었는데, storybook 이후로는 개별 컴포넌트 별로 바로 확인이 가능하니 적어도\n' +
    '  props나 event 처리에 대한 오류를 빨리 줄일 수 있었다.\n' +
    '\n' +
    '- storybook에는 다양한 addon들이 존재하는데 viewport(responsive), a11y, dark mode,\n' +
    '  zeplin&middot;figma viewer embedding 등과 같은 것들은 꽤나 도움이 될 만한 것들이라고\n' +
    '  생각된다.\n' +
    '  접근성에 지대한(?) 관심을 가지고 있는 나로서는 addon-a11y는 컴포넌트 단위부터 접근성에\n' +
    '  대한 정량 평가를 직관적으로 확인 할 수 있어 좋다고 생각한다.\n',
  source: '_posts/2021-03-03-comment-for-using-atomic-design-and-storybook.md',
  raw: '---\n' +
    'title: Atomic Design + Storybook 적용 후기\n' +
    'tags:\n' +
    '  - Atomic Design\n' +
    '  - Storybook\n' +
    '  - Design System\n' +
    'categories:\n' +
    '  - 개발노트\n' +
    '  - Front-End\n' +
    'thumbnail: /upload/2021/thumbs/atomic-storybook-vue.jpg\n' +
    'hero:\n' +
    'seo:\n' +
    '  description: |\n' +
    '    atomic design을 적용하고 storybook을 토대로 디자인 시스템을 구축해보며 실패 했던\n' +
    '    이유와 적용 경험으로 얻은 것들을 풀어보고자 한다.\n' +
    '  image: /upload/2021/atomic-storybook-vue.jpg\n' +
    'style: |\n' +
    '  .hero {\n' +
    '    &-wrapper {\n' +
    '      text-shadow:\n' +
    '        1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
    '        -1px -1px 1em rgba(20, 12, 24, 0.5);\n' +
    '    }\n' +
    '    &__image {\n' +
    '      opacity: 0.5\n' +
    '    }\n' +
    '  }\n' +
    'date: 2021-03-03 23:42:14\n' +
    '---\n' +
    '\n' +
    '\n' +
    'ㄱ사에서 프로덕트를 만들며 [atomic design](https://atomicdesign.bradfrost.com/chapter-2/)을\n' +
    '적용하고 [storybook](https://storybook.js.org/)을 토대로 디자인 시스템을 구축해보기로\n' +
    '했다. 프로젝트 진행 초기에는 디자이너도 동의하는 부분이었지만 제대로 진행되지 못했고 결국\n' +
    '디자인 시스템을 구축하는 것은 실패로 돌아갔다.\n' +
    '\n' +
    '실패에 대한 이유와 적용 경험으로 얻은 것들을 풀어보고자 한다.\n' +
    '참고로 atomic design이나 storybook이 무엇인지는 글에 포함 시키지 않는다. 내가 글을 쓰는\n' +
    '것보다는 이미 좋은 글들이 많으니까 😁\n' +
    '\n' +
    '## 적용기\n' +
    '\n' +
    '### 실패 경험\n' +
    '\n' +
    '앞서 언급한 것처럼 입사 초 디자이너와 이야기 할 때에는storybook을 통한 디자인 시스템 구축에\n' +
    '대한 합의 점이 있었고, 이를 위해서 그 동안 관심을 가지고 있었던 atomic design을 본격적으로\n' +
    '적용해보기로 했었다.\n' +
    '\n' +
    '언제나 처음이 어렵듯이 처음 적용해 본 atomic design과 storybook은 제법 쉽지 않았다.\n' +
    '사실 당시의 storybook 버전과 Vue가 궁합이 안 맞아도 너무 안 맞았었기 때문에 발생되는 이슈가\n' +
    '많았던 것...\n' +
    '\n' +
    '하지만 이 문제를 미뤄두어도 일단 디자인 시스템 구축과 storybook 도입은 실패로 돌아 갔다.\n' +
    '\n' +
    '#### 일정 상의 문제\n' +
    '\n' +
    '일단은 개발 일정 상의 문제가 가장 크게 작용되었다.\n' +
    '\n' +
    '디자인 시스템을 구축하자면 디자이너와 긴밀하게 이야기가 진행되어야 하는데 도무지 그럴 시간적\n' +
    '여유가 없었다. 그도 그럴 것이 내가 입사한 4월부터 디자인 작업이 시작되었는데, 8월을 오픈\n' +
    '시점으로 둔 상태에서 7월에야 디자인이 나왔고 그마저도 계속 일부분은 완료되지 않고 미확정\n' +
    '상태로 진행되었다.\n' +
    '\n' +
    '디자인이 진행되고 있던 초기에는 Vue와 storybook을 통합하느라 시간을 보내고, API도 완료된\n' +
    '디자인 화면을 기준으로 만들고 있었으니 뒤로 갈 수록 개발 시간이 부족했고, 더구나 최초 예상\n' +
    '범위는 시간이 흐를 수록 점점 덩어리가 커져 가더니 MVP가 아니라 그냥 커다란 덩어리가 되어\n' +
    '버리는 통에 개발에만 시간을 쏟아도 모자를 지경이 되어버렸다. (실제로 일정 상에 문제가\n' +
    '생기기도 했다)\n' +
    '\n' +
    '#### 디자이너의 컴포넌트 단위에 대한 이해 부족\n' +
    '\n' +
    '두 번째 문제는 디자이너의 컴포넌트 단위에 대한 이해가 부족하다는 거였다. (어쩌면\n' +
    '커뮤니케이션의 문제일 수도 있다.)\n' +
    '\n' +
    '벡터 툴을 가지고 포토샵처럼 쓰는 것도 문제였지만, 예를 들어 버튼 컴포넌트의 경우 분명 같은\n' +
    '버튼 컴포넌트인데 동일한 스타일을 가지고 있지 않다. 가장 많게는 border-radius 사이즈가 너무\n' +
    '다양하게 나타났고, 종종 font-size나 font-weight가 차이가 났다.\n' +
    '\n' +
    '물론 디자이너의 눈에 이 페이지에서는 이렇게 보이는 게 이쁘다가 나올 수는 있다고 생각한다.\n' +
    '하지만 만들어야 하는 프로덕트는 아트웍이나 각각 개별 페이지 전자 인쇄물이 아니라, 여러\n' +
    '페이지로 구성되어 있는 하나의 웹사이트, 하나의 웹 어플리케이션이고 특히 컴포넌트 관점의 개발\n' +
    '도구를 사용하는 환경에서 개별 컴포넌트의 베리에이션 기준이 명확하지 않으면 전부 하드코딩해야\n' +
    '한다는 것이 된다.\n' +
    '\n' +
    '또한, 이 프로젝트에서는 디자인 변수를 미리 잡아두고 시작했는데 — 글꼴 크기 세트, 컬러 세트\n' +
    '등, 전달 받은 디자인 상에서 계속 사전 정의된 컬러 이름이 나오다가 갑자기 헥스 코드나 rgb(a)\n' +
    '값이 나타나서 확인해 보면 정의 된 값 이외의 것들이었다.\n' +
    '\n' +
    '문제는 이러한 것들이 적지 않게 튀어 나왔다는 것이고, 이미 color set을 정의해 둔 상태에서\n' +
    '어디에도 끼우기가 너무 어렵고 (그레이 색상을 12단계로 설정해 두었는데 갑자기 그 사이 어딘가의\n' +
    '값이 툭...), 해당 컬러 값이 얼마나 자주 사용 되는 지, 또 다른 어딘가의 사이 값이 추가로\n' +
    '존재하는지 확인 하려면 불필요하게 소비되는 리소스가 너무 많이 들어간다는 거였다.\n' +
    '\n' +
    '이러한 잦은 예상 외의 베리에이션이 나타나면서 하드 코딩이 잦게 발생되고, 결국은 CSS 규격화는\n' +
    '점점 물 건너 가며 template이나 organism 단위에서 CSS를 override하는 지저분한 상황이 연출\n' +
    '되기도 했다. (심하게는 시안 상에는 button 컴포넌트를 가져다 그려 놓았으나 실제는 체크 박스\n' +
    '기능인 것도 있었다.)\n' +
    '\n' +
    '어찌보면 커뮤니케이션이 원활하지 않았기 때문에 이 부분에 대한 협의가 이루어지지 않은 것도\n' +
    '있겠지만, 경험 상 퍼블리셔로서 일할 때부터 늘 디자이너와 겪는 마찰 부분이기도 하다.\n' +
    '\n' +
    '#### Nuxt와 Storybook의 궁합 문제\n' +
    '\n' +
    '세 번째 문제는 nuxt와 (당시의) storybook이 서로 궁합이 안 맞아도 너무 안 맞는다는 거였다.\n' +
    '\n' +
    'storybook에서 왜 오류가 나지?, 왜 안되지? 하고 구글링 해보면 issue로 등록되어 있거나\n' +
    'storybook 문제라는 stackoverflow의 답변들을 쉽게 발견할 수 있었다.\n' +
    '\n' +
    '본래는 온갖 해외 자료들을 뒤져가며 해결했던 그 모든 방법들을 포스팅 해보려고 했었는데, 어느\n' +
    '정도 바쁜 것들이 정리되고 본격적으로 포스팅을 시작해보기 위해 한 단계 한 단계 다시 사례를\n' +
    '만들려고 하니 버전업과 함께 해결되어 버려서 ㅋㅋㅋ (그래서 이슈 해결 보다는\n' +
    'nuxt-storybook으로 통합하는 것과 수동으로 한 땀 한 땀 통합하는 방법을 비교해서 올렸었다.)\n' +
    '\n' +
    '가장 짜증(?) 났던 것 중 하나가 mdx 포맷과 addon과 vue의 통합이 거지 같았... (addon-docs와\n' +
    'controls와 vue와 mdx가 만나면... 하하하...) 지금은 mdx를 이용해 넘나 잘 쓰고 있다.\n' +
    '\n' +
    '그리고 다른 개인 작업에서 storybook과 pug를 통합해보고 있다(읭?)\n' +
    '\n' +
    '### 재 시도\n' +
    '\n' +
    '작년 11월 IAT 세미나를 준비하면서 시연에 필요한 페이지를 Vue로 만들면서 다시 적용해봤다.\n' +
    '\n' +
    '이미 storybook 버전업으로 통합이 잘 되었고, 자잘한 버그 등의 이슈도 있었지만 다행히\n' +
    'github을 통해 issue로 등록할 때마다 nuxt-storybook 커뮤니티에서 빠르게 대응해줘서 금방\n' +
    '처리되었다.\n' +
    '\n' +
    '거기에 이직을 진행하는 과정에서 사전 과제가 나올 때마다 atomic design 방법론을 적용해서\n' +
    '만들면서 계속해서 storybook을 적용해갔고, 덕분에 이전 회사에서 완성하지 못했던 디자인\n' +
    '시스템을 page 단위까지 구축해볼 수 있었다. (뭐 그렇다고 잘 구축했다는 건 아니다. 그냥 해\n' +
    '봤다고...)\n' +
    '\n' +
    '그리고 현재는 hexo 블로그 테마를 새로 제작하면서 storybook + pug를 시도해보고 있다. (응??)\n' +
    '\n' +
    '## 실패를 피하려면,\n' +
    '\n' +
    '실패해보고 개인적으로 끝까지 storybook을 간소하게(?) 만들어보고 나니 드는 생각이, 컴포넌트\n' +
    '관점에서의 디자인 시스템 도입에 실패를 피하려면,\n' +
    '\n' +
    '- 일단 일정이 많이 들어갈 소지가 높다는 것을 염두해 두어야 하고\n' +
    '- 디자이너의 역할이 상당히 필요한 듯 하다,\n' +
    '\n' +
    '  구체적으로 이야기 해보면, 디자이너가 컴포넌트 관점에서의 개발이라는 컨셉을 이해하고 있어야\n' +
    '  하고 베리에이션의 기준을 명확히 할 수 있어야 할 것 같다.\n' +
    '  디자인부터 atom, molecule, organism 등에 대한 이해를 바탕으로 각 컴포넌트가 설계되고\n' +
    '  규격화 되어야 갈아엎고 다시 만들어야 할까 고민하는 상황이 없을 것 같다.\n' +
    '\n' +
    '- 컴포넌트를 어떻게 그룹핑하고 분류할 것인지, 서로 유기적으로 엮여야하는 인터랙션이 있다면\n' +
    '  어떻게 조합해서 이벤트 처리를 어떻게 할 것인지 등을 잘 고려해 두어야, 조립하다가\n' +
    '  재그룹핑하고 재분류하는 일을 줄일 수 있겠더라 (아, 이건 어쩔 수 없는 숙명이려나...)\n' +
    '  사실 이 부분은 지금도 만들어 볼 때마다 반복 중인 것 같기도 하다.\n' +
    '\n' +
    '## 고민 포인트\n' +
    '\n' +
    'atomic design과 storybook을 적용해가면서 몇 가지 고민 되는 포인트가 있었는데,\n' +
    '\n' +
    '첫째는 이걸 atom으로 두어야 하는가 molecule로 두어야 하는가의 고민이었다.\n' +
    '\n' +
    '한 예로 텍스트 필드 컴포넌트를 만드는데 참고한 UI Kit에서는 텍스트 필드에 항상 레이블과\n' +
    '오류 메세지가 함께 존재했고, 이 세 가지 요소 — 레이블, 입력 상자, 오류 메세지를 최소 단위로\n' +
    '보고 atom으로 두는 것이 적절할지, 아니면 아토믹 디자인에서 설명하는 텍스트 그대로 HTML\n' +
    '엘리먼트 단위를 atom으로 보고 컴포넌트는 molecule로 두어야 하는가의 고민이 반복될 수 밖에\n' +
    '없었다. (해당 UI Kit에서는 각 구성 요소가 분리된 더 작은 컴포넌트가 없었기 때문에 그 묶음을\n' +
    '최소 단위로 간주해서 atom으로 두는 걸 최종적으로 선택했다.)\n' +
    '\n' +
    '둘째는 Vue에서 이벤트 핸들링을 할 때는 `emit`을 사용해서 커스텀 이벤트를 상위 컴포넌트로\n' +
    '올려서 처리하는 방식을 권장하고 있는데, 이게 코드를 너무 지저분하게 만드는 듯한 느낌을 지우기\n' +
    '어려웠다. 더불어  Vue devtools에서도 한 번의 액션에 컴포넌트 중첩 수준 만큼에 해당하는\n' +
    '로그가 연달아 발생하니 추적 자체에도 제법 많은 시간을 써야 했다. 내 경우엔\n' +
    '[이벤트 핸들러를 props로 내려주는 방식](https://mulder21c.github.io/2021/01/24/pass-function-as-props-in-vue/)을\n' +
    '선택했는데, 이를 안티 패턴으로 보는 블로그 게시글도 있어서 다소 찜찜한 기분은 남아있다.\n' +
    '\n' +
    '셋째는 Vuex의 사용이었는데, atomic design의 컨셉 상 실제 데이터가 page 단위에서 바인딩\n' +
    '되는 형태를 따르다보니 atom, molecule, organism, template 단위에서는 Vuex 바인딩을\n' +
    '피하는 쪽으로 만들어야해서 적지 않게 props가 발생되는 느낌도 있었고, 때로는 너무 과하게\n' +
    '제한하는 건 아닐까 하는 생각도 들기도 했다. (하지만 내가 깊게 이해하지 못할 경우에는 우선\n' +
    '명세 같은 것을 최대한 존중하자는 주의라... 일단은 page에서만 Vuex에 접근하는 쪽을 유지하고\n' +
    '있다.)\n' +
    '\n' +
    '넷째는 앞서 "실패를 피하려면"에서도 마지막에 언급했던 것이지만, 어떤 컴포넌트를 조합하다 보면\n' +
    '어떻게 그룹핑 하고 어떻게 분류할 것인가가 계속 고민의 연속이 된다.\n' +
    '\n' +
    '예를 들어, modal dialog를 만드는데 dialog 껍데기와 닫기 버튼을 하나의 컴포넌트로 두고,\n' +
    'dialog 콘텐츠를 slot으로 처리해서 다른 컴포넌트가 slot으로 삽입되는 구조로 만들었는데 초점\n' +
    '관리에서 문제가 되어 버렸다. tab sequence가 양쪽 컴포넌트에 걸쳐 있다 보니 focus trap을\n' +
    '만들어야 하는데 이벤트 관리를 어떻게...\n' +
    '이리 저리 컴포넌트를 재그룹핑 해봐도 해결책이 보이지 않아 결국은 modal dialog 쪽에서\n' +
    'tabbable 엘리먼트들을 DOM에서 직접 가져와서 처리하는 방식으로 해결해두기는 했는데 인터랙션에\n' +
    '의한 컴포넌트 간의 상호작용을 고려했을 때 컴포넌트가 이렇게 두는 게 맞는지 계속 고민이다.\n' +
    '\n' +
    '다섯째는 내가 아직 Storybook을 어떻게 활용할 수 있는가에 대한 경험치 부족과 지식\n' +
    '부족이겠지만, docs와 story를 어떻게 구성해야 하는가다...\n' +
    '\n' +
    '현재는 생각 나는 대로 구성해보고 있지만, 썩 마음에 드는 건 아니다.\n' +
    '다른 기업들은 어떻게 생각하고 고민해서 어떤 방향으로 만들고 있는지, 어떻게 했더니 어떤 점이\n' +
    '어려웠었는지 이야기를 심도 있게 들어보고 싶다 ㅠㅠ\n' +
    '\n' +
    '## 어려웠던 점\n' +
    '\n' +
    '일단, 레퍼런스가 생각보다 많지 않았다.\n' +
    '다른 기업의 기술 블로그를 통해서 결과물의 일부분을 살짝 맛을 볼 수는 있는데, 결과물만 보는\n' +
    '것이지 과정을 보는 것이 아니다보니 어떤 목적과 목표를 가지고 어떻게 고민해서 만들어 왔는지의\n' +
    '여정을 보거나, 어떻게 하는 것이 모범 사례인지를 알기가 어렵다.\n' +
    '그냥 계속 남의 것을 염탐(?)하고 과정을 추측해 보는 방법 밖에는 없는걸까? 😥😥\n' +
    '\n' +
    '또, storybook이 기본적으로 react를 사용하고 있어서 그런지 다소 Vue에는 궁합이 부족한 부분이\n' +
    '더러 있고, 이걸 해결할 다른 방법을 찾는 게 쉽지 않다.\n' +
    '일례로 storybook의 소스 코드 뷰어가 react 문법을 기반으로 보여주기 때문에 실제로 보여주고\n' +
    '싶은 Vue 문법이 아니라서 이걸 별도로 보여줄 방법을 찾아야 하는가 혹은 그냥 둘 것인가 등의\n' +
    '고민 포인트가 생기고 해결은 당연히(?) 쉽지 않다. (내가 할 수 있는 건 github 이슈에 질문을\n' +
    '남기는 것 뿐...)\n' +
    '\n' +
    '더구나 주변에 이거 쓰는 사람 찾기가 어렵... 나란 놈은 인맥이 왜 이 모냥인거지...\n' +
    '\n' +
    '## 좋았던 점\n' +
    '\n' +
    '- 우선, atomic design의 컨셉 상 page 단위에 이르러서야 데이터가 바인딩 되기 때문에\n' +
    '  외부로부터 주입받아야 하는 데이터에 의존적이지 않은 컴포넌트 구현이 이루어지고 따라서\n' +
    '  재사용성이 매우 높아졌다.\n' +
    '  물론 반대로 이야기 하면, 그만큼 확장성과 추상성에 대한 고민을 해야 하고 생각 이상으로(?)\n' +
    '  수 많은 props가 탄생하기도... 쿨럭...\n' +
    '\n' +
    '- storybook이 있으니 컴포넌트에 어떤 props가 필수였는지 값에 대한 제한 사항은 무엇인지\n' +
    '  코드 레벨에서 확인하지 않아도 되니 편하더라.\n' +
    '  단지 한 쪽 브라우저에 storybook을 띄워 놓기만 하면 찾는 건 금방이니 코드를 보고 인식하는\n' +
    '  것보다 더 직관적이고 빠르다. (아, 물론 문서를 잘 작성했을 때의 이야기...)\n' +
    '\n' +
    '  그러고 보니, storybook이 jsdoc를 통한 유추가 좀 더 잘 되었으면 싶다. 내가 아직 몰라서\n' +
    '  그런 것일 수도 있지만, storybook + vue에서 props에 대한 문서화가 jsdoc으로는 이루어지지\n' +
    '  않는 것 같다. 이것만 잘 되어도 문서화가 코드 레벨에서 많이 정리 될 수 있을 거 같은데...\n' +
    '  (아, 오히려 컴포넌트 코드가 더 지저분해 보일 수도 있으니 별도 문서로 빼는 게 나을 수도\n' +
    '  있겠다는 생각도 들기도 한다.)\n' +
    '\n' +
    '- 내가 가진 기술 부채 중 한 가지가 TDD다. 그래서 컴포넌트에 대한 테스트가 다소 우려 사항\n' +
    '  중의 하나인데, storybook이 그 우려를 조금이나마 완화시켜 주고 있다.\n' +
    '\n' +
    '  storybook이 없을 때에는 한 개 컴포넌트만 렌더링 시켜서 확인하기에는 다소 불편해서 페이지\n' +
    '  단위에서 확인했었는데, storybook 이후로는 개별 컴포넌트 별로 바로 확인이 가능하니 적어도\n' +
    '  props나 event 처리에 대한 오류를 빨리 줄일 수 있었다.\n' +
    '\n' +
    '- storybook에는 다양한 addon들이 존재하는데 viewport(responsive), a11y, dark mode,\n' +
    '  zeplin&middot;figma viewer embedding 등과 같은 것들은 꽤나 도움이 될 만한 것들이라고\n' +
    '  생각된다.\n' +
    '  접근성에 지대한(?) 관심을 가지고 있는 나로서는 addon-a11y는 컴포넌트 단위부터 접근성에\n' +
    '  대한 정량 평가를 직관적으로 확인 할 수 있어 좋다고 생각한다.\n',
  slug: 'comment-for-using-atomic-design-and-storybook',
  published: true,
  comments: true,
  layout: 'post',
  photos: [],
  link: '',
  _id: 'clcytfa4s00ahtaww4hn4g74d',
  content: '<p>ㄱ사에서 프로덕트를 만들며 <a href="https://atomicdesign.bradfrost.com/chapter-2/">atomic design</a>을\n' +
    '적용하고 <a href="https://storybook.js.org/">storybook</a>을 토대로 디자인 시스템을 구축해보기로\n' +
    '했다. 프로젝트 진행 초기에는 디자이너도 동의하는 부분이었지만 제대로 진행되지 못했고 결국\n' +
    '디자인 시스템을 구축하는 것은 실패로 돌아갔다.</p>\n' +
    '<p>실패에 대한 이유와 적용 경험으로 얻은 것들을 풀어보고자 한다.\n' +
    '참고로 atomic design이나 storybook이 무엇인지는 글에 포함 시키지 않는다. 내가 글을 쓰는\n' +
    '것보다는 이미 좋은 글들이 많으니까 😁</p>\n' +
    '<h2 id="적용기"><a href="#적용기" class="headerlink" title="적용기"></a>적용기</h2><h3 id="실패-경험"><a href="#실패-경험" class="headerlink" title="실패 경험"></a>실패 경험</h3><p>앞서 언급한 것처럼 입사 초 디자이너와 이야기 할 때에는storybook을 통한 디자인 시스템 구축에\n' +
    '대한 합의 점이 있었고, 이를 위해서 그 동안 관심을 가지고 있었던 atomic design을 본격적으로\n' +
    '적용해보기로 했었다.</p>\n' +
    '<p>언제나 처음이 어렵듯이 처음 적용해 본 atomic design과 storybook은 제법 쉽지 않았다.\n' +
    '사실 당시의 storybook 버전과 Vue가 궁합이 안 맞아도 너무 안 맞았었기 때문에 발생되는 이슈가\n' +
    '많았던 것...</p>\n' +
    '<p>하지만 이 문제를 미뤄두어도 일단 디자인 시스템 구축과 storybook 도입은 실패로 돌아 갔다.</p>\n' +
    '<h4 id="일정-상의-문제"><a href="#일정-상의-문제" class="headerlink" title="일정 상의 문제"></a>일정 상의 문제</h4><p>일단은 개발 일정 상의 문제가 가장 크게 작용되었다.</p>\n' +
    '<p>디자인 시스템을 구축하자면 디자이너와 긴밀하게 이야기가 진행되어야 하는데 도무지 그럴 시간적\n' +
    '여유가 없었다. 그도 그럴 것이 내가 입사한 4월부터 디자인 작업이 시작되었는데, 8월을 오픈\n' +
    '시점으로 둔 상태에서 7월에야 디자인이 나왔고 그마저도 계속 일부분은 완료되지 않고 미확정\n' +
    '상태로 진행되었다.</p>\n' +
    '<p>디자인이 진행되고 있던 초기에는 Vue와 storybook을 통합하느라 시간을 보내고, API도 완료된\n' +
    '디자인 화면을 기준으로 만들고 있었으니 뒤로 갈 수록 개발 시간이 부족했고, 더구나 최초 예상\n' +
    '범위는 시간이 흐를 수록 점점 덩어리가 커져 가더니 MVP가 아니라 그냥 커다란 덩어리가 되어\n' +
    '버리는 통에 개발에만 시간을 쏟아도 모자를 지경이 되어버렸다. (실제로 일정 상에 문제가\n' +
    '생기기도 했다)</p>\n' +
    '<h4 id="디자이너의-컴포넌트-단위에-대한-이해-부족"><a href="#디자이너의-컴포넌트-단위에-대한-이해-부족" class="headerlink" title="디자이너의 컴포넌트 단위에 대한 이해 부족"></a>디자이너의 컴포넌트 단위에 대한 이해 부족</h4><p>두 번째 문제는 디자이너의 컴포넌트 단위에 대한 이해가 부족하다는 거였다. (어쩌면\n' +
    '커뮤니케이션의 문제일 수도 있다.)</p>\n' +
    '<p>벡터 툴을 가지고 포토샵처럼 쓰는 것도 문제였지만, 예를 들어 버튼 컴포넌트의 경우 분명 같은\n' +
    '버튼 컴포넌트인데 동일한 스타일을 가지고 있지 않다. 가장 많게는 border-radius 사이즈가 너무\n' +
    '다양하게 나타났고, 종종 font-size나 font-weight가 차이가 났다.</p>\n' +
    '<p>물론 디자이너의 눈에 이 페이지에서는 이렇게 보이는 게 이쁘다가 나올 수는 있다고 생각한다.\n' +
    '하지만 만들어야 하는 프로덕트는 아트웍이나 각각 개별 페이지 전자 인쇄물이 아니라, 여러\n' +
    '페이지로 구성되어 있는 하나의 웹사이트, 하나의 웹 어플리케이션이고 특히 컴포넌트 관점의 개발\n' +
    '도구를 사용하는 환경에서 개별 컴포넌트의 베리에이션 기준이 명확하지 않으면 전부 하드코딩해야\n' +
    '한다는 것이 된다.</p>\n' +
    '<p>또한, 이 프로젝트에서는 디자인 변수를 미리 잡아두고 시작했는데 — 글꼴 크기 세트, 컬러 세트\n' +
    '등, 전달 받은 디자인 상에서 계속 사전 정의된 컬러 이름이 나오다가 갑자기 헥스 코드나 rgb(a)\n' +
    '값이 나타나서 확인해 보면 정의 된 값 이외의 것들이었다.</p>\n' +
    '<p>문제는 이러한 것들이 적지 않게 튀어 나왔다는 것이고, 이미 color set을 정의해 둔 상태에서\n' +
    '어디에도 끼우기가 너무 어렵고 (그레이 색상을 12단계로 설정해 두었는데 갑자기 그 사이 어딘가의\n' +
    '값이 툭...), 해당 컬러 값이 얼마나 자주 사용 되는 지, 또 다른 어딘가의 사이 값이 추가로\n' +
    '존재하는지 확인 하려면 불필요하게 소비되는 리소스가 너무 많이 들어간다는 거였다.</p>\n' +
    '<p>이러한 잦은 예상 외의 베리에이션이 나타나면서 하드 코딩이 잦게 발생되고, 결국은 CSS 규격화는\n' +
    '점점 물 건너 가며 template이나 organism 단위에서 CSS를 override하는 지저분한 상황이 연출\n' +
    '되기도 했다. (심하게는 시안 상에는 button 컴포넌트를 가져다 그려 놓았으나 실제는 체크 박스\n' +
    '기능인 것도 있었다.)</p>\n' +
    '<p>어찌보면 커뮤니케이션이 원활하지 않았기 때문에 이 부분에 대한 협의가 이루어지지 않은 것도\n' +
    '있겠지만, 경험 상 퍼블리셔로서 일할 때부터 늘 디자이너와 겪는 마찰 부분이기도 하다.</p>\n' +
    '<h4 id="Nuxt와-Storybook의-궁합-문제"><a href="#Nuxt와-Storybook의-궁합-문제" class="headerlink" title="Nuxt와 Storybook의 궁합 문제"></a>Nuxt와 Storybook의 궁합 문제</h4><p>세 번째 문제는 nuxt와 (당시의) storybook이 서로 궁합이 안 맞아도 너무 안 맞는다는 거였다.</p>\n' +
    '<p>storybook에서 왜 오류가 나지?, 왜 안되지? 하고 구글링 해보면 issue로 등록되어 있거나\n' +
    'storybook 문제라는 stackoverflow의 답변들을 쉽게 발견할 수 있었다.</p>\n' +
    '<p>본래는 온갖 해외 자료들을 뒤져가며 해결했던 그 모든 방법들을 포스팅 해보려고 했었는데, 어느\n' +
    '정도 바쁜 것들이 정리되고 본격적으로 포스팅을 시작해보기 위해 한 단계 한 단계 다시 사례를\n' +
    '만들려고 하니 버전업과 함께 해결되어 버려서 ㅋㅋㅋ (그래서 이슈 해결 보다는\n' +
    'nuxt-storybook으로 통합하는 것과 수동으로 한 땀 한 땀 통합하는 방법을 비교해서 올렸었다.)</p>\n' +
    '<p>가장 짜증(?) 났던 것 중 하나가 mdx 포맷과 addon과 vue의 통합이 거지 같았... (addon-docs와\n' +
    'controls와 vue와 mdx가 만나면... 하하하...) 지금은 mdx를 이용해 넘나 잘 쓰고 있다.</p>\n' +
    '<p>그리고 다른 개인 작업에서 storybook과 pug를 통합해보고 있다(읭?)</p>\n' +
    '<h3 id="재-시도"><a href="#재-시도" class="headerlink" title="재 시도"></a>재 시도</h3><p>작년 11월 IAT 세미나를 준비하면서 시연에 필요한 페이지를 Vue로 만들면서 다시 적용해봤다.</p>\n' +
    '<p>이미 storybook 버전업으로 통합이 잘 되었고, 자잘한 버그 등의 이슈도 있었지만 다행히\n' +
    'github을 통해 issue로 등록할 때마다 nuxt-storybook 커뮤니티에서 빠르게 대응해줘서 금방\n' +
    '처리되었다.</p>\n' +
    '<p>거기에 이직을 진행하는 과정에서 사전 과제가 나올 때마다 atomic design 방법론을 적용해서\n' +
    '만들면서 계속해서 storybook을 적용해갔고, 덕분에 이전 회사에서 완성하지 못했던 디자인\n' +
    '시스템을 page 단위까지 구축해볼 수 있었다. (뭐 그렇다고 잘 구축했다는 건 아니다. 그냥 해\n' +
    '봤다고...)</p>\n' +
    '<p>그리고 현재는 hexo 블로그 테마를 새로 제작하면서 storybook + pug를 시도해보고 있다. (응??)</p>\n' +
    '<h2 id="실패를-피하려면"><a href="#실패를-피하려면" class="headerlink" title="실패를 피하려면,"></a>실패를 피하려면,</h2><p>실패해보고 개인적으로 끝까지 storybook을 간소하게(?) 만들어보고 나니 드는 생각이, 컴포넌트\n' +
    '관점에서의 디자인 시스템 도입에 실패를 피하려면,</p>\n' +
    '<ul>\n' +
    '<li><p>일단 일정이 많이 들어갈 소지가 높다는 것을 염두해 두어야 하고</p>\n' +
    '</li>\n' +
    '<li><p>디자이너의 역할이 상당히 필요한 듯 하다,</p>\n' +
    '<p>구체적으로 이야기 해보면, 디자이너가 컴포넌트 관점에서의 개발이라는 컨셉을 이해하고 있어야\n' +
    '하고 베리에이션의 기준을 명확히 할 수 있어야 할 것 같다.\n' +
    '디자인부터 atom, molecule, organism 등에 대한 이해를 바탕으로 각 컴포넌트가 설계되고\n' +
    '규격화 되어야 갈아엎고 다시 만들어야 할까 고민하는 상황이 없을 것 같다.</p>\n' +
    '</li>\n' +
    '<li><p>컴포넌트를 어떻게 그룹핑하고 분류할 것인지, 서로 유기적으로 엮여야하는 인터랙션이 있다면\n' +
    '어떻게 조합해서 이벤트 처리를 어떻게 할 것인지 등을 잘 고려해 두어야, 조립하다가\n' +
    '재그룹핑하고 재분류하는 일을 줄일 수 있겠더라 (아, 이건 어쩔 수 없는 숙명이려나...)\n' +
    '사실 이 부분은 지금도 만들어 볼 때마다 반복 중인 것 같기도 하다.</p>\n' +
    '</li>\n' +
    '</ul>\n' +
    '<h2 id="고민-포인트"><a href="#고민-포인트" class="headerlink" title="고민 포인트"></a>고민 포인트</h2><p>atomic design과 storybook을 적용해가면서 몇 가지 고민 되는 포인트가 있었는데,</p>\n' +
    '<p>첫째는 이걸 atom으로 두어야 하는가 molecule로 두어야 하는가의 고민이었다.</p>\n' +
    '<p>한 예로 텍스트 필드 컴포넌트를 만드는데 참고한 UI Kit에서는 텍스트 필드에 항상 레이블과\n' +
    '오류 메세지가 함께 존재했고, 이 세 가지 요소 — 레이블, 입력 상자, 오류 메세지를 최소 단위로\n' +
    '보고 atom으로 두는 것이 적절할지, 아니면 아토믹 디자인에서 설명하는 텍스트 그대로 HTML\n' +
    '엘리먼트 단위를 atom으로 보고 컴포넌트는 molecule로 두어야 하는가의 고민이 반복될 수 밖에\n' +
    '없었다. (해당 UI Kit에서는 각 구성 요소가 분리된 더 작은 컴포넌트가 없었기 때문에 그 묶음을\n' +
    '최소 단위로 간주해서 atom으로 두는 걸 최종적으로 선택했다.)</p>\n' +
    '<p>둘째는 Vue에서 이벤트 핸들링을 할 때는 <code>emit</code>을 사용해서 커스텀 이벤트를 상위 컴포넌트로\n' +
    '올려서 처리하는 방식을 권장하고 있는데, 이게 코드를 너무 지저분하게 만드는 듯한 느낌을 지우기\n' +
    '어려웠다. 더불어  Vue devtools에서도 한 번의 액션에 컴포넌트 중첩 수준 만큼에 해당하는\n' +
    '로그가 연달아 발생하니 추적 자체에도 제법 많은 시간을 써야 했다. 내 경우엔\n' +
    '<a href="https://mulder21c.github.io/2021/01/24/pass-function-as-props-in-vue/">이벤트 핸들러를 props로 내려주는 방식</a>을\n' +
    '선택했는데, 이를 안티 패턴으로 보는 블로그 게시글도 있어서 다소 찜찜한 기분은 남아있다.</p>\n' +
    '<p>셋째는 Vuex의 사용이었는데, atomic design의 컨셉 상 실제 데이터가 page 단위에서 바인딩\n' +
    '되는 형태를 따르다보니 atom, molecule, organism, template 단위에서는 Vuex 바인딩을\n' +
    '피하는 쪽으로 만들어야해서 적지 않게 props가 발생되는 느낌도 있었고, 때로는 너무 과하게\n' +
    '제한하는 건 아닐까 하는 생각도 들기도 했다. (하지만 내가 깊게 이해하지 못할 경우에는 우선\n' +
    '명세 같은 것을 최대한 존중하자는 주의라... 일단은 page에서만 Vuex에 접근하는 쪽을 유지하고\n' +
    '있다.)</p>\n' +
    '<p>넷째는 앞서 &quot;실패를 피하려면&quot;에서도 마지막에 언급했던 것이지만, 어떤 컴포넌트를 조합하다 보면\n' +
    '어떻게 그룹핑 하고 어떻게 분류할 것인가가 계속 고민의 연속이 된다.</p>\n' +
    '<p>예를 들어, modal dialog를 만드는데 dialog 껍데기와 닫기 버튼을 하나의 컴포넌트로 두고,\n' +
    'dialog 콘텐츠를 slot으로 처리해서 다른 컴포넌트가 slot으로 삽입되는 구조로 만들었는데 초점\n' +
    '관리에서 문제가 되어 버렸다. tab sequence가 양쪽 컴포넌트에 걸쳐 있다 보니 focus trap을\n' +
    '만들어야 하는데 이벤트 관리를 어떻게...\n' +
    '이리 저리 컴포넌트를 재그룹핑 해봐도 해결책이 보이지 않아 결국은 modal dialog 쪽에서\n' +
    'tabbable 엘리먼트들을 DOM에서 직접 가져와서 처리하는 방식으로 해결해두기는 했는데 인터랙션에\n' +
    '의한 컴포넌트 간의 상호작용을 고려했을 때 컴포넌트가 이렇게 두는 게 맞는지 계속 고민이다.</p>\n' +
    '<p>다섯째는 내가 아직 Storybook을 어떻게 활용할 수 있는가에 대한 경험치 부족과 지식\n' +
    '부족이겠지만, docs와 story를 어떻게 구성해야 하는가다...</p>\n' +
    '<p>현재는 생각 나는 대로 구성해보고 있지만, 썩 마음에 드는 건 아니다.\n' +
    '다른 기업들은 어떻게 생각하고 고민해서 어떤 방향으로 만들고 있는지, 어떻게 했더니 어떤 점이\n' +
    '어려웠었는지 이야기를 심도 있게 들어보고 싶다 ㅠㅠ</p>\n' +
    '<h2 id="어려웠던-점"><a href="#어려웠던-점" class="headerlink" title="어려웠던 점"></a>어려웠던 점</h2><p>일단, 레퍼런스가 생각보다 많지 않았다.\n' +
    '다른 기업의 기술 블로그를 통해서 결과물의 일부분을 살짝 맛을 볼 수는 있는데, 결과물만 보는\n' +
    '것이지 과정을 보는 것이 아니다보니 어떤 목적과 목표를 가지고 어떻게 고민해서 만들어 왔는지의\n' +
    '여정을 보거나, 어떻게 하는 것이 모범 사례인지를 알기가 어렵다.\n' +
    '그냥 계속 남의 것을 염탐(?)하고 과정을 추측해 보는 방법 밖에는 없는걸까? 😥😥</p>\n' +
    '<p>또, storybook이 기본적으로 react를 사용하고 있어서 그런지 다소 Vue에는 궁합이 부족한 부분이\n' +
    '더러 있고, 이걸 해결할 다른 방법을 찾는 게 쉽지 않다.\n' +
    '일례로 storybook의 소스 코드 뷰어가 react 문법을 기반으로 보여주기 때문에 실제로 보여주고\n' +
    '싶은 Vue 문법이 아니라서 이걸 별도로 보여줄 방법을 찾아야 하는가 혹은 그냥 둘 것인가 등의\n' +
    '고민 포인트가 생기고 해결은 당연히(?) 쉽지 않다. (내가 할 수 있는 건 github 이슈에 질문을\n' +
    '남기는 것 뿐...)</p>\n' +
    '<p>더구나 주변에 이거 쓰는 사람 찾기가 어렵... 나란 놈은 인맥이 왜 이 모냥인거지...</p>\n' +
    '<h2 id="좋았던-점"><a href="#좋았던-점" class="headerlink" title="좋았던 점"></a>좋았던 점</h2><ul>\n' +
    '<li><p>우선, atomic design의 컨셉 상 page 단위에 이르러서야 데이터가 바인딩 되기 때문에\n' +
    '외부로부터 주입받아야 하는 데이터에 의존적이지 않은 컴포넌트 구현이 이루어지고 따라서\n' +
    '재사용성이 매우 높아졌다.\n' +
    '물론 반대로 이야기 하면, 그만큼 확장성과 추상성에 대한 고민을 해야 하고 생각 이상으로(?)\n' +
    '수 많은 props가 탄생하기도... 쿨럭...</p>\n' +
    '</li>\n' +
    '<li><p>storybook이 있으니 컴포넌트에 어떤 props가 필수였는지 값에 대한 제한 사항은 무엇인지\n' +
    '코드 레벨에서 확인하지 않아도 되니 편하더라.\n' +
    '단지 한 쪽 브라우저에 storybook을 띄워 놓기만 하면 찾는 건 금방이니 코드를 보고 인식하는\n' +
    '것보다 더 직관적이고 빠르다. (아, 물론 문서를 잘 작성했을 때의 이야기...)</p>\n' +
    '<p>그러고 보니, storybook이 jsdoc를 통한 유추가 좀 더 잘 되었으면 싶다. 내가 아직 몰라서\n' +
    '그런 것일 수도 있지만, storybook + vue에서 props에 대한 문서화가 jsdoc으로는 이루어지지\n' +
    '않는 것 같다. 이것만 잘 되어도 문서화가 코드 레벨에서 많이 정리 될 수 있을 거 같은데...\n' +
    '(아, 오히려 컴포넌트 코드가 더 지저분해 보일 수도 있으니 별도 문서로 빼는 게 나을 수도\n' +
    '있겠다는 생각도 들기도 한다.)</p>\n' +
    '</li>\n' +
    '<li><p>내가 가진 기술 부채 중 한 가지가 TDD다. 그래서 컴포넌트에 대한 테스트가 다소 우려 사항\n' +
    '중의 하나인데, storybook이 그 우려를 조금이나마 완화시켜 주고 있다.</p>\n' +
    '<p>storybook이 없을 때에는 한 개 컴포넌트만 렌더링 시켜서 확인하기에는 다소 불편해서 페이지\n' +
    '단위에서 확인했었는데, storybook 이후로는 개별 컴포넌트 별로 바로 확인이 가능하니 적어도\n' +
    'props나 event 처리에 대한 오류를 빨리 줄일 수 있었다.</p>\n' +
    '</li>\n' +
    '<li><p>storybook에는 다양한 addon들이 존재하는데 viewport(responsive), a11y, dark mode,\n' +
    'zeplin&amp;middot;figma viewer embedding 등과 같은 것들은 꽤나 도움이 될 만한 것들이라고\n' +
    '생각된다.\n' +
    '접근성에 지대한(?) 관심을 가지고 있는 나로서는 addon-a11y는 컴포넌트 단위부터 접근성에\n' +
    '대한 정량 평가를 직관적으로 확인 할 수 있어 좋다고 생각한다.</p>\n' +
    '</li>\n' +
    '</ul>\n',
  site: { data: { 'hero.db': [Array] } },
  excerpt: '',
  more: '<p>ㄱ사에서 프로덕트를 만들며 <a href="https://atomicdesign.bradfrost.com/chapter-2/">atomic design</a>을\n' +
    '적용하고 <a href="https://storybook.js.org/">storybook</a>을 토대로 디자인 시스템을 구축해보기로\n' +
    '했다. 프로젝트 진행 초기에는 디자이너도 동의하는 부분이었지만 제대로 진행되지 못했고 결국\n' +
    '디자인 시스템을 구축하는 것은 실패로 돌아갔다.</p>\n' +
    '<p>실패에 대한 이유와 적용 경험으로 얻은 것들을 풀어보고자 한다.\n' +
    '참고로 atomic design이나 storybook이 무엇인지는 글에 포함 시키지 않는다. 내가 글을 쓰는\n' +
    '것보다는 이미 좋은 글들이 많으니까 😁</p>\n' +
    '<h2 id="적용기"><a href="#적용기" class="headerlink" title="적용기"></a>적용기</h2><h3 id="실패-경험"><a href="#실패-경험" class="headerlink" title="실패 경험"></a>실패 경험</h3><p>앞서 언급한 것처럼 입사 초 디자이너와 이야기 할 때에는storybook을 통한 디자인 시스템 구축에\n' +
    '대한 합의 점이 있었고, 이를 위해서 그 동안 관심을 가지고 있었던 atomic design을 본격적으로\n' +
    '적용해보기로 했었다.</p>\n' +
    '<p>언제나 처음이 어렵듯이 처음 적용해 본 atomic design과 storybook은 제법 쉽지 않았다.\n' +
    '사실 당시의 storybook 버전과 Vue가 궁합이 안 맞아도 너무 안 맞았었기 때문에 발생되는 이슈가\n' +
    '많았던 것...</p>\n' +
    '<p>하지만 이 문제를 미뤄두어도 일단 디자인 시스템 구축과 storybook 도입은 실패로 돌아 갔다.</p>\n' +
    '<h4 id="일정-상의-문제"><a href="#일정-상의-문제" class="headerlink" title="일정 상의 문제"></a>일정 상의 문제</h4><p>일단은 개발 일정 상의 문제가 가장 크게 작용되었다.</p>\n' +
    '<p>디자인 시스템을 구축하자면 디자이너와 긴밀하게 이야기가 진행되어야 하는데 도무지 그럴 시간적\n' +
    '여유가 없었다. 그도 그럴 것이 내가 입사한 4월부터 디자인 작업이 시작되었는데, 8월을 오픈\n' +
    '시점으로 둔 상태에서 7월에야 디자인이 나왔고 그마저도 계속 일부분은 완료되지 않고 미확정\n' +
    '상태로 진행되었다.</p>\n' +
    '<p>디자인이 진행되고 있던 초기에는 Vue와 storybook을 통합하느라 시간을 보내고, API도 완료된\n' +
    '디자인 화면을 기준으로 만들고 있었으니 뒤로 갈 수록 개발 시간이 부족했고, 더구나 최초 예상\n' +
    '범위는 시간이 흐를 수록 점점 덩어리가 커져 가더니 MVP가 아니라 그냥 커다란 덩어리가 되어\n' +
    '버리는 통에 개발에만 시간을 쏟아도 모자를 지경이 되어버렸다. (실제로 일정 상에 문제가\n' +
    '생기기도 했다)</p>\n' +
    '<h4 id="디자이너의-컴포넌트-단위에-대한-이해-부족"><a href="#디자이너의-컴포넌트-단위에-대한-이해-부족" class="headerlink" title="디자이너의 컴포넌트 단위에 대한 이해 부족"></a>디자이너의 컴포넌트 단위에 대한 이해 부족</h4><p>두 번째 문제는 디자이너의 컴포넌트 단위에 대한 이해가 부족하다는 거였다. (어쩌면\n' +
    '커뮤니케이션의 문제일 수도 있다.)</p>\n' +
    '<p>벡터 툴을 가지고 포토샵처럼 쓰는 것도 문제였지만, 예를 들어 버튼 컴포넌트의 경우 분명 같은\n' +
    '버튼 컴포넌트인데 동일한 스타일을 가지고 있지 않다. 가장 많게는 border-radius 사이즈가 너무\n' +
    '다양하게 나타났고, 종종 font-size나 font-weight가 차이가 났다.</p>\n' +
    '<p>물론 디자이너의 눈에 이 페이지에서는 이렇게 보이는 게 이쁘다가 나올 수는 있다고 생각한다.\n' +
    '하지만 만들어야 하는 프로덕트는 아트웍이나 각각 개별 페이지 전자 인쇄물이 아니라, 여러\n' +
    '페이지로 구성되어 있는 하나의 웹사이트, 하나의 웹 어플리케이션이고 특히 컴포넌트 관점의 개발\n' +
    '도구를 사용하는 환경에서 개별 컴포넌트의 베리에이션 기준이 명확하지 않으면 전부 하드코딩해야\n' +
    '한다는 것이 된다.</p>\n' +
    '<p>또한, 이 프로젝트에서는 디자인 변수를 미리 잡아두고 시작했는데 — 글꼴 크기 세트, 컬러 세트\n' +
    '등, 전달 받은 디자인 상에서 계속 사전 정의된 컬러 이름이 나오다가 갑자기 헥스 코드나 rgb(a)\n' +
    '값이 나타나서 확인해 보면 정의 된 값 이외의 것들이었다.</p>\n' +
    '<p>문제는 이러한 것들이 적지 않게 튀어 나왔다는 것이고, 이미 color set을 정의해 둔 상태에서\n' +
    '어디에도 끼우기가 너무 어렵고 (그레이 색상을 12단계로 설정해 두었는데 갑자기 그 사이 어딘가의\n' +
    '값이 툭...), 해당 컬러 값이 얼마나 자주 사용 되는 지, 또 다른 어딘가의 사이 값이 추가로\n' +
    '존재하는지 확인 하려면 불필요하게 소비되는 리소스가 너무 많이 들어간다는 거였다.</p>\n' +
    '<p>이러한 잦은 예상 외의 베리에이션이 나타나면서 하드 코딩이 잦게 발생되고, 결국은 CSS 규격화는\n' +
    '점점 물 건너 가며 template이나 organism 단위에서 CSS를 override하는 지저분한 상황이 연출\n' +
    '되기도 했다. (심하게는 시안 상에는 button 컴포넌트를 가져다 그려 놓았으나 실제는 체크 박스\n' +
    '기능인 것도 있었다.)</p>\n' +
    '<p>어찌보면 커뮤니케이션이 원활하지 않았기 때문에 이 부분에 대한 협의가 이루어지지 않은 것도\n' +
    '있겠지만, 경험 상 퍼블리셔로서 일할 때부터 늘 디자이너와 겪는 마찰 부분이기도 하다.</p>\n' +
    '<h4 id="Nuxt와-Storybook의-궁합-문제"><a href="#Nuxt와-Storybook의-궁합-문제" class="headerlink" title="Nuxt와 Storybook의 궁합 문제"></a>Nuxt와 Storybook의 궁합 문제</h4><p>세 번째 문제는 nuxt와 (당시의) storybook이 서로 궁합이 안 맞아도 너무 안 맞는다는 거였다.</p>\n' +
    '<p>storybook에서 왜 오류가 나지?, 왜 안되지? 하고 구글링 해보면 issue로 등록되어 있거나\n' +
    'storybook 문제라는 stackoverflow의 답변들을 쉽게 발견할 수 있었다.</p>\n' +
    '<p>본래는 온갖 해외 자료들을 뒤져가며 해결했던 그 모든 방법들을 포스팅 해보려고 했었는데, 어느\n' +
    '정도 바쁜 것들이 정리되고 본격적으로 포스팅을 시작해보기 위해 한 단계 한 단계 다시 사례를\n' +
    '만들려고 하니 버전업과 함께 해결되어 버려서 ㅋㅋㅋ (그래서 이슈 해결 보다는\n' +
    'nuxt-storybook으로 통합하는 것과 수동으로 한 땀 한 땀 통합하는 방법을 비교해서 올렸었다.)</p>\n' +
    '<p>가장 짜증(?) 났던 것 중 하나가 mdx 포맷과 addon과 vue의 통합이 거지 같았... (addon-docs와\n' +
    'controls와 vue와 mdx가 만나면... 하하하...) 지금은 mdx를 이용해 넘나 잘 쓰고 있다.</p>\n' +
    '<p>그리고 다른 개인 작업에서 storybook과 pug를 통합해보고 있다(읭?)</p>\n' +
    '<h3 id="재-시도"><a href="#재-시도" class="headerlink" title="재 시도"></a>재 시도</h3><p>작년 11월 IAT 세미나를 준비하면서 시연에 필요한 페이지를 Vue로 만들면서 다시 적용해봤다.</p>\n' +
    '<p>이미 storybook 버전업으로 통합이 잘 되었고, 자잘한 버그 등의 이슈도 있었지만 다행히\n' +
    'github을 통해 issue로 등록할 때마다 nuxt-storybook 커뮤니티에서 빠르게 대응해줘서 금방\n' +
    '처리되었다.</p>\n' +
    '<p>거기에 이직을 진행하는 과정에서 사전 과제가 나올 때마다 atomic design 방법론을 적용해서\n' +
    '만들면서 계속해서 storybook을 적용해갔고, 덕분에 이전 회사에서 완성하지 못했던 디자인\n' +
    '시스템을 page 단위까지 구축해볼 수 있었다. (뭐 그렇다고 잘 구축했다는 건 아니다. 그냥 해\n' +
    '봤다고...)</p>\n' +
    '<p>그리고 현재는 hexo 블로그 테마를 새로 제작하면서 storybook + pug를 시도해보고 있다. (응??)</p>\n' +
    '<h2 id="실패를-피하려면"><a href="#실패를-피하려면" class="headerlink" title="실패를 피하려면,"></a>실패를 피하려면,</h2><p>실패해보고 개인적으로 끝까지 storybook을 간소하게(?) 만들어보고 나니 드는 생각이, 컴포넌트\n' +
    '관점에서의 디자인 시스템 도입에 실패를 피하려면,</p>\n' +
    '<ul>\n' +
    '<li><p>일단 일정이 많이 들어갈 소지가 높다는 것을 염두해 두어야 하고</p>\n' +
    '</li>\n' +
    '<li><p>디자이너의 역할이 상당히 필요한 듯 하다,</p>\n' +
    '<p>구체적으로 이야기 해보면, 디자이너가 컴포넌트 관점에서의 개발이라는 컨셉을 이해하고 있어야\n' +
    '하고 베리에이션의 기준을 명확히 할 수 있어야 할 것 같다.\n' +
    '디자인부터 atom, molecule, organism 등에 대한 이해를 바탕으로 각 컴포넌트가 설계되고\n' +
    '규격화 되어야 갈아엎고 다시 만들어야 할까 고민하는 상황이 없을 것 같다.</p>\n' +
    '</li>\n' +
    '<li><p>컴포넌트를 어떻게 그룹핑하고 분류할 것인지, 서로 유기적으로 엮여야하는 인터랙션이 있다면\n' +
    '어떻게 조합해서 이벤트 처리를 어떻게 할 것인지 등을 잘 고려해 두어야, 조립하다가\n' +
    '재그룹핑하고 재분류하는 일을 줄일 수 있겠더라 (아, 이건 어쩔 수 없는 숙명이려나...)\n' +
    '사실 이 부분은 지금도 만들어 볼 때마다 반복 중인 것 같기도 하다.</p>\n' +
    '</li>\n' +
    '</ul>\n' +
    '<h2 id="고민-포인트"><a href="#고민-포인트" class="headerlink" title="고민 포인트"></a>고민 포인트</h2><p>atomic design과 storybook을 적용해가면서 몇 가지 고민 되는 포인트가 있었는데,</p>\n' +
    '<p>첫째는 이걸 atom으로 두어야 하는가 molecule로 두어야 하는가의 고민이었다.</p>\n' +
    '<p>한 예로 텍스트 필드 컴포넌트를 만드는데 참고한 UI Kit에서는 텍스트 필드에 항상 레이블과\n' +
    '오류 메세지가 함께 존재했고, 이 세 가지 요소 — 레이블, 입력 상자, 오류 메세지를 최소 단위로\n' +
    '보고 atom으로 두는 것이 적절할지, 아니면 아토믹 디자인에서 설명하는 텍스트 그대로 HTML\n' +
    '엘리먼트 단위를 atom으로 보고 컴포넌트는 molecule로 두어야 하는가의 고민이 반복될 수 밖에\n' +
    '없었다. (해당 UI Kit에서는 각 구성 요소가 분리된 더 작은 컴포넌트가 없었기 때문에 그 묶음을\n' +
    '최소 단위로 간주해서 atom으로 두는 걸 최종적으로 선택했다.)</p>\n' +
    '<p>둘째는 Vue에서 이벤트 핸들링을 할 때는 <code>emit</code>을 사용해서 커스텀 이벤트를 상위 컴포넌트로\n' +
    '올려서 처리하는 방식을 권장하고 있는데, 이게 코드를 너무 지저분하게 만드는 듯한 느낌을 지우기\n' +
    '어려웠다. 더불어  Vue devtools에서도 한 번의 액션에 컴포넌트 중첩 수준 만큼에 해당하는\n' +
    '로그가 연달아 발생하니 추적 자체에도 제법 많은 시간을 써야 했다. 내 경우엔\n' +
    '<a href="https://mulder21c.github.io/2021/01/24/pass-function-as-props-in-vue/">이벤트 핸들러를 props로 내려주는 방식</a>을\n' +
    '선택했는데, 이를 안티 패턴으로 보는 블로그 게시글도 있어서 다소 찜찜한 기분은 남아있다.</p>\n' +
    '<p>셋째는 Vuex의 사용이었는데, atomic design의 컨셉 상 실제 데이터가 page 단위에서 바인딩\n' +
    '되는 형태를 따르다보니 atom, molecule, organism, template 단위에서는 Vuex 바인딩을\n' +
    '피하는 쪽으로 만들어야해서 적지 않게 props가 발생되는 느낌도 있었고, 때로는 너무 과하게\n' +
    '제한하는 건 아닐까 하는 생각도 들기도 했다. (하지만 내가 깊게 이해하지 못할 경우에는 우선\n' +
    '명세 같은 것을 최대한 존중하자는 주의라... 일단은 page에서만 Vuex에 접근하는 쪽을 유지하고\n' +
    '있다.)</p>\n' +
    '<p>넷째는 앞서 &quot;실패를 피하려면&quot;에서도 마지막에 언급했던 것이지만, 어떤 컴포넌트를 조합하다 보면\n' +
    '어떻게 그룹핑 하고 어떻게 분류할 것인가가 계속 고민의 연속이 된다.</p>\n' +
    '<p>예를 들어, modal dialog를 만드는데 dialog 껍데기와 닫기 버튼을 하나의 컴포넌트로 두고,\n' +
    'dialog 콘텐츠를 slot으로 처리해서 다른 컴포넌트가 slot으로 삽입되는 구조로 만들었는데 초점\n' +
    '관리에서 문제가 되어 버렸다. tab sequence가 양쪽 컴포넌트에 걸쳐 있다 보니 focus trap을\n' +
    '만들어야 하는데 이벤트 관리를 어떻게...\n' +
    '이리 저리 컴포넌트를 재그룹핑 해봐도 해결책이 보이지 않아 결국은 modal dialog 쪽에서\n' +
    'tabbable 엘리먼트들을 DOM에서 직접 가져와서 처리하는 방식으로 해결해두기는 했는데 인터랙션에\n' +
    '의한 컴포넌트 간의 상호작용을 고려했을 때 컴포넌트가 이렇게 두는 게 맞는지 계속 고민이다.</p>\n' +
    '<p>다섯째는 내가 아직 Storybook을 어떻게 활용할 수 있는가에 대한 경험치 부족과 지식\n' +
    '부족이겠지만, docs와 story를 어떻게 구성해야 하는가다...</p>\n' +
    '<p>현재는 생각 나는 대로 구성해보고 있지만, 썩 마음에 드는 건 아니다.\n' +
    '다른 기업들은 어떻게 생각하고 고민해서 어떤 방향으로 만들고 있는지, 어떻게 했더니 어떤 점이\n' +
    '어려웠었는지 이야기를 심도 있게 들어보고 싶다 ㅠㅠ</p>\n' +
    '<h2 id="어려웠던-점"><a href="#어려웠던-점" class="headerlink" title="어려웠던 점"></a>어려웠던 점</h2><p>일단, 레퍼런스가 생각보다 많지 않았다.\n' +
    '다른 기업의 기술 블로그를 통해서 결과물의 일부분을 살짝 맛을 볼 수는 있는데, 결과물만 보는\n' +
    '것이지 과정을 보는 것이 아니다보니 어떤 목적과 목표를 가지고 어떻게 고민해서 만들어 왔는지의\n' +
    '여정을 보거나, 어떻게 하는 것이 모범 사례인지를 알기가 어렵다.\n' +
    '그냥 계속 남의 것을 염탐(?)하고 과정을 추측해 보는 방법 밖에는 없는걸까? 😥😥</p>\n' +
    '<p>또, storybook이 기본적으로 react를 사용하고 있어서 그런지 다소 Vue에는 궁합이 부족한 부분이\n' +
    '더러 있고, 이걸 해결할 다른 방법을 찾는 게 쉽지 않다.\n' +
    '일례로 storybook의 소스 코드 뷰어가 react 문법을 기반으로 보여주기 때문에 실제로 보여주고\n' +
    '싶은 Vue 문법이 아니라서 이걸 별도로 보여줄 방법을 찾아야 하는가 혹은 그냥 둘 것인가 등의\n' +
    '고민 포인트가 생기고 해결은 당연히(?) 쉽지 않다. (내가 할 수 있는 건 github 이슈에 질문을\n' +
    '남기는 것 뿐...)</p>\n' +
    '<p>더구나 주변에 이거 쓰는 사람 찾기가 어렵... 나란 놈은 인맥이 왜 이 모냥인거지...</p>\n' +
    '<h2 id="좋았던-점"><a href="#좋았던-점" class="headerlink" title="좋았던 점"></a>좋았던 점</h2><ul>\n' +
    '<li><p>우선, atomic design의 컨셉 상 page 단위에 이르러서야 데이터가 바인딩 되기 때문에\n' +
    '외부로부터 주입받아야 하는 데이터에 의존적이지 않은 컴포넌트 구현이 이루어지고 따라서\n' +
    '재사용성이 매우 높아졌다.\n' +
    '물론 반대로 이야기 하면, 그만큼 확장성과 추상성에 대한 고민을 해야 하고 생각 이상으로(?)\n' +
    '수 많은 props가 탄생하기도... 쿨럭...</p>\n' +
    '</li>\n' +
    '<li><p>storybook이 있으니 컴포넌트에 어떤 props가 필수였는지 값에 대한 제한 사항은 무엇인지\n' +
    '코드 레벨에서 확인하지 않아도 되니 편하더라.\n' +
    '단지 한 쪽 브라우저에 storybook을 띄워 놓기만 하면 찾는 건 금방이니 코드를 보고 인식하는\n' +
    '것보다 더 직관적이고 빠르다. (아, 물론 문서를 잘 작성했을 때의 이야기...)</p>\n' +
    '<p>그러고 보니, storybook이 jsdoc를 통한 유추가 좀 더 잘 되었으면 싶다. 내가 아직 몰라서\n' +
    '그런 것일 수도 있지만, storybook + vue에서 props에 대한 문서화가 jsdoc으로는 이루어지지\n' +
    '않는 것 같다. 이것만 잘 되어도 문서화가 코드 레벨에서 많이 정리 될 수 있을 거 같은데...\n' +
    '(아, 오히려 컴포넌트 코드가 더 지저분해 보일 수도 있으니 별도 문서로 빼는 게 나을 수도\n' +
    '있겠다는 생각도 들기도 한다.)</p>\n' +
    '</li>\n' +
    '<li><p>내가 가진 기술 부채 중 한 가지가 TDD다. 그래서 컴포넌트에 대한 테스트가 다소 우려 사항\n' +
    '중의 하나인데, storybook이 그 우려를 조금이나마 완화시켜 주고 있다.</p>\n' +
    '<p>storybook이 없을 때에는 한 개 컴포넌트만 렌더링 시켜서 확인하기에는 다소 불편해서 페이지\n' +
    '단위에서 확인했었는데, storybook 이후로는 개별 컴포넌트 별로 바로 확인이 가능하니 적어도\n' +
    'props나 event 처리에 대한 오류를 빨리 줄일 수 있었다.</p>\n' +
    '</li>\n' +
    '<li><p>storybook에는 다양한 addon들이 존재하는데 viewport(responsive), a11y, dark mode,\n' +
    'zeplin&amp;middot;figma viewer embedding 등과 같은 것들은 꽤나 도움이 될 만한 것들이라고\n' +
    '생각된다.\n' +
    '접근성에 지대한(?) 관심을 가지고 있는 나로서는 addon-a11y는 컴포넌트 단위부터 접근성에\n' +
    '대한 정량 평가를 직관적으로 확인 할 수 있어 좋다고 생각한다.</p>\n' +
    '</li>\n' +
    '</ul>\n',
  path: [Getter],
  permalink: [Getter],
  full_source: [Getter],
  asset_dir: [Getter],
  tags: [Getter],
  categories: [Getter],
  next: <ref *2> _Document {
    title: 'json-server에 사용자 인증 구현하기',
    thumbnail: '/upload/2021/thumbs/json-server-authentication.jpg',
    hero: '/upload/2021/json-server-authentication.jpg',
    seo: {
      description: '최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에\n' +
        '있어 시도해 봤던 방법을 기록으로 남겨본다.\n',
      image: '/upload/2021/json-server-authentication.jpg'
    },
    style: '.hero {\n' +
      '  &-wrapper {\n' +
      '    text-shadow:\n' +
      '      1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
      '      -1px -1px 1em rgba(20, 12, 24, 0.5);\n' +
      '  }\n' +
      '  &__image {\n' +
      '    opacity: 0.5;\n' +
      '    filter: blur(0.35em)\n' +
      '  }\n' +
      '}\n',
    date: Moment<2021-02-06T14:10:27+09:00>,
    _content: '\n' +
      '\n' +
      '최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에 있어\n' +
      '시도해 봤던 방법을 기록으로 남겨본다. (JSON server는 사용할 줄 안다는 가정하에서 포스팅한다.)\n' +
      '\n' +
      '내 경우엔 mock API 구현에 편의를 위해 [JSON server](https://github.com/typicode/json-server)를\n' +
      '사용해 왔는데, 역시 이를 베이스로 하고 JWT 관련 패키지를 추가하여 구현을 시도해봤다.\n' +
      '\n' +
      '## 추가 한 auth 관련 패키지\n' +
      '\n' +
      '- [json-server-auth](https://github.com/jeremyben/json-server-auth)\n' +
      '\n' +
      '  JSON server용으로 만들어진 JWT 인증 미들웨어다.\n' +
      '  다른 몇 가지 패키지들을 찾아보고 가장 간편하게 구축 가능하고 문서화가 잘 되어 있는 녀석을\n' +
      '  찾다보니 이 녀석으로 정착했다.\n' +
      '\n' +
      '- [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken)\n' +
      '\n' +
      '  패키지 이름 그대로 JWT의 구현체인데, JWT verifier가 필요해서 가져왔다 = _=a\n' +
      '\n' +
      '- [cors](https://github.com/expressjs/cors)\n' +
      '\n' +
      '  CORS 관련 설정을 위한 Express용 미들웨어로, HEADER를 조작하게 되면 pre-flight 요청을\n' +
      '  처리해야 하는데 여기서 CORS 문제가 발생되기 때문에 이를 해결하기 위해서 설치 했다.\n' +
      '\n' +
      '## 기본 설정\n' +
      '\n' +
      '사실 json-server-auth가 웬만한 것들은 알아서 처리해주고 있기 때문에 특별히 할 것은 없다.\n' +
      '\n' +
      '해당 매뉴얼을 참고해서 미리 정의 된 API 이름을 그대로 가져다 쓰기만 하면 JWT 발급부터 오류까지\n' +
      '알아서 처리해 준다. (참고로 이 토큰의 유효시간은 1시간이다)\n' +
      '\n' +
      '따라서, 해야 할 일이라고는 미리 정의 된 API 외 다른 이름을 쓰고 싶을 경우의 router rewrite,\n' +
      'CORS 설정 정도면 충분하다.\n' +
      '\n' +
      '설정 방법은 [express 공식문서](https://expressjs.com/en/resources/middleware/cors.html)를\n' +
      '참고했다.\n' +
      '\n' +
      '```javascript\n' +
      'const server = jsonServer.create();\n' +
      'const auth = require("json-server-auth");\n' +
      'const cors = require("cors");\n' +
      '\n' +
      '/**\n' +
      ' * 과제에선 GET, POST, DELETE만 필요했기 때문에\n' +
      ' * 3가지 method만 작성했고,\n' +
      ' * 어차피 mock api이고 local에서 구동되는 거라\n' +
      ' * origin을 all(*)로 설정했다.\n' +
      ' */\n' +
      'server.use(\n' +
      '  cors({\n' +
      '    origin: "*",\n' +
      '    preflightContinue: false,\n' +
      '    methods: "GET,POST,DELETE"\n' +
      '  })\n' +
      ');\n' +
      '/**\n' +
      ' * 모든 router에 대해 preflight 요청 활성화\n' +
      ' */\n' +
      'server.options("*", cors());\n' +
      '\n' +
      '// 중략\n' +
      '\n' +
      'server.use(auth);\n' +
      '```\n' +
      '\n' +
      '단지 이 기본 설정만으로 회원 가입, 로그인 시 JWT 발급이 가능하고 이후 클라이언트에서\n' +
      'API 호출 시 Authorization Header에 Bearer Token을 담아 던지기만 하면 된다.\n' +
      '\n' +
      '## users/me 구현\n' +
      '\n' +
      '그런데, json-server-auth는 회원 가입 혹은 로그인 시 accessToken만을 응답으로 내려주기\n' +
      '때문에 사용자를 식별할 방법이 없다.\n' +
      '\n' +
      '아쉽게도 이 부분은 직접 구현을 해야 하는 부분으로 보였다.\n' +
      '역시 대부분 생각하는게 비슷한지 동일한 니즈를 가진 유저의 질문이\n' +
      '[issue](https://github.com/jeremyben/json-server-auth/issues/12)로 등록되어 있었고\n' +
      '해당 issue를 참고해서 별도로 구현했다.\n' +
      '\n' +
      '```javascript\n' +
      '/**\n' +
      ' * JWT 검증을 위해 jsonwebtoken 모듈을 가져왔고,\n' +
      ' * JWT의 비밀키는 json-server-auth에서 가지고 있다\n' +
      ' */\n' +
      'const jwt = require("jsonwebtoken");\n' +
      'const JWT_SECRET_KEY = require("json-server-auth/dist/constants").JWT_SECRET_KEY;\n' +
      '\n' +
      '// 중략\n' +
      '\n' +
      'server.get(`/users/me`, auth, (req, res) => {\n' +
      '  const { authorization } = req.headers;\n' +
      '  if (!authorization) {\n' +
      '    res.status(401).jsonp("Missing authorization header");\n' +
      '    return;\n' +
      '  }\n' +
      '  const [scheme, token] = authorization.split(" ");\n' +
      '  if (scheme !== "Bearer") {\n' +
      '    res.status(401).jsonp("Incorrect authorization scheme");\n' +
      '    return;\n' +
      '  }\n' +
      '  if (!token) {\n' +
      '    res.status(401).jsonp("Missing token");\n' +
      '    return;\n' +
      '  }\n' +
      '\n' +
      '  try {\n' +
      '    const data = jwt.verify(token, JWT_SECRET_KEY);\n' +
      '    const { db } = req.app;\n' +
      '    // ... 은 그냥 나머지 property들\n' +
      '    const { id, email, ... } = db\n' +
      '      .get("users")\n' +
      '      .find({ email: data.email })\n' +
      '      .value();\n' +
      '    res.status(200).json({ id, email, ... });\n' +
      '  } catch (err) {\n' +
      '    res.status(401).jsonp(err.message);\n' +
      '  }\n' +
      '});\n' +
      '```\n' +
      '\n' +
      '이렇게 해서 사용자 정보를 내려주는 users/me API도 구현했다.\n' +
      '\n' +
      '생각보다 어렵지 않게 mock에서도 인증 구현이 되서 이후로도 요긴하게(?) 사용할 수 있을 것 같다.\n' +
      '\n' +
      '## 아쉬운 부분\n' +
      '\n' +
      'json-server-auth가 내부적으로 정확히 어떻게 동작하는지까지는 찾아보지 않았는데, mock api\n' +
      '구동 중에 post 등으로 발생된 리소스는 권한이 정상적으로 동작하는 반면, mock api가 구동 되기\n' +
      '전에 존재하는 리소스는 권한이 정상적으로 동작하지 않았다.\n' +
      '\n' +
      '즉, 생성한 유저만 조회가 가능한 리소스를 설정해두었을 때, 테스트 중 mock api를 내렸다가 다시\n' +
      '올리면 기존 리소스가 사라지는 것은 아니기 때문에 기존 것이 전체가 조회 가능한 권한이 되어버리는\n' +
      '문제가 발생하기는 하더라...\n' +
      '\n' +
      '그리고 또 한가지, mock API 작성과 동시에 swagger 문서를 만들었는데 swagger 사이트에 올려\n' +
      'API 테스트를 돌리려고 하면 토큰을 발급 받을 방법을 모르겠더라 = _=a\n' +
      '결국 Swagger 사이트에 올리면 인증 테스트를 할 수 없더라는... 쿨럭...\n' +
      '\n' +
      '물론 로컬에 swagger도 설치해서 구동하면 되기는 하지만, 협업 시에는 response에 관련 된\n' +
      'yml만 작성해 올리는 걸로 만족해야 하나 싶다.',
    source: '_posts/2021-02-06-implementing-authentication-with-json-server.md',
    raw: '---\n' +
      'title: json-server에 사용자 인증 구현하기\n' +
      'tags:\n' +
      '  - Authenticatoin\n' +
      '  - Authorization\n' +
      '  - Bearer Token\n' +
      '  - json-server\n' +
      '  - json-server-auth\n' +
      '  - mock api\n' +
      '  - JWT\n' +
      'categories:\n' +
      'thumbnail: /upload/2021/thumbs/json-server-authentication.jpg\n' +
      'hero: /upload/2021/json-server-authentication.jpg\n' +
      'seo:\n' +
      '  description: |\n' +
      '    최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에\n' +
      '    있어 시도해 봤던 방법을 기록으로 남겨본다.\n' +
      '  image: /upload/2021/json-server-authentication.jpg\n' +
      'style: |\n' +
      '  .hero {\n' +
      '    &-wrapper {\n' +
      '      text-shadow:\n' +
      '        1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
      '        -1px -1px 1em rgba(20, 12, 24, 0.5);\n' +
      '    }\n' +
      '    &__image {\n' +
      '      opacity: 0.5;\n' +
      '      filter: blur(0.35em)\n' +
      '    }\n' +
      '  }\n' +
      'date: 2021-02-06 14:10:27\n' +
      '---\n' +
      '\n' +
      '\n' +
      '최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에 있어\n' +
      '시도해 봤던 방법을 기록으로 남겨본다. (JSON server는 사용할 줄 안다는 가정하에서 포스팅한다.)\n' +
      '\n' +
      '내 경우엔 mock API 구현에 편의를 위해 [JSON server](https://github.com/typicode/json-server)를\n' +
      '사용해 왔는데, 역시 이를 베이스로 하고 JWT 관련 패키지를 추가하여 구현을 시도해봤다.\n' +
      '\n' +
      '## 추가 한 auth 관련 패키지\n' +
      '\n' +
      '- [json-server-auth](https://github.com/jeremyben/json-server-auth)\n' +
      '\n' +
      '  JSON server용으로 만들어진 JWT 인증 미들웨어다.\n' +
      '  다른 몇 가지 패키지들을 찾아보고 가장 간편하게 구축 가능하고 문서화가 잘 되어 있는 녀석을\n' +
      '  찾다보니 이 녀석으로 정착했다.\n' +
      '\n' +
      '- [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken)\n' +
      '\n' +
      '  패키지 이름 그대로 JWT의 구현체인데, JWT verifier가 필요해서 가져왔다 = _=a\n' +
      '\n' +
      '- [cors](https://github.com/expressjs/cors)\n' +
      '\n' +
      '  CORS 관련 설정을 위한 Express용 미들웨어로, HEADER를 조작하게 되면 pre-flight 요청을\n' +
      '  처리해야 하는데 여기서 CORS 문제가 발생되기 때문에 이를 해결하기 위해서 설치 했다.\n' +
      '\n' +
      '## 기본 설정\n' +
      '\n' +
      '사실 json-server-auth가 웬만한 것들은 알아서 처리해주고 있기 때문에 특별히 할 것은 없다.\n' +
      '\n' +
      '해당 매뉴얼을 참고해서 미리 정의 된 API 이름을 그대로 가져다 쓰기만 하면 JWT 발급부터 오류까지\n' +
      '알아서 처리해 준다. (참고로 이 토큰의 유효시간은 1시간이다)\n' +
      '\n' +
      '따라서, 해야 할 일이라고는 미리 정의 된 API 외 다른 이름을 쓰고 싶을 경우의 router rewrite,\n' +
      'CORS 설정 정도면 충분하다.\n' +
      '\n' +
      '설정 방법은 [express 공식문서](https://expressjs.com/en/resources/middleware/cors.html)를\n' +
      '참고했다.\n' +
      '\n' +
      '```javascript\n' +
      'const server = jsonServer.create();\n' +
      'const auth = require("json-server-auth");\n' +
      'const cors = require("cors");\n' +
      '\n' +
      '/**\n' +
      ' * 과제에선 GET, POST, DELETE만 필요했기 때문에\n' +
      ' * 3가지 method만 작성했고,\n' +
      ' * 어차피 mock api이고 local에서 구동되는 거라\n' +
      ' * origin을 all(*)로 설정했다.\n' +
      ' */\n' +
      'server.use(\n' +
      '  cors({\n' +
      '    origin: "*",\n' +
      '    preflightContinue: false,\n' +
      '    methods: "GET,POST,DELETE"\n' +
      '  })\n' +
      ');\n' +
      '/**\n' +
      ' * 모든 router에 대해 preflight 요청 활성화\n' +
      ' */\n' +
      'server.options("*", cors());\n' +
      '\n' +
      '// 중략\n' +
      '\n' +
      'server.use(auth);\n' +
      '```\n' +
      '\n' +
      '단지 이 기본 설정만으로 회원 가입, 로그인 시 JWT 발급이 가능하고 이후 클라이언트에서\n' +
      'API 호출 시 Authorization Header에 Bearer Token을 담아 던지기만 하면 된다.\n' +
      '\n' +
      '## users/me 구현\n' +
      '\n' +
      '그런데, json-server-auth는 회원 가입 혹은 로그인 시 accessToken만을 응답으로 내려주기\n' +
      '때문에 사용자를 식별할 방법이 없다.\n' +
      '\n' +
      '아쉽게도 이 부분은 직접 구현을 해야 하는 부분으로 보였다.\n' +
      '역시 대부분 생각하는게 비슷한지 동일한 니즈를 가진 유저의 질문이\n' +
      '[issue](https://github.com/jeremyben/json-server-auth/issues/12)로 등록되어 있었고\n' +
      '해당 issue를 참고해서 별도로 구현했다.\n' +
      '\n' +
      '```javascript\n' +
      '/**\n' +
      ' * JWT 검증을 위해 jsonwebtoken 모듈을 가져왔고,\n' +
      ' * JWT의 비밀키는 json-server-auth에서 가지고 있다\n' +
      ' */\n' +
      'const jwt = require("jsonwebtoken");\n' +
      'const JWT_SECRET_KEY = require("json-server-auth/dist/constants").JWT_SECRET_KEY;\n' +
      '\n' +
      '// 중략\n' +
      '\n' +
      'server.get(`/users/me`, auth, (req, res) => {\n' +
      '  const { authorization } = req.headers;\n' +
      '  if (!authorization) {\n' +
      '    res.status(401).jsonp("Missing authorization header");\n' +
      '    return;\n' +
      '  }\n' +
      '  const [scheme, token] = authorization.split(" ");\n' +
      '  if (scheme !== "Bearer") {\n' +
      '    res.status(401).jsonp("Incorrect authorization scheme");\n' +
      '    return;\n' +
      '  }\n' +
      '  if (!token) {\n' +
      '    res.status(401).jsonp("Missing token");\n' +
      '    return;\n' +
      '  }\n' +
      '\n' +
      '  try {\n' +
      '    const data = jwt.verify(token, JWT_SECRET_KEY);\n' +
      '    const { db } = req.app;\n' +
      '    // ... 은 그냥 나머지 property들\n' +
      '    const { id, email, ... } = db\n' +
      '      .get("users")\n' +
      '      .find({ email: data.email })\n' +
      '      .value();\n' +
      '    res.status(200).json({ id, email, ... });\n' +
      '  } catch (err) {\n' +
      '    res.status(401).jsonp(err.message);\n' +
      '  }\n' +
      '});\n' +
      '```\n' +
      '\n' +
      '이렇게 해서 사용자 정보를 내려주는 users/me API도 구현했다.\n' +
      '\n' +
      '생각보다 어렵지 않게 mock에서도 인증 구현이 되서 이후로도 요긴하게(?) 사용할 수 있을 것 같다.\n' +
      '\n' +
      '## 아쉬운 부분\n' +
      '\n' +
      'json-server-auth가 내부적으로 정확히 어떻게 동작하는지까지는 찾아보지 않았는데, mock api\n' +
      '구동 중에 post 등으로 발생된 리소스는 권한이 정상적으로 동작하는 반면, mock api가 구동 되기\n' +
      '전에 존재하는 리소스는 권한이 정상적으로 동작하지 않았다.\n' +
      '\n' +
      '즉, 생성한 유저만 조회가 가능한 리소스를 설정해두었을 때, 테스트 중 mock api를 내렸다가 다시\n' +
      '올리면 기존 리소스가 사라지는 것은 아니기 때문에 기존 것이 전체가 조회 가능한 권한이 되어버리는\n' +
      '문제가 발생하기는 하더라...\n' +
      '\n' +
      '그리고 또 한가지, mock API 작성과 동시에 swagger 문서를 만들었는데 swagger 사이트에 올려\n' +
      'API 테스트를 돌리려고 하면 토큰을 발급 받을 방법을 모르겠더라 = _=a\n' +
      '결국 Swagger 사이트에 올리면 인증 테스트를 할 수 없더라는... 쿨럭...\n' +
      '\n' +
      '물론 로컬에 swagger도 설치해서 구동하면 되기는 하지만, 협업 시에는 response에 관련 된\n' +
      'yml만 작성해 올리는 걸로 만족해야 하나 싶다.',
    slug: 'implementing-authentication-with-json-server',
    published: true,
    comments: true,
    layout: 'post',
    photos: [],
    link: '',
    _id: 'clcytfa4s00aftaww0wf8086s',
    content: '<p>최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에 있어\n' +
      '시도해 봤던 방법을 기록으로 남겨본다. (JSON server는 사용할 줄 안다는 가정하에서 포스팅한다.)</p>\n' +
      '<p>내 경우엔 mock API 구현에 편의를 위해 <a href="https://github.com/typicode/json-server">JSON server</a>를\n' +
      '사용해 왔는데, 역시 이를 베이스로 하고 JWT 관련 패키지를 추가하여 구현을 시도해봤다.</p>\n' +
      '<h2 id="추가-한-auth-관련-패키지"><a href="#추가-한-auth-관련-패키지" class="headerlink" title="추가 한 auth 관련 패키지"></a>추가 한 auth 관련 패키지</h2><ul>\n' +
      '<li><p><a href="https://github.com/jeremyben/json-server-auth">json-server-auth</a></p>\n' +
      '<p>JSON server용으로 만들어진 JWT 인증 미들웨어다.\n' +
      '다른 몇 가지 패키지들을 찾아보고 가장 간편하게 구축 가능하고 문서화가 잘 되어 있는 녀석을\n' +
      '찾다보니 이 녀석으로 정착했다.</p>\n' +
      '</li>\n' +
      '<li><p><a href="https://www.npmjs.com/package/jsonwebtoken">jsonwebtoken</a></p>\n' +
      '<p>패키지 이름 그대로 JWT의 구현체인데, JWT verifier가 필요해서 가져왔다 &#x3D; _&#x3D;a</p>\n' +
      '</li>\n' +
      '<li><p><a href="https://github.com/expressjs/cors">cors</a></p>\n' +
      '<p>CORS 관련 설정을 위한 Express용 미들웨어로, HEADER를 조작하게 되면 pre-flight 요청을\n' +
      '처리해야 하는데 여기서 CORS 문제가 발생되기 때문에 이를 해결하기 위해서 설치 했다.</p>\n' +
      '</li>\n' +
      '</ul>\n' +
      '<h2 id="기본-설정"><a href="#기본-설정" class="headerlink" title="기본 설정"></a>기본 설정</h2><p>사실 json-server-auth가 웬만한 것들은 알아서 처리해주고 있기 때문에 특별히 할 것은 없다.</p>\n' +
      '<p>해당 매뉴얼을 참고해서 미리 정의 된 API 이름을 그대로 가져다 쓰기만 하면 JWT 발급부터 오류까지\n' +
      '알아서 처리해 준다. (참고로 이 토큰의 유효시간은 1시간이다)</p>\n' +
      '<p>따라서, 해야 할 일이라고는 미리 정의 된 API 외 다른 이름을 쓰고 싶을 경우의 router rewrite,\n' +
      'CORS 설정 정도면 충분하다.</p>\n' +
      '<p>설정 방법은 <a href="https://expressjs.com/en/resources/middleware/cors.html">express 공식문서</a>를\n' +
      '참고했다.</p>\n' +
      '<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> server <span class="token operator">=</span> jsonServer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '<span class="token keyword">const</span> auth <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"json-server-auth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '<span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '\n' +
      '<span class="token comment">/**\n' +
      ' * 과제에선 GET, POST, DELETE만 필요했기 때문에\n' +
      ' * 3가지 method만 작성했고,\n' +
      ' * 어차피 mock api이고 local에서 구동되는 거라\n' +
      ' * origin을 all(*)로 설정했다.\n' +
      ' */</span>\n' +
      'server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n' +
      '  <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n' +
      '    <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>\n' +
      '    <span class="token literal-property property">preflightContinue</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n' +
      '    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token string">"GET,POST,DELETE"</span>\n' +
      '  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n' +
      '<span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '<span class="token comment">/**\n' +
      ' * 모든 router에 대해 preflight 요청 활성화\n' +
      ' */</span>\n' +
      'server<span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '\n' +
      '<span class="token comment">// 중략</span>\n' +
      '\n' +
      'server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>단지 이 기본 설정만으로 회원 가입, 로그인 시 JWT 발급이 가능하고 이후 클라이언트에서\n' +
      'API 호출 시 Authorization Header에 Bearer Token을 담아 던지기만 하면 된다.</p>\n' +
      '<h2 id="users-x2F-me-구현"><a href="#users-x2F-me-구현" class="headerlink" title="users&#x2F;me 구현"></a>users&#x2F;me 구현</h2><p>그런데, json-server-auth는 회원 가입 혹은 로그인 시 accessToken만을 응답으로 내려주기\n' +
      '때문에 사용자를 식별할 방법이 없다.</p>\n' +
      '<p>아쉽게도 이 부분은 직접 구현을 해야 하는 부분으로 보였다.\n' +
      '역시 대부분 생각하는게 비슷한지 동일한 니즈를 가진 유저의 질문이\n' +
      '<a href="https://github.com/jeremyben/json-server-auth/issues/12">issue</a>로 등록되어 있었고\n' +
      '해당 issue를 참고해서 별도로 구현했다.</p>\n' +
      '<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**\n' +
      ' * JWT 검증을 위해 jsonwebtoken 모듈을 가져왔고,\n' +
      ' * JWT의 비밀키는 json-server-auth에서 가지고 있다\n' +
      ' */</span>\n' +
      '<span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"jsonwebtoken"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '<span class="token keyword">const</span> <span class="token constant">JWT_SECRET_KEY</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"json-server-auth/dist/constants"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token constant">JWT_SECRET_KEY</span><span class="token punctuation">;</span>\n' +
      '\n' +
      '<span class="token comment">// 중략</span>\n' +
      '\n' +
      'server<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/users/me</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> auth<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n' +
      '  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> authorization <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>\n' +
      '  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>authorization<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
      '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Missing authorization header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '    <span class="token keyword">return</span><span class="token punctuation">;</span>\n' +
      '  <span class="token punctuation">&#125;</span>\n' +
      '  <span class="token keyword">const</span> <span class="token punctuation">[</span>scheme<span class="token punctuation">,</span> token<span class="token punctuation">]</span> <span class="token operator">=</span> authorization<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '  <span class="token keyword">if</span> <span class="token punctuation">(</span>scheme <span class="token operator">!==</span> <span class="token string">"Bearer"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
      '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Incorrect authorization scheme"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '    <span class="token keyword">return</span><span class="token punctuation">;</span>\n' +
      '  <span class="token punctuation">&#125;</span>\n' +
      '  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
      '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Missing token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '    <span class="token keyword">return</span><span class="token punctuation'... 4794 more characters,
    site: { data: [Object] },
    excerpt: '',
    more: '<p>최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에 있어\n' +
      '시도해 봤던 방법을 기록으로 남겨본다. (JSON server는 사용할 줄 안다는 가정하에서 포스팅한다.)</p>\n' +
      '<p>내 경우엔 mock API 구현에 편의를 위해 <a href="https://github.com/typicode/json-server">JSON server</a>를\n' +
      '사용해 왔는데, 역시 이를 베이스로 하고 JWT 관련 패키지를 추가하여 구현을 시도해봤다.</p>\n' +
      '<h2 id="추가-한-auth-관련-패키지"><a href="#추가-한-auth-관련-패키지" class="headerlink" title="추가 한 auth 관련 패키지"></a>추가 한 auth 관련 패키지</h2><ul>\n' +
      '<li><p><a href="https://github.com/jeremyben/json-server-auth">json-server-auth</a></p>\n' +
      '<p>JSON server용으로 만들어진 JWT 인증 미들웨어다.\n' +
      '다른 몇 가지 패키지들을 찾아보고 가장 간편하게 구축 가능하고 문서화가 잘 되어 있는 녀석을\n' +
      '찾다보니 이 녀석으로 정착했다.</p>\n' +
      '</li>\n' +
      '<li><p><a href="https://www.npmjs.com/package/jsonwebtoken">jsonwebtoken</a></p>\n' +
      '<p>패키지 이름 그대로 JWT의 구현체인데, JWT verifier가 필요해서 가져왔다 &#x3D; _&#x3D;a</p>\n' +
      '</li>\n' +
      '<li><p><a href="https://github.com/expressjs/cors">cors</a></p>\n' +
      '<p>CORS 관련 설정을 위한 Express용 미들웨어로, HEADER를 조작하게 되면 pre-flight 요청을\n' +
      '처리해야 하는데 여기서 CORS 문제가 발생되기 때문에 이를 해결하기 위해서 설치 했다.</p>\n' +
      '</li>\n' +
      '</ul>\n' +
      '<h2 id="기본-설정"><a href="#기본-설정" class="headerlink" title="기본 설정"></a>기본 설정</h2><p>사실 json-server-auth가 웬만한 것들은 알아서 처리해주고 있기 때문에 특별히 할 것은 없다.</p>\n' +
      '<p>해당 매뉴얼을 참고해서 미리 정의 된 API 이름을 그대로 가져다 쓰기만 하면 JWT 발급부터 오류까지\n' +
      '알아서 처리해 준다. (참고로 이 토큰의 유효시간은 1시간이다)</p>\n' +
      '<p>따라서, 해야 할 일이라고는 미리 정의 된 API 외 다른 이름을 쓰고 싶을 경우의 router rewrite,\n' +
      'CORS 설정 정도면 충분하다.</p>\n' +
      '<p>설정 방법은 <a href="https://expressjs.com/en/resources/middleware/cors.html">express 공식문서</a>를\n' +
      '참고했다.</p>\n' +
      '<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> server <span class="token operator">=</span> jsonServer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '<span class="token keyword">const</span> auth <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"json-server-auth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '<span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '\n' +
      '<span class="token comment">/**\n' +
      ' * 과제에선 GET, POST, DELETE만 필요했기 때문에\n' +
      ' * 3가지 method만 작성했고,\n' +
      ' * 어차피 mock api이고 local에서 구동되는 거라\n' +
      ' * origin을 all(*)로 설정했다.\n' +
      ' */</span>\n' +
      'server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n' +
      '  <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n' +
      '    <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>\n' +
      '    <span class="token literal-property property">preflightContinue</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n' +
      '    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token string">"GET,POST,DELETE"</span>\n' +
      '  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n' +
      '<span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '<span class="token comment">/**\n' +
      ' * 모든 router에 대해 preflight 요청 활성화\n' +
      ' */</span>\n' +
      'server<span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '\n' +
      '<span class="token comment">// 중략</span>\n' +
      '\n' +
      'server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>단지 이 기본 설정만으로 회원 가입, 로그인 시 JWT 발급이 가능하고 이후 클라이언트에서\n' +
      'API 호출 시 Authorization Header에 Bearer Token을 담아 던지기만 하면 된다.</p>\n' +
      '<h2 id="users-x2F-me-구현"><a href="#users-x2F-me-구현" class="headerlink" title="users&#x2F;me 구현"></a>users&#x2F;me 구현</h2><p>그런데, json-server-auth는 회원 가입 혹은 로그인 시 accessToken만을 응답으로 내려주기\n' +
      '때문에 사용자를 식별할 방법이 없다.</p>\n' +
      '<p>아쉽게도 이 부분은 직접 구현을 해야 하는 부분으로 보였다.\n' +
      '역시 대부분 생각하는게 비슷한지 동일한 니즈를 가진 유저의 질문이\n' +
      '<a href="https://github.com/jeremyben/json-server-auth/issues/12">issue</a>로 등록되어 있었고\n' +
      '해당 issue를 참고해서 별도로 구현했다.</p>\n' +
      '<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**\n' +
      ' * JWT 검증을 위해 jsonwebtoken 모듈을 가져왔고,\n' +
      ' * JWT의 비밀키는 json-server-auth에서 가지고 있다\n' +
      ' */</span>\n' +
      '<span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"jsonwebtoken"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '<span class="token keyword">const</span> <span class="token constant">JWT_SECRET_KEY</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"json-server-auth/dist/constants"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token constant">JWT_SECRET_KEY</span><span class="token punctuation">;</span>\n' +
      '\n' +
      '<span class="token comment">// 중략</span>\n' +
      '\n' +
      'server<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/users/me</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> auth<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n' +
      '  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> authorization <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>\n' +
      '  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>authorization<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
      '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Missing authorization header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '    <span class="token keyword">return</span><span class="token punctuation">;</span>\n' +
      '  <span class="token punctuation">&#125;</span>\n' +
      '  <span class="token keyword">const</span> <span class="token punctuation">[</span>scheme<span class="token punctuation">,</span> token<span class="token punctuation">]</span> <span class="token operator">=</span> authorization<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '  <span class="token keyword">if</span> <span class="token punctuation">(</span>scheme <span class="token operator">!==</span> <span class="token string">"Bearer"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
      '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Incorrect authorization scheme"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '    <span class="token keyword">return</span><span class="token punctuation">;</span>\n' +
      '  <span class="token punctuation">&#125;</span>\n' +
      '  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
      '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Missing token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '    <span class="token keyword">return</span><span class="token punctuation'... 4794 more characters,
    path: [Getter],
    permalink: [Getter],
    full_source: [Getter],
    asset_dir: [Getter],
    tags: [Getter],
    categories: [Getter],
    prev: [Circular *1],
    next: _Document {
      title: '개발환경 WSL2 + zsh로 갈아타기',
      thumbnail: '/upload/2021/thumbs/wsl2-zsh-on-windws-10.jpg',
      hero: '/upload/2021/wsl2-zsh-on-windws-10.jpg',
      style: '.hero {\n' +
        '  &-wrapper {\n' +
        '    text-shadow:\n' +
        '      1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
        '      -1px -1px 2em rgba(20, 12, 24, 1);\n' +
        '  }\n' +
        '  &__image {\n' +
        '    opacity: 0.35\n' +
        '  }\n' +
        '}\n',
      seo: [Object],
      date: Moment<2021-01-28T00:32:57+09:00>,
      _content: '\n' +
        '\n' +
        '## 기존 환경\n' +
        '\n' +
        '얼마 전까지만 해도 VS Code의 터미널을 git bash로 (이하 bash) 설정해서 5년 가까이 bash\n' +
        '상에서 CLI를 사용해왔다. (아! 참고로 나는 Windows 10 사용자다. 맥이었으면 진즉부터\n' +
        'terminal을 썼겠지...)\n' +
        '\n' +
        '이 블로그 테마를 제작 후에 몇 번 mac이나 linux 환경에서 테마 설치 오류에 대한 이슈가\n' +
        '올라왔었고, 최근에 어떤 사이트를 번역하는데 해당 사이트 빌드가 bash 상에서는 정상적으로\n' +
        '이루어지지 않아 확인해보니 linux 상에서는 올바르게 빌드 되어 linux 환경에 대한 필요가\n' +
        '생겨났다.\n' +
        '\n' +
        '결국 미루고 미루던 WSL 사용을 시도하기로 하고 반 년 정도를 이 방식으로 써 본 것 같다.\n' +
        '(미루고 미룬 이유는 Windows를 못믿어서... = _=a 항상 예기치 않은 오류를 만들어주는\n' +
        ' Windows ... )\n' +
        '\n' +
        '무튼, 반 년 정도의 사용 경험에서는 크게 문제를 느끼지 못해서 이제 본격적으로 WSL + zsh\n' +
        '환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가 설정을 차후에 필요할까 기록으로\n' +
        '남겨둔다. (안녕 bash~ 오래 동안 고마웠어 ㅠ)\n' +
        '\n' +
        '## WSL 1 or WSL 2 ?\n' +
        '\n' +
        'WSL을 쓰기로 한 시점에 결정해야 할 것 중 하나는 일단 WSL 1을 쓸 것인가 혹은 WSL 2를 쓸\n' +
        '것인가 같다. 물론, WSL 2 구성까지 해 두면 언제든지 원하는 시점에 WSL 1과 2를 오갈 수 있고\n' +
        '따라서 WSL 2 구성 방법으로 포스팅 해두기는 했다.\n' +
        '\n' +
        '내 경우엔 2가지를 다 써봤는데, 써보고 난 이후에 드는 생각은 일단 내 경우에는 WSL 1을 쓰는\n' +
        '게 아직은 낫지 않을까 싶다. MS에서는 WSL 2가 더 빠르고 전체 리눅스 커널 사용, 시스템 호출\n' +
        '호환성 등을 장점으로 들고 있지만 생각보다 만나게 되는 장애물이 많았다.\n' +
        '\n' +
        '일단 몇 가지 선택에 필요한 기준에 따라 나누어 보면,\n' +
        '기존의 Windows 시스템에서 이미 프로젝트가 구성되어 있고 (Node든 뭐 다른 것이든) 여기에\n' +
        'WSL을 통합하는 거라면 WSL 1을 추천한다.\n' +
        '반면 개발 환경을 새로 설정 하는 상황이나 새로 설정하는 것을 감안 할 생각이고, 리눅스 시스템에\n' +
        '거부감이 없다면 WSL 2가 나을 것 같다.\n' +
        '\n' +
        '이렇게 나눈 이유는, WSL 2에서는\n' +
        '\n' +
        '- Windows 파일 시스템(`/mnt/`)으로의 접근이 체감 될 만큼 느리다.\n' +
        '- Windows 파일 시스템에 이미 구성된 프로젝트의 경우, 파일 변경을 감지 하지 못하는 듯 하다.\n' +
        '  (Node의 watch 기능이 정상적으로 동작해주지 못한다. 파일 시스템이 다르니 당연한 것 같기는\n' +
        '  한데 처음에 무척 당황했다.)\n' +
        '- Windows에서 VS Code를 열고 터미널을 WSL로 사용할 때, Windows에서 연 브라우저가\n' +
        '  localhost에 접근이 잘 되지 않는다.\n' +
        '\n' +
        '  Windows 전원 옵션에 "빨리 켜기 기능"을 꺼두면 localhost 포워딩이 된다고 하는데, 실제로\n' +
        '  해봤을 때 localhost가 두 개의 다른 포트로 열렸을 때 하나만 되더라...\n' +
        '\n' +
        '내 경우는 이미 Windows 시스템을 기반으로 프로젝트들이 구성되어 있었고 WSL을 통합 해보는 거라\n' +
        '위의 문제들을 겪고 말았다 ㅋ\n' +
        '\n' +
        '물론 내 케이스가 아니라면 WSL 2가 더 나을 것 같기는 하다.\n' +
        '\n' +
        '## Windows Terminal 설치\n' +
        '\n' +
        'Windows에는 기본적으로 terminal이 존재하지 않기 때문에, windows terminal을\n' +
        '[Store](https://www.microsoft.com/ko-kr/p/windows-terminal/9n0dx20hk701)에서\n' +
        '별도로 설치해야 한다.\n' +
        '\n' +
        '![Windows Terminal on Store](/upload/2021/windows-store-terminal.jpg)\n' +
        '\n' +
        '## WSL 활성화\n' +
        '\n' +
        '자세한 내용은 [공식문서](https://docs.microsoft.com/ko-kr/windows/wsl/install-win10)를\n' +
        '참고하자.\n' +
        '\n' +
        "터미널(혹은 파워쉘)을 관리자 권한으로 실행 후, 다음을 차례대로 실행 하면된다. (물론 '제어판\n" +
        "&gt; 프로그램 &gt; 프로그램 및 기능 &gt; Windows 기능 켜기/끄기' 에서 GUI로 해도 된다.)\n" +
        '\n' +
        '```jsx\n' +
        'dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n' +
        'dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n' +
        '```\n' +
        '\n' +
        '실행이 종료 되었으면 "재시작"하자.\n' +
        '\n' +
        '일시적인 상황이었는지는 모르겠지만, 최초 이 설정을 할 때 재시작하지 않고 컴퓨터를 종료했다가\n' +
        '다음 날 켜서 설정을 계속 이어가려고 했더니 안되더라 = _=a\n' +
        '\n' +
        '### WSL 2 업데이트\n' +
        '\n' +
        'WSL 2를 사용하려면 적어도 Windows 10 May 2020 Update가 설치되어 있어야 한다. Windows\n' +
        '10 May 2020 Update에 실제 리눅스 커널을 사용하는 WSL 2가 기본 탑재 되었다고 한다.\n' +
        '그런데 좀 이상한게, Windows 10 최신 업데이트를 쓰고 있음에도 불구하고 WSL 2를 사용하려면\n' +
        '별도 패키지를 다운 받아서 설치하고, 추가 설정을 해야 한다. (아니 WSL 2를 기본으로 탑재했으면\n' +
        'WSL 2를 기본으로 사용할 수 있어야지 왜 WSL 1을 기본으로 잡아주고 있고... WSL 2를 쓰기 위해\n' +
        '추가 설치를 왜 해야 하는가...? )\n' +
        '\n' +
        '[MS WSL 설명서 페이지](https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package)로\n' +
        '가서 Linux 커널 업데이트 패키지 다운로드 후 설치한다.\n' +
        '\n' +
        '![Linux 커널 업데이트 설치 화면](/upload/2021/wsl-update.jpg)\n' +
        '\n' +
        '### WSL 기본 버전을 2로 설정\n' +
        '\n' +
        '터미널(혹은 파워쉘)에서 다음 명령을 시행한다.\n' +
        '\n' +
        '이걸 먼저 실행해야 이후로 설치되는 리눅스 시스템이 WSL 2를 기반으로 한다.\n' +
        '\n' +
        '```powershell\n' +
        'wsl --set-default-version 2\n' +
        '```\n' +
        '\n' +
        '## Ubuntu  설치\n' +
        '\n' +
        '다시 [Store](https://www.microsoft.com/ko-kr/store/apps/windows)에서 Ubuntu를\n' +
        '검색해서 설치 한다. (물론 우분투 말고 다른 리눅스 프로덕트를 선택해도 된다. 단지 내가\n' +
        'Ubuntu가 익숙해서 그렇다~~고 하지만 어차피 터미널인데?~~)\n' +
        '\n' +
        '![Windows Store Ubuntu 검색 결과](/upload/2021/windows-store-ubuntu.jpg)\n' +
        '\n' +
        '하지만 이 놈은 어디까지나 "배포" 패키지이므로 설치 후 최초 실행해야 우분투 설치가 진행된다.\n' +
        '시간이 조금 걸리니 기다리자.\n' +
        '\n' +
        '설치가 완료되면 다음과 같이 설치가 완료되었다는 메세지와 함께 웰컴 투 우분투가 노출된다\n' +
        '\n' +
        '![우분투 설치 완료 화면](/upload/2021/complete-install-ubuntu.jpg)\n' +
        '\n' +
        '### 터미널 기본 프로필 Ubuntu로 설정\n' +
        '\n' +
        '터미널에서도 Ubuntu가 기본으로 실행되도록 터미널 기본 프로필을 WSL로 설정한다.\n' +
        '\n' +
        '터미널에서 설정으로 들어가면 관련 json 파일이 열리는데, 여기서 `defaultProfile` 값을\n' +
        '`profiles.list` 에서 Ubuntu 것의 `guid` 값으로 수정하기만 하면 된다.\n' +
        '\n' +
        '```json|data-line="2,11"\n' +
        '{\n' +
        '  "defaultProfile": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
        '  ...\n' +
        '  "profiles":\n' +
        '    {\n' +
        '      ...\n' +
        '      "list":\n' +
        '      [\n' +
        '        ...\n' +
        '        {\n' +
        '          "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
        '          "hidden": false,\n' +
        '          "name": "Ubuntu",\n' +
        '          "source": "Windows.Terminal.Wsl",\n' +
        '          "colorScheme": "Dark+",\n' +
        '          "fontFace": "Hack"\n' +
        '        }\n' +
        '      ]\n' +
        '    },\n' +
        '}\n' +
        '```\n' +
        '\n' +
        '## Git, zsh 설치\n' +
        '\n' +
        'Ubuntu(WSL)를 실행하고, git과 zsh부터 설치한다.\n' +
        '\n' +
        '일단 패키지 레파지토리 인덱스부터 업데이트 하고\n' +
        '\n' +
        '```bash\n' +
        'sudo apt update\n' +
        '```\n' +
        '\n' +
        'git과 zsh을 설치\n' +
        '\n' +
        '```bash\n' +
        'sudo apt install git zsh\n' +
        '```\n' +
        '\n' +
        '## Oh my zsh 설치 및 구성\n' +
        '\n' +
        '### 설치\n' +
        '\n' +
        '터미널에서 다음 명령을 실행하기만 하면 된다.\n' +
        '\n' +
        '```bash\n' +
        'sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"\n' +
        '```\n' +
        '\n' +
        '설치가 완료되면 다음과 같은 메세지를 볼 수 있다.\n' +
        '\n' +
        '![oh my zsh 설치 완료 화면](/upload/2021/complete-install-oh-my-zsh.jpg)\n' +
        '\n' +
        '### 테마 구성\n' +
        '\n' +
        '역시 처음 설치했드면 꾸미기가 먼저다!!! 테마부터 변경한다.\n' +
        '\n' +
        '테마는 [ohmyzsh github wiki](https://github.com/ohmyzsh/ohmyzsh/wiki/Themes)에서\n' +
        '마음에 드는 걸 선택하면 될 것 같다. 내 경우엔 많이 언급되는 `agnoster`를 쓰기로...\n' +
        '\n' +
        '`~/.zshrc` 파일을 열어 `ZSH_THEME` 항목의 값을 변경하기만 하면 된다.\n' +
        '\n' +
        '```bash\n' +
        'vi ~/.zshrc\n' +
        '```\n' +
        '\n' +
        '```ini\n' +
        'ZSH_THEME="agnoster"\n' +
        '```\n' +
        '\n' +
        '참고로 `agnoster` 테마를 쓰려면 [powerline font](https://github.com/powerline/fonts)를\n' +
        '써야 하는데, 내 경우엔 이미 Hack 폰트를 쓰고 있어서 별도로 설치하지 않고 터미널 설정에서\n' +
        '`profile.list`의 해당 항목에 fontFamily 값만 추가하여 해결했다.\n' +
        '\n' +
        '```json|data-line="6"\n' +
        '{\n' +
        '  "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
        '  "hidden": false,\n' +
        '  "name": "Ubuntu",\n' +
        '  "source": "Windows.Terminal.Wsl",\n' +
        '  "fontFace": "Hack"\n' +
        '}\n' +
        '```\n' +
        '\n' +
        '### 터미널 color scheme 구성\n' +
        '\n' +
        '편한 눈을 위해(?) 각 컬러에 대한 상세 값을 설정할 수 있고, 개별적으로 설정이 어렵다면 이미\n' +
        '구성된 scheme들이 [windowsterminalthemes](https://windowsterminalthemes.dev/)에서\n' +
        '제공되고 있으니 이를 참고해서 구성도 가능하다.\n' +
        '\n' +
        '설정은 마찬가지로 터미널 설정에서 이루어지고, `schemes` 항목에 color scheme을 추가하고,\n' +
        '`profiles.list`의 해당 항목에 `colorScheme` 값을 추가 한 color scheme의 `name`\n' +
        '값으로 설정하면 된다.\n' +
        '\n' +
        '```json|data-line="10,16"\n' +
        '"profiles" :{\n' +
        '  "list": [\n' +
        '    ...,\n' +
        '    {\n' +
        '      "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
        '      "hidden": false,\n' +
        '      "name": "Ubuntu",\n' +
        '      "source": "Windows.Terminal.Wsl",\n' +
        '      "fontFace": "Hack",\n' +
        '      "colorScheme": "Dark+"\n' +
        '    }\n' +
        '  ],\n' +
        '},\n' +
        '"schemes": [\n' +
        '  {\n' +
        '    "name": "Dark+",\n' +
        '    "black": "#000000",\n' +
        '    ...\n' +
        '    "background": "#0e0e0e",\n' +
        '    "foreground": "#cccccc"\n' +
        '  }\n' +
        '],\n' +
        '```\n' +
        '\n' +
        '## zsh plugins 설치\n' +
        '\n' +
        '조금 더 편한 zsh 사용을 위해 플러그인을 설치한다.\n' +
        '\n' +
        '### [zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions)\n' +
        '\n' +
        '이 플러그인은 이전에 입력했던 명령을 기반으로 명령을 타이핑 할 때마다 자동 완성을 제공하고\n' +
        '방향키로 해당 자동 완성을 사용할 수 있게 해준다.\n' +
        '\n' +
        '다음 명령으로 설치하고,\n' +
        '\n' +
        '```bash\n' +
        'git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n' +
        '```\n' +
        '\n' +
        '`~/.zshrc` 파일을 열어 `plugins` 항목에 `zsh-autosuggestions`를 추가해준다.\n' +
        '\n' +
        '```ini\n' +
        'plugins=(git zsh-autosuggestions)\n' +
        '```\n' +
        '\n' +
        '### [syntax highlighting](https://github.com/zsh-users/zsh-syntax-highlighting/)\n' +
        '\n' +
        '이 플러그인은 명령어에 구문 강조를 적용해준다.\n' +
        '구문 강조가 적용되면 좋은 것 중 하나는 특정 명령을 사용할 수 있으면 녹색으로, 설치 되지 않음\n' +
        '등의 이유로 알 수 없는 명령이면 빨간색으로 나타난다.\n' +
        '\n' +
        '다음 명령으로 설치하고,\n' +
        '\n' +
        '```bash\n' +
        'git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n' +
        '```\n' +
        '\n' +
        '`~/.zshrc` 파일을 열어 `plugins` 항목에 `zsh-syntax-highlighting`을 추가해준다.\n' +
        '\n' +
        '```ini\n' +
        'plugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n' +
        '```\n' +
        '\n' +
        '## 터미널 프롬프트 변경\n' +
        '\n' +
        '터미널을 열면 다음 화면처럼 username@hostname 형태로 프롬프트가 나오는데, VS Code에서\n' +
        '터미널을 열고 작업하면 이 프롬프트가 차지하는 공간이 적지 않아 보기 불편하다.\n' +
        '\n' +
        '다행히 이것마저도 변경하거나 감출 수 있다!!\n' +
        '\n' +
        '![기본으로는 user name과 host name이 모두 노출된다](/upload/2021/terminal-prompt-full-name.jpg)\n' +
        '\n' +
        '`~/.zshrc` 파일을 열고 다음을 추가하면\n' +
        '\n' +
        '```ini\n' +
        'prompt_context() {}\n' +
        '```\n' +
        '\n' +
        '프롬프트가 사라진다. 두둔!!\n' +
        '\n' +
        '![프롬프가 사라지고 경로만 남았다](/upload/2021/terminal-prompt-hide-name.jpg)\n' +
        '\n' +
        '참고로 다음과 같이 수정하면 user name과 경로만 노출된다.\n' +
        '\n' +
        '```ini\n' +
        'prompt_context() {\n' +
        '    if [[ "$USER" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then\n' +
        '      prompt_segment black default "%(!.%{%F{yellow}%}.)$USER"\n' +
        '    fi\n' +
        '}\n' +
        '```\n' +
        '\n' +
        '### Named directory 구성\n' +
        '\n' +
        '하지만 아직 `/mnt/c/Users/{user name}/` 이 거슬린다.\n' +
        '심지어 이게 디렉토리 깊이가 깊어지면 이 또한 너무 길어진다. 하여 이 마저도 줄여보기로 한다.\n' +
        '\n' +
        '역시 마찬가지로 `~/.zshrc` 파일을 열어 다음을 참고하여 환경에 맞게 추가한다.\n' +
        '\n' +
        '내 경우엔 `c:\\Users\\mulder21c\\Project`와 `c:\\Users\\mulder21c\\Workspace`이 주 사용\n' +
        '디렉토리라 이 디렉토리들에 대한 경로를 변경하기로 했다.\n' +
        '\n' +
        '```ini\n' +
        'hash -d mulder21c=/mnt/c/Users/mulder21c\n' +
        'hash -d Project=/mnt/c/Users/mulder21c/Project\n' +
        'hash -d Workspace=/mnt/c/Users/mulder21c/Workspace\n' +
        '```\n' +
        '\n' +
        '터미널을 다시 열어보면 다음과 같이 지정한 이름으로 표시된다. (단 앞에 `~`이 붙는다.)\n' +
        '\n' +
        '![named directory를 적용하고 경로가 한결 간결해졌다](/upload/2021/terminal-named-directory.jpg)\n' +
        '\n' +
        '이제야 터미널이 좀 간결해진 것 같다.\n' +
        '\n' +
        '## nvm 설치\n' +
        '\n' +
        '마지막으로 node.js 환경을 위해 nvm을 설치한다.\n' +
        '\n' +
        '터미널에서 다음 명령을 주면 자동으로 설치가 진행된다.\n' +
        '\n' +
        '```bash\n' +
        'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n' +
        '```\n' +
        '\n' +
        '참고로, Windows에 nvm for windows가 설치되어 있다면 충돌로 설치가 진행되지 않는다. 내\n' +
        '경우엔 더 이상 Windows 시스템에서 node를 실행할 생각이 없어서 과감히 제거하고 설치했다.\n' +
        '\n' +
        '설치가 완료되면 나타난 메세지 중에 다음과 같은 메세지가 있다.\n' +
        '\n' +
        '```ini\n' +
        'export NVM_DIR="$HOME/.nvm"\n' +
        '[ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh"  # This loads nvm\n' +
        '[ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion\n' +
        '```\n' +
        '\n' +
        '이걸 복사해서 `~/.zshrc`에 추가해야 한다.\n' +
        '\n' +
        '이후 node 설치는 nvm을 이용하면 된다.\n' +
        '\n' +
        '### auto `nvm` use  설정\n' +
        '\n' +
        '마지막으로 아직 테스트 해보지는 않았지만, 최근 Node 10.x, Node 14.x, Node 15.x를 각\n' +
        '환경으로 하는 프로덕트를 왔다 갔다 하다가 Node 버전 문제로 node-sass가 오류를 내뱉는 상황을\n' +
        '자주 만나게 되었다. `nvm use` 하는 걸 까먹기도 했고 현재 프로덕트가 어느 버전에서 돌려야\n' +
        '하는지도 까먹기 일수였다 ;;;\n' +
        '\n' +
        '하여 구성하는 김에 `.nvmrc`를 이용해서 자동으로 `nvm use`가 적용되게 하는 설정을 추가했다.\n' +
        '\n' +
        '다음의 코드를 `~/.zshrc`에 추가하면되는데, 아직 테스트해보진 않아서 잘 되는지는 모르겠다 = _=a\n' +
        '뭐... stackoverflow에서 건져온 건데 추천이 많았으니 잘 되겠지...? /=ㅁ=/\n' +
        '\n' +
        '```ini\n' +
        '# place this after nvm initialization!\n' +
        'autoload -U add-zsh-hook\n' +
        'load-nvmrc() {\n' +
        '  local node_version="$(nvm version)"\n' +
        '  local nvmrc_path="$(nvm_find_nvmrc)"\n' +
        '\n' +
        '  if [ -n "$nvmrc_path" ]; then\n' +
        '    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")\n' +
        '\n' +
        '    if [ "$nvmrc_node_version" = "N/A" ]; then\n' +
        '      nvm install\n' +
        '    elif [ "$nvmrc_node_version" != "$node_version" ]; then\n' +
        '      nvm use\n' +
        '    fi\n' +
        '  elif [ "$node_version" != "$(nvm version default)" ]; then\n' +
        '    echo "Reverting to nvm default version"\n' +
        '    nvm use default\n' +
        '  fi\n' +
        '}\n' +
        'add-zsh-hook chpwd load-nvmrc\n' +
        'load-nvmrc\n' +
        '```',
      source: '_posts/2021-01-27-setting-up-wsl-2-dev-env-and-zsh-on-windws-10.md',
      raw: '---\n' +
        'title: 개발환경 WSL2 + zsh로 갈아타기\n' +
        'tags:\n' +
        '  - WSL 2\n' +
        '  - zsh\n' +
        '  - Windows 10\n' +
        '  - terminal\n' +
        '  - nvm\n' +
        'categories:\n' +
        '  - 개발노트\n' +
        '  - Front-End\n' +
        'thumbnail: /upload/2021/thumbs/wsl2-zsh-on-windws-10.jpg\n' +
        'hero: /upload/2021/wsl2-zsh-on-windws-10.jpg\n' +
        'style: |\n' +
        '  .hero {\n' +
        '    &-wrapper {\n' +
        '      text-shadow:\n' +
        '        1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
        '        -1px -1px 2em rgba(20, 12, 24, 1);\n' +
        '    }\n' +
        '    &__image {\n' +
        '      opacity: 0.35\n' +
        '    }\n' +
        '  }\n' +
        'seo:\n' +
        '  description: |\n' +
        '    본격적으로 WSL + zsh 환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가\n' +
        '    설정을 차후에 필요할까 기록으로 남겨둔다.\n' +
        '  image: /upload/2021/wsl2-zsh-on-windws-10.jpg\n' +
        'date: 2021-01-28 00:32:57\n' +
        '---\n' +
        '\n' +
        '\n' +
        '## 기존 환경\n' +
        '\n' +
        '얼마 전까지만 해도 VS Code의 터미널을 git bash로 (이하 bash) 설정해서 5년 가까이 bash\n' +
        '상에서 CLI를 사용해왔다. (아! 참고로 나는 Windows 10 사용자다. 맥이었으면 진즉부터\n' +
        'terminal을 썼겠지...)\n' +
        '\n' +
        '이 블로그 테마를 제작 후에 몇 번 mac이나 linux 환경에서 테마 설치 오류에 대한 이슈가\n' +
        '올라왔었고, 최근에 어떤 사이트를 번역하는데 해당 사이트 빌드가 bash 상에서는 정상적으로\n' +
        '이루어지지 않아 확인해보니 linux 상에서는 올바르게 빌드 되어 linux 환경에 대한 필요가\n' +
        '생겨났다.\n' +
        '\n' +
        '결국 미루고 미루던 WSL 사용을 시도하기로 하고 반 년 정도를 이 방식으로 써 본 것 같다.\n' +
        '(미루고 미룬 이유는 Windows를 못믿어서... = _=a 항상 예기치 않은 오류를 만들어주는\n' +
        ' Windows ... )\n' +
        '\n' +
        '무튼, 반 년 정도의 사용 경험에서는 크게 문제를 느끼지 못해서 이제 본격적으로 WSL + zsh\n' +
        '환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가 설정을 차후에 필요할까 기록으로\n' +
        '남겨둔다. (안녕 bash~ 오래 동안 고마웠어 ㅠ)\n' +
        '\n' +
        '## WSL 1 or WSL 2 ?\n' +
        '\n' +
        'WSL을 쓰기로 한 시점에 결정해야 할 것 중 하나는 일단 WSL 1을 쓸 것인가 혹은 WSL 2를 쓸\n' +
        '것인가 같다. 물론, WSL 2 구성까지 해 두면 언제든지 원하는 시점에 WSL 1과 2를 오갈 수 있고\n' +
        '따라서 WSL 2 구성 방법으로 포스팅 해두기는 했다.\n' +
        '\n' +
        '내 경우엔 2가지를 다 써봤는데, 써보고 난 이후에 드는 생각은 일단 내 경우에는 WSL 1을 쓰는\n' +
        '게 아직은 낫지 않을까 싶다. MS에서는 WSL 2가 더 빠르고 전체 리눅스 커널 사용, 시스템 호출\n' +
        '호환성 등을 장점으로 들고 있지만 생각보다 만나게 되는 장애물이 많았다.\n' +
        '\n' +
        '일단 몇 가지 선택에 필요한 기준에 따라 나누어 보면,\n' +
        '기존의 Windows 시스템에서 이미 프로젝트가 구성되어 있고 (Node든 뭐 다른 것이든) 여기에\n' +
        'WSL을 통합하는 거라면 WSL 1을 추천한다.\n' +
        '반면 개발 환경을 새로 설정 하는 상황이나 새로 설정하는 것을 감안 할 생각이고, 리눅스 시스템에\n' +
        '거부감이 없다면 WSL 2가 나을 것 같다.\n' +
        '\n' +
        '이렇게 나눈 이유는, WSL 2에서는\n' +
        '\n' +
        '- Windows 파일 시스템(`/mnt/`)으로의 접근이 체감 될 만큼 느리다.\n' +
        '- Windows 파일 시스템에 이미 구성된 프로젝트의 경우, 파일 변경을 감지 하지 못하는 듯 하다.\n' +
        '  (Node의 watch 기능이 정상적으로 동작해주지 못한다. 파일 시스템이 다르니 당연한 것 같기는\n' +
        '  한데 처음에 무척 당황했다.)\n' +
        '- Windows에서 VS Code를 열고 터미널을 WSL로 사용할 때, Windows에서 연 브라우저가\n' +
        '  localhost에 접근이 잘 되지 않는다.\n' +
        '\n' +
        '  Windows 전원 옵션에 "빨리 켜기 기능"을 꺼두면 localhost 포워딩이 된다고 하는데, 실제로\n' +
        '  해봤을 때 localhost가 두 개의 다른 포트로 열렸을 때 하나만 되더라...\n' +
        '\n' +
        '내 경우는 이미 Windows 시스템을 기반으로 프로젝트들이 구성되어 있었고 WSL을 통합 해보는 거라\n' +
        '위의 문제들을 겪고 말았다 ㅋ\n' +
        '\n' +
        '물론 내 케이스가 아니라면 WSL 2가 더 나을 것 같기는 하다.\n' +
        '\n' +
        '## Windows Terminal 설치\n' +
        '\n' +
        'Windows에는 기본적으로 terminal이 존재하지 않기 때문에, windows terminal을\n' +
        '[Store](https://www.microsoft.com/ko-kr/p/windows-terminal/9n0dx20hk701)에서\n' +
        '별도로 설치해야 한다.\n' +
        '\n' +
        '![Windows Terminal on Store](/upload/2021/windows-store-terminal.jpg)\n' +
        '\n' +
        '## WSL 활성화\n' +
        '\n' +
        '자세한 내용은 [공식문서](https://docs.microsoft.com/ko-kr/windows/wsl/install-win10)를\n' +
        '참고하자.\n' +
        '\n' +
        "터미널(혹은 파워쉘)을 관리자 권한으로 실행 후, 다음을 차례대로 실행 하면된다. (물론 '제어판\n" +
        "&gt; 프로그램 &gt; 프로그램 및 기능 &gt; Windows 기능 켜기/끄기' 에서 GUI로 해도 된다.)\n" +
        '\n' +
        '```jsx\n' +
        'dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n' +
        'dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n' +
        '```\n' +
        '\n' +
        '실행이 종료 되었으면 "재시작"하자.\n' +
        '\n' +
        '일시적인 상황이었는지는 모르겠지만, 최초 이 설정을 할 때 재시작하지 않고 컴퓨터를 종료했다가\n' +
        '다음 날 켜서 설정을 계속 이어가려고 했더니 안되더라 = _=a\n' +
        '\n' +
        '### WSL 2 업데이트\n' +
        '\n' +
        'WSL 2를 사용하려면 적어도 Windows 10 May 2020 Update가 설치되어 있어야 한다. Windows\n' +
        '10 May 2020 Update에 실제 리눅스 커널을 사용하는 WSL 2가 기본 탑재 되었다고 한다.\n' +
        '그런데 좀 이상한게, Windows 10 최신 업데이트를 쓰고 있음에도 불구하고 WSL 2를 사용하려면\n' +
        '별도 패키지를 다운 받아서 설치하고, 추가 설정을 해야 한다. (아니 WSL 2를 기본으로 탑재했으면\n' +
        'WSL 2를 기본으로 사용할 수 있어야지 왜 WSL 1을 기본으로 잡아주고 있고... WSL 2를 쓰기 위해\n' +
        '추가 설치를 왜 해야 하는가...? )\n' +
        '\n' +
        '[MS WSL 설명서 페이지](https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package)로\n' +
        '가서 Linux 커널 업데이트 패키지 다운로드 후 설치한다.\n' +
        '\n' +
        '![Linux 커널 업데이트 설치 화면](/upload/2021/wsl-update.jpg)\n' +
        '\n' +
        '### WSL 기본 버전을 2로 설정\n' +
        '\n' +
        '터미널(혹은 파워쉘)에서 다음 명령을 시행한다.\n' +
        '\n' +
        '이걸 먼저 실행해야 이후로 설치되는 리눅스 시스템이 WSL 2를 기반으로 한다.\n' +
        '\n' +
        '```powershell\n' +
        'wsl --set-default-version 2\n' +
        '```\n' +
        '\n' +
        '## Ubuntu  설치\n' +
        '\n' +
        '다시 [Store](https://www.microsoft.com/ko-kr/store/apps/windows)에서 Ubuntu를\n' +
        '검색해서 설치 한다. (물론 우분투 말고 다른 리눅스 프로덕트를 선택해도 된다. 단지 내가\n' +
        'Ubuntu가 익숙해서 그렇다~~고 하지만 어차피 터미널인데?~~)\n' +
        '\n' +
        '![Windows Store Ubuntu 검색 결과](/upload/2021/windows-store-ubuntu.jpg)\n' +
        '\n' +
        '하지만 이 놈은 어디까지나 "배포" 패키지이므로 설치 후 최초 실행해야 우분투 설치가 진행된다.\n' +
        '시간이 조금 걸리니 기다리자.\n' +
        '\n' +
        '설치가 완료되면 다음과 같이 설치가 완료되었다는 메세지와 함께 웰컴 투 우분투가 노출된다\n' +
        '\n' +
        '![우분투 설치 완료 화면](/upload/2021/complete-install-ubuntu.jpg)\n' +
        '\n' +
        '### 터미널 기본 프로필 Ubuntu로 설정\n' +
        '\n' +
        '터미널에서도 Ubuntu가 기본으로 실행되도록 터미널 기본 프로필을 WSL로 설정한다.\n' +
        '\n' +
        '터미널에서 설정으로 들어가면 관련 json 파일이 열리는데, 여기서 `defaultProfile` 값을\n' +
        '`profiles.list` 에서 Ubuntu 것의 `guid` 값으로 수정하기만 하면 된다.\n' +
        '\n' +
        '```json|data-line="2,11"\n' +
        '{\n' +
        '  "defaultProfile": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
        '  ...\n' +
        '  "profiles":\n' +
        '    {\n' +
        '      ...\n' +
        '      "list":\n' +
        '      [\n' +
        '        ...\n' +
        '        {\n' +
        '          "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
        '          "hidden": false,\n' +
        '          "name": "Ubuntu",\n' +
        '          "source": "Windows.Terminal.Wsl",\n' +
        '          "colorScheme": "Dark+",\n' +
        '          "fontFace": "Hack"\n' +
        '        }\n' +
        '      ]\n' +
        '    },\n' +
        '}\n' +
        '```\n' +
        '\n' +
        '## Git, zsh 설치\n' +
        '\n' +
        'Ubuntu(WSL)를 실행하고, git과 zsh부터 설치한다.\n' +
        '\n' +
        '일단 패키지 레파지토리 인덱스부터 업데이트 하고\n' +
        '\n' +
        '```bash\n' +
        'sudo apt update\n' +
        '```\n' +
        '\n' +
        'git과 zsh을 설치\n' +
        '\n' +
        '```bash\n' +
        'sudo apt install git zsh\n' +
        '```\n' +
        '\n' +
        '## Oh my zsh 설치 및 구성\n' +
        '\n' +
        '### 설치\n' +
        '\n' +
        '터미널에서 다음 명령을 실행하기만 하면 된다.\n' +
        '\n' +
        '```bash\n' +
        'sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"\n' +
        '```\n' +
        '\n' +
        '설치가 완료되면 다음과 같은 메세지를 볼 수 있다.\n' +
        '\n' +
        '![oh my zsh 설치 완료 화면](/upload/2021/complete-install-oh-my-zsh.jpg)\n' +
        '\n' +
        '### 테마 구성\n' +
        '\n' +
        '역시 처음 설치했드면 꾸미기가 먼저다!!! 테마부터 변경한다.\n' +
        '\n' +
        '테마는 [ohmyzsh github wiki](https://github.com/ohmyzsh/ohmyzsh/wiki/Themes)에서\n' +
        '마음에 드는 걸 선택하면 될 것 같다. 내 경우엔 많이 언급되는 `agnoster`를 쓰기로...\n' +
        '\n' +
        '`~/.zshrc` 파일을 열어 `ZSH_THEME` 항목의 값을 변경하기만 하면 된다.\n' +
        '\n' +
        '```bash\n' +
        'vi ~/.zshrc\n' +
        '```\n' +
        '\n' +
        '```ini\n' +
        'ZSH_THEME="agnoster"\n' +
        '```\n' +
        '\n' +
        '참고로 `agnoster` 테마를 쓰려면 [powerline font](https://github.com/powerline/fonts)를\n' +
        '써야 하는데, 내 경우엔 이미 Hack 폰트를 쓰고 있어서 별도로 설치하지 않고 터미널 설정에서\n' +
        '`profile.list`의 해당 항목에 fontFamily 값만 추가하여 해결했다.\n' +
        '\n' +
        '```json|data-line="6"\n' +
        '{\n' +
        '  "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
        '  "hidden": false,\n' +
        '  "name": "Ubuntu",\n' +
        '  "source": "Windows.Terminal.Wsl",\n' +
        '  "fontFace": "Hack"\n' +
        '}\n' +
        '```\n' +
        '\n' +
        '### 터미널 color scheme 구성\n' +
        '\n' +
        '편한 눈을 위해(?) 각 컬러에 대한 상세 값을 설정할 수 있고, 개별적으로 설정이 어렵다면 이미\n' +
        '구성된 scheme들이 [windowsterminalthemes](https://windowsterminalthemes.dev/)에서\n' +
        '제공되고 있으니 이를 참고해서 구성도 가능하다.\n' +
        '\n' +
        '설정은 마찬가지로 터미널 설정에서 이루어지고, `schemes` 항목에 color scheme을 추가하고,\n' +
        '`profiles.list`의 해당 항목에 `colorScheme` 값을 추가 한 color scheme의 `name`\n' +
        '값으로 설정하면 된다.\n' +
        '\n' +
        '```json|data-line="10,16"\n' +
        '"profiles" :{\n' +
        '  "list": [\n' +
        '    ...,\n' +
        '    {\n' +
        '      "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
        '      "hidden": false,\n' +
        '      "name": "Ubuntu",\n' +
        '      "source": "Windows.Terminal.Wsl",\n' +
        '      "fontFace": "Hack",\n' +
        '      "colorScheme": "Dark+"\n' +
        '    }\n' +
        '  ],\n' +
        '},\n' +
        '"schemes": [\n' +
        '  {\n' +
        '    "name": "Dark+",\n' +
        '    "black": "#000000",\n' +
        '    ...\n' +
        '    "background": "#0e0e0e",\n' +
        '    "foreground": "#cccccc"\n' +
        '  }\n' +
        '],\n' +
        '```\n' +
        '\n' +
        '## zsh plugins 설치\n' +
        '\n' +
        '조금 더 편한 zsh 사용을 위해 플러그인을 설치한다.\n' +
        '\n' +
        '### [zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions)\n' +
        '\n' +
        '이 플러그인은 이전에 입력했던 명령을 기반으로 명령을 타이핑 할 때마다 자동 완성을 제공하고\n' +
        '방향키로 해당 자동 완성을 사용할 수 있게 해준다.\n' +
        '\n' +
        '다음 명령으로 설치하고,\n' +
        '\n' +
        '```bash\n' +
        'git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n' +
        '```\n' +
        '\n' +
        '`~/.zshrc` 파일을 열어 `plugins` 항목에 `zsh-autosuggestions`를 추가해준다.\n' +
        '\n' +
        '```ini\n' +
        'plugins=(git zsh-autosuggestions)\n' +
        '```\n' +
        '\n' +
        '### [syntax highlighting](https://github.com/zsh-users/zsh-syntax-highlighting/)\n' +
        '\n' +
        '이 플러그인은 명령어에 구문 강조를 적용해준다.\n' +
        '구문 강조가 적용되면 좋은 것 중 하나는 특정 명령을 사용할 수 있으면 녹색으로, 설치 되지 않음\n' +
        '등의 이유로 알 수 없는 명령이면 빨간색으로 나타난다.\n' +
        '\n' +
        '다음 명령으로 설치하고,\n' +
        '\n' +
        '```bash\n' +
        'git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n' +
        '```\n' +
        '\n' +
        '`~/.zshrc` 파일을 열어 `plugins` 항목에 `zsh-syntax-highlighting`을 추가해준다.\n' +
        '\n' +
        '```ini\n' +
        'plugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n' +
        '```\n' +
        '\n' +
        '## 터미널 프롬프트 변경\n' +
        '\n' +
        '터미널을 열면 다음 화면처럼 username@hostname 형태로 프롬프트가 나오는데, VS Code에서\n' +
        '터미널을 열고 작업하면 이 프롬프트가 차지하는 공간이 적지 않아 보기 불편하다.\n' +
        '\n' +
        '다행히 이것마저도 변경하거나 감출 수 있다!!\n' +
        '\n' +
        '![기본으로는 user name과 host name이 모두 노출된다](/upload/2021/terminal-prompt-full-name.jpg)\n' +
        '\n' +
        '`~/.zshrc` 파일을 열고 다음을 추가하면\n' +
        '\n' +
        '```ini\n' +
        'prompt_context() {}\n' +
        '```\n' +
        '\n' +
        '프롬프트가 사라진다. 두둔!!\n' +
        '\n' +
        '![프롬프가 사라지고 경로만 남았다](/upload/2021/terminal-prompt-hide-name.jpg)\n' +
        '\n' +
        '참고로 다음과 같이 수정하면 user name과 경로만 노출된다.\n' +
        '\n' +
        '```ini\n' +
        'prompt_context() {\n' +
        '    if [[ "$USER" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then\n' +
        '      prompt_segment black default "%(!.%{%F{yellow}%}.)$USER"\n' +
        '    fi\n' +
        '}\n' +
        '```\n' +
        '\n' +
        '### Named directory 구성\n' +
        '\n' +
        '하지만 아직 `/mnt/c/Users/{user name}/` 이 거슬린다.\n' +
        '심지어 이게 디렉토리 깊이가 깊어지면 이 또한 너무 길어진다. 하여 이 마저도 줄여보기로 한다.\n' +
        '\n' +
        '역시 마찬가지로 `~/.zshrc` 파일을 열어 다음을 참고하여 환경에 맞게 추가한다.\n' +
        '\n' +
        '내 경우엔 `c:\\Users\\mulder21c\\Project`와 `c:\\Users\\mulder21c\\Workspace`이 주 사용\n' +
        '디렉토리라 이 디렉토리들에 대한 경로를 변경하기로 했다.\n' +
        '\n' +
        '```ini\n' +
        'hash -d mulder21c=/mnt/c/Users/mulder21c\n' +
        'hash -d Project=/mnt/c/Users/mulder21c/Project\n' +
        'hash -d Workspace=/mnt/c/Users/mulder21c/Workspace\n' +
        '```\n' +
        '\n' +
        '터미널을 다시 열어보면 다음과 같이 지정한 이름으로 표시된다. (단 앞에 `~`이 붙는다.)\n' +
        '\n' +
        '![named directory를 적용하고 경로가 한결 간결해졌다](/upload/2021/terminal-named-directory.jpg)\n' +
        '\n' +
        '이제야 터미널이 좀 간결해진 것 같다.\n' +
        '\n' +
        '## nvm 설치\n' +
        '\n' +
        '마지막으로 node.js 환경을 위해 nvm을 설치한다.\n' +
        '\n' +
        '터미널에서 다음 명령을 주면 자동으로 설치가 진행된다.\n' +
        '\n' +
        '```bash\n' +
        'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n' +
        '```\n' +
        '\n' +
        '참고로, Windows에 nvm for windows가 설치되어 있다면 충돌로 설치가 진행되지 않는다. 내\n' +
        '경우엔 더 이상 Windows 시스템에서 node를 실행할 생각이 없어서 과감히 제거하고 설치했다.\n' +
        '\n' +
        '설치가 완료되면 나타난 메세지 중에 다음과 같은 메세지가 있다.\n' +
        '\n' +
        '```ini\n' +
        'export NVM_DIR="$HOME/.nvm"\n' +
        '[ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh"  # This loads nvm\n' +
        '[ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion\n' +
        '```\n' +
        '\n' +
        '이걸 복사해서 `~/.zshrc`에 추가해야 한다.\n' +
        '\n' +
        '이후 node 설치는 nvm을 이용하면 된다.\n' +
        '\n' +
        '### auto `nvm` use  설정\n' +
        '\n' +
        '마지막으로 아직 테스트 해보지는 않았지만, 최근 Node 10.x, Node 14.x, Node 15.x를 각\n' +
        '환경으로 하는 프로덕트를 왔다 갔다 하다가 Node 버전 문제로 node-sass가 오류를 내뱉는 상황을\n' +
        '자주 만나게 되었다. `nvm use` 하는 걸 까먹기도 했고 현재 프로덕트가 어느 버전에서 돌려야\n' +
        '하는지도 까먹기 일수였다 ;;;\n' +
        '\n' +
        '하여 구성하는 김에 `.nvmrc`를 이용해서 자동으로 `nvm use`가 적용되게 하는 설정을 추가했다.\n' +
        '\n' +
        '다음의 코드를 `~/.zshrc`에 추가하면되는데, 아직 테스트해보진 않아서 잘 되는지는 모르겠다 = _=a\n' +
        '뭐... stackoverflow에서 건져온 건데 추천이 많았으니 잘 되겠지...? /=ㅁ=/\n' +
        '\n' +
        '```ini\n' +
        '# place this after nvm initialization!\n' +
        'autoload -U add-zsh-hook\n' +
        'load-nvmrc() {\n' +
        '  local node_version="$(nvm version)"\n' +
        '  local nvmrc_path="$(nvm_find_nvmrc)"\n' +
        '\n' +
        '  if [ -n "$nvmrc_path" ]; then\n' +
        '    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")\n' +
        '\n' +
        '    if [ "$nvmrc_node_version" = "N/A" ]; then\n' +
        '      nvm install\n' +
        '    elif [ "$nvmrc'... 239 more characters,
      slug: 'setting-up-wsl-2-dev-env-and-zsh-on-windws-10',
      published: true,
      comments: true,
      layout: 'post',
      photos: [],
      link: '',
      _id: 'clcytfa4r00aatawwe3zac5qf',
      content: '<h2 id="기존-환경"><a href="#기존-환경" class="headerlink" title="기존 환경"></a>기존 환경</h2><p>얼마 전까지만 해도 VS Code의 터미널을 git bash로 (이하 bash) 설정해서 5년 가까이 bash\n' +
        '상에서 CLI를 사용해왔다. (아! 참고로 나는 Windows 10 사용자다. 맥이었으면 진즉부터\n' +
        'terminal을 썼겠지...)</p>\n' +
        '<p>이 블로그 테마를 제작 후에 몇 번 mac이나 linux 환경에서 테마 설치 오류에 대한 이슈가\n' +
        '올라왔었고, 최근에 어떤 사이트를 번역하는데 해당 사이트 빌드가 bash 상에서는 정상적으로\n' +
        '이루어지지 않아 확인해보니 linux 상에서는 올바르게 빌드 되어 linux 환경에 대한 필요가\n' +
        '생겨났다.</p>\n' +
        '<p>결국 미루고 미루던 WSL 사용을 시도하기로 하고 반 년 정도를 이 방식으로 써 본 것 같다.\n' +
        '(미루고 미룬 이유는 Windows를 못믿어서... &#x3D; _&#x3D;a 항상 예기치 않은 오류를 만들어주는\n' +
        ' Windows ... )</p>\n' +
        '<p>무튼, 반 년 정도의 사용 경험에서는 크게 문제를 느끼지 못해서 이제 본격적으로 WSL + zsh\n' +
        '환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가 설정을 차후에 필요할까 기록으로\n' +
        '남겨둔다. (안녕 bash~ 오래 동안 고마웠어 ㅠ)</p>\n' +
        '<h2 id="WSL-1-or-WSL-2"><a href="#WSL-1-or-WSL-2" class="headerlink" title="WSL 1 or WSL 2 ?"></a>WSL 1 or WSL 2 ?</h2><p>WSL을 쓰기로 한 시점에 결정해야 할 것 중 하나는 일단 WSL 1을 쓸 것인가 혹은 WSL 2를 쓸\n' +
        '것인가 같다. 물론, WSL 2 구성까지 해 두면 언제든지 원하는 시점에 WSL 1과 2를 오갈 수 있고\n' +
        '따라서 WSL 2 구성 방법으로 포스팅 해두기는 했다.</p>\n' +
        '<p>내 경우엔 2가지를 다 써봤는데, 써보고 난 이후에 드는 생각은 일단 내 경우에는 WSL 1을 쓰는\n' +
        '게 아직은 낫지 않을까 싶다. MS에서는 WSL 2가 더 빠르고 전체 리눅스 커널 사용, 시스템 호출\n' +
        '호환성 등을 장점으로 들고 있지만 생각보다 만나게 되는 장애물이 많았다.</p>\n' +
        '<p>일단 몇 가지 선택에 필요한 기준에 따라 나누어 보면,\n' +
        '기존의 Windows 시스템에서 이미 프로젝트가 구성되어 있고 (Node든 뭐 다른 것이든) 여기에\n' +
        'WSL을 통합하는 거라면 WSL 1을 추천한다.\n' +
        '반면 개발 환경을 새로 설정 하는 상황이나 새로 설정하는 것을 감안 할 생각이고, 리눅스 시스템에\n' +
        '거부감이 없다면 WSL 2가 나을 것 같다.</p>\n' +
        '<p>이렇게 나눈 이유는, WSL 2에서는</p>\n' +
        '<ul>\n' +
        '<li><p>Windows 파일 시스템(<code>/mnt/</code>)으로의 접근이 체감 될 만큼 느리다.</p>\n' +
        '</li>\n' +
        '<li><p>Windows 파일 시스템에 이미 구성된 프로젝트의 경우, 파일 변경을 감지 하지 못하는 듯 하다.\n' +
        '(Node의 watch 기능이 정상적으로 동작해주지 못한다. 파일 시스템이 다르니 당연한 것 같기는\n' +
        '한데 처음에 무척 당황했다.)</p>\n' +
        '</li>\n' +
        '<li><p>Windows에서 VS Code를 열고 터미널을 WSL로 사용할 때, Windows에서 연 브라우저가\n' +
        'localhost에 접근이 잘 되지 않는다.</p>\n' +
        '<p>Windows 전원 옵션에 &quot;빨리 켜기 기능&quot;을 꺼두면 localhost 포워딩이 된다고 하는데, 실제로\n' +
        '해봤을 때 localhost가 두 개의 다른 포트로 열렸을 때 하나만 되더라...</p>\n' +
        '</li>\n' +
        '</ul>\n' +
        '<p>내 경우는 이미 Windows 시스템을 기반으로 프로젝트들이 구성되어 있었고 WSL을 통합 해보는 거라\n' +
        '위의 문제들을 겪고 말았다 ㅋ</p>\n' +
        '<p>물론 내 케이스가 아니라면 WSL 2가 더 나을 것 같기는 하다.</p>\n' +
        '<h2 id="Windows-Terminal-설치"><a href="#Windows-Terminal-설치" class="headerlink" title="Windows Terminal 설치"></a>Windows Terminal 설치</h2><p>Windows에는 기본적으로 terminal이 존재하지 않기 때문에, windows terminal을\n' +
        '<a href="https://www.microsoft.com/ko-kr/p/windows-terminal/9n0dx20hk701">Store</a>에서\n' +
        '별도로 설치해야 한다.</p>\n' +
        '<p><img src="/upload/2021/windows-store-terminal.jpg" alt="Windows Terminal on Store"></p>\n' +
        '<h2 id="WSL-활성화"><a href="#WSL-활성화" class="headerlink" title="WSL 활성화"></a>WSL 활성화</h2><p>자세한 내용은 <a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10">공식문서</a>를\n' +
        '참고하자.</p>\n' +
        '<p>터미널(혹은 파워쉘)을 관리자 권한으로 실행 후, 다음을 차례대로 실행 하면된다. (물론 &#39;제어판\n' +
        '&gt; 프로그램 &gt; 프로그램 및 기능 &gt; Windows 기능 켜기&#x2F;끄기&#39; 에서 GUI로 해도 된다.)</p>\n' +
        '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span>enable<span class="token operator">-</span>feature <span class="token operator">/</span>featurename<span class="token operator">:</span>Microsoft<span class="token operator">-</span>Windows<span class="token operator">-</span>Subsystem<span class="token operator">-</span>Linux <span class="token operator">/</span>all <span class="token operator">/</span>norestart\n' +
        'dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span>enable<span class="token operator">-</span>feature <span class="token operator">/</span>featurename<span class="token operator">:</span>VirtualMachinePlatform <span class="token operator">/</span>all <span class="token operator">/</span>norestart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>\n' +
        '\n' +
        '<p>실행이 종료 되었으면 &quot;재시작&quot;하자.</p>\n' +
        '<p>일시적인 상황이었는지는 모르겠지만, 최초 이 설정을 할 때 재시작하지 않고 컴퓨터를 종료했다가\n' +
        '다음 날 켜서 설정을 계속 이어가려고 했더니 안되더라 &#x3D; _&#x3D;a</p>\n' +
        '<h3 id="WSL-2-업데이트"><a href="#WSL-2-업데이트" class="headerlink" title="WSL 2 업데이트"></a>WSL 2 업데이트</h3><p>WSL 2를 사용하려면 적어도 Windows 10 May 2020 Update가 설치되어 있어야 한다. Windows\n' +
        '10 May 2020 Update에 실제 리눅스 커널을 사용하는 WSL 2가 기본 탑재 되었다고 한다.\n' +
        '그런데 좀 이상한게, Windows 10 최신 업데이트를 쓰고 있음에도 불구하고 WSL 2를 사용하려면\n' +
        '별도 패키지를 다운 받아서 설치하고, 추가 설정을 해야 한다. (아니 WSL 2를 기본으로 탑재했으면\n' +
        'WSL 2를 기본으로 사용할 수 있어야지 왜 WSL 1을 기본으로 잡아주고 있고... WSL 2를 쓰기 위해\n' +
        '추가 설치를 왜 해야 하는가...? )</p>\n' +
        '<p><a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package">MS WSL 설명서 페이지</a>로\n' +
        '가서 Linux 커널 업데이트 패키지 다운로드 후 설치한다.</p>\n' +
        '<p><img src="/upload/2021/wsl-update.jpg" alt="Linux 커널 업데이트 설치 화면"></p>\n' +
        '<h3 id="WSL-기본-버전을-2로-설정"><a href="#WSL-기본-버전을-2로-설정" class="headerlink" title="WSL 기본 버전을 2로 설정"></a>WSL 기본 버전을 2로 설정</h3><p>터미널(혹은 파워쉘)에서 다음 명령을 시행한다.</p>\n' +
        '<p>이걸 먼저 실행해야 이후로 설치되는 리눅스 시스템이 WSL 2를 기반으로 한다.</p>\n' +
        '<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-default</span><span class="token operator">-</span>version 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<h2 id="Ubuntu-설치"><a href="#Ubuntu-설치" class="headerlink" title="Ubuntu  설치"></a>Ubuntu  설치</h2><p>다시 <a href="https://www.microsoft.com/ko-kr/store/apps/windows">Store</a>에서 Ubuntu를\n' +
        '검색해서 설치 한다. (물론 우분투 말고 다른 리눅스 프로덕트를 선택해도 된다. 단지 내가\n' +
        'Ubuntu가 익숙해서 그렇다<del>고 하지만 어차피 터미널인데?</del>)</p>\n' +
        '<p><img src="/upload/2021/windows-store-ubuntu.jpg" alt="Windows Store Ubuntu 검색 결과"></p>\n' +
        '<p>하지만 이 놈은 어디까지나 &quot;배포&quot; 패키지이므로 설치 후 최초 실행해야 우분투 설치가 진행된다.\n' +
        '시간이 조금 걸리니 기다리자.</p>\n' +
        '<p>설치가 완료되면 다음과 같이 설치가 완료되었다는 메세지와 함께 웰컴 투 우분투가 노출된다</p>\n' +
        '<p><img src="/upload/2021/complete-install-ubuntu.jpg" alt="우분투 설치 완료 화면"></p>\n' +
        '<h3 id="터미널-기본-프로필-Ubuntu로-설정"><a href="#터미널-기본-프로필-Ubuntu로-설정" class="headerlink" title="터미널 기본 프로필 Ubuntu로 설정"></a>터미널 기본 프로필 Ubuntu로 설정</h3><p>터미널에서도 Ubuntu가 기본으로 실행되도록 터미널 기본 프로필을 WSL로 설정한다.</p>\n' +
        '<p>터미널에서 설정으로 들어가면 관련 json 파일이 열리는데, 여기서 <code>defaultProfile</code> 값을\n' +
        '<code>profiles.list</code> 에서 Ubuntu 것의 <code>guid</code> 값으로 수정하기만 하면 된다.</p>\n' +
        '<pre class="line-numbers language-json|data-line" data-language="json|data-line"><code class="language-json|data-line">&#123;\n' +
        '  &quot;defaultProfile&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,\n' +
        '  ...\n' +
        '  &quot;profiles&quot;:\n' +
        '    &#123;\n' +
        '      ...\n' +
        '      &quot;list&quot;:\n' +
        '      [\n' +
        '        ...\n' +
        '        &#123;\n' +
        '          &quot;guid&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,\n' +
        '          &quot;hidden&quot;: false,\n' +
        '          &quot;name&quot;: &quot;Ubuntu&quot;,\n' +
        '          &quot;source&quot;: &quot;Windows.Terminal.Wsl&quot;,\n' +
        '          &quot;colorScheme&quot;: &quot;Dark+&quot;,\n' +
        '          &quot;fontFace&quot;: &quot;Hack&quot;\n' +
        '        &#125;\n' +
        '      ]\n' +
        '    &#125;,\n' +
        '&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
        '\n' +
        '<h2 id="Git-zsh-설치"><a href="#Git-zsh-설치" class="headerlink" title="Git, zsh 설치"></a>Git, zsh 설치</h2><p>Ubuntu(WSL)를 실행하고, git과 zsh부터 설치한다.</p>\n' +
        '<p>일단 패키지 레파지토리 인덱스부터 업데이트 하고</p>\n' +
        '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<p>git과 zsh을 설치</p>\n' +
        '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span> <span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<h2 id="Oh-my-zsh-설치-및-구성"><a href="#Oh-my-zsh-설치-및-구성" class="headerlink" title="Oh my zsh 설치 및 구성"></a>Oh my zsh 설치 및 구성</h2><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><p>터미널에서 다음 명령을 실행하기만 하면 된다.</p>\n' +
        '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<p>설치가 완료되면 다음과 같은 메세지를 볼 수 있다.</p>\n' +
        '<p><img src="/upload/2021/complete-install-oh-my-zsh.jpg" alt="oh my zsh 설치 완료 화면"></p>\n' +
        '<h3 id="테마-구성"><a href="#테마-구성" class="headerlink" title="테마 구성"></a>테마 구성</h3><p>역시 처음 설치했드면 꾸미기가 먼저다!!! 테마부터 변경한다.</p>\n' +
        '<p>테마는 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">ohmyzsh github wiki</a>에서\n' +
        '마음에 드는 걸 선택하면 될 것 같다. 내 경우엔 많이 언급되는 <code>agnoster</code>를 쓰기로...</p>\n' +
        '<p><code>~/.zshrc</code> 파일을 열어 <code>ZSH_THEME</code> 항목의 값을 변경하기만 하면 된다.</p>\n' +
        '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">ZSH_THEME</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">agnoster</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<p>참고로 <code>agnoster</code> 테마를 쓰려면 <a href="https://github.com/powerline/fonts">powerline font</a>를\n' +
        '써야 하는데, 내 경우엔 이미 Hack 폰트를 쓰고 있어서 별도로 설치하지 않고 터미널 설정에서\n' +
        '<code>profile.list</code>의 해당 항목에 fontFamily 값만 추가하여 해결했다.</p>\n' +
        '<pre class="line-numbers language-j'... 11610 more characters,
      site: [Object],
      excerpt: '',
      more: '<h2 id="기존-환경"><a href="#기존-환경" class="headerlink" title="기존 환경"></a>기존 환경</h2><p>얼마 전까지만 해도 VS Code의 터미널을 git bash로 (이하 bash) 설정해서 5년 가까이 bash\n' +
        '상에서 CLI를 사용해왔다. (아! 참고로 나는 Windows 10 사용자다. 맥이었으면 진즉부터\n' +
        'terminal을 썼겠지...)</p>\n' +
        '<p>이 블로그 테마를 제작 후에 몇 번 mac이나 linux 환경에서 테마 설치 오류에 대한 이슈가\n' +
        '올라왔었고, 최근에 어떤 사이트를 번역하는데 해당 사이트 빌드가 bash 상에서는 정상적으로\n' +
        '이루어지지 않아 확인해보니 linux 상에서는 올바르게 빌드 되어 linux 환경에 대한 필요가\n' +
        '생겨났다.</p>\n' +
        '<p>결국 미루고 미루던 WSL 사용을 시도하기로 하고 반 년 정도를 이 방식으로 써 본 것 같다.\n' +
        '(미루고 미룬 이유는 Windows를 못믿어서... &#x3D; _&#x3D;a 항상 예기치 않은 오류를 만들어주는\n' +
        ' Windows ... )</p>\n' +
        '<p>무튼, 반 년 정도의 사용 경험에서는 크게 문제를 느끼지 못해서 이제 본격적으로 WSL + zsh\n' +
        '환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가 설정을 차후에 필요할까 기록으로\n' +
        '남겨둔다. (안녕 bash~ 오래 동안 고마웠어 ㅠ)</p>\n' +
        '<h2 id="WSL-1-or-WSL-2"><a href="#WSL-1-or-WSL-2" class="headerlink" title="WSL 1 or WSL 2 ?"></a>WSL 1 or WSL 2 ?</h2><p>WSL을 쓰기로 한 시점에 결정해야 할 것 중 하나는 일단 WSL 1을 쓸 것인가 혹은 WSL 2를 쓸\n' +
        '것인가 같다. 물론, WSL 2 구성까지 해 두면 언제든지 원하는 시점에 WSL 1과 2를 오갈 수 있고\n' +
        '따라서 WSL 2 구성 방법으로 포스팅 해두기는 했다.</p>\n' +
        '<p>내 경우엔 2가지를 다 써봤는데, 써보고 난 이후에 드는 생각은 일단 내 경우에는 WSL 1을 쓰는\n' +
        '게 아직은 낫지 않을까 싶다. MS에서는 WSL 2가 더 빠르고 전체 리눅스 커널 사용, 시스템 호출\n' +
        '호환성 등을 장점으로 들고 있지만 생각보다 만나게 되는 장애물이 많았다.</p>\n' +
        '<p>일단 몇 가지 선택에 필요한 기준에 따라 나누어 보면,\n' +
        '기존의 Windows 시스템에서 이미 프로젝트가 구성되어 있고 (Node든 뭐 다른 것이든) 여기에\n' +
        'WSL을 통합하는 거라면 WSL 1을 추천한다.\n' +
        '반면 개발 환경을 새로 설정 하는 상황이나 새로 설정하는 것을 감안 할 생각이고, 리눅스 시스템에\n' +
        '거부감이 없다면 WSL 2가 나을 것 같다.</p>\n' +
        '<p>이렇게 나눈 이유는, WSL 2에서는</p>\n' +
        '<ul>\n' +
        '<li><p>Windows 파일 시스템(<code>/mnt/</code>)으로의 접근이 체감 될 만큼 느리다.</p>\n' +
        '</li>\n' +
        '<li><p>Windows 파일 시스템에 이미 구성된 프로젝트의 경우, 파일 변경을 감지 하지 못하는 듯 하다.\n' +
        '(Node의 watch 기능이 정상적으로 동작해주지 못한다. 파일 시스템이 다르니 당연한 것 같기는\n' +
        '한데 처음에 무척 당황했다.)</p>\n' +
        '</li>\n' +
        '<li><p>Windows에서 VS Code를 열고 터미널을 WSL로 사용할 때, Windows에서 연 브라우저가\n' +
        'localhost에 접근이 잘 되지 않는다.</p>\n' +
        '<p>Windows 전원 옵션에 &quot;빨리 켜기 기능&quot;을 꺼두면 localhost 포워딩이 된다고 하는데, 실제로\n' +
        '해봤을 때 localhost가 두 개의 다른 포트로 열렸을 때 하나만 되더라...</p>\n' +
        '</li>\n' +
        '</ul>\n' +
        '<p>내 경우는 이미 Windows 시스템을 기반으로 프로젝트들이 구성되어 있었고 WSL을 통합 해보는 거라\n' +
        '위의 문제들을 겪고 말았다 ㅋ</p>\n' +
        '<p>물론 내 케이스가 아니라면 WSL 2가 더 나을 것 같기는 하다.</p>\n' +
        '<h2 id="Windows-Terminal-설치"><a href="#Windows-Terminal-설치" class="headerlink" title="Windows Terminal 설치"></a>Windows Terminal 설치</h2><p>Windows에는 기본적으로 terminal이 존재하지 않기 때문에, windows terminal을\n' +
        '<a href="https://www.microsoft.com/ko-kr/p/windows-terminal/9n0dx20hk701">Store</a>에서\n' +
        '별도로 설치해야 한다.</p>\n' +
        '<p><img src="/upload/2021/windows-store-terminal.jpg" alt="Windows Terminal on Store"></p>\n' +
        '<h2 id="WSL-활성화"><a href="#WSL-활성화" class="headerlink" title="WSL 활성화"></a>WSL 활성화</h2><p>자세한 내용은 <a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10">공식문서</a>를\n' +
        '참고하자.</p>\n' +
        '<p>터미널(혹은 파워쉘)을 관리자 권한으로 실행 후, 다음을 차례대로 실행 하면된다. (물론 &#39;제어판\n' +
        '&gt; 프로그램 &gt; 프로그램 및 기능 &gt; Windows 기능 켜기&#x2F;끄기&#39; 에서 GUI로 해도 된다.)</p>\n' +
        '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span>enable<span class="token operator">-</span>feature <span class="token operator">/</span>featurename<span class="token operator">:</span>Microsoft<span class="token operator">-</span>Windows<span class="token operator">-</span>Subsystem<span class="token operator">-</span>Linux <span class="token operator">/</span>all <span class="token operator">/</span>norestart\n' +
        'dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span>enable<span class="token operator">-</span>feature <span class="token operator">/</span>featurename<span class="token operator">:</span>VirtualMachinePlatform <span class="token operator">/</span>all <span class="token operator">/</span>norestart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>\n' +
        '\n' +
        '<p>실행이 종료 되었으면 &quot;재시작&quot;하자.</p>\n' +
        '<p>일시적인 상황이었는지는 모르겠지만, 최초 이 설정을 할 때 재시작하지 않고 컴퓨터를 종료했다가\n' +
        '다음 날 켜서 설정을 계속 이어가려고 했더니 안되더라 &#x3D; _&#x3D;a</p>\n' +
        '<h3 id="WSL-2-업데이트"><a href="#WSL-2-업데이트" class="headerlink" title="WSL 2 업데이트"></a>WSL 2 업데이트</h3><p>WSL 2를 사용하려면 적어도 Windows 10 May 2020 Update가 설치되어 있어야 한다. Windows\n' +
        '10 May 2020 Update에 실제 리눅스 커널을 사용하는 WSL 2가 기본 탑재 되었다고 한다.\n' +
        '그런데 좀 이상한게, Windows 10 최신 업데이트를 쓰고 있음에도 불구하고 WSL 2를 사용하려면\n' +
        '별도 패키지를 다운 받아서 설치하고, 추가 설정을 해야 한다. (아니 WSL 2를 기본으로 탑재했으면\n' +
        'WSL 2를 기본으로 사용할 수 있어야지 왜 WSL 1을 기본으로 잡아주고 있고... WSL 2를 쓰기 위해\n' +
        '추가 설치를 왜 해야 하는가...? )</p>\n' +
        '<p><a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package">MS WSL 설명서 페이지</a>로\n' +
        '가서 Linux 커널 업데이트 패키지 다운로드 후 설치한다.</p>\n' +
        '<p><img src="/upload/2021/wsl-update.jpg" alt="Linux 커널 업데이트 설치 화면"></p>\n' +
        '<h3 id="WSL-기본-버전을-2로-설정"><a href="#WSL-기본-버전을-2로-설정" class="headerlink" title="WSL 기본 버전을 2로 설정"></a>WSL 기본 버전을 2로 설정</h3><p>터미널(혹은 파워쉘)에서 다음 명령을 시행한다.</p>\n' +
        '<p>이걸 먼저 실행해야 이후로 설치되는 리눅스 시스템이 WSL 2를 기반으로 한다.</p>\n' +
        '<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-default</span><span class="token operator">-</span>version 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<h2 id="Ubuntu-설치"><a href="#Ubuntu-설치" class="headerlink" title="Ubuntu  설치"></a>Ubuntu  설치</h2><p>다시 <a href="https://www.microsoft.com/ko-kr/store/apps/windows">Store</a>에서 Ubuntu를\n' +
        '검색해서 설치 한다. (물론 우분투 말고 다른 리눅스 프로덕트를 선택해도 된다. 단지 내가\n' +
        'Ubuntu가 익숙해서 그렇다<del>고 하지만 어차피 터미널인데?</del>)</p>\n' +
        '<p><img src="/upload/2021/windows-store-ubuntu.jpg" alt="Windows Store Ubuntu 검색 결과"></p>\n' +
        '<p>하지만 이 놈은 어디까지나 &quot;배포&quot; 패키지이므로 설치 후 최초 실행해야 우분투 설치가 진행된다.\n' +
        '시간이 조금 걸리니 기다리자.</p>\n' +
        '<p>설치가 완료되면 다음과 같이 설치가 완료되었다는 메세지와 함께 웰컴 투 우분투가 노출된다</p>\n' +
        '<p><img src="/upload/2021/complete-install-ubuntu.jpg" alt="우분투 설치 완료 화면"></p>\n' +
        '<h3 id="터미널-기본-프로필-Ubuntu로-설정"><a href="#터미널-기본-프로필-Ubuntu로-설정" class="headerlink" title="터미널 기본 프로필 Ubuntu로 설정"></a>터미널 기본 프로필 Ubuntu로 설정</h3><p>터미널에서도 Ubuntu가 기본으로 실행되도록 터미널 기본 프로필을 WSL로 설정한다.</p>\n' +
        '<p>터미널에서 설정으로 들어가면 관련 json 파일이 열리는데, 여기서 <code>defaultProfile</code> 값을\n' +
        '<code>profiles.list</code> 에서 Ubuntu 것의 <code>guid</code> 값으로 수정하기만 하면 된다.</p>\n' +
        '<pre class="line-numbers language-json|data-line" data-language="json|data-line"><code class="language-json|data-line">&#123;\n' +
        '  &quot;defaultProfile&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,\n' +
        '  ...\n' +
        '  &quot;profiles&quot;:\n' +
        '    &#123;\n' +
        '      ...\n' +
        '      &quot;list&quot;:\n' +
        '      [\n' +
        '        ...\n' +
        '        &#123;\n' +
        '          &quot;guid&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,\n' +
        '          &quot;hidden&quot;: false,\n' +
        '          &quot;name&quot;: &quot;Ubuntu&quot;,\n' +
        '          &quot;source&quot;: &quot;Windows.Terminal.Wsl&quot;,\n' +
        '          &quot;colorScheme&quot;: &quot;Dark+&quot;,\n' +
        '          &quot;fontFace&quot;: &quot;Hack&quot;\n' +
        '        &#125;\n' +
        '      ]\n' +
        '    &#125;,\n' +
        '&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
        '\n' +
        '<h2 id="Git-zsh-설치"><a href="#Git-zsh-설치" class="headerlink" title="Git, zsh 설치"></a>Git, zsh 설치</h2><p>Ubuntu(WSL)를 실행하고, git과 zsh부터 설치한다.</p>\n' +
        '<p>일단 패키지 레파지토리 인덱스부터 업데이트 하고</p>\n' +
        '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<p>git과 zsh을 설치</p>\n' +
        '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span> <span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<h2 id="Oh-my-zsh-설치-및-구성"><a href="#Oh-my-zsh-설치-및-구성" class="headerlink" title="Oh my zsh 설치 및 구성"></a>Oh my zsh 설치 및 구성</h2><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><p>터미널에서 다음 명령을 실행하기만 하면 된다.</p>\n' +
        '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<p>설치가 완료되면 다음과 같은 메세지를 볼 수 있다.</p>\n' +
        '<p><img src="/upload/2021/complete-install-oh-my-zsh.jpg" alt="oh my zsh 설치 완료 화면"></p>\n' +
        '<h3 id="테마-구성"><a href="#테마-구성" class="headerlink" title="테마 구성"></a>테마 구성</h3><p>역시 처음 설치했드면 꾸미기가 먼저다!!! 테마부터 변경한다.</p>\n' +
        '<p>테마는 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">ohmyzsh github wiki</a>에서\n' +
        '마음에 드는 걸 선택하면 될 것 같다. 내 경우엔 많이 언급되는 <code>agnoster</code>를 쓰기로...</p>\n' +
        '<p><code>~/.zshrc</code> 파일을 열어 <code>ZSH_THEME</code> 항목의 값을 변경하기만 하면 된다.</p>\n' +
        '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">ZSH_THEME</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">agnoster</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<p>참고로 <code>agnoster</code> 테마를 쓰려면 <a href="https://github.com/powerline/fonts">powerline font</a>를\n' +
        '써야 하는데, 내 경우엔 이미 Hack 폰트를 쓰고 있어서 별도로 설치하지 않고 터미널 설정에서\n' +
        '<code>profile.list</code>의 해당 항목에 fontFamily 값만 추가하여 해결했다.</p>\n' +
        '<pre class="line-numbers language-j'... 11610 more characters,
      path: [Getter],
      permalink: [Getter],
      full_source: [Getter],
      asset_dir: [Getter],
      tags: [Getter],
      categories: [Getter],
      prev: [Circular *2],
      next: [_Document],
      __post: true
    },
    __post: true
  },
  __post: true
}
<ref *1> _Document {
  title: 'json-server에 사용자 인증 구현하기',
  thumbnail: '/upload/2021/thumbs/json-server-authentication.jpg',
  hero: '/upload/2021/json-server-authentication.jpg',
  seo: {
    description: '최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에\n' +
      '있어 시도해 봤던 방법을 기록으로 남겨본다.\n',
    image: '/upload/2021/json-server-authentication.jpg'
  },
  style: '.hero {\n' +
    '  &-wrapper {\n' +
    '    text-shadow:\n' +
    '      1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
    '      -1px -1px 1em rgba(20, 12, 24, 0.5);\n' +
    '  }\n' +
    '  &__image {\n' +
    '    opacity: 0.5;\n' +
    '    filter: blur(0.35em)\n' +
    '  }\n' +
    '}\n',
  date: Moment<2021-02-06T14:10:27+09:00>,
  _content: '\n' +
    '\n' +
    '최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에 있어\n' +
    '시도해 봤던 방법을 기록으로 남겨본다. (JSON server는 사용할 줄 안다는 가정하에서 포스팅한다.)\n' +
    '\n' +
    '내 경우엔 mock API 구현에 편의를 위해 [JSON server](https://github.com/typicode/json-server)를\n' +
    '사용해 왔는데, 역시 이를 베이스로 하고 JWT 관련 패키지를 추가하여 구현을 시도해봤다.\n' +
    '\n' +
    '## 추가 한 auth 관련 패키지\n' +
    '\n' +
    '- [json-server-auth](https://github.com/jeremyben/json-server-auth)\n' +
    '\n' +
    '  JSON server용으로 만들어진 JWT 인증 미들웨어다.\n' +
    '  다른 몇 가지 패키지들을 찾아보고 가장 간편하게 구축 가능하고 문서화가 잘 되어 있는 녀석을\n' +
    '  찾다보니 이 녀석으로 정착했다.\n' +
    '\n' +
    '- [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken)\n' +
    '\n' +
    '  패키지 이름 그대로 JWT의 구현체인데, JWT verifier가 필요해서 가져왔다 = _=a\n' +
    '\n' +
    '- [cors](https://github.com/expressjs/cors)\n' +
    '\n' +
    '  CORS 관련 설정을 위한 Express용 미들웨어로, HEADER를 조작하게 되면 pre-flight 요청을\n' +
    '  처리해야 하는데 여기서 CORS 문제가 발생되기 때문에 이를 해결하기 위해서 설치 했다.\n' +
    '\n' +
    '## 기본 설정\n' +
    '\n' +
    '사실 json-server-auth가 웬만한 것들은 알아서 처리해주고 있기 때문에 특별히 할 것은 없다.\n' +
    '\n' +
    '해당 매뉴얼을 참고해서 미리 정의 된 API 이름을 그대로 가져다 쓰기만 하면 JWT 발급부터 오류까지\n' +
    '알아서 처리해 준다. (참고로 이 토큰의 유효시간은 1시간이다)\n' +
    '\n' +
    '따라서, 해야 할 일이라고는 미리 정의 된 API 외 다른 이름을 쓰고 싶을 경우의 router rewrite,\n' +
    'CORS 설정 정도면 충분하다.\n' +
    '\n' +
    '설정 방법은 [express 공식문서](https://expressjs.com/en/resources/middleware/cors.html)를\n' +
    '참고했다.\n' +
    '\n' +
    '```javascript\n' +
    'const server = jsonServer.create();\n' +
    'const auth = require("json-server-auth");\n' +
    'const cors = require("cors");\n' +
    '\n' +
    '/**\n' +
    ' * 과제에선 GET, POST, DELETE만 필요했기 때문에\n' +
    ' * 3가지 method만 작성했고,\n' +
    ' * 어차피 mock api이고 local에서 구동되는 거라\n' +
    ' * origin을 all(*)로 설정했다.\n' +
    ' */\n' +
    'server.use(\n' +
    '  cors({\n' +
    '    origin: "*",\n' +
    '    preflightContinue: false,\n' +
    '    methods: "GET,POST,DELETE"\n' +
    '  })\n' +
    ');\n' +
    '/**\n' +
    ' * 모든 router에 대해 preflight 요청 활성화\n' +
    ' */\n' +
    'server.options("*", cors());\n' +
    '\n' +
    '// 중략\n' +
    '\n' +
    'server.use(auth);\n' +
    '```\n' +
    '\n' +
    '단지 이 기본 설정만으로 회원 가입, 로그인 시 JWT 발급이 가능하고 이후 클라이언트에서\n' +
    'API 호출 시 Authorization Header에 Bearer Token을 담아 던지기만 하면 된다.\n' +
    '\n' +
    '## users/me 구현\n' +
    '\n' +
    '그런데, json-server-auth는 회원 가입 혹은 로그인 시 accessToken만을 응답으로 내려주기\n' +
    '때문에 사용자를 식별할 방법이 없다.\n' +
    '\n' +
    '아쉽게도 이 부분은 직접 구현을 해야 하는 부분으로 보였다.\n' +
    '역시 대부분 생각하는게 비슷한지 동일한 니즈를 가진 유저의 질문이\n' +
    '[issue](https://github.com/jeremyben/json-server-auth/issues/12)로 등록되어 있었고\n' +
    '해당 issue를 참고해서 별도로 구현했다.\n' +
    '\n' +
    '```javascript\n' +
    '/**\n' +
    ' * JWT 검증을 위해 jsonwebtoken 모듈을 가져왔고,\n' +
    ' * JWT의 비밀키는 json-server-auth에서 가지고 있다\n' +
    ' */\n' +
    'const jwt = require("jsonwebtoken");\n' +
    'const JWT_SECRET_KEY = require("json-server-auth/dist/constants").JWT_SECRET_KEY;\n' +
    '\n' +
    '// 중략\n' +
    '\n' +
    'server.get(`/users/me`, auth, (req, res) => {\n' +
    '  const { authorization } = req.headers;\n' +
    '  if (!authorization) {\n' +
    '    res.status(401).jsonp("Missing authorization header");\n' +
    '    return;\n' +
    '  }\n' +
    '  const [scheme, token] = authorization.split(" ");\n' +
    '  if (scheme !== "Bearer") {\n' +
    '    res.status(401).jsonp("Incorrect authorization scheme");\n' +
    '    return;\n' +
    '  }\n' +
    '  if (!token) {\n' +
    '    res.status(401).jsonp("Missing token");\n' +
    '    return;\n' +
    '  }\n' +
    '\n' +
    '  try {\n' +
    '    const data = jwt.verify(token, JWT_SECRET_KEY);\n' +
    '    const { db } = req.app;\n' +
    '    // ... 은 그냥 나머지 property들\n' +
    '    const { id, email, ... } = db\n' +
    '      .get("users")\n' +
    '      .find({ email: data.email })\n' +
    '      .value();\n' +
    '    res.status(200).json({ id, email, ... });\n' +
    '  } catch (err) {\n' +
    '    res.status(401).jsonp(err.message);\n' +
    '  }\n' +
    '});\n' +
    '```\n' +
    '\n' +
    '이렇게 해서 사용자 정보를 내려주는 users/me API도 구현했다.\n' +
    '\n' +
    '생각보다 어렵지 않게 mock에서도 인증 구현이 되서 이후로도 요긴하게(?) 사용할 수 있을 것 같다.\n' +
    '\n' +
    '## 아쉬운 부분\n' +
    '\n' +
    'json-server-auth가 내부적으로 정확히 어떻게 동작하는지까지는 찾아보지 않았는데, mock api\n' +
    '구동 중에 post 등으로 발생된 리소스는 권한이 정상적으로 동작하는 반면, mock api가 구동 되기\n' +
    '전에 존재하는 리소스는 권한이 정상적으로 동작하지 않았다.\n' +
    '\n' +
    '즉, 생성한 유저만 조회가 가능한 리소스를 설정해두었을 때, 테스트 중 mock api를 내렸다가 다시\n' +
    '올리면 기존 리소스가 사라지는 것은 아니기 때문에 기존 것이 전체가 조회 가능한 권한이 되어버리는\n' +
    '문제가 발생하기는 하더라...\n' +
    '\n' +
    '그리고 또 한가지, mock API 작성과 동시에 swagger 문서를 만들었는데 swagger 사이트에 올려\n' +
    'API 테스트를 돌리려고 하면 토큰을 발급 받을 방법을 모르겠더라 = _=a\n' +
    '결국 Swagger 사이트에 올리면 인증 테스트를 할 수 없더라는... 쿨럭...\n' +
    '\n' +
    '물론 로컬에 swagger도 설치해서 구동하면 되기는 하지만, 협업 시에는 response에 관련 된\n' +
    'yml만 작성해 올리는 걸로 만족해야 하나 싶다.',
  source: '_posts/2021-02-06-implementing-authentication-with-json-server.md',
  raw: '---\n' +
    'title: json-server에 사용자 인증 구현하기\n' +
    'tags:\n' +
    '  - Authenticatoin\n' +
    '  - Authorization\n' +
    '  - Bearer Token\n' +
    '  - json-server\n' +
    '  - json-server-auth\n' +
    '  - mock api\n' +
    '  - JWT\n' +
    'categories:\n' +
    'thumbnail: /upload/2021/thumbs/json-server-authentication.jpg\n' +
    'hero: /upload/2021/json-server-authentication.jpg\n' +
    'seo:\n' +
    '  description: |\n' +
    '    최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에\n' +
    '    있어 시도해 봤던 방법을 기록으로 남겨본다.\n' +
    '  image: /upload/2021/json-server-authentication.jpg\n' +
    'style: |\n' +
    '  .hero {\n' +
    '    &-wrapper {\n' +
    '      text-shadow:\n' +
    '        1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
    '        -1px -1px 1em rgba(20, 12, 24, 0.5);\n' +
    '    }\n' +
    '    &__image {\n' +
    '      opacity: 0.5;\n' +
    '      filter: blur(0.35em)\n' +
    '    }\n' +
    '  }\n' +
    'date: 2021-02-06 14:10:27\n' +
    '---\n' +
    '\n' +
    '\n' +
    '최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에 있어\n' +
    '시도해 봤던 방법을 기록으로 남겨본다. (JSON server는 사용할 줄 안다는 가정하에서 포스팅한다.)\n' +
    '\n' +
    '내 경우엔 mock API 구현에 편의를 위해 [JSON server](https://github.com/typicode/json-server)를\n' +
    '사용해 왔는데, 역시 이를 베이스로 하고 JWT 관련 패키지를 추가하여 구현을 시도해봤다.\n' +
    '\n' +
    '## 추가 한 auth 관련 패키지\n' +
    '\n' +
    '- [json-server-auth](https://github.com/jeremyben/json-server-auth)\n' +
    '\n' +
    '  JSON server용으로 만들어진 JWT 인증 미들웨어다.\n' +
    '  다른 몇 가지 패키지들을 찾아보고 가장 간편하게 구축 가능하고 문서화가 잘 되어 있는 녀석을\n' +
    '  찾다보니 이 녀석으로 정착했다.\n' +
    '\n' +
    '- [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken)\n' +
    '\n' +
    '  패키지 이름 그대로 JWT의 구현체인데, JWT verifier가 필요해서 가져왔다 = _=a\n' +
    '\n' +
    '- [cors](https://github.com/expressjs/cors)\n' +
    '\n' +
    '  CORS 관련 설정을 위한 Express용 미들웨어로, HEADER를 조작하게 되면 pre-flight 요청을\n' +
    '  처리해야 하는데 여기서 CORS 문제가 발생되기 때문에 이를 해결하기 위해서 설치 했다.\n' +
    '\n' +
    '## 기본 설정\n' +
    '\n' +
    '사실 json-server-auth가 웬만한 것들은 알아서 처리해주고 있기 때문에 특별히 할 것은 없다.\n' +
    '\n' +
    '해당 매뉴얼을 참고해서 미리 정의 된 API 이름을 그대로 가져다 쓰기만 하면 JWT 발급부터 오류까지\n' +
    '알아서 처리해 준다. (참고로 이 토큰의 유효시간은 1시간이다)\n' +
    '\n' +
    '따라서, 해야 할 일이라고는 미리 정의 된 API 외 다른 이름을 쓰고 싶을 경우의 router rewrite,\n' +
    'CORS 설정 정도면 충분하다.\n' +
    '\n' +
    '설정 방법은 [express 공식문서](https://expressjs.com/en/resources/middleware/cors.html)를\n' +
    '참고했다.\n' +
    '\n' +
    '```javascript\n' +
    'const server = jsonServer.create();\n' +
    'const auth = require("json-server-auth");\n' +
    'const cors = require("cors");\n' +
    '\n' +
    '/**\n' +
    ' * 과제에선 GET, POST, DELETE만 필요했기 때문에\n' +
    ' * 3가지 method만 작성했고,\n' +
    ' * 어차피 mock api이고 local에서 구동되는 거라\n' +
    ' * origin을 all(*)로 설정했다.\n' +
    ' */\n' +
    'server.use(\n' +
    '  cors({\n' +
    '    origin: "*",\n' +
    '    preflightContinue: false,\n' +
    '    methods: "GET,POST,DELETE"\n' +
    '  })\n' +
    ');\n' +
    '/**\n' +
    ' * 모든 router에 대해 preflight 요청 활성화\n' +
    ' */\n' +
    'server.options("*", cors());\n' +
    '\n' +
    '// 중략\n' +
    '\n' +
    'server.use(auth);\n' +
    '```\n' +
    '\n' +
    '단지 이 기본 설정만으로 회원 가입, 로그인 시 JWT 발급이 가능하고 이후 클라이언트에서\n' +
    'API 호출 시 Authorization Header에 Bearer Token을 담아 던지기만 하면 된다.\n' +
    '\n' +
    '## users/me 구현\n' +
    '\n' +
    '그런데, json-server-auth는 회원 가입 혹은 로그인 시 accessToken만을 응답으로 내려주기\n' +
    '때문에 사용자를 식별할 방법이 없다.\n' +
    '\n' +
    '아쉽게도 이 부분은 직접 구현을 해야 하는 부분으로 보였다.\n' +
    '역시 대부분 생각하는게 비슷한지 동일한 니즈를 가진 유저의 질문이\n' +
    '[issue](https://github.com/jeremyben/json-server-auth/issues/12)로 등록되어 있었고\n' +
    '해당 issue를 참고해서 별도로 구현했다.\n' +
    '\n' +
    '```javascript\n' +
    '/**\n' +
    ' * JWT 검증을 위해 jsonwebtoken 모듈을 가져왔고,\n' +
    ' * JWT의 비밀키는 json-server-auth에서 가지고 있다\n' +
    ' */\n' +
    'const jwt = require("jsonwebtoken");\n' +
    'const JWT_SECRET_KEY = require("json-server-auth/dist/constants").JWT_SECRET_KEY;\n' +
    '\n' +
    '// 중략\n' +
    '\n' +
    'server.get(`/users/me`, auth, (req, res) => {\n' +
    '  const { authorization } = req.headers;\n' +
    '  if (!authorization) {\n' +
    '    res.status(401).jsonp("Missing authorization header");\n' +
    '    return;\n' +
    '  }\n' +
    '  const [scheme, token] = authorization.split(" ");\n' +
    '  if (scheme !== "Bearer") {\n' +
    '    res.status(401).jsonp("Incorrect authorization scheme");\n' +
    '    return;\n' +
    '  }\n' +
    '  if (!token) {\n' +
    '    res.status(401).jsonp("Missing token");\n' +
    '    return;\n' +
    '  }\n' +
    '\n' +
    '  try {\n' +
    '    const data = jwt.verify(token, JWT_SECRET_KEY);\n' +
    '    const { db } = req.app;\n' +
    '    // ... 은 그냥 나머지 property들\n' +
    '    const { id, email, ... } = db\n' +
    '      .get("users")\n' +
    '      .find({ email: data.email })\n' +
    '      .value();\n' +
    '    res.status(200).json({ id, email, ... });\n' +
    '  } catch (err) {\n' +
    '    res.status(401).jsonp(err.message);\n' +
    '  }\n' +
    '});\n' +
    '```\n' +
    '\n' +
    '이렇게 해서 사용자 정보를 내려주는 users/me API도 구현했다.\n' +
    '\n' +
    '생각보다 어렵지 않게 mock에서도 인증 구현이 되서 이후로도 요긴하게(?) 사용할 수 있을 것 같다.\n' +
    '\n' +
    '## 아쉬운 부분\n' +
    '\n' +
    'json-server-auth가 내부적으로 정확히 어떻게 동작하는지까지는 찾아보지 않았는데, mock api\n' +
    '구동 중에 post 등으로 발생된 리소스는 권한이 정상적으로 동작하는 반면, mock api가 구동 되기\n' +
    '전에 존재하는 리소스는 권한이 정상적으로 동작하지 않았다.\n' +
    '\n' +
    '즉, 생성한 유저만 조회가 가능한 리소스를 설정해두었을 때, 테스트 중 mock api를 내렸다가 다시\n' +
    '올리면 기존 리소스가 사라지는 것은 아니기 때문에 기존 것이 전체가 조회 가능한 권한이 되어버리는\n' +
    '문제가 발생하기는 하더라...\n' +
    '\n' +
    '그리고 또 한가지, mock API 작성과 동시에 swagger 문서를 만들었는데 swagger 사이트에 올려\n' +
    'API 테스트를 돌리려고 하면 토큰을 발급 받을 방법을 모르겠더라 = _=a\n' +
    '결국 Swagger 사이트에 올리면 인증 테스트를 할 수 없더라는... 쿨럭...\n' +
    '\n' +
    '물론 로컬에 swagger도 설치해서 구동하면 되기는 하지만, 협업 시에는 response에 관련 된\n' +
    'yml만 작성해 올리는 걸로 만족해야 하나 싶다.',
  slug: 'implementing-authentication-with-json-server',
  published: true,
  comments: true,
  layout: 'post',
  photos: [],
  link: '',
  _id: 'clcytfa4s00aftaww0wf8086s',
  content: '<p>최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에 있어\n' +
    '시도해 봤던 방법을 기록으로 남겨본다. (JSON server는 사용할 줄 안다는 가정하에서 포스팅한다.)</p>\n' +
    '<p>내 경우엔 mock API 구현에 편의를 위해 <a href="https://github.com/typicode/json-server">JSON server</a>를\n' +
    '사용해 왔는데, 역시 이를 베이스로 하고 JWT 관련 패키지를 추가하여 구현을 시도해봤다.</p>\n' +
    '<h2 id="추가-한-auth-관련-패키지"><a href="#추가-한-auth-관련-패키지" class="headerlink" title="추가 한 auth 관련 패키지"></a>추가 한 auth 관련 패키지</h2><ul>\n' +
    '<li><p><a href="https://github.com/jeremyben/json-server-auth">json-server-auth</a></p>\n' +
    '<p>JSON server용으로 만들어진 JWT 인증 미들웨어다.\n' +
    '다른 몇 가지 패키지들을 찾아보고 가장 간편하게 구축 가능하고 문서화가 잘 되어 있는 녀석을\n' +
    '찾다보니 이 녀석으로 정착했다.</p>\n' +
    '</li>\n' +
    '<li><p><a href="https://www.npmjs.com/package/jsonwebtoken">jsonwebtoken</a></p>\n' +
    '<p>패키지 이름 그대로 JWT의 구현체인데, JWT verifier가 필요해서 가져왔다 &#x3D; _&#x3D;a</p>\n' +
    '</li>\n' +
    '<li><p><a href="https://github.com/expressjs/cors">cors</a></p>\n' +
    '<p>CORS 관련 설정을 위한 Express용 미들웨어로, HEADER를 조작하게 되면 pre-flight 요청을\n' +
    '처리해야 하는데 여기서 CORS 문제가 발생되기 때문에 이를 해결하기 위해서 설치 했다.</p>\n' +
    '</li>\n' +
    '</ul>\n' +
    '<h2 id="기본-설정"><a href="#기본-설정" class="headerlink" title="기본 설정"></a>기본 설정</h2><p>사실 json-server-auth가 웬만한 것들은 알아서 처리해주고 있기 때문에 특별히 할 것은 없다.</p>\n' +
    '<p>해당 매뉴얼을 참고해서 미리 정의 된 API 이름을 그대로 가져다 쓰기만 하면 JWT 발급부터 오류까지\n' +
    '알아서 처리해 준다. (참고로 이 토큰의 유효시간은 1시간이다)</p>\n' +
    '<p>따라서, 해야 할 일이라고는 미리 정의 된 API 외 다른 이름을 쓰고 싶을 경우의 router rewrite,\n' +
    'CORS 설정 정도면 충분하다.</p>\n' +
    '<p>설정 방법은 <a href="https://expressjs.com/en/resources/middleware/cors.html">express 공식문서</a>를\n' +
    '참고했다.</p>\n' +
    '<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> server <span class="token operator">=</span> jsonServer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
    '<span class="token keyword">const</span> auth <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"json-server-auth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
    '<span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
    '\n' +
    '<span class="token comment">/**\n' +
    ' * 과제에선 GET, POST, DELETE만 필요했기 때문에\n' +
    ' * 3가지 method만 작성했고,\n' +
    ' * 어차피 mock api이고 local에서 구동되는 거라\n' +
    ' * origin을 all(*)로 설정했다.\n' +
    ' */</span>\n' +
    'server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n' +
    '  <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n' +
    '    <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>\n' +
    '    <span class="token literal-property property">preflightContinue</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n' +
    '    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token string">"GET,POST,DELETE"</span>\n' +
    '  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n' +
    '<span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
    '<span class="token comment">/**\n' +
    ' * 모든 router에 대해 preflight 요청 활성화\n' +
    ' */</span>\n' +
    'server<span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
    '\n' +
    '<span class="token comment">// 중략</span>\n' +
    '\n' +
    'server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
    '\n' +
    '<p>단지 이 기본 설정만으로 회원 가입, 로그인 시 JWT 발급이 가능하고 이후 클라이언트에서\n' +
    'API 호출 시 Authorization Header에 Bearer Token을 담아 던지기만 하면 된다.</p>\n' +
    '<h2 id="users-x2F-me-구현"><a href="#users-x2F-me-구현" class="headerlink" title="users&#x2F;me 구현"></a>users&#x2F;me 구현</h2><p>그런데, json-server-auth는 회원 가입 혹은 로그인 시 accessToken만을 응답으로 내려주기\n' +
    '때문에 사용자를 식별할 방법이 없다.</p>\n' +
    '<p>아쉽게도 이 부분은 직접 구현을 해야 하는 부분으로 보였다.\n' +
    '역시 대부분 생각하는게 비슷한지 동일한 니즈를 가진 유저의 질문이\n' +
    '<a href="https://github.com/jeremyben/json-server-auth/issues/12">issue</a>로 등록되어 있었고\n' +
    '해당 issue를 참고해서 별도로 구현했다.</p>\n' +
    '<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**\n' +
    ' * JWT 검증을 위해 jsonwebtoken 모듈을 가져왔고,\n' +
    ' * JWT의 비밀키는 json-server-auth에서 가지고 있다\n' +
    ' */</span>\n' +
    '<span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"jsonwebtoken"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
    '<span class="token keyword">const</span> <span class="token constant">JWT_SECRET_KEY</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"json-server-auth/dist/constants"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token constant">JWT_SECRET_KEY</span><span class="token punctuation">;</span>\n' +
    '\n' +
    '<span class="token comment">// 중략</span>\n' +
    '\n' +
    'server<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/users/me</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> auth<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n' +
    '  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> authorization <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>\n' +
    '  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>authorization<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
    '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Missing authorization header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
    '    <span class="token keyword">return</span><span class="token punctuation">;</span>\n' +
    '  <span class="token punctuation">&#125;</span>\n' +
    '  <span class="token keyword">const</span> <span class="token punctuation">[</span>scheme<span class="token punctuation">,</span> token<span class="token punctuation">]</span> <span class="token operator">=</span> authorization<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
    '  <span class="token keyword">if</span> <span class="token punctuation">(</span>scheme <span class="token operator">!==</span> <span class="token string">"Bearer"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
    '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Incorrect authorization scheme"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
    '    <span class="token keyword">return</span><span class="token punctuation">;</span>\n' +
    '  <span class="token punctuation">&#125;</span>\n' +
    '  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
    '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Missing token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
    '    <span class="token keyword">return</span><span class="token punctuation'... 4794 more characters,
  site: { data: { 'hero.db': [Array] } },
  excerpt: '',
  more: '<p>최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에 있어\n' +
    '시도해 봤던 방법을 기록으로 남겨본다. (JSON server는 사용할 줄 안다는 가정하에서 포스팅한다.)</p>\n' +
    '<p>내 경우엔 mock API 구현에 편의를 위해 <a href="https://github.com/typicode/json-server">JSON server</a>를\n' +
    '사용해 왔는데, 역시 이를 베이스로 하고 JWT 관련 패키지를 추가하여 구현을 시도해봤다.</p>\n' +
    '<h2 id="추가-한-auth-관련-패키지"><a href="#추가-한-auth-관련-패키지" class="headerlink" title="추가 한 auth 관련 패키지"></a>추가 한 auth 관련 패키지</h2><ul>\n' +
    '<li><p><a href="https://github.com/jeremyben/json-server-auth">json-server-auth</a></p>\n' +
    '<p>JSON server용으로 만들어진 JWT 인증 미들웨어다.\n' +
    '다른 몇 가지 패키지들을 찾아보고 가장 간편하게 구축 가능하고 문서화가 잘 되어 있는 녀석을\n' +
    '찾다보니 이 녀석으로 정착했다.</p>\n' +
    '</li>\n' +
    '<li><p><a href="https://www.npmjs.com/package/jsonwebtoken">jsonwebtoken</a></p>\n' +
    '<p>패키지 이름 그대로 JWT의 구현체인데, JWT verifier가 필요해서 가져왔다 &#x3D; _&#x3D;a</p>\n' +
    '</li>\n' +
    '<li><p><a href="https://github.com/expressjs/cors">cors</a></p>\n' +
    '<p>CORS 관련 설정을 위한 Express용 미들웨어로, HEADER를 조작하게 되면 pre-flight 요청을\n' +
    '처리해야 하는데 여기서 CORS 문제가 발생되기 때문에 이를 해결하기 위해서 설치 했다.</p>\n' +
    '</li>\n' +
    '</ul>\n' +
    '<h2 id="기본-설정"><a href="#기본-설정" class="headerlink" title="기본 설정"></a>기본 설정</h2><p>사실 json-server-auth가 웬만한 것들은 알아서 처리해주고 있기 때문에 특별히 할 것은 없다.</p>\n' +
    '<p>해당 매뉴얼을 참고해서 미리 정의 된 API 이름을 그대로 가져다 쓰기만 하면 JWT 발급부터 오류까지\n' +
    '알아서 처리해 준다. (참고로 이 토큰의 유효시간은 1시간이다)</p>\n' +
    '<p>따라서, 해야 할 일이라고는 미리 정의 된 API 외 다른 이름을 쓰고 싶을 경우의 router rewrite,\n' +
    'CORS 설정 정도면 충분하다.</p>\n' +
    '<p>설정 방법은 <a href="https://expressjs.com/en/resources/middleware/cors.html">express 공식문서</a>를\n' +
    '참고했다.</p>\n' +
    '<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> server <span class="token operator">=</span> jsonServer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
    '<span class="token keyword">const</span> auth <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"json-server-auth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
    '<span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
    '\n' +
    '<span class="token comment">/**\n' +
    ' * 과제에선 GET, POST, DELETE만 필요했기 때문에\n' +
    ' * 3가지 method만 작성했고,\n' +
    ' * 어차피 mock api이고 local에서 구동되는 거라\n' +
    ' * origin을 all(*)로 설정했다.\n' +
    ' */</span>\n' +
    'server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n' +
    '  <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n' +
    '    <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>\n' +
    '    <span class="token literal-property property">preflightContinue</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n' +
    '    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token string">"GET,POST,DELETE"</span>\n' +
    '  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n' +
    '<span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
    '<span class="token comment">/**\n' +
    ' * 모든 router에 대해 preflight 요청 활성화\n' +
    ' */</span>\n' +
    'server<span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
    '\n' +
    '<span class="token comment">// 중략</span>\n' +
    '\n' +
    'server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
    '\n' +
    '<p>단지 이 기본 설정만으로 회원 가입, 로그인 시 JWT 발급이 가능하고 이후 클라이언트에서\n' +
    'API 호출 시 Authorization Header에 Bearer Token을 담아 던지기만 하면 된다.</p>\n' +
    '<h2 id="users-x2F-me-구현"><a href="#users-x2F-me-구현" class="headerlink" title="users&#x2F;me 구현"></a>users&#x2F;me 구현</h2><p>그런데, json-server-auth는 회원 가입 혹은 로그인 시 accessToken만을 응답으로 내려주기\n' +
    '때문에 사용자를 식별할 방법이 없다.</p>\n' +
    '<p>아쉽게도 이 부분은 직접 구현을 해야 하는 부분으로 보였다.\n' +
    '역시 대부분 생각하는게 비슷한지 동일한 니즈를 가진 유저의 질문이\n' +
    '<a href="https://github.com/jeremyben/json-server-auth/issues/12">issue</a>로 등록되어 있었고\n' +
    '해당 issue를 참고해서 별도로 구현했다.</p>\n' +
    '<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**\n' +
    ' * JWT 검증을 위해 jsonwebtoken 모듈을 가져왔고,\n' +
    ' * JWT의 비밀키는 json-server-auth에서 가지고 있다\n' +
    ' */</span>\n' +
    '<span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"jsonwebtoken"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
    '<span class="token keyword">const</span> <span class="token constant">JWT_SECRET_KEY</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"json-server-auth/dist/constants"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token constant">JWT_SECRET_KEY</span><span class="token punctuation">;</span>\n' +
    '\n' +
    '<span class="token comment">// 중략</span>\n' +
    '\n' +
    'server<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/users/me</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> auth<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n' +
    '  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> authorization <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>\n' +
    '  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>authorization<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
    '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Missing authorization header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
    '    <span class="token keyword">return</span><span class="token punctuation">;</span>\n' +
    '  <span class="token punctuation">&#125;</span>\n' +
    '  <span class="token keyword">const</span> <span class="token punctuation">[</span>scheme<span class="token punctuation">,</span> token<span class="token punctuation">]</span> <span class="token operator">=</span> authorization<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
    '  <span class="token keyword">if</span> <span class="token punctuation">(</span>scheme <span class="token operator">!==</span> <span class="token string">"Bearer"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
    '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Incorrect authorization scheme"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
    '    <span class="token keyword">return</span><span class="token punctuation">;</span>\n' +
    '  <span class="token punctuation">&#125;</span>\n' +
    '  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
    '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Missing token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
    '    <span class="token keyword">return</span><span class="token punctuation'... 4794 more characters,
  path: [Getter],
  permalink: [Getter],
  full_source: [Getter],
  asset_dir: [Getter],
  tags: [Getter],
  categories: [Getter],
  prev: _Document {
    title: 'Atomic Design + Storybook 적용 후기',
    thumbnail: '/upload/2021/thumbs/atomic-storybook-vue.jpg',
    hero: null,
    seo: {
      description: 'atomic design을 적용하고 storybook을 토대로 디자인 시스템을 구축해보며 실패 했던\n' +
        '이유와 적용 경험으로 얻은 것들을 풀어보고자 한다.\n',
      image: '/upload/2021/atomic-storybook-vue.jpg'
    },
    style: '.hero {\n' +
      '  &-wrapper {\n' +
      '    text-shadow:\n' +
      '      1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
      '      -1px -1px 1em rgba(20, 12, 24, 0.5);\n' +
      '  }\n' +
      '  &__image {\n' +
      '    opacity: 0.5\n' +
      '  }\n' +
      '}\n',
    date: Moment<2021-03-03T23:42:14+09:00>,
    _content: '\n' +
      '\n' +
      'ㄱ사에서 프로덕트를 만들며 [atomic design](https://atomicdesign.bradfrost.com/chapter-2/)을\n' +
      '적용하고 [storybook](https://storybook.js.org/)을 토대로 디자인 시스템을 구축해보기로\n' +
      '했다. 프로젝트 진행 초기에는 디자이너도 동의하는 부분이었지만 제대로 진행되지 못했고 결국\n' +
      '디자인 시스템을 구축하는 것은 실패로 돌아갔다.\n' +
      '\n' +
      '실패에 대한 이유와 적용 경험으로 얻은 것들을 풀어보고자 한다.\n' +
      '참고로 atomic design이나 storybook이 무엇인지는 글에 포함 시키지 않는다. 내가 글을 쓰는\n' +
      '것보다는 이미 좋은 글들이 많으니까 😁\n' +
      '\n' +
      '## 적용기\n' +
      '\n' +
      '### 실패 경험\n' +
      '\n' +
      '앞서 언급한 것처럼 입사 초 디자이너와 이야기 할 때에는storybook을 통한 디자인 시스템 구축에\n' +
      '대한 합의 점이 있었고, 이를 위해서 그 동안 관심을 가지고 있었던 atomic design을 본격적으로\n' +
      '적용해보기로 했었다.\n' +
      '\n' +
      '언제나 처음이 어렵듯이 처음 적용해 본 atomic design과 storybook은 제법 쉽지 않았다.\n' +
      '사실 당시의 storybook 버전과 Vue가 궁합이 안 맞아도 너무 안 맞았었기 때문에 발생되는 이슈가\n' +
      '많았던 것...\n' +
      '\n' +
      '하지만 이 문제를 미뤄두어도 일단 디자인 시스템 구축과 storybook 도입은 실패로 돌아 갔다.\n' +
      '\n' +
      '#### 일정 상의 문제\n' +
      '\n' +
      '일단은 개발 일정 상의 문제가 가장 크게 작용되었다.\n' +
      '\n' +
      '디자인 시스템을 구축하자면 디자이너와 긴밀하게 이야기가 진행되어야 하는데 도무지 그럴 시간적\n' +
      '여유가 없었다. 그도 그럴 것이 내가 입사한 4월부터 디자인 작업이 시작되었는데, 8월을 오픈\n' +
      '시점으로 둔 상태에서 7월에야 디자인이 나왔고 그마저도 계속 일부분은 완료되지 않고 미확정\n' +
      '상태로 진행되었다.\n' +
      '\n' +
      '디자인이 진행되고 있던 초기에는 Vue와 storybook을 통합하느라 시간을 보내고, API도 완료된\n' +
      '디자인 화면을 기준으로 만들고 있었으니 뒤로 갈 수록 개발 시간이 부족했고, 더구나 최초 예상\n' +
      '범위는 시간이 흐를 수록 점점 덩어리가 커져 가더니 MVP가 아니라 그냥 커다란 덩어리가 되어\n' +
      '버리는 통에 개발에만 시간을 쏟아도 모자를 지경이 되어버렸다. (실제로 일정 상에 문제가\n' +
      '생기기도 했다)\n' +
      '\n' +
      '#### 디자이너의 컴포넌트 단위에 대한 이해 부족\n' +
      '\n' +
      '두 번째 문제는 디자이너의 컴포넌트 단위에 대한 이해가 부족하다는 거였다. (어쩌면\n' +
      '커뮤니케이션의 문제일 수도 있다.)\n' +
      '\n' +
      '벡터 툴을 가지고 포토샵처럼 쓰는 것도 문제였지만, 예를 들어 버튼 컴포넌트의 경우 분명 같은\n' +
      '버튼 컴포넌트인데 동일한 스타일을 가지고 있지 않다. 가장 많게는 border-radius 사이즈가 너무\n' +
      '다양하게 나타났고, 종종 font-size나 font-weight가 차이가 났다.\n' +
      '\n' +
      '물론 디자이너의 눈에 이 페이지에서는 이렇게 보이는 게 이쁘다가 나올 수는 있다고 생각한다.\n' +
      '하지만 만들어야 하는 프로덕트는 아트웍이나 각각 개별 페이지 전자 인쇄물이 아니라, 여러\n' +
      '페이지로 구성되어 있는 하나의 웹사이트, 하나의 웹 어플리케이션이고 특히 컴포넌트 관점의 개발\n' +
      '도구를 사용하는 환경에서 개별 컴포넌트의 베리에이션 기준이 명확하지 않으면 전부 하드코딩해야\n' +
      '한다는 것이 된다.\n' +
      '\n' +
      '또한, 이 프로젝트에서는 디자인 변수를 미리 잡아두고 시작했는데 — 글꼴 크기 세트, 컬러 세트\n' +
      '등, 전달 받은 디자인 상에서 계속 사전 정의된 컬러 이름이 나오다가 갑자기 헥스 코드나 rgb(a)\n' +
      '값이 나타나서 확인해 보면 정의 된 값 이외의 것들이었다.\n' +
      '\n' +
      '문제는 이러한 것들이 적지 않게 튀어 나왔다는 것이고, 이미 color set을 정의해 둔 상태에서\n' +
      '어디에도 끼우기가 너무 어렵고 (그레이 색상을 12단계로 설정해 두었는데 갑자기 그 사이 어딘가의\n' +
      '값이 툭...), 해당 컬러 값이 얼마나 자주 사용 되는 지, 또 다른 어딘가의 사이 값이 추가로\n' +
      '존재하는지 확인 하려면 불필요하게 소비되는 리소스가 너무 많이 들어간다는 거였다.\n' +
      '\n' +
      '이러한 잦은 예상 외의 베리에이션이 나타나면서 하드 코딩이 잦게 발생되고, 결국은 CSS 규격화는\n' +
      '점점 물 건너 가며 template이나 organism 단위에서 CSS를 override하는 지저분한 상황이 연출\n' +
      '되기도 했다. (심하게는 시안 상에는 button 컴포넌트를 가져다 그려 놓았으나 실제는 체크 박스\n' +
      '기능인 것도 있었다.)\n' +
      '\n' +
      '어찌보면 커뮤니케이션이 원활하지 않았기 때문에 이 부분에 대한 협의가 이루어지지 않은 것도\n' +
      '있겠지만, 경험 상 퍼블리셔로서 일할 때부터 늘 디자이너와 겪는 마찰 부분이기도 하다.\n' +
      '\n' +
      '#### Nuxt와 Storybook의 궁합 문제\n' +
      '\n' +
      '세 번째 문제는 nuxt와 (당시의) storybook이 서로 궁합이 안 맞아도 너무 안 맞는다는 거였다.\n' +
      '\n' +
      'storybook에서 왜 오류가 나지?, 왜 안되지? 하고 구글링 해보면 issue로 등록되어 있거나\n' +
      'storybook 문제라는 stackoverflow의 답변들을 쉽게 발견할 수 있었다.\n' +
      '\n' +
      '본래는 온갖 해외 자료들을 뒤져가며 해결했던 그 모든 방법들을 포스팅 해보려고 했었는데, 어느\n' +
      '정도 바쁜 것들이 정리되고 본격적으로 포스팅을 시작해보기 위해 한 단계 한 단계 다시 사례를\n' +
      '만들려고 하니 버전업과 함께 해결되어 버려서 ㅋㅋㅋ (그래서 이슈 해결 보다는\n' +
      'nuxt-storybook으로 통합하는 것과 수동으로 한 땀 한 땀 통합하는 방법을 비교해서 올렸었다.)\n' +
      '\n' +
      '가장 짜증(?) 났던 것 중 하나가 mdx 포맷과 addon과 vue의 통합이 거지 같았... (addon-docs와\n' +
      'controls와 vue와 mdx가 만나면... 하하하...) 지금은 mdx를 이용해 넘나 잘 쓰고 있다.\n' +
      '\n' +
      '그리고 다른 개인 작업에서 storybook과 pug를 통합해보고 있다(읭?)\n' +
      '\n' +
      '### 재 시도\n' +
      '\n' +
      '작년 11월 IAT 세미나를 준비하면서 시연에 필요한 페이지를 Vue로 만들면서 다시 적용해봤다.\n' +
      '\n' +
      '이미 storybook 버전업으로 통합이 잘 되었고, 자잘한 버그 등의 이슈도 있었지만 다행히\n' +
      'github을 통해 issue로 등록할 때마다 nuxt-storybook 커뮤니티에서 빠르게 대응해줘서 금방\n' +
      '처리되었다.\n' +
      '\n' +
      '거기에 이직을 진행하는 과정에서 사전 과제가 나올 때마다 atomic design 방법론을 적용해서\n' +
      '만들면서 계속해서 storybook을 적용해갔고, 덕분에 이전 회사에서 완성하지 못했던 디자인\n' +
      '시스템을 page 단위까지 구축해볼 수 있었다. (뭐 그렇다고 잘 구축했다는 건 아니다. 그냥 해\n' +
      '봤다고...)\n' +
      '\n' +
      '그리고 현재는 hexo 블로그 테마를 새로 제작하면서 storybook + pug를 시도해보고 있다. (응??)\n' +
      '\n' +
      '## 실패를 피하려면,\n' +
      '\n' +
      '실패해보고 개인적으로 끝까지 storybook을 간소하게(?) 만들어보고 나니 드는 생각이, 컴포넌트\n' +
      '관점에서의 디자인 시스템 도입에 실패를 피하려면,\n' +
      '\n' +
      '- 일단 일정이 많이 들어갈 소지가 높다는 것을 염두해 두어야 하고\n' +
      '- 디자이너의 역할이 상당히 필요한 듯 하다,\n' +
      '\n' +
      '  구체적으로 이야기 해보면, 디자이너가 컴포넌트 관점에서의 개발이라는 컨셉을 이해하고 있어야\n' +
      '  하고 베리에이션의 기준을 명확히 할 수 있어야 할 것 같다.\n' +
      '  디자인부터 atom, molecule, organism 등에 대한 이해를 바탕으로 각 컴포넌트가 설계되고\n' +
      '  규격화 되어야 갈아엎고 다시 만들어야 할까 고민하는 상황이 없을 것 같다.\n' +
      '\n' +
      '- 컴포넌트를 어떻게 그룹핑하고 분류할 것인지, 서로 유기적으로 엮여야하는 인터랙션이 있다면\n' +
      '  어떻게 조합해서 이벤트 처리를 어떻게 할 것인지 등을 잘 고려해 두어야, 조립하다가\n' +
      '  재그룹핑하고 재분류하는 일을 줄일 수 있겠더라 (아, 이건 어쩔 수 없는 숙명이려나...)\n' +
      '  사실 이 부분은 지금도 만들어 볼 때마다 반복 중인 것 같기도 하다.\n' +
      '\n' +
      '## 고민 포인트\n' +
      '\n' +
      'atomic design과 storybook을 적용해가면서 몇 가지 고민 되는 포인트가 있었는데,\n' +
      '\n' +
      '첫째는 이걸 atom으로 두어야 하는가 molecule로 두어야 하는가의 고민이었다.\n' +
      '\n' +
      '한 예로 텍스트 필드 컴포넌트를 만드는데 참고한 UI Kit에서는 텍스트 필드에 항상 레이블과\n' +
      '오류 메세지가 함께 존재했고, 이 세 가지 요소 — 레이블, 입력 상자, 오류 메세지를 최소 단위로\n' +
      '보고 atom으로 두는 것이 적절할지, 아니면 아토믹 디자인에서 설명하는 텍스트 그대로 HTML\n' +
      '엘리먼트 단위를 atom으로 보고 컴포넌트는 molecule로 두어야 하는가의 고민이 반복될 수 밖에\n' +
      '없었다. (해당 UI Kit에서는 각 구성 요소가 분리된 더 작은 컴포넌트가 없었기 때문에 그 묶음을\n' +
      '최소 단위로 간주해서 atom으로 두는 걸 최종적으로 선택했다.)\n' +
      '\n' +
      '둘째는 Vue에서 이벤트 핸들링을 할 때는 `emit`을 사용해서 커스텀 이벤트를 상위 컴포넌트로\n' +
      '올려서 처리하는 방식을 권장하고 있는데, 이게 코드를 너무 지저분하게 만드는 듯한 느낌을 지우기\n' +
      '어려웠다. 더불어  Vue devtools에서도 한 번의 액션에 컴포넌트 중첩 수준 만큼에 해당하는\n' +
      '로그가 연달아 발생하니 추적 자체에도 제법 많은 시간을 써야 했다. 내 경우엔\n' +
      '[이벤트 핸들러를 props로 내려주는 방식](https://mulder21c.github.io/2021/01/24/pass-function-as-props-in-vue/)을\n' +
      '선택했는데, 이를 안티 패턴으로 보는 블로그 게시글도 있어서 다소 찜찜한 기분은 남아있다.\n' +
      '\n' +
      '셋째는 Vuex의 사용이었는데, atomic design의 컨셉 상 실제 데이터가 page 단위에서 바인딩\n' +
      '되는 형태를 따르다보니 atom, molecule, organism, template 단위에서는 Vuex 바인딩을\n' +
      '피하는 쪽으로 만들어야해서 적지 않게 props가 발생되는 느낌도 있었고, 때로는 너무 과하게\n' +
      '제한하는 건 아닐까 하는 생각도 들기도 했다. (하지만 내가 깊게 이해하지 못할 경우에는 우선\n' +
      '명세 같은 것을 최대한 존중하자는 주의라... 일단은 page에서만 Vuex에 접근하는 쪽을 유지하고\n' +
      '있다.)\n' +
      '\n' +
      '넷째는 앞서 "실패를 피하려면"에서도 마지막에 언급했던 것이지만, 어떤 컴포넌트를 조합하다 보면\n' +
      '어떻게 그룹핑 하고 어떻게 분류할 것인가가 계속 고민의 연속이 된다.\n' +
      '\n' +
      '예를 들어, modal dialog를 만드는데 dialog 껍데기와 닫기 버튼을 하나의 컴포넌트로 두고,\n' +
      'dialog 콘텐츠를 slot으로 처리해서 다른 컴포넌트가 slot으로 삽입되는 구조로 만들었는데 초점\n' +
      '관리에서 문제가 되어 버렸다. tab sequence가 양쪽 컴포넌트에 걸쳐 있다 보니 focus trap을\n' +
      '만들어야 하는데 이벤트 관리를 어떻게...\n' +
      '이리 저리 컴포넌트를 재그룹핑 해봐도 해결책이 보이지 않아 결국은 modal dialog 쪽에서\n' +
      'tabbable 엘리먼트들을 DOM에서 직접 가져와서 처리하는 방식으로 해결해두기는 했는데 인터랙션에\n' +
      '의한 컴포넌트 간의 상호작용을 고려했을 때 컴포넌트가 이렇게 두는 게 맞는지 계속 고민이다.\n' +
      '\n' +
      '다섯째는 내가 아직 Storybook을 어떻게 활용할 수 있는가에 대한 경험치 부족과 지식\n' +
      '부족이겠지만, docs와 story를 어떻게 구성해야 하는가다...\n' +
      '\n' +
      '현재는 생각 나는 대로 구성해보고 있지만, 썩 마음에 드는 건 아니다.\n' +
      '다른 기업들은 어떻게 생각하고 고민해서 어떤 방향으로 만들고 있는지, 어떻게 했더니 어떤 점이\n' +
      '어려웠었는지 이야기를 심도 있게 들어보고 싶다 ㅠㅠ\n' +
      '\n' +
      '## 어려웠던 점\n' +
      '\n' +
      '일단, 레퍼런스가 생각보다 많지 않았다.\n' +
      '다른 기업의 기술 블로그를 통해서 결과물의 일부분을 살짝 맛을 볼 수는 있는데, 결과물만 보는\n' +
      '것이지 과정을 보는 것이 아니다보니 어떤 목적과 목표를 가지고 어떻게 고민해서 만들어 왔는지의\n' +
      '여정을 보거나, 어떻게 하는 것이 모범 사례인지를 알기가 어렵다.\n' +
      '그냥 계속 남의 것을 염탐(?)하고 과정을 추측해 보는 방법 밖에는 없는걸까? 😥😥\n' +
      '\n' +
      '또, storybook이 기본적으로 react를 사용하고 있어서 그런지 다소 Vue에는 궁합이 부족한 부분이\n' +
      '더러 있고, 이걸 해결할 다른 방법을 찾는 게 쉽지 않다.\n' +
      '일례로 storybook의 소스 코드 뷰어가 react 문법을 기반으로 보여주기 때문에 실제로 보여주고\n' +
      '싶은 Vue 문법이 아니라서 이걸 별도로 보여줄 방법을 찾아야 하는가 혹은 그냥 둘 것인가 등의\n' +
      '고민 포인트가 생기고 해결은 당연히(?) 쉽지 않다. (내가 할 수 있는 건 github 이슈에 질문을\n' +
      '남기는 것 뿐...)\n' +
      '\n' +
      '더구나 주변에 이거 쓰는 사람 찾기가 어렵... 나란 놈은 인맥이 왜 이 모냥인거지...\n' +
      '\n' +
      '## 좋았던 점\n' +
      '\n' +
      '- 우선, atomic design의 컨셉 상 page 단위에 이르러서야 데이터가 바인딩 되기 때문에\n' +
      '  외부로부터 주입받아야 하는 데이터에 의존적이지 않은 컴포넌트 구현이 이루어지고 따라서\n' +
      '  재사용성이 매우 높아졌다.\n' +
      '  물론 반대로 이야기 하면, 그만큼 확장성과 추상성에 대한 고민을 해야 하고 생각 이상으로(?)\n' +
      '  수 많은 props가 탄생하기도... 쿨럭...\n' +
      '\n' +
      '- storybook이 있으니 컴포넌트에 어떤 props가 필수였는지 값에 대한 제한 사항은 무엇인지\n' +
      '  코드 레벨에서 확인하지 않아도 되니 편하더라.\n' +
      '  단지 한 쪽 브라우저에 storybook을 띄워 놓기만 하면 찾는 건 금방이니 코드를 보고 인식하는\n' +
      '  것보다 더 직관적이고 빠르다. (아, 물론 문서를 잘 작성했을 때의 이야기...)\n' +
      '\n' +
      '  그러고 보니, storybook이 jsdoc를 통한 유추가 좀 더 잘 되었으면 싶다. 내가 아직 몰라서\n' +
      '  그런 것일 수도 있지만, storybook + vue에서 props에 대한 문서화가 jsdoc으로는 이루어지지\n' +
      '  않는 것 같다. 이것만 잘 되어도 문서화가 코드 레벨에서 많이 정리 될 수 있을 거 같은데...\n' +
      '  (아, 오히려 컴포넌트 코드가 더 지저분해 보일 수도 있으니 별도 문서로 빼는 게 나을 수도\n' +
      '  있겠다는 생각도 들기도 한다.)\n' +
      '\n' +
      '- 내가 가진 기술 부채 중 한 가지가 TDD다. 그래서 컴포넌트에 대한 테스트가 다소 우려 사항\n' +
      '  중의 하나인데, storybook이 그 우려를 조금이나마 완화시켜 주고 있다.\n' +
      '\n' +
      '  storybook이 없을 때에는 한 개 컴포넌트만 렌더링 시켜서 확인하기에는 다소 불편해서 페이지\n' +
      '  단위에서 확인했었는데, storybook 이후로는 개별 컴포넌트 별로 바로 확인이 가능하니 적어도\n' +
      '  props나 event 처리에 대한 오류를 빨리 줄일 수 있었다.\n' +
      '\n' +
      '- storybook에는 다양한 addon들이 존재하는데 viewport(responsive), a11y, dark mode,\n' +
      '  zeplin&middot;figma viewer embedding 등과 같은 것들은 꽤나 도움이 될 만한 것들이라고\n' +
      '  생각된다.\n' +
      '  접근성에 지대한(?) 관심을 가지고 있는 나로서는 addon-a11y는 컴포넌트 단위부터 접근성에\n' +
      '  대한 정량 평가를 직관적으로 확인 할 수 있어 좋다고 생각한다.\n',
    source: '_posts/2021-03-03-comment-for-using-atomic-design-and-storybook.md',
    raw: '---\n' +
      'title: Atomic Design + Storybook 적용 후기\n' +
      'tags:\n' +
      '  - Atomic Design\n' +
      '  - Storybook\n' +
      '  - Design System\n' +
      'categories:\n' +
      '  - 개발노트\n' +
      '  - Front-End\n' +
      'thumbnail: /upload/2021/thumbs/atomic-storybook-vue.jpg\n' +
      'hero:\n' +
      'seo:\n' +
      '  description: |\n' +
      '    atomic design을 적용하고 storybook을 토대로 디자인 시스템을 구축해보며 실패 했던\n' +
      '    이유와 적용 경험으로 얻은 것들을 풀어보고자 한다.\n' +
      '  image: /upload/2021/atomic-storybook-vue.jpg\n' +
      'style: |\n' +
      '  .hero {\n' +
      '    &-wrapper {\n' +
      '      text-shadow:\n' +
      '        1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
      '        -1px -1px 1em rgba(20, 12, 24, 0.5);\n' +
      '    }\n' +
      '    &__image {\n' +
      '      opacity: 0.5\n' +
      '    }\n' +
      '  }\n' +
      'date: 2021-03-03 23:42:14\n' +
      '---\n' +
      '\n' +
      '\n' +
      'ㄱ사에서 프로덕트를 만들며 [atomic design](https://atomicdesign.bradfrost.com/chapter-2/)을\n' +
      '적용하고 [storybook](https://storybook.js.org/)을 토대로 디자인 시스템을 구축해보기로\n' +
      '했다. 프로젝트 진행 초기에는 디자이너도 동의하는 부분이었지만 제대로 진행되지 못했고 결국\n' +
      '디자인 시스템을 구축하는 것은 실패로 돌아갔다.\n' +
      '\n' +
      '실패에 대한 이유와 적용 경험으로 얻은 것들을 풀어보고자 한다.\n' +
      '참고로 atomic design이나 storybook이 무엇인지는 글에 포함 시키지 않는다. 내가 글을 쓰는\n' +
      '것보다는 이미 좋은 글들이 많으니까 😁\n' +
      '\n' +
      '## 적용기\n' +
      '\n' +
      '### 실패 경험\n' +
      '\n' +
      '앞서 언급한 것처럼 입사 초 디자이너와 이야기 할 때에는storybook을 통한 디자인 시스템 구축에\n' +
      '대한 합의 점이 있었고, 이를 위해서 그 동안 관심을 가지고 있었던 atomic design을 본격적으로\n' +
      '적용해보기로 했었다.\n' +
      '\n' +
      '언제나 처음이 어렵듯이 처음 적용해 본 atomic design과 storybook은 제법 쉽지 않았다.\n' +
      '사실 당시의 storybook 버전과 Vue가 궁합이 안 맞아도 너무 안 맞았었기 때문에 발생되는 이슈가\n' +
      '많았던 것...\n' +
      '\n' +
      '하지만 이 문제를 미뤄두어도 일단 디자인 시스템 구축과 storybook 도입은 실패로 돌아 갔다.\n' +
      '\n' +
      '#### 일정 상의 문제\n' +
      '\n' +
      '일단은 개발 일정 상의 문제가 가장 크게 작용되었다.\n' +
      '\n' +
      '디자인 시스템을 구축하자면 디자이너와 긴밀하게 이야기가 진행되어야 하는데 도무지 그럴 시간적\n' +
      '여유가 없었다. 그도 그럴 것이 내가 입사한 4월부터 디자인 작업이 시작되었는데, 8월을 오픈\n' +
      '시점으로 둔 상태에서 7월에야 디자인이 나왔고 그마저도 계속 일부분은 완료되지 않고 미확정\n' +
      '상태로 진행되었다.\n' +
      '\n' +
      '디자인이 진행되고 있던 초기에는 Vue와 storybook을 통합하느라 시간을 보내고, API도 완료된\n' +
      '디자인 화면을 기준으로 만들고 있었으니 뒤로 갈 수록 개발 시간이 부족했고, 더구나 최초 예상\n' +
      '범위는 시간이 흐를 수록 점점 덩어리가 커져 가더니 MVP가 아니라 그냥 커다란 덩어리가 되어\n' +
      '버리는 통에 개발에만 시간을 쏟아도 모자를 지경이 되어버렸다. (실제로 일정 상에 문제가\n' +
      '생기기도 했다)\n' +
      '\n' +
      '#### 디자이너의 컴포넌트 단위에 대한 이해 부족\n' +
      '\n' +
      '두 번째 문제는 디자이너의 컴포넌트 단위에 대한 이해가 부족하다는 거였다. (어쩌면\n' +
      '커뮤니케이션의 문제일 수도 있다.)\n' +
      '\n' +
      '벡터 툴을 가지고 포토샵처럼 쓰는 것도 문제였지만, 예를 들어 버튼 컴포넌트의 경우 분명 같은\n' +
      '버튼 컴포넌트인데 동일한 스타일을 가지고 있지 않다. 가장 많게는 border-radius 사이즈가 너무\n' +
      '다양하게 나타났고, 종종 font-size나 font-weight가 차이가 났다.\n' +
      '\n' +
      '물론 디자이너의 눈에 이 페이지에서는 이렇게 보이는 게 이쁘다가 나올 수는 있다고 생각한다.\n' +
      '하지만 만들어야 하는 프로덕트는 아트웍이나 각각 개별 페이지 전자 인쇄물이 아니라, 여러\n' +
      '페이지로 구성되어 있는 하나의 웹사이트, 하나의 웹 어플리케이션이고 특히 컴포넌트 관점의 개발\n' +
      '도구를 사용하는 환경에서 개별 컴포넌트의 베리에이션 기준이 명확하지 않으면 전부 하드코딩해야\n' +
      '한다는 것이 된다.\n' +
      '\n' +
      '또한, 이 프로젝트에서는 디자인 변수를 미리 잡아두고 시작했는데 — 글꼴 크기 세트, 컬러 세트\n' +
      '등, 전달 받은 디자인 상에서 계속 사전 정의된 컬러 이름이 나오다가 갑자기 헥스 코드나 rgb(a)\n' +
      '값이 나타나서 확인해 보면 정의 된 값 이외의 것들이었다.\n' +
      '\n' +
      '문제는 이러한 것들이 적지 않게 튀어 나왔다는 것이고, 이미 color set을 정의해 둔 상태에서\n' +
      '어디에도 끼우기가 너무 어렵고 (그레이 색상을 12단계로 설정해 두었는데 갑자기 그 사이 어딘가의\n' +
      '값이 툭...), 해당 컬러 값이 얼마나 자주 사용 되는 지, 또 다른 어딘가의 사이 값이 추가로\n' +
      '존재하는지 확인 하려면 불필요하게 소비되는 리소스가 너무 많이 들어간다는 거였다.\n' +
      '\n' +
      '이러한 잦은 예상 외의 베리에이션이 나타나면서 하드 코딩이 잦게 발생되고, 결국은 CSS 규격화는\n' +
      '점점 물 건너 가며 template이나 organism 단위에서 CSS를 override하는 지저분한 상황이 연출\n' +
      '되기도 했다. (심하게는 시안 상에는 button 컴포넌트를 가져다 그려 놓았으나 실제는 체크 박스\n' +
      '기능인 것도 있었다.)\n' +
      '\n' +
      '어찌보면 커뮤니케이션이 원활하지 않았기 때문에 이 부분에 대한 협의가 이루어지지 않은 것도\n' +
      '있겠지만, 경험 상 퍼블리셔로서 일할 때부터 늘 디자이너와 겪는 마찰 부분이기도 하다.\n' +
      '\n' +
      '#### Nuxt와 Storybook의 궁합 문제\n' +
      '\n' +
      '세 번째 문제는 nuxt와 (당시의) storybook이 서로 궁합이 안 맞아도 너무 안 맞는다는 거였다.\n' +
      '\n' +
      'storybook에서 왜 오류가 나지?, 왜 안되지? 하고 구글링 해보면 issue로 등록되어 있거나\n' +
      'storybook 문제라는 stackoverflow의 답변들을 쉽게 발견할 수 있었다.\n' +
      '\n' +
      '본래는 온갖 해외 자료들을 뒤져가며 해결했던 그 모든 방법들을 포스팅 해보려고 했었는데, 어느\n' +
      '정도 바쁜 것들이 정리되고 본격적으로 포스팅을 시작해보기 위해 한 단계 한 단계 다시 사례를\n' +
      '만들려고 하니 버전업과 함께 해결되어 버려서 ㅋㅋㅋ (그래서 이슈 해결 보다는\n' +
      'nuxt-storybook으로 통합하는 것과 수동으로 한 땀 한 땀 통합하는 방법을 비교해서 올렸었다.)\n' +
      '\n' +
      '가장 짜증(?) 났던 것 중 하나가 mdx 포맷과 addon과 vue의 통합이 거지 같았... (addon-docs와\n' +
      'controls와 vue와 mdx가 만나면... 하하하...) 지금은 mdx를 이용해 넘나 잘 쓰고 있다.\n' +
      '\n' +
      '그리고 다른 개인 작업에서 storybook과 pug를 통합해보고 있다(읭?)\n' +
      '\n' +
      '### 재 시도\n' +
      '\n' +
      '작년 11월 IAT 세미나를 준비하면서 시연에 필요한 페이지를 Vue로 만들면서 다시 적용해봤다.\n' +
      '\n' +
      '이미 storybook 버전업으로 통합이 잘 되었고, 자잘한 버그 등의 이슈도 있었지만 다행히\n' +
      'github을 통해 issue로 등록할 때마다 nuxt-storybook 커뮤니티에서 빠르게 대응해줘서 금방\n' +
      '처리되었다.\n' +
      '\n' +
      '거기에 이직을 진행하는 과정에서 사전 과제가 나올 때마다 atomic design 방법론을 적용해서\n' +
      '만들면서 계속해서 storybook을 적용해갔고, 덕분에 이전 회사에서 완성하지 못했던 디자인\n' +
      '시스템을 page 단위까지 구축해볼 수 있었다. (뭐 그렇다고 잘 구축했다는 건 아니다. 그냥 해\n' +
      '봤다고...)\n' +
      '\n' +
      '그리고 현재는 hexo 블로그 테마를 새로 제작하면서 storybook + pug를 시도해보고 있다. (응??)\n' +
      '\n' +
      '## 실패를 피하려면,\n' +
      '\n' +
      '실패해보고 개인적으로 끝까지 storybook을 간소하게(?) 만들어보고 나니 드는 생각이, 컴포넌트\n' +
      '관점에서의 디자인 시스템 도입에 실패를 피하려면,\n' +
      '\n' +
      '- 일단 일정이 많이 들어갈 소지가 높다는 것을 염두해 두어야 하고\n' +
      '- 디자이너의 역할이 상당히 필요한 듯 하다,\n' +
      '\n' +
      '  구체적으로 이야기 해보면, 디자이너가 컴포넌트 관점에서의 개발이라는 컨셉을 이해하고 있어야\n' +
      '  하고 베리에이션의 기준을 명확히 할 수 있어야 할 것 같다.\n' +
      '  디자인부터 atom, molecule, organism 등에 대한 이해를 바탕으로 각 컴포넌트가 설계되고\n' +
      '  규격화 되어야 갈아엎고 다시 만들어야 할까 고민하는 상황이 없을 것 같다.\n' +
      '\n' +
      '- 컴포넌트를 어떻게 그룹핑하고 분류할 것인지, 서로 유기적으로 엮여야하는 인터랙션이 있다면\n' +
      '  어떻게 조합해서 이벤트 처리를 어떻게 할 것인지 등을 잘 고려해 두어야, 조립하다가\n' +
      '  재그룹핑하고 재분류하는 일을 줄일 수 있겠더라 (아, 이건 어쩔 수 없는 숙명이려나...)\n' +
      '  사실 이 부분은 지금도 만들어 볼 때마다 반복 중인 것 같기도 하다.\n' +
      '\n' +
      '## 고민 포인트\n' +
      '\n' +
      'atomic design과 storybook을 적용해가면서 몇 가지 고민 되는 포인트가 있었는데,\n' +
      '\n' +
      '첫째는 이걸 atom으로 두어야 하는가 molecule로 두어야 하는가의 고민이었다.\n' +
      '\n' +
      '한 예로 텍스트 필드 컴포넌트를 만드는데 참고한 UI Kit에서는 텍스트 필드에 항상 레이블과\n' +
      '오류 메세지가 함께 존재했고, 이 세 가지 요소 — 레이블, 입력 상자, 오류 메세지를 최소 단위로\n' +
      '보고 atom으로 두는 것이 적절할지, 아니면 아토믹 디자인에서 설명하는 텍스트 그대로 HTML\n' +
      '엘리먼트 단위를 atom으로 보고 컴포넌트는 molecule로 두어야 하는가의 고민이 반복될 수 밖에\n' +
      '없었다. (해당 UI Kit에서는 각 구성 요소가 분리된 더 작은 컴포넌트가 없었기 때문에 그 묶음을\n' +
      '최소 단위로 간주해서 atom으로 두는 걸 최종적으로 선택했다.)\n' +
      '\n' +
      '둘째는 Vue에서 이벤트 핸들링을 할 때는 `emit`을 사용해서 커스텀 이벤트를 상위 컴포넌트로\n' +
      '올려서 처리하는 방식을 권장하고 있는데, 이게 코드를 너무 지저분하게 만드는 듯한 느낌을 지우기\n' +
      '어려웠다. 더불어  Vue devtools에서도 한 번의 액션에 컴포넌트 중첩 수준 만큼에 해당하는\n' +
      '로그가 연달아 발생하니 추적 자체에도 제법 많은 시간을 써야 했다. 내 경우엔\n' +
      '[이벤트 핸들러를 props로 내려주는 방식](https://mulder21c.github.io/2021/01/24/pass-function-as-props-in-vue/)을\n' +
      '선택했는데, 이를 안티 패턴으로 보는 블로그 게시글도 있어서 다소 찜찜한 기분은 남아있다.\n' +
      '\n' +
      '셋째는 Vuex의 사용이었는데, atomic design의 컨셉 상 실제 데이터가 page 단위에서 바인딩\n' +
      '되는 형태를 따르다보니 atom, molecule, organism, template 단위에서는 Vuex 바인딩을\n' +
      '피하는 쪽으로 만들어야해서 적지 않게 props가 발생되는 느낌도 있었고, 때로는 너무 과하게\n' +
      '제한하는 건 아닐까 하는 생각도 들기도 했다. (하지만 내가 깊게 이해하지 못할 경우에는 우선\n' +
      '명세 같은 것을 최대한 존중하자는 주의라... 일단은 page에서만 Vuex에 접근하는 쪽을 유지하고\n' +
      '있다.)\n' +
      '\n' +
      '넷째는 앞서 "실패를 피하려면"에서도 마지막에 언급했던 것이지만, 어떤 컴포넌트를 조합하다 보면\n' +
      '어떻게 그룹핑 하고 어떻게 분류할 것인가가 계속 고민의 연속이 된다.\n' +
      '\n' +
      '예를 들어, modal dialog를 만드는데 dialog 껍데기와 닫기 버튼을 하나의 컴포넌트로 두고,\n' +
      'dialog 콘텐츠를 slot으로 처리해서 다른 컴포넌트가 slot으로 삽입되는 구조로 만들었는데 초점\n' +
      '관리에서 문제가 되어 버렸다. tab sequence가 양쪽 컴포넌트에 걸쳐 있다 보니 focus trap을\n' +
      '만들어야 하는데 이벤트 관리를 어떻게...\n' +
      '이리 저리 컴포넌트를 재그룹핑 해봐도 해결책이 보이지 않아 결국은 modal dialog 쪽에서\n' +
      'tabbable 엘리먼트들을 DOM에서 직접 가져와서 처리하는 방식으로 해결해두기는 했는데 인터랙션에\n' +
      '의한 컴포넌트 간의 상호작용을 고려했을 때 컴포넌트가 이렇게 두는 게 맞는지 계속 고민이다.\n' +
      '\n' +
      '다섯째는 내가 아직 Storybook을 어떻게 활용할 수 있는가에 대한 경험치 부족과 지식\n' +
      '부족이겠지만, docs와 story를 어떻게 구성해야 하는가다...\n' +
      '\n' +
      '현재는 생각 나는 대로 구성해보고 있지만, 썩 마음에 드는 건 아니다.\n' +
      '다른 기업들은 어떻게 생각하고 고민해서 어떤 방향으로 만들고 있는지, 어떻게 했더니 어떤 점이\n' +
      '어려웠었는지 이야기를 심도 있게 들어보고 싶다 ㅠㅠ\n' +
      '\n' +
      '## 어려웠던 점\n' +
      '\n' +
      '일단, 레퍼런스가 생각보다 많지 않았다.\n' +
      '다른 기업의 기술 블로그를 통해서 결과물의 일부분을 살짝 맛을 볼 수는 있는데, 결과물만 보는\n' +
      '것이지 과정을 보는 것이 아니다보니 어떤 목적과 목표를 가지고 어떻게 고민해서 만들어 왔는지의\n' +
      '여정을 보거나, 어떻게 하는 것이 모범 사례인지를 알기가 어렵다.\n' +
      '그냥 계속 남의 것을 염탐(?)하고 과정을 추측해 보는 방법 밖에는 없는걸까? 😥😥\n' +
      '\n' +
      '또, storybook이 기본적으로 react를 사용하고 있어서 그런지 다소 Vue에는 궁합이 부족한 부분이\n' +
      '더러 있고, 이걸 해결할 다른 방법을 찾는 게 쉽지 않다.\n' +
      '일례로 storybook의 소스 코드 뷰어가 react 문법을 기반으로 보여주기 때문에 실제로 보여주고\n' +
      '싶은 Vue 문법이 아니라서 이걸 별도로 보여줄 방법을 찾아야 하는가 혹은 그냥 둘 것인가 등의\n' +
      '고민 포인트가 생기고 해결은 당연히(?) 쉽지 않다. (내가 할 수 있는 건 github 이슈에 질문을\n' +
      '남기는 것 뿐...)\n' +
      '\n' +
      '더구나 주변에 이거 쓰는 사람 찾기가 어렵... 나란 놈은 인맥이 왜 이 모냥인거지...\n' +
      '\n' +
      '## 좋았던 점\n' +
      '\n' +
      '- 우선, atomic design의 컨셉 상 page 단위에 이르러서야 데이터가 바인딩 되기 때문에\n' +
      '  외부로부터 주입받아야 하는 데이터에 의존적이지 않은 컴포넌트 구현이 이루어지고 따라서\n' +
      '  재사용성이 매우 높아졌다.\n' +
      '  물론 반대로 이야기 하면, 그만큼 확장성과 추상성에 대한 고민을 해야 하고 생각 이상으로(?)\n' +
      '  수 많은 props가 탄생하기도... 쿨럭...\n' +
      '\n' +
      '- storybook이 있으니 컴포넌트에 어떤 props가 필수였는지 값에 대한 제한 사항은 무엇인지\n' +
      '  코드 레벨에서 확인하지 않아도 되니 편하더라.\n' +
      '  단지 한 쪽 브라우저에 storybook을 띄워 놓기만 하면 찾는 건 금방이니 코드를 보고 인식하는\n' +
      '  것보다 더 직관적이고 빠르다. (아, 물론 문서를 잘 작성했을 때의 이야기...)\n' +
      '\n' +
      '  그러고 보니, storybook이 jsdoc를 통한 유추가 좀 더 잘 되었으면 싶다. 내가 아직 몰라서\n' +
      '  그런 것일 수도 있지만, storybook + vue에서 props에 대한 문서화가 jsdoc으로는 이루어지지\n' +
      '  않는 것 같다. 이것만 잘 되어도 문서화가 코드 레벨에서 많이 정리 될 수 있을 거 같은데...\n' +
      '  (아, 오히려 컴포넌트 코드가 더 지저분해 보일 수도 있으니 별도 문서로 빼는 게 나을 수도\n' +
      '  있겠다는 생각도 들기도 한다.)\n' +
      '\n' +
      '- 내가 가진 기술 부채 중 한 가지가 TDD다. 그래서 컴포넌트에 대한 테스트가 다소 우려 사항\n' +
      '  중의 하나인데, storybook이 그 우려를 조금이나마 완화시켜 주고 있다.\n' +
      '\n' +
      '  storybook이 없을 때에는 한 개 컴포넌트만 렌더링 시켜서 확인하기에는 다소 불편해서 페이지\n' +
      '  단위에서 확인했었는데, storybook 이후로는 개별 컴포넌트 별로 바로 확인이 가능하니 적어도\n' +
      '  props나 event 처리에 대한 오류를 빨리 줄일 수 있었다.\n' +
      '\n' +
      '- storybook에는 다양한 addon들이 존재하는데 viewport(responsive), a11y, dark mode,\n' +
      '  zeplin&middot;figma viewer embedding 등과 같은 것들은 꽤나 도움이 될 만한 것들이라고\n' +
      '  생각된다.\n' +
      '  접근성에 지대한(?) 관심을 가지고 있는 나로서는 addon-a11y는 컴포넌트 단위부터 접근성에\n' +
      '  대한 정량 평가를 직관적으로 확인 할 수 있어 좋다고 생각한다.\n',
    slug: 'comment-for-using-atomic-design-and-storybook',
    published: true,
    comments: true,
    layout: 'post',
    photos: [],
    link: '',
    _id: 'clcytfa4s00ahtaww4hn4g74d',
    content: '<p>ㄱ사에서 프로덕트를 만들며 <a href="https://atomicdesign.bradfrost.com/chapter-2/">atomic design</a>을\n' +
      '적용하고 <a href="https://storybook.js.org/">storybook</a>을 토대로 디자인 시스템을 구축해보기로\n' +
      '했다. 프로젝트 진행 초기에는 디자이너도 동의하는 부분이었지만 제대로 진행되지 못했고 결국\n' +
      '디자인 시스템을 구축하는 것은 실패로 돌아갔다.</p>\n' +
      '<p>실패에 대한 이유와 적용 경험으로 얻은 것들을 풀어보고자 한다.\n' +
      '참고로 atomic design이나 storybook이 무엇인지는 글에 포함 시키지 않는다. 내가 글을 쓰는\n' +
      '것보다는 이미 좋은 글들이 많으니까 😁</p>\n' +
      '<h2 id="적용기"><a href="#적용기" class="headerlink" title="적용기"></a>적용기</h2><h3 id="실패-경험"><a href="#실패-경험" class="headerlink" title="실패 경험"></a>실패 경험</h3><p>앞서 언급한 것처럼 입사 초 디자이너와 이야기 할 때에는storybook을 통한 디자인 시스템 구축에\n' +
      '대한 합의 점이 있었고, 이를 위해서 그 동안 관심을 가지고 있었던 atomic design을 본격적으로\n' +
      '적용해보기로 했었다.</p>\n' +
      '<p>언제나 처음이 어렵듯이 처음 적용해 본 atomic design과 storybook은 제법 쉽지 않았다.\n' +
      '사실 당시의 storybook 버전과 Vue가 궁합이 안 맞아도 너무 안 맞았었기 때문에 발생되는 이슈가\n' +
      '많았던 것...</p>\n' +
      '<p>하지만 이 문제를 미뤄두어도 일단 디자인 시스템 구축과 storybook 도입은 실패로 돌아 갔다.</p>\n' +
      '<h4 id="일정-상의-문제"><a href="#일정-상의-문제" class="headerlink" title="일정 상의 문제"></a>일정 상의 문제</h4><p>일단은 개발 일정 상의 문제가 가장 크게 작용되었다.</p>\n' +
      '<p>디자인 시스템을 구축하자면 디자이너와 긴밀하게 이야기가 진행되어야 하는데 도무지 그럴 시간적\n' +
      '여유가 없었다. 그도 그럴 것이 내가 입사한 4월부터 디자인 작업이 시작되었는데, 8월을 오픈\n' +
      '시점으로 둔 상태에서 7월에야 디자인이 나왔고 그마저도 계속 일부분은 완료되지 않고 미확정\n' +
      '상태로 진행되었다.</p>\n' +
      '<p>디자인이 진행되고 있던 초기에는 Vue와 storybook을 통합하느라 시간을 보내고, API도 완료된\n' +
      '디자인 화면을 기준으로 만들고 있었으니 뒤로 갈 수록 개발 시간이 부족했고, 더구나 최초 예상\n' +
      '범위는 시간이 흐를 수록 점점 덩어리가 커져 가더니 MVP가 아니라 그냥 커다란 덩어리가 되어\n' +
      '버리는 통에 개발에만 시간을 쏟아도 모자를 지경이 되어버렸다. (실제로 일정 상에 문제가\n' +
      '생기기도 했다)</p>\n' +
      '<h4 id="디자이너의-컴포넌트-단위에-대한-이해-부족"><a href="#디자이너의-컴포넌트-단위에-대한-이해-부족" class="headerlink" title="디자이너의 컴포넌트 단위에 대한 이해 부족"></a>디자이너의 컴포넌트 단위에 대한 이해 부족</h4><p>두 번째 문제는 디자이너의 컴포넌트 단위에 대한 이해가 부족하다는 거였다. (어쩌면\n' +
      '커뮤니케이션의 문제일 수도 있다.)</p>\n' +
      '<p>벡터 툴을 가지고 포토샵처럼 쓰는 것도 문제였지만, 예를 들어 버튼 컴포넌트의 경우 분명 같은\n' +
      '버튼 컴포넌트인데 동일한 스타일을 가지고 있지 않다. 가장 많게는 border-radius 사이즈가 너무\n' +
      '다양하게 나타났고, 종종 font-size나 font-weight가 차이가 났다.</p>\n' +
      '<p>물론 디자이너의 눈에 이 페이지에서는 이렇게 보이는 게 이쁘다가 나올 수는 있다고 생각한다.\n' +
      '하지만 만들어야 하는 프로덕트는 아트웍이나 각각 개별 페이지 전자 인쇄물이 아니라, 여러\n' +
      '페이지로 구성되어 있는 하나의 웹사이트, 하나의 웹 어플리케이션이고 특히 컴포넌트 관점의 개발\n' +
      '도구를 사용하는 환경에서 개별 컴포넌트의 베리에이션 기준이 명확하지 않으면 전부 하드코딩해야\n' +
      '한다는 것이 된다.</p>\n' +
      '<p>또한, 이 프로젝트에서는 디자인 변수를 미리 잡아두고 시작했는데 — 글꼴 크기 세트, 컬러 세트\n' +
      '등, 전달 받은 디자인 상에서 계속 사전 정의된 컬러 이름이 나오다가 갑자기 헥스 코드나 rgb(a)\n' +
      '값이 나타나서 확인해 보면 정의 된 값 이외의 것들이었다.</p>\n' +
      '<p>문제는 이러한 것들이 적지 않게 튀어 나왔다는 것이고, 이미 color set을 정의해 둔 상태에서\n' +
      '어디에도 끼우기가 너무 어렵고 (그레이 색상을 12단계로 설정해 두었는데 갑자기 그 사이 어딘가의\n' +
      '값이 툭...), 해당 컬러 값이 얼마나 자주 사용 되는 지, 또 다른 어딘가의 사이 값이 추가로\n' +
      '존재하는지 확인 하려면 불필요하게 소비되는 리소스가 너무 많이 들어간다는 거였다.</p>\n' +
      '<p>이러한 잦은 예상 외의 베리에이션이 나타나면서 하드 코딩이 잦게 발생되고, 결국은 CSS 규격화는\n' +
      '점점 물 건너 가며 template이나 organism 단위에서 CSS를 override하는 지저분한 상황이 연출\n' +
      '되기도 했다. (심하게는 시안 상에는 button 컴포넌트를 가져다 그려 놓았으나 실제는 체크 박스\n' +
      '기능인 것도 있었다.)</p>\n' +
      '<p>어찌보면 커뮤니케이션이 원활하지 않았기 때문에 이 부분에 대한 협의가 이루어지지 않은 것도\n' +
      '있겠지만, 경험 상 퍼블리셔로서 일할 때부터 늘 디자이너와 겪는 마찰 부분이기도 하다.</p>\n' +
      '<h4 id="Nuxt와-Storybook의-궁합-문제"><a href="#Nuxt와-Storybook의-궁합-문제" class="headerlink" title="Nuxt와 Storybook의 궁합 문제"></a>Nuxt와 Storybook의 궁합 문제</h4><p>세 번째 문제는 nuxt와 (당시의) storybook이 서로 궁합이 안 맞아도 너무 안 맞는다는 거였다.</p>\n' +
      '<p>storybook에서 왜 오류가 나지?, 왜 안되지? 하고 구글링 해보면 issue로 등록되어 있거나\n' +
      'storybook 문제라는 stackoverflow의 답변들을 쉽게 발견할 수 있었다.</p>\n' +
      '<p>본래는 온갖 해외 자료들을 뒤져가며 해결했던 그 모든 방법들을 포스팅 해보려고 했었는데, 어느\n' +
      '정도 바쁜 것들이 정리되고 본격적으로 포스팅을 시작해보기 위해 한 단계 한 단계 다시 사례를\n' +
      '만들려고 하니 버전업과 함께 해결되어 버려서 ㅋㅋㅋ (그래서 이슈 해결 보다는\n' +
      'nuxt-storybook으로 통합하는 것과 수동으로 한 땀 한 땀 통합하는 방법을 비교해서 올렸었다.)</p>\n' +
      '<p>가장 짜증(?) 났던 것 중 하나가 mdx 포맷과 addon과 vue의 통합이 거지 같았... (addon-docs와\n' +
      'controls와 vue와 mdx가 만나면... 하하하...) 지금은 mdx를 이용해 넘나 잘 쓰고 있다.</p>\n' +
      '<p>그리고 다른 개인 작업에서 storybook과 pug를 통합해보고 있다(읭?)</p>\n' +
      '<h3 id="재-시도"><a href="#재-시도" class="headerlink" title="재 시도"></a>재 시도</h3><p>작년 11월 IAT 세미나를 준비하면서 시연에 필요한 페이지를 Vue로 만들면서 다시 적용해봤다.</p>\n' +
      '<p>이미 storybook 버전업으로 통합이 잘 되었고, 자잘한 버그 등의 이슈도 있었지만 다행히\n' +
      'github을 통해 issue로 등록할 때마다 nuxt-storybook 커뮤니티에서 빠르게 대응해줘서 금방\n' +
      '처리되었다.</p>\n' +
      '<p>거기에 이직을 진행하는 과정에서 사전 과제가 나올 때마다 atomic design 방법론을 적용해서\n' +
      '만들면서 계속해서 storybook을 적용해갔고, 덕분에 이전 회사에서 완성하지 못했던 디자인\n' +
      '시스템을 page 단위까지 구축해볼 수 있었다. (뭐 그렇다고 잘 구축했다는 건 아니다. 그냥 해\n' +
      '봤다고...)</p>\n' +
      '<p>그리고 현재는 hexo 블로그 테마를 새로 제작하면서 storybook + pug를 시도해보고 있다. (응??)</p>\n' +
      '<h2 id="실패를-피하려면"><a href="#실패를-피하려면" class="headerlink" title="실패를 피하려면,"></a>실패를 피하려면,</h2><p>실패해보고 개인적으로 끝까지 storybook을 간소하게(?) 만들어보고 나니 드는 생각이, 컴포넌트\n' +
      '관점에서의 디자인 시스템 도입에 실패를 피하려면,</p>\n' +
      '<ul>\n' +
      '<li><p>일단 일정이 많이 들어갈 소지가 높다는 것을 염두해 두어야 하고</p>\n' +
      '</li>\n' +
      '<li><p>디자이너의 역할이 상당히 필요한 듯 하다,</p>\n' +
      '<p>구체적으로 이야기 해보면, 디자이너가 컴포넌트 관점에서의 개발이라는 컨셉을 이해하고 있어야\n' +
      '하고 베리에이션의 기준을 명확히 할 수 있어야 할 것 같다.\n' +
      '디자인부터 atom, molecule, organism 등에 대한 이해를 바탕으로 각 컴포넌트가 설계되고\n' +
      '규격화 되어야 갈아엎고 다시 만들어야 할까 고민하는 상황이 없을 것 같다.</p>\n' +
      '</li>\n' +
      '<li><p>컴포넌트를 어떻게 그룹핑하고 분류할 것인지, 서로 유기적으로 엮여야하는 인터랙션이 있다면\n' +
      '어떻게 조합해서 이벤트 처리를 어떻게 할 것인지 등을 잘 고려해 두어야, 조립하다가\n' +
      '재그룹핑하고 재분류하는 일을 줄일 수 있겠더라 (아, 이건 어쩔 수 없는 숙명이려나...)\n' +
      '사실 이 부분은 지금도 만들어 볼 때마다 반복 중인 것 같기도 하다.</p>\n' +
      '</li>\n' +
      '</ul>\n' +
      '<h2 id="고민-포인트"><a href="#고민-포인트" class="headerlink" title="고민 포인트"></a>고민 포인트</h2><p>atomic design과 storybook을 적용해가면서 몇 가지 고민 되는 포인트가 있었는데,</p>\n' +
      '<p>첫째는 이걸 atom으로 두어야 하는가 molecule로 두어야 하는가의 고민이었다.</p>\n' +
      '<p>한 예로 텍스트 필드 컴포넌트를 만드는데 참고한 UI Kit에서는 텍스트 필드에 항상 레이블과\n' +
      '오류 메세지가 함께 존재했고, 이 세 가지 요소 — 레이블, 입력 상자, 오류 메세지를 최소 단위로\n' +
      '보고 atom으로 두는 것이 적절할지, 아니면 아토믹 디자인에서 설명하는 텍스트 그대로 HTML\n' +
      '엘리먼트 단위를 atom으로 보고 컴포넌트는 molecule로 두어야 하는가의 고민이 반복될 수 밖에\n' +
      '없었다. (해당 UI Kit에서는 각 구성 요소가 분리된 더 작은 컴포넌트가 없었기 때문에 그 묶음을\n' +
      '최소 단위로 간주해서 atom으로 두는 걸 최종적으로 선택했다.)</p>\n' +
      '<p>둘째는 Vue에서 이벤트 핸들링을 할 때는 <code>emit</code>을 사용해서 커스텀 이벤트를 상위 컴포넌트로\n' +
      '올려서 처리하는 방식을 권장하고 있는데, 이게 코드를 너무 지저분하게 만드는 듯한 느낌을 지우기\n' +
      '어려웠다. 더불어  Vue devtools에서도 한 번의 액션에 컴포넌트 중첩 수준 만큼에 해당하는\n' +
      '로그가 연달아 발생하니 추적 자체에도 제법 많은 시간을 써야 했다. 내 경우엔\n' +
      '<a href="https://mulder21c.github.io/2021/01/24/pass-function-as-props-in-vue/">이벤트 핸들러를 props로 내려주는 방식</a>을\n' +
      '선택했는데, 이를 안티 패턴으로 보는 블로그 게시글도 있어서 다소 찜찜한 기분은 남아있다.</p>\n' +
      '<p>셋째는 Vuex의 사용이었는데, atomic design의 컨셉 상 실제 데이터가 page 단위에서 바인딩\n' +
      '되는 형태를 따르다보니 atom, molecule, organism, template 단위에서는 Vuex 바인딩을\n' +
      '피하는 쪽으로 만들어야해서 적지 않게 props가 발생되는 느낌도 있었고, 때로는 너무 과하게\n' +
      '제한하는 건 아닐까 하는 생각도 들기도 했다. (하지만 내가 깊게 이해하지 못할 경우에는 우선\n' +
      '명세 같은 것을 최대한 존중하자는 주의라... 일단은 page에서만 Vuex에 접근하는 쪽을 유지하고\n' +
      '있다.)</p>\n' +
      '<p>넷째는 앞서 &quot;실패를 피하려면&quot;에서도 마지막에 언급했던 것이지만, 어떤 컴포넌트를 조합하다 보면\n' +
      '어떻게 그룹핑 하고 어떻게 분류할 것인가가 계속 고민의 연속이 된다.</p>\n' +
      '<p>예를 들어, modal dialog를 만드는데 dialog 껍데기와 닫기 버튼을 하나의 컴포넌트로 두고,\n' +
      'dialog 콘텐츠를 slot으로 처리해서 다른 컴포넌트가 slot으로 삽입되는 구조로 만들었는데 초점\n' +
      '관리에서 문제가 되어 버렸다. tab sequence가 양쪽 컴포넌트에 걸쳐 있다 보니 focus trap을\n' +
      '만들어야 하는데 이벤트 관리를 어떻게...\n' +
      '이리 저리 컴포넌트를 재그룹핑 해봐도 해결책이 보이지 않아 결국은 modal dialog 쪽에서\n' +
      'tabbable 엘리먼트들을 DOM에서 직접 가져와서 처리하는 방식으로 해결해두기는 했는데 인터랙션에\n' +
      '의한 컴포넌트 간의 상호작용을 고려했을 때 컴포넌트가 이렇게 두는 게 맞는지 계속 고민이다.</p>\n' +
      '<p>다섯째는 내가 아직 Storybook을 어떻게 활용할 수 있는가에 대한 경험치 부족과 지식\n' +
      '부족이겠지만, docs와 story를 어떻게 구성해야 하는가다...</p>\n' +
      '<p>현재는 생각 나는 대로 구성해보고 있지만, 썩 마음에 드는 건 아니다.\n' +
      '다른 기업들은 어떻게 생각하고 고민해서 어떤 방향으로 만들고 있는지, 어떻게 했더니 어떤 점이\n' +
      '어려웠었는지 이야기를 심도 있게 들어보고 싶다 ㅠㅠ</p>\n' +
      '<h2 id="어려웠던-점"><a href="#어려웠던-점" class="headerlink" title="어려웠던 점"></a>어려웠던 점</h2><p>일단, 레퍼런스가 생각보다 많지 않았다.\n' +
      '다른 기업의 기술 블로그를 통해서 결과물의 일부분을 살짝 맛을 볼 수는 있는데, 결과물만 보는\n' +
      '것이지 과정을 보는 것이 아니다보니 어떤 목적과 목표를 가지고 어떻게 고민해서 만들어 왔는지의\n' +
      '여정을 보거나, 어떻게 하는 것이 모범 사례인지를 알기가 어렵다.\n' +
      '그냥 계속 남의 것을 염탐(?)하고 과정을 추측해 보는 방법 밖에는 없는걸까? 😥😥</p>\n' +
      '<p>또, storybook이 기본적으로 react를 사용하고 있어서 그런지 다소 Vue에는 궁합이 부족한 부분이\n' +
      '더러 있고, 이걸 해결할 다른 방법을 찾는 게 쉽지 않다.\n' +
      '일례로 storybook의 소스 코드 뷰어가 react 문법을 기반으로 보여주기 때문에 실제로 보여주고\n' +
      '싶은 Vue 문법이 아니라서 이걸 별도로 보여줄 방법을 찾아야 하는가 혹은 그냥 둘 것인가 등의\n' +
      '고민 포인트가 생기고 해결은 당연히(?) 쉽지 않다. (내가 할 수 있는 건 github 이슈에 질문을\n' +
      '남기는 것 뿐...)</p>\n' +
      '<p>더구나 주변에 이거 쓰는 사람 찾기가 어렵... 나란 놈은 인맥이 왜 이 모냥인거지...</p>\n' +
      '<h2 id="좋았던-점"><a href="#좋았던-점" class="headerlink" title="좋았던 점"></a>좋았던 점</h2><ul>\n' +
      '<li><p>우선, atomic design의 컨셉 상 page 단위에 이르러서야 데이터가 바인딩 되기 때문에\n' +
      '외부로부터 주입받아야 하는 데이터에 의존적이지 않은 컴포넌트 구현이 이루어지고 따라서\n' +
      '재사용성이 매우 높아졌다.\n' +
      '물론 반대로 이야기 하면, 그만큼 확장성과 추상성에 대한 고민을 해야 하고 생각 이상으로(?)\n' +
      '수 많은 props가 탄생하기도... 쿨럭...</p>\n' +
      '</li>\n' +
      '<li><p>storybook이 있으니 컴포넌트에 어떤 props가 필수였는지 값에 대한 제한 사항은 무엇인지\n' +
      '코드 레벨에서 확인하지 않아도 되니 편하더라.\n' +
      '단지 한 쪽 브라우저에 storybook을 띄워 놓기만 하면 찾는 건 금방이니 코드를 보고 인식하는\n' +
      '것보다 더 직관적이고 빠르다. (아, 물론 문서를 잘 작성했을 때의 이야기...)</p>\n' +
      '<p>그러고 보니, storybook이 jsdoc를 통한 유추가 좀 더 잘 되었으면 싶다. 내가 아직 몰라서\n' +
      '그런 것일 수도 있지만, storybook + vue에서 props에 대한 문서화가 jsdoc으로는 이루어지지\n' +
      '않는 것 같다. 이것만 잘 되어도 문서화가 코드 레벨에서 많이 정리 될 수 있을 거 같은데...\n' +
      '(아, 오히려 컴포넌트 코드가 더 지저분해 보일 수도 있으니 별도 문서로 빼는 게 나을 수도\n' +
      '있겠다는 생각도 들기도 한다.)</p>\n' +
      '</li>\n' +
      '<li><p>내가 가진 기술 부채 중 한 가지가 TDD다. 그래서 컴포넌트에 대한 테스트가 다소 우려 사항\n' +
      '중의 하나인데, storybook이 그 우려를 조금이나마 완화시켜 주고 있다.</p>\n' +
      '<p>storybook이 없을 때에는 한 개 컴포넌트만 렌더링 시켜서 확인하기에는 다소 불편해서 페이지\n' +
      '단위에서 확인했었는데, storybook 이후로는 개별 컴포넌트 별로 바로 확인이 가능하니 적어도\n' +
      'props나 event 처리에 대한 오류를 빨리 줄일 수 있었다.</p>\n' +
      '</li>\n' +
      '<li><p>storybook에는 다양한 addon들이 존재하는데 viewport(responsive), a11y, dark mode,\n' +
      'zeplin&amp;middot;figma viewer embedding 등과 같은 것들은 꽤나 도움이 될 만한 것들이라고\n' +
      '생각된다.\n' +
      '접근성에 지대한(?) 관심을 가지고 있는 나로서는 addon-a11y는 컴포넌트 단위부터 접근성에\n' +
      '대한 정량 평가를 직관적으로 확인 할 수 있어 좋다고 생각한다.</p>\n' +
      '</li>\n' +
      '</ul>\n',
    site: { data: [Object] },
    excerpt: '',
    more: '<p>ㄱ사에서 프로덕트를 만들며 <a href="https://atomicdesign.bradfrost.com/chapter-2/">atomic design</a>을\n' +
      '적용하고 <a href="https://storybook.js.org/">storybook</a>을 토대로 디자인 시스템을 구축해보기로\n' +
      '했다. 프로젝트 진행 초기에는 디자이너도 동의하는 부분이었지만 제대로 진행되지 못했고 결국\n' +
      '디자인 시스템을 구축하는 것은 실패로 돌아갔다.</p>\n' +
      '<p>실패에 대한 이유와 적용 경험으로 얻은 것들을 풀어보고자 한다.\n' +
      '참고로 atomic design이나 storybook이 무엇인지는 글에 포함 시키지 않는다. 내가 글을 쓰는\n' +
      '것보다는 이미 좋은 글들이 많으니까 😁</p>\n' +
      '<h2 id="적용기"><a href="#적용기" class="headerlink" title="적용기"></a>적용기</h2><h3 id="실패-경험"><a href="#실패-경험" class="headerlink" title="실패 경험"></a>실패 경험</h3><p>앞서 언급한 것처럼 입사 초 디자이너와 이야기 할 때에는storybook을 통한 디자인 시스템 구축에\n' +
      '대한 합의 점이 있었고, 이를 위해서 그 동안 관심을 가지고 있었던 atomic design을 본격적으로\n' +
      '적용해보기로 했었다.</p>\n' +
      '<p>언제나 처음이 어렵듯이 처음 적용해 본 atomic design과 storybook은 제법 쉽지 않았다.\n' +
      '사실 당시의 storybook 버전과 Vue가 궁합이 안 맞아도 너무 안 맞았었기 때문에 발생되는 이슈가\n' +
      '많았던 것...</p>\n' +
      '<p>하지만 이 문제를 미뤄두어도 일단 디자인 시스템 구축과 storybook 도입은 실패로 돌아 갔다.</p>\n' +
      '<h4 id="일정-상의-문제"><a href="#일정-상의-문제" class="headerlink" title="일정 상의 문제"></a>일정 상의 문제</h4><p>일단은 개발 일정 상의 문제가 가장 크게 작용되었다.</p>\n' +
      '<p>디자인 시스템을 구축하자면 디자이너와 긴밀하게 이야기가 진행되어야 하는데 도무지 그럴 시간적\n' +
      '여유가 없었다. 그도 그럴 것이 내가 입사한 4월부터 디자인 작업이 시작되었는데, 8월을 오픈\n' +
      '시점으로 둔 상태에서 7월에야 디자인이 나왔고 그마저도 계속 일부분은 완료되지 않고 미확정\n' +
      '상태로 진행되었다.</p>\n' +
      '<p>디자인이 진행되고 있던 초기에는 Vue와 storybook을 통합하느라 시간을 보내고, API도 완료된\n' +
      '디자인 화면을 기준으로 만들고 있었으니 뒤로 갈 수록 개발 시간이 부족했고, 더구나 최초 예상\n' +
      '범위는 시간이 흐를 수록 점점 덩어리가 커져 가더니 MVP가 아니라 그냥 커다란 덩어리가 되어\n' +
      '버리는 통에 개발에만 시간을 쏟아도 모자를 지경이 되어버렸다. (실제로 일정 상에 문제가\n' +
      '생기기도 했다)</p>\n' +
      '<h4 id="디자이너의-컴포넌트-단위에-대한-이해-부족"><a href="#디자이너의-컴포넌트-단위에-대한-이해-부족" class="headerlink" title="디자이너의 컴포넌트 단위에 대한 이해 부족"></a>디자이너의 컴포넌트 단위에 대한 이해 부족</h4><p>두 번째 문제는 디자이너의 컴포넌트 단위에 대한 이해가 부족하다는 거였다. (어쩌면\n' +
      '커뮤니케이션의 문제일 수도 있다.)</p>\n' +
      '<p>벡터 툴을 가지고 포토샵처럼 쓰는 것도 문제였지만, 예를 들어 버튼 컴포넌트의 경우 분명 같은\n' +
      '버튼 컴포넌트인데 동일한 스타일을 가지고 있지 않다. 가장 많게는 border-radius 사이즈가 너무\n' +
      '다양하게 나타났고, 종종 font-size나 font-weight가 차이가 났다.</p>\n' +
      '<p>물론 디자이너의 눈에 이 페이지에서는 이렇게 보이는 게 이쁘다가 나올 수는 있다고 생각한다.\n' +
      '하지만 만들어야 하는 프로덕트는 아트웍이나 각각 개별 페이지 전자 인쇄물이 아니라, 여러\n' +
      '페이지로 구성되어 있는 하나의 웹사이트, 하나의 웹 어플리케이션이고 특히 컴포넌트 관점의 개발\n' +
      '도구를 사용하는 환경에서 개별 컴포넌트의 베리에이션 기준이 명확하지 않으면 전부 하드코딩해야\n' +
      '한다는 것이 된다.</p>\n' +
      '<p>또한, 이 프로젝트에서는 디자인 변수를 미리 잡아두고 시작했는데 — 글꼴 크기 세트, 컬러 세트\n' +
      '등, 전달 받은 디자인 상에서 계속 사전 정의된 컬러 이름이 나오다가 갑자기 헥스 코드나 rgb(a)\n' +
      '값이 나타나서 확인해 보면 정의 된 값 이외의 것들이었다.</p>\n' +
      '<p>문제는 이러한 것들이 적지 않게 튀어 나왔다는 것이고, 이미 color set을 정의해 둔 상태에서\n' +
      '어디에도 끼우기가 너무 어렵고 (그레이 색상을 12단계로 설정해 두었는데 갑자기 그 사이 어딘가의\n' +
      '값이 툭...), 해당 컬러 값이 얼마나 자주 사용 되는 지, 또 다른 어딘가의 사이 값이 추가로\n' +
      '존재하는지 확인 하려면 불필요하게 소비되는 리소스가 너무 많이 들어간다는 거였다.</p>\n' +
      '<p>이러한 잦은 예상 외의 베리에이션이 나타나면서 하드 코딩이 잦게 발생되고, 결국은 CSS 규격화는\n' +
      '점점 물 건너 가며 template이나 organism 단위에서 CSS를 override하는 지저분한 상황이 연출\n' +
      '되기도 했다. (심하게는 시안 상에는 button 컴포넌트를 가져다 그려 놓았으나 실제는 체크 박스\n' +
      '기능인 것도 있었다.)</p>\n' +
      '<p>어찌보면 커뮤니케이션이 원활하지 않았기 때문에 이 부분에 대한 협의가 이루어지지 않은 것도\n' +
      '있겠지만, 경험 상 퍼블리셔로서 일할 때부터 늘 디자이너와 겪는 마찰 부분이기도 하다.</p>\n' +
      '<h4 id="Nuxt와-Storybook의-궁합-문제"><a href="#Nuxt와-Storybook의-궁합-문제" class="headerlink" title="Nuxt와 Storybook의 궁합 문제"></a>Nuxt와 Storybook의 궁합 문제</h4><p>세 번째 문제는 nuxt와 (당시의) storybook이 서로 궁합이 안 맞아도 너무 안 맞는다는 거였다.</p>\n' +
      '<p>storybook에서 왜 오류가 나지?, 왜 안되지? 하고 구글링 해보면 issue로 등록되어 있거나\n' +
      'storybook 문제라는 stackoverflow의 답변들을 쉽게 발견할 수 있었다.</p>\n' +
      '<p>본래는 온갖 해외 자료들을 뒤져가며 해결했던 그 모든 방법들을 포스팅 해보려고 했었는데, 어느\n' +
      '정도 바쁜 것들이 정리되고 본격적으로 포스팅을 시작해보기 위해 한 단계 한 단계 다시 사례를\n' +
      '만들려고 하니 버전업과 함께 해결되어 버려서 ㅋㅋㅋ (그래서 이슈 해결 보다는\n' +
      'nuxt-storybook으로 통합하는 것과 수동으로 한 땀 한 땀 통합하는 방법을 비교해서 올렸었다.)</p>\n' +
      '<p>가장 짜증(?) 났던 것 중 하나가 mdx 포맷과 addon과 vue의 통합이 거지 같았... (addon-docs와\n' +
      'controls와 vue와 mdx가 만나면... 하하하...) 지금은 mdx를 이용해 넘나 잘 쓰고 있다.</p>\n' +
      '<p>그리고 다른 개인 작업에서 storybook과 pug를 통합해보고 있다(읭?)</p>\n' +
      '<h3 id="재-시도"><a href="#재-시도" class="headerlink" title="재 시도"></a>재 시도</h3><p>작년 11월 IAT 세미나를 준비하면서 시연에 필요한 페이지를 Vue로 만들면서 다시 적용해봤다.</p>\n' +
      '<p>이미 storybook 버전업으로 통합이 잘 되었고, 자잘한 버그 등의 이슈도 있었지만 다행히\n' +
      'github을 통해 issue로 등록할 때마다 nuxt-storybook 커뮤니티에서 빠르게 대응해줘서 금방\n' +
      '처리되었다.</p>\n' +
      '<p>거기에 이직을 진행하는 과정에서 사전 과제가 나올 때마다 atomic design 방법론을 적용해서\n' +
      '만들면서 계속해서 storybook을 적용해갔고, 덕분에 이전 회사에서 완성하지 못했던 디자인\n' +
      '시스템을 page 단위까지 구축해볼 수 있었다. (뭐 그렇다고 잘 구축했다는 건 아니다. 그냥 해\n' +
      '봤다고...)</p>\n' +
      '<p>그리고 현재는 hexo 블로그 테마를 새로 제작하면서 storybook + pug를 시도해보고 있다. (응??)</p>\n' +
      '<h2 id="실패를-피하려면"><a href="#실패를-피하려면" class="headerlink" title="실패를 피하려면,"></a>실패를 피하려면,</h2><p>실패해보고 개인적으로 끝까지 storybook을 간소하게(?) 만들어보고 나니 드는 생각이, 컴포넌트\n' +
      '관점에서의 디자인 시스템 도입에 실패를 피하려면,</p>\n' +
      '<ul>\n' +
      '<li><p>일단 일정이 많이 들어갈 소지가 높다는 것을 염두해 두어야 하고</p>\n' +
      '</li>\n' +
      '<li><p>디자이너의 역할이 상당히 필요한 듯 하다,</p>\n' +
      '<p>구체적으로 이야기 해보면, 디자이너가 컴포넌트 관점에서의 개발이라는 컨셉을 이해하고 있어야\n' +
      '하고 베리에이션의 기준을 명확히 할 수 있어야 할 것 같다.\n' +
      '디자인부터 atom, molecule, organism 등에 대한 이해를 바탕으로 각 컴포넌트가 설계되고\n' +
      '규격화 되어야 갈아엎고 다시 만들어야 할까 고민하는 상황이 없을 것 같다.</p>\n' +
      '</li>\n' +
      '<li><p>컴포넌트를 어떻게 그룹핑하고 분류할 것인지, 서로 유기적으로 엮여야하는 인터랙션이 있다면\n' +
      '어떻게 조합해서 이벤트 처리를 어떻게 할 것인지 등을 잘 고려해 두어야, 조립하다가\n' +
      '재그룹핑하고 재분류하는 일을 줄일 수 있겠더라 (아, 이건 어쩔 수 없는 숙명이려나...)\n' +
      '사실 이 부분은 지금도 만들어 볼 때마다 반복 중인 것 같기도 하다.</p>\n' +
      '</li>\n' +
      '</ul>\n' +
      '<h2 id="고민-포인트"><a href="#고민-포인트" class="headerlink" title="고민 포인트"></a>고민 포인트</h2><p>atomic design과 storybook을 적용해가면서 몇 가지 고민 되는 포인트가 있었는데,</p>\n' +
      '<p>첫째는 이걸 atom으로 두어야 하는가 molecule로 두어야 하는가의 고민이었다.</p>\n' +
      '<p>한 예로 텍스트 필드 컴포넌트를 만드는데 참고한 UI Kit에서는 텍스트 필드에 항상 레이블과\n' +
      '오류 메세지가 함께 존재했고, 이 세 가지 요소 — 레이블, 입력 상자, 오류 메세지를 최소 단위로\n' +
      '보고 atom으로 두는 것이 적절할지, 아니면 아토믹 디자인에서 설명하는 텍스트 그대로 HTML\n' +
      '엘리먼트 단위를 atom으로 보고 컴포넌트는 molecule로 두어야 하는가의 고민이 반복될 수 밖에\n' +
      '없었다. (해당 UI Kit에서는 각 구성 요소가 분리된 더 작은 컴포넌트가 없었기 때문에 그 묶음을\n' +
      '최소 단위로 간주해서 atom으로 두는 걸 최종적으로 선택했다.)</p>\n' +
      '<p>둘째는 Vue에서 이벤트 핸들링을 할 때는 <code>emit</code>을 사용해서 커스텀 이벤트를 상위 컴포넌트로\n' +
      '올려서 처리하는 방식을 권장하고 있는데, 이게 코드를 너무 지저분하게 만드는 듯한 느낌을 지우기\n' +
      '어려웠다. 더불어  Vue devtools에서도 한 번의 액션에 컴포넌트 중첩 수준 만큼에 해당하는\n' +
      '로그가 연달아 발생하니 추적 자체에도 제법 많은 시간을 써야 했다. 내 경우엔\n' +
      '<a href="https://mulder21c.github.io/2021/01/24/pass-function-as-props-in-vue/">이벤트 핸들러를 props로 내려주는 방식</a>을\n' +
      '선택했는데, 이를 안티 패턴으로 보는 블로그 게시글도 있어서 다소 찜찜한 기분은 남아있다.</p>\n' +
      '<p>셋째는 Vuex의 사용이었는데, atomic design의 컨셉 상 실제 데이터가 page 단위에서 바인딩\n' +
      '되는 형태를 따르다보니 atom, molecule, organism, template 단위에서는 Vuex 바인딩을\n' +
      '피하는 쪽으로 만들어야해서 적지 않게 props가 발생되는 느낌도 있었고, 때로는 너무 과하게\n' +
      '제한하는 건 아닐까 하는 생각도 들기도 했다. (하지만 내가 깊게 이해하지 못할 경우에는 우선\n' +
      '명세 같은 것을 최대한 존중하자는 주의라... 일단은 page에서만 Vuex에 접근하는 쪽을 유지하고\n' +
      '있다.)</p>\n' +
      '<p>넷째는 앞서 &quot;실패를 피하려면&quot;에서도 마지막에 언급했던 것이지만, 어떤 컴포넌트를 조합하다 보면\n' +
      '어떻게 그룹핑 하고 어떻게 분류할 것인가가 계속 고민의 연속이 된다.</p>\n' +
      '<p>예를 들어, modal dialog를 만드는데 dialog 껍데기와 닫기 버튼을 하나의 컴포넌트로 두고,\n' +
      'dialog 콘텐츠를 slot으로 처리해서 다른 컴포넌트가 slot으로 삽입되는 구조로 만들었는데 초점\n' +
      '관리에서 문제가 되어 버렸다. tab sequence가 양쪽 컴포넌트에 걸쳐 있다 보니 focus trap을\n' +
      '만들어야 하는데 이벤트 관리를 어떻게...\n' +
      '이리 저리 컴포넌트를 재그룹핑 해봐도 해결책이 보이지 않아 결국은 modal dialog 쪽에서\n' +
      'tabbable 엘리먼트들을 DOM에서 직접 가져와서 처리하는 방식으로 해결해두기는 했는데 인터랙션에\n' +
      '의한 컴포넌트 간의 상호작용을 고려했을 때 컴포넌트가 이렇게 두는 게 맞는지 계속 고민이다.</p>\n' +
      '<p>다섯째는 내가 아직 Storybook을 어떻게 활용할 수 있는가에 대한 경험치 부족과 지식\n' +
      '부족이겠지만, docs와 story를 어떻게 구성해야 하는가다...</p>\n' +
      '<p>현재는 생각 나는 대로 구성해보고 있지만, 썩 마음에 드는 건 아니다.\n' +
      '다른 기업들은 어떻게 생각하고 고민해서 어떤 방향으로 만들고 있는지, 어떻게 했더니 어떤 점이\n' +
      '어려웠었는지 이야기를 심도 있게 들어보고 싶다 ㅠㅠ</p>\n' +
      '<h2 id="어려웠던-점"><a href="#어려웠던-점" class="headerlink" title="어려웠던 점"></a>어려웠던 점</h2><p>일단, 레퍼런스가 생각보다 많지 않았다.\n' +
      '다른 기업의 기술 블로그를 통해서 결과물의 일부분을 살짝 맛을 볼 수는 있는데, 결과물만 보는\n' +
      '것이지 과정을 보는 것이 아니다보니 어떤 목적과 목표를 가지고 어떻게 고민해서 만들어 왔는지의\n' +
      '여정을 보거나, 어떻게 하는 것이 모범 사례인지를 알기가 어렵다.\n' +
      '그냥 계속 남의 것을 염탐(?)하고 과정을 추측해 보는 방법 밖에는 없는걸까? 😥😥</p>\n' +
      '<p>또, storybook이 기본적으로 react를 사용하고 있어서 그런지 다소 Vue에는 궁합이 부족한 부분이\n' +
      '더러 있고, 이걸 해결할 다른 방법을 찾는 게 쉽지 않다.\n' +
      '일례로 storybook의 소스 코드 뷰어가 react 문법을 기반으로 보여주기 때문에 실제로 보여주고\n' +
      '싶은 Vue 문법이 아니라서 이걸 별도로 보여줄 방법을 찾아야 하는가 혹은 그냥 둘 것인가 등의\n' +
      '고민 포인트가 생기고 해결은 당연히(?) 쉽지 않다. (내가 할 수 있는 건 github 이슈에 질문을\n' +
      '남기는 것 뿐...)</p>\n' +
      '<p>더구나 주변에 이거 쓰는 사람 찾기가 어렵... 나란 놈은 인맥이 왜 이 모냥인거지...</p>\n' +
      '<h2 id="좋았던-점"><a href="#좋았던-점" class="headerlink" title="좋았던 점"></a>좋았던 점</h2><ul>\n' +
      '<li><p>우선, atomic design의 컨셉 상 page 단위에 이르러서야 데이터가 바인딩 되기 때문에\n' +
      '외부로부터 주입받아야 하는 데이터에 의존적이지 않은 컴포넌트 구현이 이루어지고 따라서\n' +
      '재사용성이 매우 높아졌다.\n' +
      '물론 반대로 이야기 하면, 그만큼 확장성과 추상성에 대한 고민을 해야 하고 생각 이상으로(?)\n' +
      '수 많은 props가 탄생하기도... 쿨럭...</p>\n' +
      '</li>\n' +
      '<li><p>storybook이 있으니 컴포넌트에 어떤 props가 필수였는지 값에 대한 제한 사항은 무엇인지\n' +
      '코드 레벨에서 확인하지 않아도 되니 편하더라.\n' +
      '단지 한 쪽 브라우저에 storybook을 띄워 놓기만 하면 찾는 건 금방이니 코드를 보고 인식하는\n' +
      '것보다 더 직관적이고 빠르다. (아, 물론 문서를 잘 작성했을 때의 이야기...)</p>\n' +
      '<p>그러고 보니, storybook이 jsdoc를 통한 유추가 좀 더 잘 되었으면 싶다. 내가 아직 몰라서\n' +
      '그런 것일 수도 있지만, storybook + vue에서 props에 대한 문서화가 jsdoc으로는 이루어지지\n' +
      '않는 것 같다. 이것만 잘 되어도 문서화가 코드 레벨에서 많이 정리 될 수 있을 거 같은데...\n' +
      '(아, 오히려 컴포넌트 코드가 더 지저분해 보일 수도 있으니 별도 문서로 빼는 게 나을 수도\n' +
      '있겠다는 생각도 들기도 한다.)</p>\n' +
      '</li>\n' +
      '<li><p>내가 가진 기술 부채 중 한 가지가 TDD다. 그래서 컴포넌트에 대한 테스트가 다소 우려 사항\n' +
      '중의 하나인데, storybook이 그 우려를 조금이나마 완화시켜 주고 있다.</p>\n' +
      '<p>storybook이 없을 때에는 한 개 컴포넌트만 렌더링 시켜서 확인하기에는 다소 불편해서 페이지\n' +
      '단위에서 확인했었는데, storybook 이후로는 개별 컴포넌트 별로 바로 확인이 가능하니 적어도\n' +
      'props나 event 처리에 대한 오류를 빨리 줄일 수 있었다.</p>\n' +
      '</li>\n' +
      '<li><p>storybook에는 다양한 addon들이 존재하는데 viewport(responsive), a11y, dark mode,\n' +
      'zeplin&amp;middot;figma viewer embedding 등과 같은 것들은 꽤나 도움이 될 만한 것들이라고\n' +
      '생각된다.\n' +
      '접근성에 지대한(?) 관심을 가지고 있는 나로서는 addon-a11y는 컴포넌트 단위부터 접근성에\n' +
      '대한 정량 평가를 직관적으로 확인 할 수 있어 좋다고 생각한다.</p>\n' +
      '</li>\n' +
      '</ul>\n',
    path: [Getter],
    permalink: [Getter],
    full_source: [Getter],
    asset_dir: [Getter],
    tags: [Getter],
    categories: [Getter],
    next: [Circular *1],
    __post: true
  },
  next: <ref *2> _Document {
    title: '개발환경 WSL2 + zsh로 갈아타기',
    thumbnail: '/upload/2021/thumbs/wsl2-zsh-on-windws-10.jpg',
    hero: '/upload/2021/wsl2-zsh-on-windws-10.jpg',
    style: '.hero {\n' +
      '  &-wrapper {\n' +
      '    text-shadow:\n' +
      '      1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
      '      -1px -1px 2em rgba(20, 12, 24, 1);\n' +
      '  }\n' +
      '  &__image {\n' +
      '    opacity: 0.35\n' +
      '  }\n' +
      '}\n',
    seo: {
      description: '본격적으로 WSL + zsh 환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가\n' +
        '설정을 차후에 필요할까 기록으로 남겨둔다.\n',
      image: '/upload/2021/wsl2-zsh-on-windws-10.jpg'
    },
    date: Moment<2021-01-28T00:32:57+09:00>,
    _content: '\n' +
      '\n' +
      '## 기존 환경\n' +
      '\n' +
      '얼마 전까지만 해도 VS Code의 터미널을 git bash로 (이하 bash) 설정해서 5년 가까이 bash\n' +
      '상에서 CLI를 사용해왔다. (아! 참고로 나는 Windows 10 사용자다. 맥이었으면 진즉부터\n' +
      'terminal을 썼겠지...)\n' +
      '\n' +
      '이 블로그 테마를 제작 후에 몇 번 mac이나 linux 환경에서 테마 설치 오류에 대한 이슈가\n' +
      '올라왔었고, 최근에 어떤 사이트를 번역하는데 해당 사이트 빌드가 bash 상에서는 정상적으로\n' +
      '이루어지지 않아 확인해보니 linux 상에서는 올바르게 빌드 되어 linux 환경에 대한 필요가\n' +
      '생겨났다.\n' +
      '\n' +
      '결국 미루고 미루던 WSL 사용을 시도하기로 하고 반 년 정도를 이 방식으로 써 본 것 같다.\n' +
      '(미루고 미룬 이유는 Windows를 못믿어서... = _=a 항상 예기치 않은 오류를 만들어주는\n' +
      ' Windows ... )\n' +
      '\n' +
      '무튼, 반 년 정도의 사용 경험에서는 크게 문제를 느끼지 못해서 이제 본격적으로 WSL + zsh\n' +
      '환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가 설정을 차후에 필요할까 기록으로\n' +
      '남겨둔다. (안녕 bash~ 오래 동안 고마웠어 ㅠ)\n' +
      '\n' +
      '## WSL 1 or WSL 2 ?\n' +
      '\n' +
      'WSL을 쓰기로 한 시점에 결정해야 할 것 중 하나는 일단 WSL 1을 쓸 것인가 혹은 WSL 2를 쓸\n' +
      '것인가 같다. 물론, WSL 2 구성까지 해 두면 언제든지 원하는 시점에 WSL 1과 2를 오갈 수 있고\n' +
      '따라서 WSL 2 구성 방법으로 포스팅 해두기는 했다.\n' +
      '\n' +
      '내 경우엔 2가지를 다 써봤는데, 써보고 난 이후에 드는 생각은 일단 내 경우에는 WSL 1을 쓰는\n' +
      '게 아직은 낫지 않을까 싶다. MS에서는 WSL 2가 더 빠르고 전체 리눅스 커널 사용, 시스템 호출\n' +
      '호환성 등을 장점으로 들고 있지만 생각보다 만나게 되는 장애물이 많았다.\n' +
      '\n' +
      '일단 몇 가지 선택에 필요한 기준에 따라 나누어 보면,\n' +
      '기존의 Windows 시스템에서 이미 프로젝트가 구성되어 있고 (Node든 뭐 다른 것이든) 여기에\n' +
      'WSL을 통합하는 거라면 WSL 1을 추천한다.\n' +
      '반면 개발 환경을 새로 설정 하는 상황이나 새로 설정하는 것을 감안 할 생각이고, 리눅스 시스템에\n' +
      '거부감이 없다면 WSL 2가 나을 것 같다.\n' +
      '\n' +
      '이렇게 나눈 이유는, WSL 2에서는\n' +
      '\n' +
      '- Windows 파일 시스템(`/mnt/`)으로의 접근이 체감 될 만큼 느리다.\n' +
      '- Windows 파일 시스템에 이미 구성된 프로젝트의 경우, 파일 변경을 감지 하지 못하는 듯 하다.\n' +
      '  (Node의 watch 기능이 정상적으로 동작해주지 못한다. 파일 시스템이 다르니 당연한 것 같기는\n' +
      '  한데 처음에 무척 당황했다.)\n' +
      '- Windows에서 VS Code를 열고 터미널을 WSL로 사용할 때, Windows에서 연 브라우저가\n' +
      '  localhost에 접근이 잘 되지 않는다.\n' +
      '\n' +
      '  Windows 전원 옵션에 "빨리 켜기 기능"을 꺼두면 localhost 포워딩이 된다고 하는데, 실제로\n' +
      '  해봤을 때 localhost가 두 개의 다른 포트로 열렸을 때 하나만 되더라...\n' +
      '\n' +
      '내 경우는 이미 Windows 시스템을 기반으로 프로젝트들이 구성되어 있었고 WSL을 통합 해보는 거라\n' +
      '위의 문제들을 겪고 말았다 ㅋ\n' +
      '\n' +
      '물론 내 케이스가 아니라면 WSL 2가 더 나을 것 같기는 하다.\n' +
      '\n' +
      '## Windows Terminal 설치\n' +
      '\n' +
      'Windows에는 기본적으로 terminal이 존재하지 않기 때문에, windows terminal을\n' +
      '[Store](https://www.microsoft.com/ko-kr/p/windows-terminal/9n0dx20hk701)에서\n' +
      '별도로 설치해야 한다.\n' +
      '\n' +
      '![Windows Terminal on Store](/upload/2021/windows-store-terminal.jpg)\n' +
      '\n' +
      '## WSL 활성화\n' +
      '\n' +
      '자세한 내용은 [공식문서](https://docs.microsoft.com/ko-kr/windows/wsl/install-win10)를\n' +
      '참고하자.\n' +
      '\n' +
      "터미널(혹은 파워쉘)을 관리자 권한으로 실행 후, 다음을 차례대로 실행 하면된다. (물론 '제어판\n" +
      "&gt; 프로그램 &gt; 프로그램 및 기능 &gt; Windows 기능 켜기/끄기' 에서 GUI로 해도 된다.)\n" +
      '\n' +
      '```jsx\n' +
      'dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n' +
      'dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n' +
      '```\n' +
      '\n' +
      '실행이 종료 되었으면 "재시작"하자.\n' +
      '\n' +
      '일시적인 상황이었는지는 모르겠지만, 최초 이 설정을 할 때 재시작하지 않고 컴퓨터를 종료했다가\n' +
      '다음 날 켜서 설정을 계속 이어가려고 했더니 안되더라 = _=a\n' +
      '\n' +
      '### WSL 2 업데이트\n' +
      '\n' +
      'WSL 2를 사용하려면 적어도 Windows 10 May 2020 Update가 설치되어 있어야 한다. Windows\n' +
      '10 May 2020 Update에 실제 리눅스 커널을 사용하는 WSL 2가 기본 탑재 되었다고 한다.\n' +
      '그런데 좀 이상한게, Windows 10 최신 업데이트를 쓰고 있음에도 불구하고 WSL 2를 사용하려면\n' +
      '별도 패키지를 다운 받아서 설치하고, 추가 설정을 해야 한다. (아니 WSL 2를 기본으로 탑재했으면\n' +
      'WSL 2를 기본으로 사용할 수 있어야지 왜 WSL 1을 기본으로 잡아주고 있고... WSL 2를 쓰기 위해\n' +
      '추가 설치를 왜 해야 하는가...? )\n' +
      '\n' +
      '[MS WSL 설명서 페이지](https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package)로\n' +
      '가서 Linux 커널 업데이트 패키지 다운로드 후 설치한다.\n' +
      '\n' +
      '![Linux 커널 업데이트 설치 화면](/upload/2021/wsl-update.jpg)\n' +
      '\n' +
      '### WSL 기본 버전을 2로 설정\n' +
      '\n' +
      '터미널(혹은 파워쉘)에서 다음 명령을 시행한다.\n' +
      '\n' +
      '이걸 먼저 실행해야 이후로 설치되는 리눅스 시스템이 WSL 2를 기반으로 한다.\n' +
      '\n' +
      '```powershell\n' +
      'wsl --set-default-version 2\n' +
      '```\n' +
      '\n' +
      '## Ubuntu  설치\n' +
      '\n' +
      '다시 [Store](https://www.microsoft.com/ko-kr/store/apps/windows)에서 Ubuntu를\n' +
      '검색해서 설치 한다. (물론 우분투 말고 다른 리눅스 프로덕트를 선택해도 된다. 단지 내가\n' +
      'Ubuntu가 익숙해서 그렇다~~고 하지만 어차피 터미널인데?~~)\n' +
      '\n' +
      '![Windows Store Ubuntu 검색 결과](/upload/2021/windows-store-ubuntu.jpg)\n' +
      '\n' +
      '하지만 이 놈은 어디까지나 "배포" 패키지이므로 설치 후 최초 실행해야 우분투 설치가 진행된다.\n' +
      '시간이 조금 걸리니 기다리자.\n' +
      '\n' +
      '설치가 완료되면 다음과 같이 설치가 완료되었다는 메세지와 함께 웰컴 투 우분투가 노출된다\n' +
      '\n' +
      '![우분투 설치 완료 화면](/upload/2021/complete-install-ubuntu.jpg)\n' +
      '\n' +
      '### 터미널 기본 프로필 Ubuntu로 설정\n' +
      '\n' +
      '터미널에서도 Ubuntu가 기본으로 실행되도록 터미널 기본 프로필을 WSL로 설정한다.\n' +
      '\n' +
      '터미널에서 설정으로 들어가면 관련 json 파일이 열리는데, 여기서 `defaultProfile` 값을\n' +
      '`profiles.list` 에서 Ubuntu 것의 `guid` 값으로 수정하기만 하면 된다.\n' +
      '\n' +
      '```json|data-line="2,11"\n' +
      '{\n' +
      '  "defaultProfile": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
      '  ...\n' +
      '  "profiles":\n' +
      '    {\n' +
      '      ...\n' +
      '      "list":\n' +
      '      [\n' +
      '        ...\n' +
      '        {\n' +
      '          "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
      '          "hidden": false,\n' +
      '          "name": "Ubuntu",\n' +
      '          "source": "Windows.Terminal.Wsl",\n' +
      '          "colorScheme": "Dark+",\n' +
      '          "fontFace": "Hack"\n' +
      '        }\n' +
      '      ]\n' +
      '    },\n' +
      '}\n' +
      '```\n' +
      '\n' +
      '## Git, zsh 설치\n' +
      '\n' +
      'Ubuntu(WSL)를 실행하고, git과 zsh부터 설치한다.\n' +
      '\n' +
      '일단 패키지 레파지토리 인덱스부터 업데이트 하고\n' +
      '\n' +
      '```bash\n' +
      'sudo apt update\n' +
      '```\n' +
      '\n' +
      'git과 zsh을 설치\n' +
      '\n' +
      '```bash\n' +
      'sudo apt install git zsh\n' +
      '```\n' +
      '\n' +
      '## Oh my zsh 설치 및 구성\n' +
      '\n' +
      '### 설치\n' +
      '\n' +
      '터미널에서 다음 명령을 실행하기만 하면 된다.\n' +
      '\n' +
      '```bash\n' +
      'sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"\n' +
      '```\n' +
      '\n' +
      '설치가 완료되면 다음과 같은 메세지를 볼 수 있다.\n' +
      '\n' +
      '![oh my zsh 설치 완료 화면](/upload/2021/complete-install-oh-my-zsh.jpg)\n' +
      '\n' +
      '### 테마 구성\n' +
      '\n' +
      '역시 처음 설치했드면 꾸미기가 먼저다!!! 테마부터 변경한다.\n' +
      '\n' +
      '테마는 [ohmyzsh github wiki](https://github.com/ohmyzsh/ohmyzsh/wiki/Themes)에서\n' +
      '마음에 드는 걸 선택하면 될 것 같다. 내 경우엔 많이 언급되는 `agnoster`를 쓰기로...\n' +
      '\n' +
      '`~/.zshrc` 파일을 열어 `ZSH_THEME` 항목의 값을 변경하기만 하면 된다.\n' +
      '\n' +
      '```bash\n' +
      'vi ~/.zshrc\n' +
      '```\n' +
      '\n' +
      '```ini\n' +
      'ZSH_THEME="agnoster"\n' +
      '```\n' +
      '\n' +
      '참고로 `agnoster` 테마를 쓰려면 [powerline font](https://github.com/powerline/fonts)를\n' +
      '써야 하는데, 내 경우엔 이미 Hack 폰트를 쓰고 있어서 별도로 설치하지 않고 터미널 설정에서\n' +
      '`profile.list`의 해당 항목에 fontFamily 값만 추가하여 해결했다.\n' +
      '\n' +
      '```json|data-line="6"\n' +
      '{\n' +
      '  "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
      '  "hidden": false,\n' +
      '  "name": "Ubuntu",\n' +
      '  "source": "Windows.Terminal.Wsl",\n' +
      '  "fontFace": "Hack"\n' +
      '}\n' +
      '```\n' +
      '\n' +
      '### 터미널 color scheme 구성\n' +
      '\n' +
      '편한 눈을 위해(?) 각 컬러에 대한 상세 값을 설정할 수 있고, 개별적으로 설정이 어렵다면 이미\n' +
      '구성된 scheme들이 [windowsterminalthemes](https://windowsterminalthemes.dev/)에서\n' +
      '제공되고 있으니 이를 참고해서 구성도 가능하다.\n' +
      '\n' +
      '설정은 마찬가지로 터미널 설정에서 이루어지고, `schemes` 항목에 color scheme을 추가하고,\n' +
      '`profiles.list`의 해당 항목에 `colorScheme` 값을 추가 한 color scheme의 `name`\n' +
      '값으로 설정하면 된다.\n' +
      '\n' +
      '```json|data-line="10,16"\n' +
      '"profiles" :{\n' +
      '  "list": [\n' +
      '    ...,\n' +
      '    {\n' +
      '      "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
      '      "hidden": false,\n' +
      '      "name": "Ubuntu",\n' +
      '      "source": "Windows.Terminal.Wsl",\n' +
      '      "fontFace": "Hack",\n' +
      '      "colorScheme": "Dark+"\n' +
      '    }\n' +
      '  ],\n' +
      '},\n' +
      '"schemes": [\n' +
      '  {\n' +
      '    "name": "Dark+",\n' +
      '    "black": "#000000",\n' +
      '    ...\n' +
      '    "background": "#0e0e0e",\n' +
      '    "foreground": "#cccccc"\n' +
      '  }\n' +
      '],\n' +
      '```\n' +
      '\n' +
      '## zsh plugins 설치\n' +
      '\n' +
      '조금 더 편한 zsh 사용을 위해 플러그인을 설치한다.\n' +
      '\n' +
      '### [zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions)\n' +
      '\n' +
      '이 플러그인은 이전에 입력했던 명령을 기반으로 명령을 타이핑 할 때마다 자동 완성을 제공하고\n' +
      '방향키로 해당 자동 완성을 사용할 수 있게 해준다.\n' +
      '\n' +
      '다음 명령으로 설치하고,\n' +
      '\n' +
      '```bash\n' +
      'git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n' +
      '```\n' +
      '\n' +
      '`~/.zshrc` 파일을 열어 `plugins` 항목에 `zsh-autosuggestions`를 추가해준다.\n' +
      '\n' +
      '```ini\n' +
      'plugins=(git zsh-autosuggestions)\n' +
      '```\n' +
      '\n' +
      '### [syntax highlighting](https://github.com/zsh-users/zsh-syntax-highlighting/)\n' +
      '\n' +
      '이 플러그인은 명령어에 구문 강조를 적용해준다.\n' +
      '구문 강조가 적용되면 좋은 것 중 하나는 특정 명령을 사용할 수 있으면 녹색으로, 설치 되지 않음\n' +
      '등의 이유로 알 수 없는 명령이면 빨간색으로 나타난다.\n' +
      '\n' +
      '다음 명령으로 설치하고,\n' +
      '\n' +
      '```bash\n' +
      'git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n' +
      '```\n' +
      '\n' +
      '`~/.zshrc` 파일을 열어 `plugins` 항목에 `zsh-syntax-highlighting`을 추가해준다.\n' +
      '\n' +
      '```ini\n' +
      'plugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n' +
      '```\n' +
      '\n' +
      '## 터미널 프롬프트 변경\n' +
      '\n' +
      '터미널을 열면 다음 화면처럼 username@hostname 형태로 프롬프트가 나오는데, VS Code에서\n' +
      '터미널을 열고 작업하면 이 프롬프트가 차지하는 공간이 적지 않아 보기 불편하다.\n' +
      '\n' +
      '다행히 이것마저도 변경하거나 감출 수 있다!!\n' +
      '\n' +
      '![기본으로는 user name과 host name이 모두 노출된다](/upload/2021/terminal-prompt-full-name.jpg)\n' +
      '\n' +
      '`~/.zshrc` 파일을 열고 다음을 추가하면\n' +
      '\n' +
      '```ini\n' +
      'prompt_context() {}\n' +
      '```\n' +
      '\n' +
      '프롬프트가 사라진다. 두둔!!\n' +
      '\n' +
      '![프롬프가 사라지고 경로만 남았다](/upload/2021/terminal-prompt-hide-name.jpg)\n' +
      '\n' +
      '참고로 다음과 같이 수정하면 user name과 경로만 노출된다.\n' +
      '\n' +
      '```ini\n' +
      'prompt_context() {\n' +
      '    if [[ "$USER" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then\n' +
      '      prompt_segment black default "%(!.%{%F{yellow}%}.)$USER"\n' +
      '    fi\n' +
      '}\n' +
      '```\n' +
      '\n' +
      '### Named directory 구성\n' +
      '\n' +
      '하지만 아직 `/mnt/c/Users/{user name}/` 이 거슬린다.\n' +
      '심지어 이게 디렉토리 깊이가 깊어지면 이 또한 너무 길어진다. 하여 이 마저도 줄여보기로 한다.\n' +
      '\n' +
      '역시 마찬가지로 `~/.zshrc` 파일을 열어 다음을 참고하여 환경에 맞게 추가한다.\n' +
      '\n' +
      '내 경우엔 `c:\\Users\\mulder21c\\Project`와 `c:\\Users\\mulder21c\\Workspace`이 주 사용\n' +
      '디렉토리라 이 디렉토리들에 대한 경로를 변경하기로 했다.\n' +
      '\n' +
      '```ini\n' +
      'hash -d mulder21c=/mnt/c/Users/mulder21c\n' +
      'hash -d Project=/mnt/c/Users/mulder21c/Project\n' +
      'hash -d Workspace=/mnt/c/Users/mulder21c/Workspace\n' +
      '```\n' +
      '\n' +
      '터미널을 다시 열어보면 다음과 같이 지정한 이름으로 표시된다. (단 앞에 `~`이 붙는다.)\n' +
      '\n' +
      '![named directory를 적용하고 경로가 한결 간결해졌다](/upload/2021/terminal-named-directory.jpg)\n' +
      '\n' +
      '이제야 터미널이 좀 간결해진 것 같다.\n' +
      '\n' +
      '## nvm 설치\n' +
      '\n' +
      '마지막으로 node.js 환경을 위해 nvm을 설치한다.\n' +
      '\n' +
      '터미널에서 다음 명령을 주면 자동으로 설치가 진행된다.\n' +
      '\n' +
      '```bash\n' +
      'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n' +
      '```\n' +
      '\n' +
      '참고로, Windows에 nvm for windows가 설치되어 있다면 충돌로 설치가 진행되지 않는다. 내\n' +
      '경우엔 더 이상 Windows 시스템에서 node를 실행할 생각이 없어서 과감히 제거하고 설치했다.\n' +
      '\n' +
      '설치가 완료되면 나타난 메세지 중에 다음과 같은 메세지가 있다.\n' +
      '\n' +
      '```ini\n' +
      'export NVM_DIR="$HOME/.nvm"\n' +
      '[ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh"  # This loads nvm\n' +
      '[ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion\n' +
      '```\n' +
      '\n' +
      '이걸 복사해서 `~/.zshrc`에 추가해야 한다.\n' +
      '\n' +
      '이후 node 설치는 nvm을 이용하면 된다.\n' +
      '\n' +
      '### auto `nvm` use  설정\n' +
      '\n' +
      '마지막으로 아직 테스트 해보지는 않았지만, 최근 Node 10.x, Node 14.x, Node 15.x를 각\n' +
      '환경으로 하는 프로덕트를 왔다 갔다 하다가 Node 버전 문제로 node-sass가 오류를 내뱉는 상황을\n' +
      '자주 만나게 되었다. `nvm use` 하는 걸 까먹기도 했고 현재 프로덕트가 어느 버전에서 돌려야\n' +
      '하는지도 까먹기 일수였다 ;;;\n' +
      '\n' +
      '하여 구성하는 김에 `.nvmrc`를 이용해서 자동으로 `nvm use`가 적용되게 하는 설정을 추가했다.\n' +
      '\n' +
      '다음의 코드를 `~/.zshrc`에 추가하면되는데, 아직 테스트해보진 않아서 잘 되는지는 모르겠다 = _=a\n' +
      '뭐... stackoverflow에서 건져온 건데 추천이 많았으니 잘 되겠지...? /=ㅁ=/\n' +
      '\n' +
      '```ini\n' +
      '# place this after nvm initialization!\n' +
      'autoload -U add-zsh-hook\n' +
      'load-nvmrc() {\n' +
      '  local node_version="$(nvm version)"\n' +
      '  local nvmrc_path="$(nvm_find_nvmrc)"\n' +
      '\n' +
      '  if [ -n "$nvmrc_path" ]; then\n' +
      '    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")\n' +
      '\n' +
      '    if [ "$nvmrc_node_version" = "N/A" ]; then\n' +
      '      nvm install\n' +
      '    elif [ "$nvmrc_node_version" != "$node_version" ]; then\n' +
      '      nvm use\n' +
      '    fi\n' +
      '  elif [ "$node_version" != "$(nvm version default)" ]; then\n' +
      '    echo "Reverting to nvm default version"\n' +
      '    nvm use default\n' +
      '  fi\n' +
      '}\n' +
      'add-zsh-hook chpwd load-nvmrc\n' +
      'load-nvmrc\n' +
      '```',
    source: '_posts/2021-01-27-setting-up-wsl-2-dev-env-and-zsh-on-windws-10.md',
    raw: '---\n' +
      'title: 개발환경 WSL2 + zsh로 갈아타기\n' +
      'tags:\n' +
      '  - WSL 2\n' +
      '  - zsh\n' +
      '  - Windows 10\n' +
      '  - terminal\n' +
      '  - nvm\n' +
      'categories:\n' +
      '  - 개발노트\n' +
      '  - Front-End\n' +
      'thumbnail: /upload/2021/thumbs/wsl2-zsh-on-windws-10.jpg\n' +
      'hero: /upload/2021/wsl2-zsh-on-windws-10.jpg\n' +
      'style: |\n' +
      '  .hero {\n' +
      '    &-wrapper {\n' +
      '      text-shadow:\n' +
      '        1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
      '        -1px -1px 2em rgba(20, 12, 24, 1);\n' +
      '    }\n' +
      '    &__image {\n' +
      '      opacity: 0.35\n' +
      '    }\n' +
      '  }\n' +
      'seo:\n' +
      '  description: |\n' +
      '    본격적으로 WSL + zsh 환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가\n' +
      '    설정을 차후에 필요할까 기록으로 남겨둔다.\n' +
      '  image: /upload/2021/wsl2-zsh-on-windws-10.jpg\n' +
      'date: 2021-01-28 00:32:57\n' +
      '---\n' +
      '\n' +
      '\n' +
      '## 기존 환경\n' +
      '\n' +
      '얼마 전까지만 해도 VS Code의 터미널을 git bash로 (이하 bash) 설정해서 5년 가까이 bash\n' +
      '상에서 CLI를 사용해왔다. (아! 참고로 나는 Windows 10 사용자다. 맥이었으면 진즉부터\n' +
      'terminal을 썼겠지...)\n' +
      '\n' +
      '이 블로그 테마를 제작 후에 몇 번 mac이나 linux 환경에서 테마 설치 오류에 대한 이슈가\n' +
      '올라왔었고, 최근에 어떤 사이트를 번역하는데 해당 사이트 빌드가 bash 상에서는 정상적으로\n' +
      '이루어지지 않아 확인해보니 linux 상에서는 올바르게 빌드 되어 linux 환경에 대한 필요가\n' +
      '생겨났다.\n' +
      '\n' +
      '결국 미루고 미루던 WSL 사용을 시도하기로 하고 반 년 정도를 이 방식으로 써 본 것 같다.\n' +
      '(미루고 미룬 이유는 Windows를 못믿어서... = _=a 항상 예기치 않은 오류를 만들어주는\n' +
      ' Windows ... )\n' +
      '\n' +
      '무튼, 반 년 정도의 사용 경험에서는 크게 문제를 느끼지 못해서 이제 본격적으로 WSL + zsh\n' +
      '환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가 설정을 차후에 필요할까 기록으로\n' +
      '남겨둔다. (안녕 bash~ 오래 동안 고마웠어 ㅠ)\n' +
      '\n' +
      '## WSL 1 or WSL 2 ?\n' +
      '\n' +
      'WSL을 쓰기로 한 시점에 결정해야 할 것 중 하나는 일단 WSL 1을 쓸 것인가 혹은 WSL 2를 쓸\n' +
      '것인가 같다. 물론, WSL 2 구성까지 해 두면 언제든지 원하는 시점에 WSL 1과 2를 오갈 수 있고\n' +
      '따라서 WSL 2 구성 방법으로 포스팅 해두기는 했다.\n' +
      '\n' +
      '내 경우엔 2가지를 다 써봤는데, 써보고 난 이후에 드는 생각은 일단 내 경우에는 WSL 1을 쓰는\n' +
      '게 아직은 낫지 않을까 싶다. MS에서는 WSL 2가 더 빠르고 전체 리눅스 커널 사용, 시스템 호출\n' +
      '호환성 등을 장점으로 들고 있지만 생각보다 만나게 되는 장애물이 많았다.\n' +
      '\n' +
      '일단 몇 가지 선택에 필요한 기준에 따라 나누어 보면,\n' +
      '기존의 Windows 시스템에서 이미 프로젝트가 구성되어 있고 (Node든 뭐 다른 것이든) 여기에\n' +
      'WSL을 통합하는 거라면 WSL 1을 추천한다.\n' +
      '반면 개발 환경을 새로 설정 하는 상황이나 새로 설정하는 것을 감안 할 생각이고, 리눅스 시스템에\n' +
      '거부감이 없다면 WSL 2가 나을 것 같다.\n' +
      '\n' +
      '이렇게 나눈 이유는, WSL 2에서는\n' +
      '\n' +
      '- Windows 파일 시스템(`/mnt/`)으로의 접근이 체감 될 만큼 느리다.\n' +
      '- Windows 파일 시스템에 이미 구성된 프로젝트의 경우, 파일 변경을 감지 하지 못하는 듯 하다.\n' +
      '  (Node의 watch 기능이 정상적으로 동작해주지 못한다. 파일 시스템이 다르니 당연한 것 같기는\n' +
      '  한데 처음에 무척 당황했다.)\n' +
      '- Windows에서 VS Code를 열고 터미널을 WSL로 사용할 때, Windows에서 연 브라우저가\n' +
      '  localhost에 접근이 잘 되지 않는다.\n' +
      '\n' +
      '  Windows 전원 옵션에 "빨리 켜기 기능"을 꺼두면 localhost 포워딩이 된다고 하는데, 실제로\n' +
      '  해봤을 때 localhost가 두 개의 다른 포트로 열렸을 때 하나만 되더라...\n' +
      '\n' +
      '내 경우는 이미 Windows 시스템을 기반으로 프로젝트들이 구성되어 있었고 WSL을 통합 해보는 거라\n' +
      '위의 문제들을 겪고 말았다 ㅋ\n' +
      '\n' +
      '물론 내 케이스가 아니라면 WSL 2가 더 나을 것 같기는 하다.\n' +
      '\n' +
      '## Windows Terminal 설치\n' +
      '\n' +
      'Windows에는 기본적으로 terminal이 존재하지 않기 때문에, windows terminal을\n' +
      '[Store](https://www.microsoft.com/ko-kr/p/windows-terminal/9n0dx20hk701)에서\n' +
      '별도로 설치해야 한다.\n' +
      '\n' +
      '![Windows Terminal on Store](/upload/2021/windows-store-terminal.jpg)\n' +
      '\n' +
      '## WSL 활성화\n' +
      '\n' +
      '자세한 내용은 [공식문서](https://docs.microsoft.com/ko-kr/windows/wsl/install-win10)를\n' +
      '참고하자.\n' +
      '\n' +
      "터미널(혹은 파워쉘)을 관리자 권한으로 실행 후, 다음을 차례대로 실행 하면된다. (물론 '제어판\n" +
      "&gt; 프로그램 &gt; 프로그램 및 기능 &gt; Windows 기능 켜기/끄기' 에서 GUI로 해도 된다.)\n" +
      '\n' +
      '```jsx\n' +
      'dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n' +
      'dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n' +
      '```\n' +
      '\n' +
      '실행이 종료 되었으면 "재시작"하자.\n' +
      '\n' +
      '일시적인 상황이었는지는 모르겠지만, 최초 이 설정을 할 때 재시작하지 않고 컴퓨터를 종료했다가\n' +
      '다음 날 켜서 설정을 계속 이어가려고 했더니 안되더라 = _=a\n' +
      '\n' +
      '### WSL 2 업데이트\n' +
      '\n' +
      'WSL 2를 사용하려면 적어도 Windows 10 May 2020 Update가 설치되어 있어야 한다. Windows\n' +
      '10 May 2020 Update에 실제 리눅스 커널을 사용하는 WSL 2가 기본 탑재 되었다고 한다.\n' +
      '그런데 좀 이상한게, Windows 10 최신 업데이트를 쓰고 있음에도 불구하고 WSL 2를 사용하려면\n' +
      '별도 패키지를 다운 받아서 설치하고, 추가 설정을 해야 한다. (아니 WSL 2를 기본으로 탑재했으면\n' +
      'WSL 2를 기본으로 사용할 수 있어야지 왜 WSL 1을 기본으로 잡아주고 있고... WSL 2를 쓰기 위해\n' +
      '추가 설치를 왜 해야 하는가...? )\n' +
      '\n' +
      '[MS WSL 설명서 페이지](https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package)로\n' +
      '가서 Linux 커널 업데이트 패키지 다운로드 후 설치한다.\n' +
      '\n' +
      '![Linux 커널 업데이트 설치 화면](/upload/2021/wsl-update.jpg)\n' +
      '\n' +
      '### WSL 기본 버전을 2로 설정\n' +
      '\n' +
      '터미널(혹은 파워쉘)에서 다음 명령을 시행한다.\n' +
      '\n' +
      '이걸 먼저 실행해야 이후로 설치되는 리눅스 시스템이 WSL 2를 기반으로 한다.\n' +
      '\n' +
      '```powershell\n' +
      'wsl --set-default-version 2\n' +
      '```\n' +
      '\n' +
      '## Ubuntu  설치\n' +
      '\n' +
      '다시 [Store](https://www.microsoft.com/ko-kr/store/apps/windows)에서 Ubuntu를\n' +
      '검색해서 설치 한다. (물론 우분투 말고 다른 리눅스 프로덕트를 선택해도 된다. 단지 내가\n' +
      'Ubuntu가 익숙해서 그렇다~~고 하지만 어차피 터미널인데?~~)\n' +
      '\n' +
      '![Windows Store Ubuntu 검색 결과](/upload/2021/windows-store-ubuntu.jpg)\n' +
      '\n' +
      '하지만 이 놈은 어디까지나 "배포" 패키지이므로 설치 후 최초 실행해야 우분투 설치가 진행된다.\n' +
      '시간이 조금 걸리니 기다리자.\n' +
      '\n' +
      '설치가 완료되면 다음과 같이 설치가 완료되었다는 메세지와 함께 웰컴 투 우분투가 노출된다\n' +
      '\n' +
      '![우분투 설치 완료 화면](/upload/2021/complete-install-ubuntu.jpg)\n' +
      '\n' +
      '### 터미널 기본 프로필 Ubuntu로 설정\n' +
      '\n' +
      '터미널에서도 Ubuntu가 기본으로 실행되도록 터미널 기본 프로필을 WSL로 설정한다.\n' +
      '\n' +
      '터미널에서 설정으로 들어가면 관련 json 파일이 열리는데, 여기서 `defaultProfile` 값을\n' +
      '`profiles.list` 에서 Ubuntu 것의 `guid` 값으로 수정하기만 하면 된다.\n' +
      '\n' +
      '```json|data-line="2,11"\n' +
      '{\n' +
      '  "defaultProfile": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
      '  ...\n' +
      '  "profiles":\n' +
      '    {\n' +
      '      ...\n' +
      '      "list":\n' +
      '      [\n' +
      '        ...\n' +
      '        {\n' +
      '          "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
      '          "hidden": false,\n' +
      '          "name": "Ubuntu",\n' +
      '          "source": "Windows.Terminal.Wsl",\n' +
      '          "colorScheme": "Dark+",\n' +
      '          "fontFace": "Hack"\n' +
      '        }\n' +
      '      ]\n' +
      '    },\n' +
      '}\n' +
      '```\n' +
      '\n' +
      '## Git, zsh 설치\n' +
      '\n' +
      'Ubuntu(WSL)를 실행하고, git과 zsh부터 설치한다.\n' +
      '\n' +
      '일단 패키지 레파지토리 인덱스부터 업데이트 하고\n' +
      '\n' +
      '```bash\n' +
      'sudo apt update\n' +
      '```\n' +
      '\n' +
      'git과 zsh을 설치\n' +
      '\n' +
      '```bash\n' +
      'sudo apt install git zsh\n' +
      '```\n' +
      '\n' +
      '## Oh my zsh 설치 및 구성\n' +
      '\n' +
      '### 설치\n' +
      '\n' +
      '터미널에서 다음 명령을 실행하기만 하면 된다.\n' +
      '\n' +
      '```bash\n' +
      'sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"\n' +
      '```\n' +
      '\n' +
      '설치가 완료되면 다음과 같은 메세지를 볼 수 있다.\n' +
      '\n' +
      '![oh my zsh 설치 완료 화면](/upload/2021/complete-install-oh-my-zsh.jpg)\n' +
      '\n' +
      '### 테마 구성\n' +
      '\n' +
      '역시 처음 설치했드면 꾸미기가 먼저다!!! 테마부터 변경한다.\n' +
      '\n' +
      '테마는 [ohmyzsh github wiki](https://github.com/ohmyzsh/ohmyzsh/wiki/Themes)에서\n' +
      '마음에 드는 걸 선택하면 될 것 같다. 내 경우엔 많이 언급되는 `agnoster`를 쓰기로...\n' +
      '\n' +
      '`~/.zshrc` 파일을 열어 `ZSH_THEME` 항목의 값을 변경하기만 하면 된다.\n' +
      '\n' +
      '```bash\n' +
      'vi ~/.zshrc\n' +
      '```\n' +
      '\n' +
      '```ini\n' +
      'ZSH_THEME="agnoster"\n' +
      '```\n' +
      '\n' +
      '참고로 `agnoster` 테마를 쓰려면 [powerline font](https://github.com/powerline/fonts)를\n' +
      '써야 하는데, 내 경우엔 이미 Hack 폰트를 쓰고 있어서 별도로 설치하지 않고 터미널 설정에서\n' +
      '`profile.list`의 해당 항목에 fontFamily 값만 추가하여 해결했다.\n' +
      '\n' +
      '```json|data-line="6"\n' +
      '{\n' +
      '  "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
      '  "hidden": false,\n' +
      '  "name": "Ubuntu",\n' +
      '  "source": "Windows.Terminal.Wsl",\n' +
      '  "fontFace": "Hack"\n' +
      '}\n' +
      '```\n' +
      '\n' +
      '### 터미널 color scheme 구성\n' +
      '\n' +
      '편한 눈을 위해(?) 각 컬러에 대한 상세 값을 설정할 수 있고, 개별적으로 설정이 어렵다면 이미\n' +
      '구성된 scheme들이 [windowsterminalthemes](https://windowsterminalthemes.dev/)에서\n' +
      '제공되고 있으니 이를 참고해서 구성도 가능하다.\n' +
      '\n' +
      '설정은 마찬가지로 터미널 설정에서 이루어지고, `schemes` 항목에 color scheme을 추가하고,\n' +
      '`profiles.list`의 해당 항목에 `colorScheme` 값을 추가 한 color scheme의 `name`\n' +
      '값으로 설정하면 된다.\n' +
      '\n' +
      '```json|data-line="10,16"\n' +
      '"profiles" :{\n' +
      '  "list": [\n' +
      '    ...,\n' +
      '    {\n' +
      '      "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
      '      "hidden": false,\n' +
      '      "name": "Ubuntu",\n' +
      '      "source": "Windows.Terminal.Wsl",\n' +
      '      "fontFace": "Hack",\n' +
      '      "colorScheme": "Dark+"\n' +
      '    }\n' +
      '  ],\n' +
      '},\n' +
      '"schemes": [\n' +
      '  {\n' +
      '    "name": "Dark+",\n' +
      '    "black": "#000000",\n' +
      '    ...\n' +
      '    "background": "#0e0e0e",\n' +
      '    "foreground": "#cccccc"\n' +
      '  }\n' +
      '],\n' +
      '```\n' +
      '\n' +
      '## zsh plugins 설치\n' +
      '\n' +
      '조금 더 편한 zsh 사용을 위해 플러그인을 설치한다.\n' +
      '\n' +
      '### [zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions)\n' +
      '\n' +
      '이 플러그인은 이전에 입력했던 명령을 기반으로 명령을 타이핑 할 때마다 자동 완성을 제공하고\n' +
      '방향키로 해당 자동 완성을 사용할 수 있게 해준다.\n' +
      '\n' +
      '다음 명령으로 설치하고,\n' +
      '\n' +
      '```bash\n' +
      'git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n' +
      '```\n' +
      '\n' +
      '`~/.zshrc` 파일을 열어 `plugins` 항목에 `zsh-autosuggestions`를 추가해준다.\n' +
      '\n' +
      '```ini\n' +
      'plugins=(git zsh-autosuggestions)\n' +
      '```\n' +
      '\n' +
      '### [syntax highlighting](https://github.com/zsh-users/zsh-syntax-highlighting/)\n' +
      '\n' +
      '이 플러그인은 명령어에 구문 강조를 적용해준다.\n' +
      '구문 강조가 적용되면 좋은 것 중 하나는 특정 명령을 사용할 수 있으면 녹색으로, 설치 되지 않음\n' +
      '등의 이유로 알 수 없는 명령이면 빨간색으로 나타난다.\n' +
      '\n' +
      '다음 명령으로 설치하고,\n' +
      '\n' +
      '```bash\n' +
      'git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n' +
      '```\n' +
      '\n' +
      '`~/.zshrc` 파일을 열어 `plugins` 항목에 `zsh-syntax-highlighting`을 추가해준다.\n' +
      '\n' +
      '```ini\n' +
      'plugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n' +
      '```\n' +
      '\n' +
      '## 터미널 프롬프트 변경\n' +
      '\n' +
      '터미널을 열면 다음 화면처럼 username@hostname 형태로 프롬프트가 나오는데, VS Code에서\n' +
      '터미널을 열고 작업하면 이 프롬프트가 차지하는 공간이 적지 않아 보기 불편하다.\n' +
      '\n' +
      '다행히 이것마저도 변경하거나 감출 수 있다!!\n' +
      '\n' +
      '![기본으로는 user name과 host name이 모두 노출된다](/upload/2021/terminal-prompt-full-name.jpg)\n' +
      '\n' +
      '`~/.zshrc` 파일을 열고 다음을 추가하면\n' +
      '\n' +
      '```ini\n' +
      'prompt_context() {}\n' +
      '```\n' +
      '\n' +
      '프롬프트가 사라진다. 두둔!!\n' +
      '\n' +
      '![프롬프가 사라지고 경로만 남았다](/upload/2021/terminal-prompt-hide-name.jpg)\n' +
      '\n' +
      '참고로 다음과 같이 수정하면 user name과 경로만 노출된다.\n' +
      '\n' +
      '```ini\n' +
      'prompt_context() {\n' +
      '    if [[ "$USER" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then\n' +
      '      prompt_segment black default "%(!.%{%F{yellow}%}.)$USER"\n' +
      '    fi\n' +
      '}\n' +
      '```\n' +
      '\n' +
      '### Named directory 구성\n' +
      '\n' +
      '하지만 아직 `/mnt/c/Users/{user name}/` 이 거슬린다.\n' +
      '심지어 이게 디렉토리 깊이가 깊어지면 이 또한 너무 길어진다. 하여 이 마저도 줄여보기로 한다.\n' +
      '\n' +
      '역시 마찬가지로 `~/.zshrc` 파일을 열어 다음을 참고하여 환경에 맞게 추가한다.\n' +
      '\n' +
      '내 경우엔 `c:\\Users\\mulder21c\\Project`와 `c:\\Users\\mulder21c\\Workspace`이 주 사용\n' +
      '디렉토리라 이 디렉토리들에 대한 경로를 변경하기로 했다.\n' +
      '\n' +
      '```ini\n' +
      'hash -d mulder21c=/mnt/c/Users/mulder21c\n' +
      'hash -d Project=/mnt/c/Users/mulder21c/Project\n' +
      'hash -d Workspace=/mnt/c/Users/mulder21c/Workspace\n' +
      '```\n' +
      '\n' +
      '터미널을 다시 열어보면 다음과 같이 지정한 이름으로 표시된다. (단 앞에 `~`이 붙는다.)\n' +
      '\n' +
      '![named directory를 적용하고 경로가 한결 간결해졌다](/upload/2021/terminal-named-directory.jpg)\n' +
      '\n' +
      '이제야 터미널이 좀 간결해진 것 같다.\n' +
      '\n' +
      '## nvm 설치\n' +
      '\n' +
      '마지막으로 node.js 환경을 위해 nvm을 설치한다.\n' +
      '\n' +
      '터미널에서 다음 명령을 주면 자동으로 설치가 진행된다.\n' +
      '\n' +
      '```bash\n' +
      'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n' +
      '```\n' +
      '\n' +
      '참고로, Windows에 nvm for windows가 설치되어 있다면 충돌로 설치가 진행되지 않는다. 내\n' +
      '경우엔 더 이상 Windows 시스템에서 node를 실행할 생각이 없어서 과감히 제거하고 설치했다.\n' +
      '\n' +
      '설치가 완료되면 나타난 메세지 중에 다음과 같은 메세지가 있다.\n' +
      '\n' +
      '```ini\n' +
      'export NVM_DIR="$HOME/.nvm"\n' +
      '[ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh"  # This loads nvm\n' +
      '[ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion\n' +
      '```\n' +
      '\n' +
      '이걸 복사해서 `~/.zshrc`에 추가해야 한다.\n' +
      '\n' +
      '이후 node 설치는 nvm을 이용하면 된다.\n' +
      '\n' +
      '### auto `nvm` use  설정\n' +
      '\n' +
      '마지막으로 아직 테스트 해보지는 않았지만, 최근 Node 10.x, Node 14.x, Node 15.x를 각\n' +
      '환경으로 하는 프로덕트를 왔다 갔다 하다가 Node 버전 문제로 node-sass가 오류를 내뱉는 상황을\n' +
      '자주 만나게 되었다. `nvm use` 하는 걸 까먹기도 했고 현재 프로덕트가 어느 버전에서 돌려야\n' +
      '하는지도 까먹기 일수였다 ;;;\n' +
      '\n' +
      '하여 구성하는 김에 `.nvmrc`를 이용해서 자동으로 `nvm use`가 적용되게 하는 설정을 추가했다.\n' +
      '\n' +
      '다음의 코드를 `~/.zshrc`에 추가하면되는데, 아직 테스트해보진 않아서 잘 되는지는 모르겠다 = _=a\n' +
      '뭐... stackoverflow에서 건져온 건데 추천이 많았으니 잘 되겠지...? /=ㅁ=/\n' +
      '\n' +
      '```ini\n' +
      '# place this after nvm initialization!\n' +
      'autoload -U add-zsh-hook\n' +
      'load-nvmrc() {\n' +
      '  local node_version="$(nvm version)"\n' +
      '  local nvmrc_path="$(nvm_find_nvmrc)"\n' +
      '\n' +
      '  if [ -n "$nvmrc_path" ]; then\n' +
      '    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")\n' +
      '\n' +
      '    if [ "$nvmrc_node_version" = "N/A" ]; then\n' +
      '      nvm install\n' +
      '    elif [ "$nvmrc'... 239 more characters,
    slug: 'setting-up-wsl-2-dev-env-and-zsh-on-windws-10',
    published: true,
    comments: true,
    layout: 'post',
    photos: [],
    link: '',
    _id: 'clcytfa4r00aatawwe3zac5qf',
    content: '<h2 id="기존-환경"><a href="#기존-환경" class="headerlink" title="기존 환경"></a>기존 환경</h2><p>얼마 전까지만 해도 VS Code의 터미널을 git bash로 (이하 bash) 설정해서 5년 가까이 bash\n' +
      '상에서 CLI를 사용해왔다. (아! 참고로 나는 Windows 10 사용자다. 맥이었으면 진즉부터\n' +
      'terminal을 썼겠지...)</p>\n' +
      '<p>이 블로그 테마를 제작 후에 몇 번 mac이나 linux 환경에서 테마 설치 오류에 대한 이슈가\n' +
      '올라왔었고, 최근에 어떤 사이트를 번역하는데 해당 사이트 빌드가 bash 상에서는 정상적으로\n' +
      '이루어지지 않아 확인해보니 linux 상에서는 올바르게 빌드 되어 linux 환경에 대한 필요가\n' +
      '생겨났다.</p>\n' +
      '<p>결국 미루고 미루던 WSL 사용을 시도하기로 하고 반 년 정도를 이 방식으로 써 본 것 같다.\n' +
      '(미루고 미룬 이유는 Windows를 못믿어서... &#x3D; _&#x3D;a 항상 예기치 않은 오류를 만들어주는\n' +
      ' Windows ... )</p>\n' +
      '<p>무튼, 반 년 정도의 사용 경험에서는 크게 문제를 느끼지 못해서 이제 본격적으로 WSL + zsh\n' +
      '환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가 설정을 차후에 필요할까 기록으로\n' +
      '남겨둔다. (안녕 bash~ 오래 동안 고마웠어 ㅠ)</p>\n' +
      '<h2 id="WSL-1-or-WSL-2"><a href="#WSL-1-or-WSL-2" class="headerlink" title="WSL 1 or WSL 2 ?"></a>WSL 1 or WSL 2 ?</h2><p>WSL을 쓰기로 한 시점에 결정해야 할 것 중 하나는 일단 WSL 1을 쓸 것인가 혹은 WSL 2를 쓸\n' +
      '것인가 같다. 물론, WSL 2 구성까지 해 두면 언제든지 원하는 시점에 WSL 1과 2를 오갈 수 있고\n' +
      '따라서 WSL 2 구성 방법으로 포스팅 해두기는 했다.</p>\n' +
      '<p>내 경우엔 2가지를 다 써봤는데, 써보고 난 이후에 드는 생각은 일단 내 경우에는 WSL 1을 쓰는\n' +
      '게 아직은 낫지 않을까 싶다. MS에서는 WSL 2가 더 빠르고 전체 리눅스 커널 사용, 시스템 호출\n' +
      '호환성 등을 장점으로 들고 있지만 생각보다 만나게 되는 장애물이 많았다.</p>\n' +
      '<p>일단 몇 가지 선택에 필요한 기준에 따라 나누어 보면,\n' +
      '기존의 Windows 시스템에서 이미 프로젝트가 구성되어 있고 (Node든 뭐 다른 것이든) 여기에\n' +
      'WSL을 통합하는 거라면 WSL 1을 추천한다.\n' +
      '반면 개발 환경을 새로 설정 하는 상황이나 새로 설정하는 것을 감안 할 생각이고, 리눅스 시스템에\n' +
      '거부감이 없다면 WSL 2가 나을 것 같다.</p>\n' +
      '<p>이렇게 나눈 이유는, WSL 2에서는</p>\n' +
      '<ul>\n' +
      '<li><p>Windows 파일 시스템(<code>/mnt/</code>)으로의 접근이 체감 될 만큼 느리다.</p>\n' +
      '</li>\n' +
      '<li><p>Windows 파일 시스템에 이미 구성된 프로젝트의 경우, 파일 변경을 감지 하지 못하는 듯 하다.\n' +
      '(Node의 watch 기능이 정상적으로 동작해주지 못한다. 파일 시스템이 다르니 당연한 것 같기는\n' +
      '한데 처음에 무척 당황했다.)</p>\n' +
      '</li>\n' +
      '<li><p>Windows에서 VS Code를 열고 터미널을 WSL로 사용할 때, Windows에서 연 브라우저가\n' +
      'localhost에 접근이 잘 되지 않는다.</p>\n' +
      '<p>Windows 전원 옵션에 &quot;빨리 켜기 기능&quot;을 꺼두면 localhost 포워딩이 된다고 하는데, 실제로\n' +
      '해봤을 때 localhost가 두 개의 다른 포트로 열렸을 때 하나만 되더라...</p>\n' +
      '</li>\n' +
      '</ul>\n' +
      '<p>내 경우는 이미 Windows 시스템을 기반으로 프로젝트들이 구성되어 있었고 WSL을 통합 해보는 거라\n' +
      '위의 문제들을 겪고 말았다 ㅋ</p>\n' +
      '<p>물론 내 케이스가 아니라면 WSL 2가 더 나을 것 같기는 하다.</p>\n' +
      '<h2 id="Windows-Terminal-설치"><a href="#Windows-Terminal-설치" class="headerlink" title="Windows Terminal 설치"></a>Windows Terminal 설치</h2><p>Windows에는 기본적으로 terminal이 존재하지 않기 때문에, windows terminal을\n' +
      '<a href="https://www.microsoft.com/ko-kr/p/windows-terminal/9n0dx20hk701">Store</a>에서\n' +
      '별도로 설치해야 한다.</p>\n' +
      '<p><img src="/upload/2021/windows-store-terminal.jpg" alt="Windows Terminal on Store"></p>\n' +
      '<h2 id="WSL-활성화"><a href="#WSL-활성화" class="headerlink" title="WSL 활성화"></a>WSL 활성화</h2><p>자세한 내용은 <a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10">공식문서</a>를\n' +
      '참고하자.</p>\n' +
      '<p>터미널(혹은 파워쉘)을 관리자 권한으로 실행 후, 다음을 차례대로 실행 하면된다. (물론 &#39;제어판\n' +
      '&gt; 프로그램 &gt; 프로그램 및 기능 &gt; Windows 기능 켜기&#x2F;끄기&#39; 에서 GUI로 해도 된다.)</p>\n' +
      '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span>enable<span class="token operator">-</span>feature <span class="token operator">/</span>featurename<span class="token operator">:</span>Microsoft<span class="token operator">-</span>Windows<span class="token operator">-</span>Subsystem<span class="token operator">-</span>Linux <span class="token operator">/</span>all <span class="token operator">/</span>norestart\n' +
      'dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span>enable<span class="token operator">-</span>feature <span class="token operator">/</span>featurename<span class="token operator">:</span>VirtualMachinePlatform <span class="token operator">/</span>all <span class="token operator">/</span>norestart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>실행이 종료 되었으면 &quot;재시작&quot;하자.</p>\n' +
      '<p>일시적인 상황이었는지는 모르겠지만, 최초 이 설정을 할 때 재시작하지 않고 컴퓨터를 종료했다가\n' +
      '다음 날 켜서 설정을 계속 이어가려고 했더니 안되더라 &#x3D; _&#x3D;a</p>\n' +
      '<h3 id="WSL-2-업데이트"><a href="#WSL-2-업데이트" class="headerlink" title="WSL 2 업데이트"></a>WSL 2 업데이트</h3><p>WSL 2를 사용하려면 적어도 Windows 10 May 2020 Update가 설치되어 있어야 한다. Windows\n' +
      '10 May 2020 Update에 실제 리눅스 커널을 사용하는 WSL 2가 기본 탑재 되었다고 한다.\n' +
      '그런데 좀 이상한게, Windows 10 최신 업데이트를 쓰고 있음에도 불구하고 WSL 2를 사용하려면\n' +
      '별도 패키지를 다운 받아서 설치하고, 추가 설정을 해야 한다. (아니 WSL 2를 기본으로 탑재했으면\n' +
      'WSL 2를 기본으로 사용할 수 있어야지 왜 WSL 1을 기본으로 잡아주고 있고... WSL 2를 쓰기 위해\n' +
      '추가 설치를 왜 해야 하는가...? )</p>\n' +
      '<p><a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package">MS WSL 설명서 페이지</a>로\n' +
      '가서 Linux 커널 업데이트 패키지 다운로드 후 설치한다.</p>\n' +
      '<p><img src="/upload/2021/wsl-update.jpg" alt="Linux 커널 업데이트 설치 화면"></p>\n' +
      '<h3 id="WSL-기본-버전을-2로-설정"><a href="#WSL-기본-버전을-2로-설정" class="headerlink" title="WSL 기본 버전을 2로 설정"></a>WSL 기본 버전을 2로 설정</h3><p>터미널(혹은 파워쉘)에서 다음 명령을 시행한다.</p>\n' +
      '<p>이걸 먼저 실행해야 이후로 설치되는 리눅스 시스템이 WSL 2를 기반으로 한다.</p>\n' +
      '<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-default</span><span class="token operator">-</span>version 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<h2 id="Ubuntu-설치"><a href="#Ubuntu-설치" class="headerlink" title="Ubuntu  설치"></a>Ubuntu  설치</h2><p>다시 <a href="https://www.microsoft.com/ko-kr/store/apps/windows">Store</a>에서 Ubuntu를\n' +
      '검색해서 설치 한다. (물론 우분투 말고 다른 리눅스 프로덕트를 선택해도 된다. 단지 내가\n' +
      'Ubuntu가 익숙해서 그렇다<del>고 하지만 어차피 터미널인데?</del>)</p>\n' +
      '<p><img src="/upload/2021/windows-store-ubuntu.jpg" alt="Windows Store Ubuntu 검색 결과"></p>\n' +
      '<p>하지만 이 놈은 어디까지나 &quot;배포&quot; 패키지이므로 설치 후 최초 실행해야 우분투 설치가 진행된다.\n' +
      '시간이 조금 걸리니 기다리자.</p>\n' +
      '<p>설치가 완료되면 다음과 같이 설치가 완료되었다는 메세지와 함께 웰컴 투 우분투가 노출된다</p>\n' +
      '<p><img src="/upload/2021/complete-install-ubuntu.jpg" alt="우분투 설치 완료 화면"></p>\n' +
      '<h3 id="터미널-기본-프로필-Ubuntu로-설정"><a href="#터미널-기본-프로필-Ubuntu로-설정" class="headerlink" title="터미널 기본 프로필 Ubuntu로 설정"></a>터미널 기본 프로필 Ubuntu로 설정</h3><p>터미널에서도 Ubuntu가 기본으로 실행되도록 터미널 기본 프로필을 WSL로 설정한다.</p>\n' +
      '<p>터미널에서 설정으로 들어가면 관련 json 파일이 열리는데, 여기서 <code>defaultProfile</code> 값을\n' +
      '<code>profiles.list</code> 에서 Ubuntu 것의 <code>guid</code> 값으로 수정하기만 하면 된다.</p>\n' +
      '<pre class="line-numbers language-json|data-line" data-language="json|data-line"><code class="language-json|data-line">&#123;\n' +
      '  &quot;defaultProfile&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,\n' +
      '  ...\n' +
      '  &quot;profiles&quot;:\n' +
      '    &#123;\n' +
      '      ...\n' +
      '      &quot;list&quot;:\n' +
      '      [\n' +
      '        ...\n' +
      '        &#123;\n' +
      '          &quot;guid&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,\n' +
      '          &quot;hidden&quot;: false,\n' +
      '          &quot;name&quot;: &quot;Ubuntu&quot;,\n' +
      '          &quot;source&quot;: &quot;Windows.Terminal.Wsl&quot;,\n' +
      '          &quot;colorScheme&quot;: &quot;Dark+&quot;,\n' +
      '          &quot;fontFace&quot;: &quot;Hack&quot;\n' +
      '        &#125;\n' +
      '      ]\n' +
      '    &#125;,\n' +
      '&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<h2 id="Git-zsh-설치"><a href="#Git-zsh-설치" class="headerlink" title="Git, zsh 설치"></a>Git, zsh 설치</h2><p>Ubuntu(WSL)를 실행하고, git과 zsh부터 설치한다.</p>\n' +
      '<p>일단 패키지 레파지토리 인덱스부터 업데이트 하고</p>\n' +
      '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<p>git과 zsh을 설치</p>\n' +
      '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span> <span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<h2 id="Oh-my-zsh-설치-및-구성"><a href="#Oh-my-zsh-설치-및-구성" class="headerlink" title="Oh my zsh 설치 및 구성"></a>Oh my zsh 설치 및 구성</h2><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><p>터미널에서 다음 명령을 실행하기만 하면 된다.</p>\n' +
      '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<p>설치가 완료되면 다음과 같은 메세지를 볼 수 있다.</p>\n' +
      '<p><img src="/upload/2021/complete-install-oh-my-zsh.jpg" alt="oh my zsh 설치 완료 화면"></p>\n' +
      '<h3 id="테마-구성"><a href="#테마-구성" class="headerlink" title="테마 구성"></a>테마 구성</h3><p>역시 처음 설치했드면 꾸미기가 먼저다!!! 테마부터 변경한다.</p>\n' +
      '<p>테마는 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">ohmyzsh github wiki</a>에서\n' +
      '마음에 드는 걸 선택하면 될 것 같다. 내 경우엔 많이 언급되는 <code>agnoster</code>를 쓰기로...</p>\n' +
      '<p><code>~/.zshrc</code> 파일을 열어 <code>ZSH_THEME</code> 항목의 값을 변경하기만 하면 된다.</p>\n' +
      '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">ZSH_THEME</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">agnoster</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<p>참고로 <code>agnoster</code> 테마를 쓰려면 <a href="https://github.com/powerline/fonts">powerline font</a>를\n' +
      '써야 하는데, 내 경우엔 이미 Hack 폰트를 쓰고 있어서 별도로 설치하지 않고 터미널 설정에서\n' +
      '<code>profile.list</code>의 해당 항목에 fontFamily 값만 추가하여 해결했다.</p>\n' +
      '<pre class="line-numbers language-j'... 11610 more characters,
    site: { data: [Object] },
    excerpt: '',
    more: '<h2 id="기존-환경"><a href="#기존-환경" class="headerlink" title="기존 환경"></a>기존 환경</h2><p>얼마 전까지만 해도 VS Code의 터미널을 git bash로 (이하 bash) 설정해서 5년 가까이 bash\n' +
      '상에서 CLI를 사용해왔다. (아! 참고로 나는 Windows 10 사용자다. 맥이었으면 진즉부터\n' +
      'terminal을 썼겠지...)</p>\n' +
      '<p>이 블로그 테마를 제작 후에 몇 번 mac이나 linux 환경에서 테마 설치 오류에 대한 이슈가\n' +
      '올라왔었고, 최근에 어떤 사이트를 번역하는데 해당 사이트 빌드가 bash 상에서는 정상적으로\n' +
      '이루어지지 않아 확인해보니 linux 상에서는 올바르게 빌드 되어 linux 환경에 대한 필요가\n' +
      '생겨났다.</p>\n' +
      '<p>결국 미루고 미루던 WSL 사용을 시도하기로 하고 반 년 정도를 이 방식으로 써 본 것 같다.\n' +
      '(미루고 미룬 이유는 Windows를 못믿어서... &#x3D; _&#x3D;a 항상 예기치 않은 오류를 만들어주는\n' +
      ' Windows ... )</p>\n' +
      '<p>무튼, 반 년 정도의 사용 경험에서는 크게 문제를 느끼지 못해서 이제 본격적으로 WSL + zsh\n' +
      '환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가 설정을 차후에 필요할까 기록으로\n' +
      '남겨둔다. (안녕 bash~ 오래 동안 고마웠어 ㅠ)</p>\n' +
      '<h2 id="WSL-1-or-WSL-2"><a href="#WSL-1-or-WSL-2" class="headerlink" title="WSL 1 or WSL 2 ?"></a>WSL 1 or WSL 2 ?</h2><p>WSL을 쓰기로 한 시점에 결정해야 할 것 중 하나는 일단 WSL 1을 쓸 것인가 혹은 WSL 2를 쓸\n' +
      '것인가 같다. 물론, WSL 2 구성까지 해 두면 언제든지 원하는 시점에 WSL 1과 2를 오갈 수 있고\n' +
      '따라서 WSL 2 구성 방법으로 포스팅 해두기는 했다.</p>\n' +
      '<p>내 경우엔 2가지를 다 써봤는데, 써보고 난 이후에 드는 생각은 일단 내 경우에는 WSL 1을 쓰는\n' +
      '게 아직은 낫지 않을까 싶다. MS에서는 WSL 2가 더 빠르고 전체 리눅스 커널 사용, 시스템 호출\n' +
      '호환성 등을 장점으로 들고 있지만 생각보다 만나게 되는 장애물이 많았다.</p>\n' +
      '<p>일단 몇 가지 선택에 필요한 기준에 따라 나누어 보면,\n' +
      '기존의 Windows 시스템에서 이미 프로젝트가 구성되어 있고 (Node든 뭐 다른 것이든) 여기에\n' +
      'WSL을 통합하는 거라면 WSL 1을 추천한다.\n' +
      '반면 개발 환경을 새로 설정 하는 상황이나 새로 설정하는 것을 감안 할 생각이고, 리눅스 시스템에\n' +
      '거부감이 없다면 WSL 2가 나을 것 같다.</p>\n' +
      '<p>이렇게 나눈 이유는, WSL 2에서는</p>\n' +
      '<ul>\n' +
      '<li><p>Windows 파일 시스템(<code>/mnt/</code>)으로의 접근이 체감 될 만큼 느리다.</p>\n' +
      '</li>\n' +
      '<li><p>Windows 파일 시스템에 이미 구성된 프로젝트의 경우, 파일 변경을 감지 하지 못하는 듯 하다.\n' +
      '(Node의 watch 기능이 정상적으로 동작해주지 못한다. 파일 시스템이 다르니 당연한 것 같기는\n' +
      '한데 처음에 무척 당황했다.)</p>\n' +
      '</li>\n' +
      '<li><p>Windows에서 VS Code를 열고 터미널을 WSL로 사용할 때, Windows에서 연 브라우저가\n' +
      'localhost에 접근이 잘 되지 않는다.</p>\n' +
      '<p>Windows 전원 옵션에 &quot;빨리 켜기 기능&quot;을 꺼두면 localhost 포워딩이 된다고 하는데, 실제로\n' +
      '해봤을 때 localhost가 두 개의 다른 포트로 열렸을 때 하나만 되더라...</p>\n' +
      '</li>\n' +
      '</ul>\n' +
      '<p>내 경우는 이미 Windows 시스템을 기반으로 프로젝트들이 구성되어 있었고 WSL을 통합 해보는 거라\n' +
      '위의 문제들을 겪고 말았다 ㅋ</p>\n' +
      '<p>물론 내 케이스가 아니라면 WSL 2가 더 나을 것 같기는 하다.</p>\n' +
      '<h2 id="Windows-Terminal-설치"><a href="#Windows-Terminal-설치" class="headerlink" title="Windows Terminal 설치"></a>Windows Terminal 설치</h2><p>Windows에는 기본적으로 terminal이 존재하지 않기 때문에, windows terminal을\n' +
      '<a href="https://www.microsoft.com/ko-kr/p/windows-terminal/9n0dx20hk701">Store</a>에서\n' +
      '별도로 설치해야 한다.</p>\n' +
      '<p><img src="/upload/2021/windows-store-terminal.jpg" alt="Windows Terminal on Store"></p>\n' +
      '<h2 id="WSL-활성화"><a href="#WSL-활성화" class="headerlink" title="WSL 활성화"></a>WSL 활성화</h2><p>자세한 내용은 <a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10">공식문서</a>를\n' +
      '참고하자.</p>\n' +
      '<p>터미널(혹은 파워쉘)을 관리자 권한으로 실행 후, 다음을 차례대로 실행 하면된다. (물론 &#39;제어판\n' +
      '&gt; 프로그램 &gt; 프로그램 및 기능 &gt; Windows 기능 켜기&#x2F;끄기&#39; 에서 GUI로 해도 된다.)</p>\n' +
      '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span>enable<span class="token operator">-</span>feature <span class="token operator">/</span>featurename<span class="token operator">:</span>Microsoft<span class="token operator">-</span>Windows<span class="token operator">-</span>Subsystem<span class="token operator">-</span>Linux <span class="token operator">/</span>all <span class="token operator">/</span>norestart\n' +
      'dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span>enable<span class="token operator">-</span>feature <span class="token operator">/</span>featurename<span class="token operator">:</span>VirtualMachinePlatform <span class="token operator">/</span>all <span class="token operator">/</span>norestart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>실행이 종료 되었으면 &quot;재시작&quot;하자.</p>\n' +
      '<p>일시적인 상황이었는지는 모르겠지만, 최초 이 설정을 할 때 재시작하지 않고 컴퓨터를 종료했다가\n' +
      '다음 날 켜서 설정을 계속 이어가려고 했더니 안되더라 &#x3D; _&#x3D;a</p>\n' +
      '<h3 id="WSL-2-업데이트"><a href="#WSL-2-업데이트" class="headerlink" title="WSL 2 업데이트"></a>WSL 2 업데이트</h3><p>WSL 2를 사용하려면 적어도 Windows 10 May 2020 Update가 설치되어 있어야 한다. Windows\n' +
      '10 May 2020 Update에 실제 리눅스 커널을 사용하는 WSL 2가 기본 탑재 되었다고 한다.\n' +
      '그런데 좀 이상한게, Windows 10 최신 업데이트를 쓰고 있음에도 불구하고 WSL 2를 사용하려면\n' +
      '별도 패키지를 다운 받아서 설치하고, 추가 설정을 해야 한다. (아니 WSL 2를 기본으로 탑재했으면\n' +
      'WSL 2를 기본으로 사용할 수 있어야지 왜 WSL 1을 기본으로 잡아주고 있고... WSL 2를 쓰기 위해\n' +
      '추가 설치를 왜 해야 하는가...? )</p>\n' +
      '<p><a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package">MS WSL 설명서 페이지</a>로\n' +
      '가서 Linux 커널 업데이트 패키지 다운로드 후 설치한다.</p>\n' +
      '<p><img src="/upload/2021/wsl-update.jpg" alt="Linux 커널 업데이트 설치 화면"></p>\n' +
      '<h3 id="WSL-기본-버전을-2로-설정"><a href="#WSL-기본-버전을-2로-설정" class="headerlink" title="WSL 기본 버전을 2로 설정"></a>WSL 기본 버전을 2로 설정</h3><p>터미널(혹은 파워쉘)에서 다음 명령을 시행한다.</p>\n' +
      '<p>이걸 먼저 실행해야 이후로 설치되는 리눅스 시스템이 WSL 2를 기반으로 한다.</p>\n' +
      '<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-default</span><span class="token operator">-</span>version 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<h2 id="Ubuntu-설치"><a href="#Ubuntu-설치" class="headerlink" title="Ubuntu  설치"></a>Ubuntu  설치</h2><p>다시 <a href="https://www.microsoft.com/ko-kr/store/apps/windows">Store</a>에서 Ubuntu를\n' +
      '검색해서 설치 한다. (물론 우분투 말고 다른 리눅스 프로덕트를 선택해도 된다. 단지 내가\n' +
      'Ubuntu가 익숙해서 그렇다<del>고 하지만 어차피 터미널인데?</del>)</p>\n' +
      '<p><img src="/upload/2021/windows-store-ubuntu.jpg" alt="Windows Store Ubuntu 검색 결과"></p>\n' +
      '<p>하지만 이 놈은 어디까지나 &quot;배포&quot; 패키지이므로 설치 후 최초 실행해야 우분투 설치가 진행된다.\n' +
      '시간이 조금 걸리니 기다리자.</p>\n' +
      '<p>설치가 완료되면 다음과 같이 설치가 완료되었다는 메세지와 함께 웰컴 투 우분투가 노출된다</p>\n' +
      '<p><img src="/upload/2021/complete-install-ubuntu.jpg" alt="우분투 설치 완료 화면"></p>\n' +
      '<h3 id="터미널-기본-프로필-Ubuntu로-설정"><a href="#터미널-기본-프로필-Ubuntu로-설정" class="headerlink" title="터미널 기본 프로필 Ubuntu로 설정"></a>터미널 기본 프로필 Ubuntu로 설정</h3><p>터미널에서도 Ubuntu가 기본으로 실행되도록 터미널 기본 프로필을 WSL로 설정한다.</p>\n' +
      '<p>터미널에서 설정으로 들어가면 관련 json 파일이 열리는데, 여기서 <code>defaultProfile</code> 값을\n' +
      '<code>profiles.list</code> 에서 Ubuntu 것의 <code>guid</code> 값으로 수정하기만 하면 된다.</p>\n' +
      '<pre class="line-numbers language-json|data-line" data-language="json|data-line"><code class="language-json|data-line">&#123;\n' +
      '  &quot;defaultProfile&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,\n' +
      '  ...\n' +
      '  &quot;profiles&quot;:\n' +
      '    &#123;\n' +
      '      ...\n' +
      '      &quot;list&quot;:\n' +
      '      [\n' +
      '        ...\n' +
      '        &#123;\n' +
      '          &quot;guid&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,\n' +
      '          &quot;hidden&quot;: false,\n' +
      '          &quot;name&quot;: &quot;Ubuntu&quot;,\n' +
      '          &quot;source&quot;: &quot;Windows.Terminal.Wsl&quot;,\n' +
      '          &quot;colorScheme&quot;: &quot;Dark+&quot;,\n' +
      '          &quot;fontFace&quot;: &quot;Hack&quot;\n' +
      '        &#125;\n' +
      '      ]\n' +
      '    &#125;,\n' +
      '&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<h2 id="Git-zsh-설치"><a href="#Git-zsh-설치" class="headerlink" title="Git, zsh 설치"></a>Git, zsh 설치</h2><p>Ubuntu(WSL)를 실행하고, git과 zsh부터 설치한다.</p>\n' +
      '<p>일단 패키지 레파지토리 인덱스부터 업데이트 하고</p>\n' +
      '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<p>git과 zsh을 설치</p>\n' +
      '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span> <span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<h2 id="Oh-my-zsh-설치-및-구성"><a href="#Oh-my-zsh-설치-및-구성" class="headerlink" title="Oh my zsh 설치 및 구성"></a>Oh my zsh 설치 및 구성</h2><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><p>터미널에서 다음 명령을 실행하기만 하면 된다.</p>\n' +
      '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<p>설치가 완료되면 다음과 같은 메세지를 볼 수 있다.</p>\n' +
      '<p><img src="/upload/2021/complete-install-oh-my-zsh.jpg" alt="oh my zsh 설치 완료 화면"></p>\n' +
      '<h3 id="테마-구성"><a href="#테마-구성" class="headerlink" title="테마 구성"></a>테마 구성</h3><p>역시 처음 설치했드면 꾸미기가 먼저다!!! 테마부터 변경한다.</p>\n' +
      '<p>테마는 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">ohmyzsh github wiki</a>에서\n' +
      '마음에 드는 걸 선택하면 될 것 같다. 내 경우엔 많이 언급되는 <code>agnoster</code>를 쓰기로...</p>\n' +
      '<p><code>~/.zshrc</code> 파일을 열어 <code>ZSH_THEME</code> 항목의 값을 변경하기만 하면 된다.</p>\n' +
      '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">ZSH_THEME</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">agnoster</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<p>참고로 <code>agnoster</code> 테마를 쓰려면 <a href="https://github.com/powerline/fonts">powerline font</a>를\n' +
      '써야 하는데, 내 경우엔 이미 Hack 폰트를 쓰고 있어서 별도로 설치하지 않고 터미널 설정에서\n' +
      '<code>profile.list</code>의 해당 항목에 fontFamily 값만 추가하여 해결했다.</p>\n' +
      '<pre class="line-numbers language-j'... 11610 more characters,
    path: [Getter],
    permalink: [Getter],
    full_source: [Getter],
    asset_dir: [Getter],
    tags: [Getter],
    categories: [Getter],
    prev: [Circular *1],
    next: _Document {
      title: 'pass function as props in vue',
      seo: [Object],
      hero: '/upload/2021/props-function-vue.jpg',
      thumbnail: '/upload/2021/thumbs/props-function-vue.jpg',
      date: Moment<2021-01-24T11:16:03+09:00>,
      style: null,
      _content: '\n' +
        '## Event handling and Atomic Design System\n' +
        '\n' +
        'Atomic Design System을 컴포넌트 설계 방법론으로 가져가면서, 각 컴포넌트에 독립적으로\n' +
        '고립(?)된 데이터 구조를 만들게 되면서 (이게 맞는 방식인지는 잘 모르겠지만) 불편함이 점점\n' +
        '발생되었던 것 중 하나가 유저 인터랙션에 의해 발생되는 데이터 변경을 위해 쌓여진 컴포넌트\n' +
        '구조를 따라 계속 이벤트를 전달하고 이벤트 리스너를 통해 처리하는 방식이었다.\n' +
        '\n' +
        '예를 들자면\n' +
        '\n' +
        '![유저 인터랙션으로 하위 컴포넌트로부터 상위 컴포넌트로의 이벤트 발생 과정](/upload/2021/event-flow-from-atom-to-page.svg)\n' +
        '\n' +
        '이런 흐름 말이다.\n' +
        '\n' +
        'Vue 공식 문서도 그렇고, 지금까지 보아온 대다수의 강의에서도 유저 인터랙션에 대한 데이터를\n' +
        '처리할 때 해당 데이터가 상위 컴포넌트에 존재할 경우, `$emit`을 이용하여 payload와 함께\n' +
        '하위 컴포넌트로부터 상위 컴포넌트로 차례로 올리고, 상위 컴포넌트에서 `v-on`으로 처리하는\n' +
        '방식을 사용하도록 안내하는 듯 하다.\n' +
        '\n' +
        'Atomic Design Sytem을 적용하기 전에는 이러한 고민이 없었는데, 적용 이후로는 atom으로부터\n' +
        '실제 데이터가 바인딩 되는 page까지 5개 단계(?)를 거치게 되니 하위 컴포넌트에서 발생한\n' +
        '이벤트와 데이터를 다시 상위 컴포넌트로 by-pass 하기 위한 이벤트 처리가 뭐랄까... 조금\n' +
        '거슬린다고 할까?\n' +
        '심지어 Vue 개발자 도구로 데이터 흐름을 확인하려고 하면 한 번의 인터랙션에 여러 개의 emit이\n' +
        '로그로 출력되니 정신이 사납기까지 한 느낌이다 = _=a\n' +
        '\n' +
        '그래서 `props`로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
        '핸들러를 실행시키기만 하면 어떨까 하는 생각에 `prop`로 함수를 내려주는 방식을 생각해보게 됐다.\n' +
        '\n' +
        '## Is it an anti-pattern?\n' +
        '\n' +
        '일단 생각을 해 봤으니 이게 가한 것은 맞는지 확인 해 볼 필요가 있었다. (처음 생각해 본\n' +
        '방법이고 Vue 관련 문서나 강의에서도 한 번도 이런 케이스를 본 적이 없으니까..)\n' +
        '\n' +
        '구글링 결과 공교롭게도(?) 가장 먼저 눈에 띈 내용은 이 방식이 안티 패턴이라는 내용이었다.\n' +
        '(혹 관련 내용이 궁금하다면 [How to Pass a Function as a Prop in Vue]([https://michaelnthiessen.com/pass-function-as-prop/](https://michaelnthiessen.com/pass-function-as-prop/))를\n' +
        '읽어보시길... 아, 중간에 구독하라고 전체 팝업창이 뜨기는 하는데 개발자라면 뭐... 다 쉽게\n' +
        '걷어내... 쿨럭... )\n' +
        '\n' +
        '하지만 왜 인지 모르겠으나... 해당 글에서는 안티 패턴임을 설명하는데 하위 컴포넌트의 mounted\n' +
        '훅에서 props로 받은 함수를 실행하는 코드를 보여주고 있었다.\n' +
        '무튼 그러면서 잘못된 것은 아니지만, Vue의 컨셉에 맞게 이벤트를 활용하거나 슬롯을 사용하라는\n' +
        '결론을 내주는게 영...\n' +
        '\n' +
        '또 다른 아티클 들에서는 단순하게 props로 함수를 내리는게 가능하다 라는 짤막한 소개 정도가\n' +
        '있었다.\n' +
        '\n' +
        '하여 안티 패턴이라 소개하는 글을 잠시 무시하기로 하고(?) props로 함수를 내리는 방식을\n' +
        '사용해봤다.\n' +
        '아, 안티 패턴이라 소개하는 글을 무시하기로 한 것은 안티 패턴을 굳이 사용하겠다는 것이 아니라,\n' +
        '안티 패턴인 이유에 대한 명확한 근거를 찾을 수 없어서다. 차후에라도 이것이 안티 패턴이라는\n' +
        '명확한 근거를 찾게 된다면 당연히 과감히 버릴거다.\n' +
        '\n' +
        '## Try it\n' +
        '\n' +
        '```jsx\n' +
        '<template>\n' +
        '  <SignUpTemplate :handle-sign-up="signUp" />\n' +
        '</template>\n' +
        '<script>\n' +
        'export default {\n' +
        '  ...\n' +
        '  methods: {\n' +
        '    ...\n' +
        '    signUp({ email, password }) {\n' +
        '      users\n' +
        '        .postSignUp({ email, password })\n' +
        '        .then(...)\n' +
        '        .catch(...)\n' +
        '    }\n' +
        '  }\n' +
        '};\n' +
        '</script>\n' +
        '```\n' +
        '\n' +
        'Page에서 이렇게 `signUp` 함수를 props로 내려주고\n' +
        '\n' +
        '```jsx\n' +
        '<template>\n' +
        '  ...\n' +
        '  <SignUpForm :handle-submit="handleSignUp" />\n' +
        '  ...\n' +
        '</template>\n' +
        '\n' +
        '<script>\n' +
        'export default {\n' +
        '  ...\n' +
        '  props: {\n' +
        '    ...\n' +
        '    handleSignUp: {\n' +
        '      type: Function,\n' +
        '      required: true,\n' +
        '      default: () => {}\n' +
        '    }\n' +
        '  },\n' +
        '  ...\n' +
        '};\n' +
        '</script>\n' +
        '```\n' +
        '\n' +
        '템플릿에서 props로 받은 함수를 다시 하위 컴포넌트로 내려주고,\n' +
        '\n' +
        '```jsx\n' +
        '<template>\n' +
        '  <form-container>\n' +
        '    ...\n' +
        '    <DefaultButton\n' +
        '      @click.native.prevent="handleClickSubmit"\n' +
        '    />\n' +
        '    ...\n' +
        '  </form-container>\n' +
        '</template>\n' +
        '\n' +
        '<script>\n' +
        'import DefaultButton from "@atoms/Button/Default";\n' +
        'export default {\n' +
        '  components: {\n' +
        '  props: {\n' +
        '    handleSubmit: {\n' +
        '      type: Function,\n' +
        '      required: true,\n' +
        '      default: () => {}\n' +
        '    }\n' +
        '  },\n' +
        '  methods: {\n' +
        '    handleClickSubmit() {\n' +
        '      const { handleSubmit, email, password, passwordConfirm } = this;\n' +
        '      ...\n' +
        '      handleSubmit && handleSubmit({ email, password });\n' +
        '    }\n' +
        '  }\n' +
        '};\n' +
        '</script>\n' +
        '```\n' +
        '\n' +
        '유저 인터랙션이 발생하는 하위 컴포넌트에서 해당 함수를 전달받아 실행하게 했다.\n' +
        '적용 결과는 당연히(?) 원하는 동작을 올바르게 수행해주었다.\n' +
        '\n' +
        '이것보다는 modal  창을 포함하는 organism 컴포넌트에서 modal 창에 대한 제어와 modal 내부에\n' +
        'slot으로 끼워진 컴포넌트에 적용되는 부분이 이 방식을 더 잘 설명할 수 있을 것 같지만 너무\n' +
        '많은 코드가 삽입 되어야 해서 포스팅에는 간단한 위 코드로 적었다.\n' +
        '\n' +
        '사실 event emit 방식으로도 충분히 대체도 가능하고 그것이 난이도나 복잡도가 더 높지는 않은\n' +
        '것 같기는 하다. 하지만, 뭐랄까 이 방식이 좀 더 dry한 느낌이 든달까? (기분탓이려나?)\n' +
        '\n' +
        '무엇보다 개발자 도구에 여러 번에 걸친 이벤트 발생 로그를 보지 않아도 되니 한결 눈이 가벼워졌다.',
      source: '_posts/2021-01-25-pass-function-as-props-in-vue.md',
      raw: '---\n' +
        'title: pass function as props in vue\n' +
        'tags:\n' +
        '  - vue\n' +
        '  - props\n' +
        '  - pass function\n' +
        'categories:\n' +
        '  - 개발노트\n' +
        '  - Front-End\n' +
        'seo:\n' +
        '  image: /upload/2021/props-function-vue.jpg\n' +
        '  description: |\n' +
        '    props로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
        '    핸들러를 실행시키기만 하면 어떨까 하는 생각에 prop로 함수를 내려주는 방식을 생각해보게 됐다.\n' +
        'hero: /upload/2021/props-function-vue.jpg\n' +
        'thumbnail: /upload/2021/thumbs/props-function-vue.jpg\n' +
        'date: 2021-01-24 11:16:03\n' +
        'style:\n' +
        '---\n' +
        '\n' +
        '## Event handling and Atomic Design System\n' +
        '\n' +
        'Atomic Design System을 컴포넌트 설계 방법론으로 가져가면서, 각 컴포넌트에 독립적으로\n' +
        '고립(?)된 데이터 구조를 만들게 되면서 (이게 맞는 방식인지는 잘 모르겠지만) 불편함이 점점\n' +
        '발생되었던 것 중 하나가 유저 인터랙션에 의해 발생되는 데이터 변경을 위해 쌓여진 컴포넌트\n' +
        '구조를 따라 계속 이벤트를 전달하고 이벤트 리스너를 통해 처리하는 방식이었다.\n' +
        '\n' +
        '예를 들자면\n' +
        '\n' +
        '![유저 인터랙션으로 하위 컴포넌트로부터 상위 컴포넌트로의 이벤트 발생 과정](/upload/2021/event-flow-from-atom-to-page.svg)\n' +
        '\n' +
        '이런 흐름 말이다.\n' +
        '\n' +
        'Vue 공식 문서도 그렇고, 지금까지 보아온 대다수의 강의에서도 유저 인터랙션에 대한 데이터를\n' +
        '처리할 때 해당 데이터가 상위 컴포넌트에 존재할 경우, `$emit`을 이용하여 payload와 함께\n' +
        '하위 컴포넌트로부터 상위 컴포넌트로 차례로 올리고, 상위 컴포넌트에서 `v-on`으로 처리하는\n' +
        '방식을 사용하도록 안내하는 듯 하다.\n' +
        '\n' +
        'Atomic Design Sytem을 적용하기 전에는 이러한 고민이 없었는데, 적용 이후로는 atom으로부터\n' +
        '실제 데이터가 바인딩 되는 page까지 5개 단계(?)를 거치게 되니 하위 컴포넌트에서 발생한\n' +
        '이벤트와 데이터를 다시 상위 컴포넌트로 by-pass 하기 위한 이벤트 처리가 뭐랄까... 조금\n' +
        '거슬린다고 할까?\n' +
        '심지어 Vue 개발자 도구로 데이터 흐름을 확인하려고 하면 한 번의 인터랙션에 여러 개의 emit이\n' +
        '로그로 출력되니 정신이 사납기까지 한 느낌이다 = _=a\n' +
        '\n' +
        '그래서 `props`로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
        '핸들러를 실행시키기만 하면 어떨까 하는 생각에 `prop`로 함수를 내려주는 방식을 생각해보게 됐다.\n' +
        '\n' +
        '## Is it an anti-pattern?\n' +
        '\n' +
        '일단 생각을 해 봤으니 이게 가한 것은 맞는지 확인 해 볼 필요가 있었다. (처음 생각해 본\n' +
        '방법이고 Vue 관련 문서나 강의에서도 한 번도 이런 케이스를 본 적이 없으니까..)\n' +
        '\n' +
        '구글링 결과 공교롭게도(?) 가장 먼저 눈에 띈 내용은 이 방식이 안티 패턴이라는 내용이었다.\n' +
        '(혹 관련 내용이 궁금하다면 [How to Pass a Function as a Prop in Vue]([https://michaelnthiessen.com/pass-function-as-prop/](https://michaelnthiessen.com/pass-function-as-prop/))를\n' +
        '읽어보시길... 아, 중간에 구독하라고 전체 팝업창이 뜨기는 하는데 개발자라면 뭐... 다 쉽게\n' +
        '걷어내... 쿨럭... )\n' +
        '\n' +
        '하지만 왜 인지 모르겠으나... 해당 글에서는 안티 패턴임을 설명하는데 하위 컴포넌트의 mounted\n' +
        '훅에서 props로 받은 함수를 실행하는 코드를 보여주고 있었다.\n' +
        '무튼 그러면서 잘못된 것은 아니지만, Vue의 컨셉에 맞게 이벤트를 활용하거나 슬롯을 사용하라는\n' +
        '결론을 내주는게 영...\n' +
        '\n' +
        '또 다른 아티클 들에서는 단순하게 props로 함수를 내리는게 가능하다 라는 짤막한 소개 정도가\n' +
        '있었다.\n' +
        '\n' +
        '하여 안티 패턴이라 소개하는 글을 잠시 무시하기로 하고(?) props로 함수를 내리는 방식을\n' +
        '사용해봤다.\n' +
        '아, 안티 패턴이라 소개하는 글을 무시하기로 한 것은 안티 패턴을 굳이 사용하겠다는 것이 아니라,\n' +
        '안티 패턴인 이유에 대한 명확한 근거를 찾을 수 없어서다. 차후에라도 이것이 안티 패턴이라는\n' +
        '명확한 근거를 찾게 된다면 당연히 과감히 버릴거다.\n' +
        '\n' +
        '## Try it\n' +
        '\n' +
        '```jsx\n' +
        '<template>\n' +
        '  <SignUpTemplate :handle-sign-up="signUp" />\n' +
        '</template>\n' +
        '<script>\n' +
        'export default {\n' +
        '  ...\n' +
        '  methods: {\n' +
        '    ...\n' +
        '    signUp({ email, password }) {\n' +
        '      users\n' +
        '        .postSignUp({ email, password })\n' +
        '        .then(...)\n' +
        '        .catch(...)\n' +
        '    }\n' +
        '  }\n' +
        '};\n' +
        '</script>\n' +
        '```\n' +
        '\n' +
        'Page에서 이렇게 `signUp` 함수를 props로 내려주고\n' +
        '\n' +
        '```jsx\n' +
        '<template>\n' +
        '  ...\n' +
        '  <SignUpForm :handle-submit="handleSignUp" />\n' +
        '  ...\n' +
        '</template>\n' +
        '\n' +
        '<script>\n' +
        'export default {\n' +
        '  ...\n' +
        '  props: {\n' +
        '    ...\n' +
        '    handleSignUp: {\n' +
        '      type: Function,\n' +
        '      required: true,\n' +
        '      default: () => {}\n' +
        '    }\n' +
        '  },\n' +
        '  ...\n' +
        '};\n' +
        '</script>\n' +
        '```\n' +
        '\n' +
        '템플릿에서 props로 받은 함수를 다시 하위 컴포넌트로 내려주고,\n' +
        '\n' +
        '```jsx\n' +
        '<template>\n' +
        '  <form-container>\n' +
        '    ...\n' +
        '    <DefaultButton\n' +
        '      @click.native.prevent="handleClickSubmit"\n' +
        '    />\n' +
        '    ...\n' +
        '  </form-container>\n' +
        '</template>\n' +
        '\n' +
        '<script>\n' +
        'import DefaultButton from "@atoms/Button/Default";\n' +
        'export default {\n' +
        '  components: {\n' +
        '  props: {\n' +
        '    handleSubmit: {\n' +
        '      type: Function,\n' +
        '      required: true,\n' +
        '      default: () => {}\n' +
        '    }\n' +
        '  },\n' +
        '  methods: {\n' +
        '    handleClickSubmit() {\n' +
        '      const { handleSubmit, email, password, passwordConfirm } = this;\n' +
        '      ...\n' +
        '      handleSubmit && handleSubmit({ email, password });\n' +
        '    }\n' +
        '  }\n' +
        '};\n' +
        '</script>\n' +
        '```\n' +
        '\n' +
        '유저 인터랙션이 발생하는 하위 컴포넌트에서 해당 함수를 전달받아 실행하게 했다.\n' +
        '적용 결과는 당연히(?) 원하는 동작을 올바르게 수행해주었다.\n' +
        '\n' +
        '이것보다는 modal  창을 포함하는 organism 컴포넌트에서 modal 창에 대한 제어와 modal 내부에\n' +
        'slot으로 끼워진 컴포넌트에 적용되는 부분이 이 방식을 더 잘 설명할 수 있을 것 같지만 너무\n' +
        '많은 코드가 삽입 되어야 해서 포스팅에는 간단한 위 코드로 적었다.\n' +
        '\n' +
        '사실 event emit 방식으로도 충분히 대체도 가능하고 그것이 난이도나 복잡도가 더 높지는 않은\n' +
        '것 같기는 하다. 하지만, 뭐랄까 이 방식이 좀 더 dry한 느낌이 든달까? (기분탓이려나?)\n' +
        '\n' +
        '무엇보다 개발자 도구에 여러 번에 걸친 이벤트 발생 로그를 보지 않아도 되니 한결 눈이 가벼워졌다.',
      slug: 'pass-function-as-props-in-vue',
      published: true,
      comments: true,
      layout: 'post',
      photos: [],
      link: '',
      _id: 'clcytfa4r00a7taww0ld1deig',
      content: '<h2 id="Event-handling-and-Atomic-Design-System"><a href="#Event-handling-and-Atomic-Design-System" class="headerlink" title="Event handling and Atomic Design System"></a>Event handling and Atomic Design System</h2><p>Atomic Design System을 컴포넌트 설계 방법론으로 가져가면서, 각 컴포넌트에 독립적으로\n' +
        '고립(?)된 데이터 구조를 만들게 되면서 (이게 맞는 방식인지는 잘 모르겠지만) 불편함이 점점\n' +
        '발생되었던 것 중 하나가 유저 인터랙션에 의해 발생되는 데이터 변경을 위해 쌓여진 컴포넌트\n' +
        '구조를 따라 계속 이벤트를 전달하고 이벤트 리스너를 통해 처리하는 방식이었다.</p>\n' +
        '<p>예를 들자면</p>\n' +
        '<p><img src="/upload/2021/event-flow-from-atom-to-page.svg" alt="유저 인터랙션으로 하위 컴포넌트로부터 상위 컴포넌트로의 이벤트 발생 과정"></p>\n' +
        '<p>이런 흐름 말이다.</p>\n' +
        '<p>Vue 공식 문서도 그렇고, 지금까지 보아온 대다수의 강의에서도 유저 인터랙션에 대한 데이터를\n' +
        '처리할 때 해당 데이터가 상위 컴포넌트에 존재할 경우, <code>$emit</code>을 이용하여 payload와 함께\n' +
        '하위 컴포넌트로부터 상위 컴포넌트로 차례로 올리고, 상위 컴포넌트에서 <code>v-on</code>으로 처리하는\n' +
        '방식을 사용하도록 안내하는 듯 하다.</p>\n' +
        '<p>Atomic Design Sytem을 적용하기 전에는 이러한 고민이 없었는데, 적용 이후로는 atom으로부터\n' +
        '실제 데이터가 바인딩 되는 page까지 5개 단계(?)를 거치게 되니 하위 컴포넌트에서 발생한\n' +
        '이벤트와 데이터를 다시 상위 컴포넌트로 by-pass 하기 위한 이벤트 처리가 뭐랄까... 조금\n' +
        '거슬린다고 할까?\n' +
        '심지어 Vue 개발자 도구로 데이터 흐름을 확인하려고 하면 한 번의 인터랙션에 여러 개의 emit이\n' +
        '로그로 출력되니 정신이 사납기까지 한 느낌이다 &#x3D; _&#x3D;a</p>\n' +
        '<p>그래서 <code>props</code>로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
        '핸들러를 실행시키기만 하면 어떨까 하는 생각에 <code>prop</code>로 함수를 내려주는 방식을 생각해보게 됐다.</p>\n' +
        '<h2 id="Is-it-an-anti-pattern"><a href="#Is-it-an-anti-pattern" class="headerlink" title="Is it an anti-pattern?"></a>Is it an anti-pattern?</h2><p>일단 생각을 해 봤으니 이게 가한 것은 맞는지 확인 해 볼 필요가 있었다. (처음 생각해 본\n' +
        '방법이고 Vue 관련 문서나 강의에서도 한 번도 이런 케이스를 본 적이 없으니까..)</p>\n' +
        '<p>구글링 결과 공교롭게도(?) 가장 먼저 눈에 띈 내용은 이 방식이 안티 패턴이라는 내용이었다.\n' +
        '(혹 관련 내용이 궁금하다면 <a href="%5Bhttps://michaelnthiessen.com/pass-function-as-prop/%5D(https://michaelnthiessen.com/pass-function-as-prop/)">How to Pass a Function as a Prop in Vue</a>를\n' +
        '읽어보시길... 아, 중간에 구독하라고 전체 팝업창이 뜨기는 하는데 개발자라면 뭐... 다 쉽게\n' +
        '걷어내... 쿨럭... )</p>\n' +
        '<p>하지만 왜 인지 모르겠으나... 해당 글에서는 안티 패턴임을 설명하는데 하위 컴포넌트의 mounted\n' +
        '훅에서 props로 받은 함수를 실행하는 코드를 보여주고 있었다.\n' +
        '무튼 그러면서 잘못된 것은 아니지만, Vue의 컨셉에 맞게 이벤트를 활용하거나 슬롯을 사용하라는\n' +
        '결론을 내주는게 영...</p>\n' +
        '<p>또 다른 아티클 들에서는 단순하게 props로 함수를 내리는게 가능하다 라는 짤막한 소개 정도가\n' +
        '있었다.</p>\n' +
        '<p>하여 안티 패턴이라 소개하는 글을 잠시 무시하기로 하고(?) props로 함수를 내리는 방식을\n' +
        '사용해봤다.\n' +
        '아, 안티 패턴이라 소개하는 글을 무시하기로 한 것은 안티 패턴을 굳이 사용하겠다는 것이 아니라,\n' +
        '안티 패턴인 이유에 대한 명확한 근거를 찾을 수 없어서다. 차후에라도 이것이 안티 패턴이라는\n' +
        '명확한 근거를 찾게 된다면 당연히 과감히 버릴거다.</p>\n' +
        '<h2 id="Try-it"><a href="#Try-it" class="headerlink" title="Try it"></a>Try it</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
        '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SignUpTemplate</span></span> <span class="token attr-name">:handle-sign-up</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>signUp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n' +
        '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
        '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
        'export default &#123;\n' +
        '  ...\n' +
        '  methods: &#123;\n' +
        '    ...\n' +
        '    signUp(&#123; email, password &#125;) &#123;\n' +
        '      users\n' +
        '        .postSignUp(&#123; email, password &#125;)\n' +
        '        .then(...)\n' +
        '        .catch(...)\n' +
        '    &#125;\n' +
        '  &#125;\n' +
        '&#125;;\n' +
        '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
        '\n' +
        '<p>Page에서 이렇게 <code>signUp</code> 함수를 props로 내려주고</p>\n' +
        '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
        '  ...\n' +
        '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SignUpForm</span></span> <span class="token attr-name">:handle-submit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleSignUp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n' +
        '  ...\n' +
        '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
        '\n' +
        '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
        'export default &#123;\n' +
        '  ...\n' +
        '  props: &#123;\n' +
        '    ...\n' +
        '    handleSignUp: &#123;\n' +
        '      type: Function,\n' +
        '      required: true,\n' +
        '      default: () => &#123;&#125;\n' +
        '    &#125;\n' +
        '  &#125;,\n' +
        '  ...\n' +
        '&#125;;\n' +
        '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
        '\n' +
        '<p>템플릿에서 props로 받은 함수를 다시 하위 컴포넌트로 내려주고,</p>\n' +
        '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
        '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form-container</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
        '    ...\n' +
        '    &lt;DefaultButton\n' +
        '      @click.native.prevent="handleClickSubmit"\n' +
        '    />\n' +
        '    ...\n' +
        '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form-container</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
        '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
        '\n' +
        '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
        'import DefaultButton from "@atoms/Button/Default";\n' +
        'export default &#123;\n' +
        '  components: &#123;\n' +
        '  props: &#123;\n' +
        '    handleSubmit: &#123;\n' +
        '      type: Function,\n' +
        '      required: true,\n' +
        '      default: () => &#123;&#125;\n' +
        '    &#125;\n' +
        '  &#125;,\n' +
        '  methods: &#123;\n' +
        '    handleClickSubmit() &#123;\n' +
        '      const &#123; handleSubmit, email, password, passwordConfirm &#125; = this;\n' +
        '      ...\n' +
        '      handleSubmit &amp;&amp; handleSubmit(&#123; email, password &#125;);\n' +
        '    &#125;\n' +
        '  &#125;\n' +
        '&#125;;\n' +
        '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
        '\n' +
        '<p>유저 인터랙션이 발생하는 하위 컴포넌트에서 해당 함수를 전달받아 실행하게 했다.\n' +
        '적용 결과는 당연히(?) 원하는 동작을 올바르게 수행해주었다.</p>\n' +
        '<p>이것보다는 modal  창을 포함하는 organism 컴포넌트에서 modal 창에 대한 제어와 modal 내부에\n' +
        'slot으로 끼워진 컴포넌트에 적용되는 부분이 이 방식을 더 잘 설명할 수 있을 것 같지만 너무\n' +
        '많은 코드가 삽입 되어야 해서 포스팅에는 간단한 위 코드로 적었다.</p>\n' +
        '<p>사실 event emit 방식으로도 충분히 대체도 가능하고 그것이 난이도나 복잡도가 더 높지는 않은\n' +
        '것 같기는 하다. 하지만, 뭐랄까 이 방식이 좀 더 dry한 느낌이 든달까? (기분탓이려나?)</p>\n' +
        '<p>무엇보다 개발자 도구에 여러 번에 걸친 이벤트 발생 로그를 보지 않아도 되니 한결 눈이 가벼워졌다.</p>\n',
      site: [Object],
      excerpt: '',
      more: '<h2 id="Event-handling-and-Atomic-Design-System"><a href="#Event-handling-and-Atomic-Design-System" class="headerlink" title="Event handling and Atomic Design System"></a>Event handling and Atomic Design System</h2><p>Atomic Design System을 컴포넌트 설계 방법론으로 가져가면서, 각 컴포넌트에 독립적으로\n' +
        '고립(?)된 데이터 구조를 만들게 되면서 (이게 맞는 방식인지는 잘 모르겠지만) 불편함이 점점\n' +
        '발생되었던 것 중 하나가 유저 인터랙션에 의해 발생되는 데이터 변경을 위해 쌓여진 컴포넌트\n' +
        '구조를 따라 계속 이벤트를 전달하고 이벤트 리스너를 통해 처리하는 방식이었다.</p>\n' +
        '<p>예를 들자면</p>\n' +
        '<p><img src="/upload/2021/event-flow-from-atom-to-page.svg" alt="유저 인터랙션으로 하위 컴포넌트로부터 상위 컴포넌트로의 이벤트 발생 과정"></p>\n' +
        '<p>이런 흐름 말이다.</p>\n' +
        '<p>Vue 공식 문서도 그렇고, 지금까지 보아온 대다수의 강의에서도 유저 인터랙션에 대한 데이터를\n' +
        '처리할 때 해당 데이터가 상위 컴포넌트에 존재할 경우, <code>$emit</code>을 이용하여 payload와 함께\n' +
        '하위 컴포넌트로부터 상위 컴포넌트로 차례로 올리고, 상위 컴포넌트에서 <code>v-on</code>으로 처리하는\n' +
        '방식을 사용하도록 안내하는 듯 하다.</p>\n' +
        '<p>Atomic Design Sytem을 적용하기 전에는 이러한 고민이 없었는데, 적용 이후로는 atom으로부터\n' +
        '실제 데이터가 바인딩 되는 page까지 5개 단계(?)를 거치게 되니 하위 컴포넌트에서 발생한\n' +
        '이벤트와 데이터를 다시 상위 컴포넌트로 by-pass 하기 위한 이벤트 처리가 뭐랄까... 조금\n' +
        '거슬린다고 할까?\n' +
        '심지어 Vue 개발자 도구로 데이터 흐름을 확인하려고 하면 한 번의 인터랙션에 여러 개의 emit이\n' +
        '로그로 출력되니 정신이 사납기까지 한 느낌이다 &#x3D; _&#x3D;a</p>\n' +
        '<p>그래서 <code>props</code>로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
        '핸들러를 실행시키기만 하면 어떨까 하는 생각에 <code>prop</code>로 함수를 내려주는 방식을 생각해보게 됐다.</p>\n' +
        '<h2 id="Is-it-an-anti-pattern"><a href="#Is-it-an-anti-pattern" class="headerlink" title="Is it an anti-pattern?"></a>Is it an anti-pattern?</h2><p>일단 생각을 해 봤으니 이게 가한 것은 맞는지 확인 해 볼 필요가 있었다. (처음 생각해 본\n' +
        '방법이고 Vue 관련 문서나 강의에서도 한 번도 이런 케이스를 본 적이 없으니까..)</p>\n' +
        '<p>구글링 결과 공교롭게도(?) 가장 먼저 눈에 띈 내용은 이 방식이 안티 패턴이라는 내용이었다.\n' +
        '(혹 관련 내용이 궁금하다면 <a href="%5Bhttps://michaelnthiessen.com/pass-function-as-prop/%5D(https://michaelnthiessen.com/pass-function-as-prop/)">How to Pass a Function as a Prop in Vue</a>를\n' +
        '읽어보시길... 아, 중간에 구독하라고 전체 팝업창이 뜨기는 하는데 개발자라면 뭐... 다 쉽게\n' +
        '걷어내... 쿨럭... )</p>\n' +
        '<p>하지만 왜 인지 모르겠으나... 해당 글에서는 안티 패턴임을 설명하는데 하위 컴포넌트의 mounted\n' +
        '훅에서 props로 받은 함수를 실행하는 코드를 보여주고 있었다.\n' +
        '무튼 그러면서 잘못된 것은 아니지만, Vue의 컨셉에 맞게 이벤트를 활용하거나 슬롯을 사용하라는\n' +
        '결론을 내주는게 영...</p>\n' +
        '<p>또 다른 아티클 들에서는 단순하게 props로 함수를 내리는게 가능하다 라는 짤막한 소개 정도가\n' +
        '있었다.</p>\n' +
        '<p>하여 안티 패턴이라 소개하는 글을 잠시 무시하기로 하고(?) props로 함수를 내리는 방식을\n' +
        '사용해봤다.\n' +
        '아, 안티 패턴이라 소개하는 글을 무시하기로 한 것은 안티 패턴을 굳이 사용하겠다는 것이 아니라,\n' +
        '안티 패턴인 이유에 대한 명확한 근거를 찾을 수 없어서다. 차후에라도 이것이 안티 패턴이라는\n' +
        '명확한 근거를 찾게 된다면 당연히 과감히 버릴거다.</p>\n' +
        '<h2 id="Try-it"><a href="#Try-it" class="headerlink" title="Try it"></a>Try it</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
        '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SignUpTemplate</span></span> <span class="token attr-name">:handle-sign-up</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>signUp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n' +
        '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
        '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
        'export default &#123;\n' +
        '  ...\n' +
        '  methods: &#123;\n' +
        '    ...\n' +
        '    signUp(&#123; email, password &#125;) &#123;\n' +
        '      users\n' +
        '        .postSignUp(&#123; email, password &#125;)\n' +
        '        .then(...)\n' +
        '        .catch(...)\n' +
        '    &#125;\n' +
        '  &#125;\n' +
        '&#125;;\n' +
        '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
        '\n' +
        '<p>Page에서 이렇게 <code>signUp</code> 함수를 props로 내려주고</p>\n' +
        '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
        '  ...\n' +
        '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SignUpForm</span></span> <span class="token attr-name">:handle-submit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleSignUp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n' +
        '  ...\n' +
        '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
        '\n' +
        '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
        'export default &#123;\n' +
        '  ...\n' +
        '  props: &#123;\n' +
        '    ...\n' +
        '    handleSignUp: &#123;\n' +
        '      type: Function,\n' +
        '      required: true,\n' +
        '      default: () => &#123;&#125;\n' +
        '    &#125;\n' +
        '  &#125;,\n' +
        '  ...\n' +
        '&#125;;\n' +
        '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
        '\n' +
        '<p>템플릿에서 props로 받은 함수를 다시 하위 컴포넌트로 내려주고,</p>\n' +
        '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
        '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form-container</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
        '    ...\n' +
        '    &lt;DefaultButton\n' +
        '      @click.native.prevent="handleClickSubmit"\n' +
        '    />\n' +
        '    ...\n' +
        '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form-container</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
        '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
        '\n' +
        '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
        'import DefaultButton from "@atoms/Button/Default";\n' +
        'export default &#123;\n' +
        '  components: &#123;\n' +
        '  props: &#123;\n' +
        '    handleSubmit: &#123;\n' +
        '      type: Function,\n' +
        '      required: true,\n' +
        '      default: () => &#123;&#125;\n' +
        '    &#125;\n' +
        '  &#125;,\n' +
        '  methods: &#123;\n' +
        '    handleClickSubmit() &#123;\n' +
        '      const &#123; handleSubmit, email, password, passwordConfirm &#125; = this;\n' +
        '      ...\n' +
        '      handleSubmit &amp;&amp; handleSubmit(&#123; email, password &#125;);\n' +
        '    &#125;\n' +
        '  &#125;\n' +
        '&#125;;\n' +
        '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
        '\n' +
        '<p>유저 인터랙션이 발생하는 하위 컴포넌트에서 해당 함수를 전달받아 실행하게 했다.\n' +
        '적용 결과는 당연히(?) 원하는 동작을 올바르게 수행해주었다.</p>\n' +
        '<p>이것보다는 modal  창을 포함하는 organism 컴포넌트에서 modal 창에 대한 제어와 modal 내부에\n' +
        'slot으로 끼워진 컴포넌트에 적용되는 부분이 이 방식을 더 잘 설명할 수 있을 것 같지만 너무\n' +
        '많은 코드가 삽입 되어야 해서 포스팅에는 간단한 위 코드로 적었다.</p>\n' +
        '<p>사실 event emit 방식으로도 충분히 대체도 가능하고 그것이 난이도나 복잡도가 더 높지는 않은\n' +
        '것 같기는 하다. 하지만, 뭐랄까 이 방식이 좀 더 dry한 느낌이 든달까? (기분탓이려나?)</p>\n' +
        '<p>무엇보다 개발자 도구에 여러 번에 걸친 이벤트 발생 로그를 보지 않아도 되니 한결 눈이 가벼워졌다.</p>\n',
      path: [Getter],
      permalink: [Getter],
      full_source: [Getter],
      asset_dir: [Getter],
      tags: [Getter],
      categories: [Getter],
      prev: [Circular *2],
      next: [_Document],
      __post: true
    },
    __post: true
  },
  __post: true
}
<ref *2> _Document {
  title: '개발환경 WSL2 + zsh로 갈아타기',
  thumbnail: '/upload/2021/thumbs/wsl2-zsh-on-windws-10.jpg',
  hero: '/upload/2021/wsl2-zsh-on-windws-10.jpg',
  style: '.hero {\n' +
    '  &-wrapper {\n' +
    '    text-shadow:\n' +
    '      1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
    '      -1px -1px 2em rgba(20, 12, 24, 1);\n' +
    '  }\n' +
    '  &__image {\n' +
    '    opacity: 0.35\n' +
    '  }\n' +
    '}\n',
  seo: {
    description: '본격적으로 WSL + zsh 환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가\n' +
      '설정을 차후에 필요할까 기록으로 남겨둔다.\n',
    image: '/upload/2021/wsl2-zsh-on-windws-10.jpg'
  },
  date: Moment<2021-01-28T00:32:57+09:00>,
  _content: '\n' +
    '\n' +
    '## 기존 환경\n' +
    '\n' +
    '얼마 전까지만 해도 VS Code의 터미널을 git bash로 (이하 bash) 설정해서 5년 가까이 bash\n' +
    '상에서 CLI를 사용해왔다. (아! 참고로 나는 Windows 10 사용자다. 맥이었으면 진즉부터\n' +
    'terminal을 썼겠지...)\n' +
    '\n' +
    '이 블로그 테마를 제작 후에 몇 번 mac이나 linux 환경에서 테마 설치 오류에 대한 이슈가\n' +
    '올라왔었고, 최근에 어떤 사이트를 번역하는데 해당 사이트 빌드가 bash 상에서는 정상적으로\n' +
    '이루어지지 않아 확인해보니 linux 상에서는 올바르게 빌드 되어 linux 환경에 대한 필요가\n' +
    '생겨났다.\n' +
    '\n' +
    '결국 미루고 미루던 WSL 사용을 시도하기로 하고 반 년 정도를 이 방식으로 써 본 것 같다.\n' +
    '(미루고 미룬 이유는 Windows를 못믿어서... = _=a 항상 예기치 않은 오류를 만들어주는\n' +
    ' Windows ... )\n' +
    '\n' +
    '무튼, 반 년 정도의 사용 경험에서는 크게 문제를 느끼지 못해서 이제 본격적으로 WSL + zsh\n' +
    '환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가 설정을 차후에 필요할까 기록으로\n' +
    '남겨둔다. (안녕 bash~ 오래 동안 고마웠어 ㅠ)\n' +
    '\n' +
    '## WSL 1 or WSL 2 ?\n' +
    '\n' +
    'WSL을 쓰기로 한 시점에 결정해야 할 것 중 하나는 일단 WSL 1을 쓸 것인가 혹은 WSL 2를 쓸\n' +
    '것인가 같다. 물론, WSL 2 구성까지 해 두면 언제든지 원하는 시점에 WSL 1과 2를 오갈 수 있고\n' +
    '따라서 WSL 2 구성 방법으로 포스팅 해두기는 했다.\n' +
    '\n' +
    '내 경우엔 2가지를 다 써봤는데, 써보고 난 이후에 드는 생각은 일단 내 경우에는 WSL 1을 쓰는\n' +
    '게 아직은 낫지 않을까 싶다. MS에서는 WSL 2가 더 빠르고 전체 리눅스 커널 사용, 시스템 호출\n' +
    '호환성 등을 장점으로 들고 있지만 생각보다 만나게 되는 장애물이 많았다.\n' +
    '\n' +
    '일단 몇 가지 선택에 필요한 기준에 따라 나누어 보면,\n' +
    '기존의 Windows 시스템에서 이미 프로젝트가 구성되어 있고 (Node든 뭐 다른 것이든) 여기에\n' +
    'WSL을 통합하는 거라면 WSL 1을 추천한다.\n' +
    '반면 개발 환경을 새로 설정 하는 상황이나 새로 설정하는 것을 감안 할 생각이고, 리눅스 시스템에\n' +
    '거부감이 없다면 WSL 2가 나을 것 같다.\n' +
    '\n' +
    '이렇게 나눈 이유는, WSL 2에서는\n' +
    '\n' +
    '- Windows 파일 시스템(`/mnt/`)으로의 접근이 체감 될 만큼 느리다.\n' +
    '- Windows 파일 시스템에 이미 구성된 프로젝트의 경우, 파일 변경을 감지 하지 못하는 듯 하다.\n' +
    '  (Node의 watch 기능이 정상적으로 동작해주지 못한다. 파일 시스템이 다르니 당연한 것 같기는\n' +
    '  한데 처음에 무척 당황했다.)\n' +
    '- Windows에서 VS Code를 열고 터미널을 WSL로 사용할 때, Windows에서 연 브라우저가\n' +
    '  localhost에 접근이 잘 되지 않는다.\n' +
    '\n' +
    '  Windows 전원 옵션에 "빨리 켜기 기능"을 꺼두면 localhost 포워딩이 된다고 하는데, 실제로\n' +
    '  해봤을 때 localhost가 두 개의 다른 포트로 열렸을 때 하나만 되더라...\n' +
    '\n' +
    '내 경우는 이미 Windows 시스템을 기반으로 프로젝트들이 구성되어 있었고 WSL을 통합 해보는 거라\n' +
    '위의 문제들을 겪고 말았다 ㅋ\n' +
    '\n' +
    '물론 내 케이스가 아니라면 WSL 2가 더 나을 것 같기는 하다.\n' +
    '\n' +
    '## Windows Terminal 설치\n' +
    '\n' +
    'Windows에는 기본적으로 terminal이 존재하지 않기 때문에, windows terminal을\n' +
    '[Store](https://www.microsoft.com/ko-kr/p/windows-terminal/9n0dx20hk701)에서\n' +
    '별도로 설치해야 한다.\n' +
    '\n' +
    '![Windows Terminal on Store](/upload/2021/windows-store-terminal.jpg)\n' +
    '\n' +
    '## WSL 활성화\n' +
    '\n' +
    '자세한 내용은 [공식문서](https://docs.microsoft.com/ko-kr/windows/wsl/install-win10)를\n' +
    '참고하자.\n' +
    '\n' +
    "터미널(혹은 파워쉘)을 관리자 권한으로 실행 후, 다음을 차례대로 실행 하면된다. (물론 '제어판\n" +
    "&gt; 프로그램 &gt; 프로그램 및 기능 &gt; Windows 기능 켜기/끄기' 에서 GUI로 해도 된다.)\n" +
    '\n' +
    '```jsx\n' +
    'dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n' +
    'dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n' +
    '```\n' +
    '\n' +
    '실행이 종료 되었으면 "재시작"하자.\n' +
    '\n' +
    '일시적인 상황이었는지는 모르겠지만, 최초 이 설정을 할 때 재시작하지 않고 컴퓨터를 종료했다가\n' +
    '다음 날 켜서 설정을 계속 이어가려고 했더니 안되더라 = _=a\n' +
    '\n' +
    '### WSL 2 업데이트\n' +
    '\n' +
    'WSL 2를 사용하려면 적어도 Windows 10 May 2020 Update가 설치되어 있어야 한다. Windows\n' +
    '10 May 2020 Update에 실제 리눅스 커널을 사용하는 WSL 2가 기본 탑재 되었다고 한다.\n' +
    '그런데 좀 이상한게, Windows 10 최신 업데이트를 쓰고 있음에도 불구하고 WSL 2를 사용하려면\n' +
    '별도 패키지를 다운 받아서 설치하고, 추가 설정을 해야 한다. (아니 WSL 2를 기본으로 탑재했으면\n' +
    'WSL 2를 기본으로 사용할 수 있어야지 왜 WSL 1을 기본으로 잡아주고 있고... WSL 2를 쓰기 위해\n' +
    '추가 설치를 왜 해야 하는가...? )\n' +
    '\n' +
    '[MS WSL 설명서 페이지](https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package)로\n' +
    '가서 Linux 커널 업데이트 패키지 다운로드 후 설치한다.\n' +
    '\n' +
    '![Linux 커널 업데이트 설치 화면](/upload/2021/wsl-update.jpg)\n' +
    '\n' +
    '### WSL 기본 버전을 2로 설정\n' +
    '\n' +
    '터미널(혹은 파워쉘)에서 다음 명령을 시행한다.\n' +
    '\n' +
    '이걸 먼저 실행해야 이후로 설치되는 리눅스 시스템이 WSL 2를 기반으로 한다.\n' +
    '\n' +
    '```powershell\n' +
    'wsl --set-default-version 2\n' +
    '```\n' +
    '\n' +
    '## Ubuntu  설치\n' +
    '\n' +
    '다시 [Store](https://www.microsoft.com/ko-kr/store/apps/windows)에서 Ubuntu를\n' +
    '검색해서 설치 한다. (물론 우분투 말고 다른 리눅스 프로덕트를 선택해도 된다. 단지 내가\n' +
    'Ubuntu가 익숙해서 그렇다~~고 하지만 어차피 터미널인데?~~)\n' +
    '\n' +
    '![Windows Store Ubuntu 검색 결과](/upload/2021/windows-store-ubuntu.jpg)\n' +
    '\n' +
    '하지만 이 놈은 어디까지나 "배포" 패키지이므로 설치 후 최초 실행해야 우분투 설치가 진행된다.\n' +
    '시간이 조금 걸리니 기다리자.\n' +
    '\n' +
    '설치가 완료되면 다음과 같이 설치가 완료되었다는 메세지와 함께 웰컴 투 우분투가 노출된다\n' +
    '\n' +
    '![우분투 설치 완료 화면](/upload/2021/complete-install-ubuntu.jpg)\n' +
    '\n' +
    '### 터미널 기본 프로필 Ubuntu로 설정\n' +
    '\n' +
    '터미널에서도 Ubuntu가 기본으로 실행되도록 터미널 기본 프로필을 WSL로 설정한다.\n' +
    '\n' +
    '터미널에서 설정으로 들어가면 관련 json 파일이 열리는데, 여기서 `defaultProfile` 값을\n' +
    '`profiles.list` 에서 Ubuntu 것의 `guid` 값으로 수정하기만 하면 된다.\n' +
    '\n' +
    '```json|data-line="2,11"\n' +
    '{\n' +
    '  "defaultProfile": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
    '  ...\n' +
    '  "profiles":\n' +
    '    {\n' +
    '      ...\n' +
    '      "list":\n' +
    '      [\n' +
    '        ...\n' +
    '        {\n' +
    '          "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
    '          "hidden": false,\n' +
    '          "name": "Ubuntu",\n' +
    '          "source": "Windows.Terminal.Wsl",\n' +
    '          "colorScheme": "Dark+",\n' +
    '          "fontFace": "Hack"\n' +
    '        }\n' +
    '      ]\n' +
    '    },\n' +
    '}\n' +
    '```\n' +
    '\n' +
    '## Git, zsh 설치\n' +
    '\n' +
    'Ubuntu(WSL)를 실행하고, git과 zsh부터 설치한다.\n' +
    '\n' +
    '일단 패키지 레파지토리 인덱스부터 업데이트 하고\n' +
    '\n' +
    '```bash\n' +
    'sudo apt update\n' +
    '```\n' +
    '\n' +
    'git과 zsh을 설치\n' +
    '\n' +
    '```bash\n' +
    'sudo apt install git zsh\n' +
    '```\n' +
    '\n' +
    '## Oh my zsh 설치 및 구성\n' +
    '\n' +
    '### 설치\n' +
    '\n' +
    '터미널에서 다음 명령을 실행하기만 하면 된다.\n' +
    '\n' +
    '```bash\n' +
    'sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"\n' +
    '```\n' +
    '\n' +
    '설치가 완료되면 다음과 같은 메세지를 볼 수 있다.\n' +
    '\n' +
    '![oh my zsh 설치 완료 화면](/upload/2021/complete-install-oh-my-zsh.jpg)\n' +
    '\n' +
    '### 테마 구성\n' +
    '\n' +
    '역시 처음 설치했드면 꾸미기가 먼저다!!! 테마부터 변경한다.\n' +
    '\n' +
    '테마는 [ohmyzsh github wiki](https://github.com/ohmyzsh/ohmyzsh/wiki/Themes)에서\n' +
    '마음에 드는 걸 선택하면 될 것 같다. 내 경우엔 많이 언급되는 `agnoster`를 쓰기로...\n' +
    '\n' +
    '`~/.zshrc` 파일을 열어 `ZSH_THEME` 항목의 값을 변경하기만 하면 된다.\n' +
    '\n' +
    '```bash\n' +
    'vi ~/.zshrc\n' +
    '```\n' +
    '\n' +
    '```ini\n' +
    'ZSH_THEME="agnoster"\n' +
    '```\n' +
    '\n' +
    '참고로 `agnoster` 테마를 쓰려면 [powerline font](https://github.com/powerline/fonts)를\n' +
    '써야 하는데, 내 경우엔 이미 Hack 폰트를 쓰고 있어서 별도로 설치하지 않고 터미널 설정에서\n' +
    '`profile.list`의 해당 항목에 fontFamily 값만 추가하여 해결했다.\n' +
    '\n' +
    '```json|data-line="6"\n' +
    '{\n' +
    '  "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
    '  "hidden": false,\n' +
    '  "name": "Ubuntu",\n' +
    '  "source": "Windows.Terminal.Wsl",\n' +
    '  "fontFace": "Hack"\n' +
    '}\n' +
    '```\n' +
    '\n' +
    '### 터미널 color scheme 구성\n' +
    '\n' +
    '편한 눈을 위해(?) 각 컬러에 대한 상세 값을 설정할 수 있고, 개별적으로 설정이 어렵다면 이미\n' +
    '구성된 scheme들이 [windowsterminalthemes](https://windowsterminalthemes.dev/)에서\n' +
    '제공되고 있으니 이를 참고해서 구성도 가능하다.\n' +
    '\n' +
    '설정은 마찬가지로 터미널 설정에서 이루어지고, `schemes` 항목에 color scheme을 추가하고,\n' +
    '`profiles.list`의 해당 항목에 `colorScheme` 값을 추가 한 color scheme의 `name`\n' +
    '값으로 설정하면 된다.\n' +
    '\n' +
    '```json|data-line="10,16"\n' +
    '"profiles" :{\n' +
    '  "list": [\n' +
    '    ...,\n' +
    '    {\n' +
    '      "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
    '      "hidden": false,\n' +
    '      "name": "Ubuntu",\n' +
    '      "source": "Windows.Terminal.Wsl",\n' +
    '      "fontFace": "Hack",\n' +
    '      "colorScheme": "Dark+"\n' +
    '    }\n' +
    '  ],\n' +
    '},\n' +
    '"schemes": [\n' +
    '  {\n' +
    '    "name": "Dark+",\n' +
    '    "black": "#000000",\n' +
    '    ...\n' +
    '    "background": "#0e0e0e",\n' +
    '    "foreground": "#cccccc"\n' +
    '  }\n' +
    '],\n' +
    '```\n' +
    '\n' +
    '## zsh plugins 설치\n' +
    '\n' +
    '조금 더 편한 zsh 사용을 위해 플러그인을 설치한다.\n' +
    '\n' +
    '### [zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions)\n' +
    '\n' +
    '이 플러그인은 이전에 입력했던 명령을 기반으로 명령을 타이핑 할 때마다 자동 완성을 제공하고\n' +
    '방향키로 해당 자동 완성을 사용할 수 있게 해준다.\n' +
    '\n' +
    '다음 명령으로 설치하고,\n' +
    '\n' +
    '```bash\n' +
    'git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n' +
    '```\n' +
    '\n' +
    '`~/.zshrc` 파일을 열어 `plugins` 항목에 `zsh-autosuggestions`를 추가해준다.\n' +
    '\n' +
    '```ini\n' +
    'plugins=(git zsh-autosuggestions)\n' +
    '```\n' +
    '\n' +
    '### [syntax highlighting](https://github.com/zsh-users/zsh-syntax-highlighting/)\n' +
    '\n' +
    '이 플러그인은 명령어에 구문 강조를 적용해준다.\n' +
    '구문 강조가 적용되면 좋은 것 중 하나는 특정 명령을 사용할 수 있으면 녹색으로, 설치 되지 않음\n' +
    '등의 이유로 알 수 없는 명령이면 빨간색으로 나타난다.\n' +
    '\n' +
    '다음 명령으로 설치하고,\n' +
    '\n' +
    '```bash\n' +
    'git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n' +
    '```\n' +
    '\n' +
    '`~/.zshrc` 파일을 열어 `plugins` 항목에 `zsh-syntax-highlighting`을 추가해준다.\n' +
    '\n' +
    '```ini\n' +
    'plugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n' +
    '```\n' +
    '\n' +
    '## 터미널 프롬프트 변경\n' +
    '\n' +
    '터미널을 열면 다음 화면처럼 username@hostname 형태로 프롬프트가 나오는데, VS Code에서\n' +
    '터미널을 열고 작업하면 이 프롬프트가 차지하는 공간이 적지 않아 보기 불편하다.\n' +
    '\n' +
    '다행히 이것마저도 변경하거나 감출 수 있다!!\n' +
    '\n' +
    '![기본으로는 user name과 host name이 모두 노출된다](/upload/2021/terminal-prompt-full-name.jpg)\n' +
    '\n' +
    '`~/.zshrc` 파일을 열고 다음을 추가하면\n' +
    '\n' +
    '```ini\n' +
    'prompt_context() {}\n' +
    '```\n' +
    '\n' +
    '프롬프트가 사라진다. 두둔!!\n' +
    '\n' +
    '![프롬프가 사라지고 경로만 남았다](/upload/2021/terminal-prompt-hide-name.jpg)\n' +
    '\n' +
    '참고로 다음과 같이 수정하면 user name과 경로만 노출된다.\n' +
    '\n' +
    '```ini\n' +
    'prompt_context() {\n' +
    '    if [[ "$USER" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then\n' +
    '      prompt_segment black default "%(!.%{%F{yellow}%}.)$USER"\n' +
    '    fi\n' +
    '}\n' +
    '```\n' +
    '\n' +
    '### Named directory 구성\n' +
    '\n' +
    '하지만 아직 `/mnt/c/Users/{user name}/` 이 거슬린다.\n' +
    '심지어 이게 디렉토리 깊이가 깊어지면 이 또한 너무 길어진다. 하여 이 마저도 줄여보기로 한다.\n' +
    '\n' +
    '역시 마찬가지로 `~/.zshrc` 파일을 열어 다음을 참고하여 환경에 맞게 추가한다.\n' +
    '\n' +
    '내 경우엔 `c:\\Users\\mulder21c\\Project`와 `c:\\Users\\mulder21c\\Workspace`이 주 사용\n' +
    '디렉토리라 이 디렉토리들에 대한 경로를 변경하기로 했다.\n' +
    '\n' +
    '```ini\n' +
    'hash -d mulder21c=/mnt/c/Users/mulder21c\n' +
    'hash -d Project=/mnt/c/Users/mulder21c/Project\n' +
    'hash -d Workspace=/mnt/c/Users/mulder21c/Workspace\n' +
    '```\n' +
    '\n' +
    '터미널을 다시 열어보면 다음과 같이 지정한 이름으로 표시된다. (단 앞에 `~`이 붙는다.)\n' +
    '\n' +
    '![named directory를 적용하고 경로가 한결 간결해졌다](/upload/2021/terminal-named-directory.jpg)\n' +
    '\n' +
    '이제야 터미널이 좀 간결해진 것 같다.\n' +
    '\n' +
    '## nvm 설치\n' +
    '\n' +
    '마지막으로 node.js 환경을 위해 nvm을 설치한다.\n' +
    '\n' +
    '터미널에서 다음 명령을 주면 자동으로 설치가 진행된다.\n' +
    '\n' +
    '```bash\n' +
    'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n' +
    '```\n' +
    '\n' +
    '참고로, Windows에 nvm for windows가 설치되어 있다면 충돌로 설치가 진행되지 않는다. 내\n' +
    '경우엔 더 이상 Windows 시스템에서 node를 실행할 생각이 없어서 과감히 제거하고 설치했다.\n' +
    '\n' +
    '설치가 완료되면 나타난 메세지 중에 다음과 같은 메세지가 있다.\n' +
    '\n' +
    '```ini\n' +
    'export NVM_DIR="$HOME/.nvm"\n' +
    '[ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh"  # This loads nvm\n' +
    '[ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion\n' +
    '```\n' +
    '\n' +
    '이걸 복사해서 `~/.zshrc`에 추가해야 한다.\n' +
    '\n' +
    '이후 node 설치는 nvm을 이용하면 된다.\n' +
    '\n' +
    '### auto `nvm` use  설정\n' +
    '\n' +
    '마지막으로 아직 테스트 해보지는 않았지만, 최근 Node 10.x, Node 14.x, Node 15.x를 각\n' +
    '환경으로 하는 프로덕트를 왔다 갔다 하다가 Node 버전 문제로 node-sass가 오류를 내뱉는 상황을\n' +
    '자주 만나게 되었다. `nvm use` 하는 걸 까먹기도 했고 현재 프로덕트가 어느 버전에서 돌려야\n' +
    '하는지도 까먹기 일수였다 ;;;\n' +
    '\n' +
    '하여 구성하는 김에 `.nvmrc`를 이용해서 자동으로 `nvm use`가 적용되게 하는 설정을 추가했다.\n' +
    '\n' +
    '다음의 코드를 `~/.zshrc`에 추가하면되는데, 아직 테스트해보진 않아서 잘 되는지는 모르겠다 = _=a\n' +
    '뭐... stackoverflow에서 건져온 건데 추천이 많았으니 잘 되겠지...? /=ㅁ=/\n' +
    '\n' +
    '```ini\n' +
    '# place this after nvm initialization!\n' +
    'autoload -U add-zsh-hook\n' +
    'load-nvmrc() {\n' +
    '  local node_version="$(nvm version)"\n' +
    '  local nvmrc_path="$(nvm_find_nvmrc)"\n' +
    '\n' +
    '  if [ -n "$nvmrc_path" ]; then\n' +
    '    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")\n' +
    '\n' +
    '    if [ "$nvmrc_node_version" = "N/A" ]; then\n' +
    '      nvm install\n' +
    '    elif [ "$nvmrc_node_version" != "$node_version" ]; then\n' +
    '      nvm use\n' +
    '    fi\n' +
    '  elif [ "$node_version" != "$(nvm version default)" ]; then\n' +
    '    echo "Reverting to nvm default version"\n' +
    '    nvm use default\n' +
    '  fi\n' +
    '}\n' +
    'add-zsh-hook chpwd load-nvmrc\n' +
    'load-nvmrc\n' +
    '```',
  source: '_posts/2021-01-27-setting-up-wsl-2-dev-env-and-zsh-on-windws-10.md',
  raw: '---\n' +
    'title: 개발환경 WSL2 + zsh로 갈아타기\n' +
    'tags:\n' +
    '  - WSL 2\n' +
    '  - zsh\n' +
    '  - Windows 10\n' +
    '  - terminal\n' +
    '  - nvm\n' +
    'categories:\n' +
    '  - 개발노트\n' +
    '  - Front-End\n' +
    'thumbnail: /upload/2021/thumbs/wsl2-zsh-on-windws-10.jpg\n' +
    'hero: /upload/2021/wsl2-zsh-on-windws-10.jpg\n' +
    'style: |\n' +
    '  .hero {\n' +
    '    &-wrapper {\n' +
    '      text-shadow:\n' +
    '        1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
    '        -1px -1px 2em rgba(20, 12, 24, 1);\n' +
    '    }\n' +
    '    &__image {\n' +
    '      opacity: 0.35\n' +
    '    }\n' +
    '  }\n' +
    'seo:\n' +
    '  description: |\n' +
    '    본격적으로 WSL + zsh 환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가\n' +
    '    설정을 차후에 필요할까 기록으로 남겨둔다.\n' +
    '  image: /upload/2021/wsl2-zsh-on-windws-10.jpg\n' +
    'date: 2021-01-28 00:32:57\n' +
    '---\n' +
    '\n' +
    '\n' +
    '## 기존 환경\n' +
    '\n' +
    '얼마 전까지만 해도 VS Code의 터미널을 git bash로 (이하 bash) 설정해서 5년 가까이 bash\n' +
    '상에서 CLI를 사용해왔다. (아! 참고로 나는 Windows 10 사용자다. 맥이었으면 진즉부터\n' +
    'terminal을 썼겠지...)\n' +
    '\n' +
    '이 블로그 테마를 제작 후에 몇 번 mac이나 linux 환경에서 테마 설치 오류에 대한 이슈가\n' +
    '올라왔었고, 최근에 어떤 사이트를 번역하는데 해당 사이트 빌드가 bash 상에서는 정상적으로\n' +
    '이루어지지 않아 확인해보니 linux 상에서는 올바르게 빌드 되어 linux 환경에 대한 필요가\n' +
    '생겨났다.\n' +
    '\n' +
    '결국 미루고 미루던 WSL 사용을 시도하기로 하고 반 년 정도를 이 방식으로 써 본 것 같다.\n' +
    '(미루고 미룬 이유는 Windows를 못믿어서... = _=a 항상 예기치 않은 오류를 만들어주는\n' +
    ' Windows ... )\n' +
    '\n' +
    '무튼, 반 년 정도의 사용 경험에서는 크게 문제를 느끼지 못해서 이제 본격적으로 WSL + zsh\n' +
    '환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가 설정을 차후에 필요할까 기록으로\n' +
    '남겨둔다. (안녕 bash~ 오래 동안 고마웠어 ㅠ)\n' +
    '\n' +
    '## WSL 1 or WSL 2 ?\n' +
    '\n' +
    'WSL을 쓰기로 한 시점에 결정해야 할 것 중 하나는 일단 WSL 1을 쓸 것인가 혹은 WSL 2를 쓸\n' +
    '것인가 같다. 물론, WSL 2 구성까지 해 두면 언제든지 원하는 시점에 WSL 1과 2를 오갈 수 있고\n' +
    '따라서 WSL 2 구성 방법으로 포스팅 해두기는 했다.\n' +
    '\n' +
    '내 경우엔 2가지를 다 써봤는데, 써보고 난 이후에 드는 생각은 일단 내 경우에는 WSL 1을 쓰는\n' +
    '게 아직은 낫지 않을까 싶다. MS에서는 WSL 2가 더 빠르고 전체 리눅스 커널 사용, 시스템 호출\n' +
    '호환성 등을 장점으로 들고 있지만 생각보다 만나게 되는 장애물이 많았다.\n' +
    '\n' +
    '일단 몇 가지 선택에 필요한 기준에 따라 나누어 보면,\n' +
    '기존의 Windows 시스템에서 이미 프로젝트가 구성되어 있고 (Node든 뭐 다른 것이든) 여기에\n' +
    'WSL을 통합하는 거라면 WSL 1을 추천한다.\n' +
    '반면 개발 환경을 새로 설정 하는 상황이나 새로 설정하는 것을 감안 할 생각이고, 리눅스 시스템에\n' +
    '거부감이 없다면 WSL 2가 나을 것 같다.\n' +
    '\n' +
    '이렇게 나눈 이유는, WSL 2에서는\n' +
    '\n' +
    '- Windows 파일 시스템(`/mnt/`)으로의 접근이 체감 될 만큼 느리다.\n' +
    '- Windows 파일 시스템에 이미 구성된 프로젝트의 경우, 파일 변경을 감지 하지 못하는 듯 하다.\n' +
    '  (Node의 watch 기능이 정상적으로 동작해주지 못한다. 파일 시스템이 다르니 당연한 것 같기는\n' +
    '  한데 처음에 무척 당황했다.)\n' +
    '- Windows에서 VS Code를 열고 터미널을 WSL로 사용할 때, Windows에서 연 브라우저가\n' +
    '  localhost에 접근이 잘 되지 않는다.\n' +
    '\n' +
    '  Windows 전원 옵션에 "빨리 켜기 기능"을 꺼두면 localhost 포워딩이 된다고 하는데, 실제로\n' +
    '  해봤을 때 localhost가 두 개의 다른 포트로 열렸을 때 하나만 되더라...\n' +
    '\n' +
    '내 경우는 이미 Windows 시스템을 기반으로 프로젝트들이 구성되어 있었고 WSL을 통합 해보는 거라\n' +
    '위의 문제들을 겪고 말았다 ㅋ\n' +
    '\n' +
    '물론 내 케이스가 아니라면 WSL 2가 더 나을 것 같기는 하다.\n' +
    '\n' +
    '## Windows Terminal 설치\n' +
    '\n' +
    'Windows에는 기본적으로 terminal이 존재하지 않기 때문에, windows terminal을\n' +
    '[Store](https://www.microsoft.com/ko-kr/p/windows-terminal/9n0dx20hk701)에서\n' +
    '별도로 설치해야 한다.\n' +
    '\n' +
    '![Windows Terminal on Store](/upload/2021/windows-store-terminal.jpg)\n' +
    '\n' +
    '## WSL 활성화\n' +
    '\n' +
    '자세한 내용은 [공식문서](https://docs.microsoft.com/ko-kr/windows/wsl/install-win10)를\n' +
    '참고하자.\n' +
    '\n' +
    "터미널(혹은 파워쉘)을 관리자 권한으로 실행 후, 다음을 차례대로 실행 하면된다. (물론 '제어판\n" +
    "&gt; 프로그램 &gt; 프로그램 및 기능 &gt; Windows 기능 켜기/끄기' 에서 GUI로 해도 된다.)\n" +
    '\n' +
    '```jsx\n' +
    'dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n' +
    'dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n' +
    '```\n' +
    '\n' +
    '실행이 종료 되었으면 "재시작"하자.\n' +
    '\n' +
    '일시적인 상황이었는지는 모르겠지만, 최초 이 설정을 할 때 재시작하지 않고 컴퓨터를 종료했다가\n' +
    '다음 날 켜서 설정을 계속 이어가려고 했더니 안되더라 = _=a\n' +
    '\n' +
    '### WSL 2 업데이트\n' +
    '\n' +
    'WSL 2를 사용하려면 적어도 Windows 10 May 2020 Update가 설치되어 있어야 한다. Windows\n' +
    '10 May 2020 Update에 실제 리눅스 커널을 사용하는 WSL 2가 기본 탑재 되었다고 한다.\n' +
    '그런데 좀 이상한게, Windows 10 최신 업데이트를 쓰고 있음에도 불구하고 WSL 2를 사용하려면\n' +
    '별도 패키지를 다운 받아서 설치하고, 추가 설정을 해야 한다. (아니 WSL 2를 기본으로 탑재했으면\n' +
    'WSL 2를 기본으로 사용할 수 있어야지 왜 WSL 1을 기본으로 잡아주고 있고... WSL 2를 쓰기 위해\n' +
    '추가 설치를 왜 해야 하는가...? )\n' +
    '\n' +
    '[MS WSL 설명서 페이지](https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package)로\n' +
    '가서 Linux 커널 업데이트 패키지 다운로드 후 설치한다.\n' +
    '\n' +
    '![Linux 커널 업데이트 설치 화면](/upload/2021/wsl-update.jpg)\n' +
    '\n' +
    '### WSL 기본 버전을 2로 설정\n' +
    '\n' +
    '터미널(혹은 파워쉘)에서 다음 명령을 시행한다.\n' +
    '\n' +
    '이걸 먼저 실행해야 이후로 설치되는 리눅스 시스템이 WSL 2를 기반으로 한다.\n' +
    '\n' +
    '```powershell\n' +
    'wsl --set-default-version 2\n' +
    '```\n' +
    '\n' +
    '## Ubuntu  설치\n' +
    '\n' +
    '다시 [Store](https://www.microsoft.com/ko-kr/store/apps/windows)에서 Ubuntu를\n' +
    '검색해서 설치 한다. (물론 우분투 말고 다른 리눅스 프로덕트를 선택해도 된다. 단지 내가\n' +
    'Ubuntu가 익숙해서 그렇다~~고 하지만 어차피 터미널인데?~~)\n' +
    '\n' +
    '![Windows Store Ubuntu 검색 결과](/upload/2021/windows-store-ubuntu.jpg)\n' +
    '\n' +
    '하지만 이 놈은 어디까지나 "배포" 패키지이므로 설치 후 최초 실행해야 우분투 설치가 진행된다.\n' +
    '시간이 조금 걸리니 기다리자.\n' +
    '\n' +
    '설치가 완료되면 다음과 같이 설치가 완료되었다는 메세지와 함께 웰컴 투 우분투가 노출된다\n' +
    '\n' +
    '![우분투 설치 완료 화면](/upload/2021/complete-install-ubuntu.jpg)\n' +
    '\n' +
    '### 터미널 기본 프로필 Ubuntu로 설정\n' +
    '\n' +
    '터미널에서도 Ubuntu가 기본으로 실행되도록 터미널 기본 프로필을 WSL로 설정한다.\n' +
    '\n' +
    '터미널에서 설정으로 들어가면 관련 json 파일이 열리는데, 여기서 `defaultProfile` 값을\n' +
    '`profiles.list` 에서 Ubuntu 것의 `guid` 값으로 수정하기만 하면 된다.\n' +
    '\n' +
    '```json|data-line="2,11"\n' +
    '{\n' +
    '  "defaultProfile": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
    '  ...\n' +
    '  "profiles":\n' +
    '    {\n' +
    '      ...\n' +
    '      "list":\n' +
    '      [\n' +
    '        ...\n' +
    '        {\n' +
    '          "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
    '          "hidden": false,\n' +
    '          "name": "Ubuntu",\n' +
    '          "source": "Windows.Terminal.Wsl",\n' +
    '          "colorScheme": "Dark+",\n' +
    '          "fontFace": "Hack"\n' +
    '        }\n' +
    '      ]\n' +
    '    },\n' +
    '}\n' +
    '```\n' +
    '\n' +
    '## Git, zsh 설치\n' +
    '\n' +
    'Ubuntu(WSL)를 실행하고, git과 zsh부터 설치한다.\n' +
    '\n' +
    '일단 패키지 레파지토리 인덱스부터 업데이트 하고\n' +
    '\n' +
    '```bash\n' +
    'sudo apt update\n' +
    '```\n' +
    '\n' +
    'git과 zsh을 설치\n' +
    '\n' +
    '```bash\n' +
    'sudo apt install git zsh\n' +
    '```\n' +
    '\n' +
    '## Oh my zsh 설치 및 구성\n' +
    '\n' +
    '### 설치\n' +
    '\n' +
    '터미널에서 다음 명령을 실행하기만 하면 된다.\n' +
    '\n' +
    '```bash\n' +
    'sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"\n' +
    '```\n' +
    '\n' +
    '설치가 완료되면 다음과 같은 메세지를 볼 수 있다.\n' +
    '\n' +
    '![oh my zsh 설치 완료 화면](/upload/2021/complete-install-oh-my-zsh.jpg)\n' +
    '\n' +
    '### 테마 구성\n' +
    '\n' +
    '역시 처음 설치했드면 꾸미기가 먼저다!!! 테마부터 변경한다.\n' +
    '\n' +
    '테마는 [ohmyzsh github wiki](https://github.com/ohmyzsh/ohmyzsh/wiki/Themes)에서\n' +
    '마음에 드는 걸 선택하면 될 것 같다. 내 경우엔 많이 언급되는 `agnoster`를 쓰기로...\n' +
    '\n' +
    '`~/.zshrc` 파일을 열어 `ZSH_THEME` 항목의 값을 변경하기만 하면 된다.\n' +
    '\n' +
    '```bash\n' +
    'vi ~/.zshrc\n' +
    '```\n' +
    '\n' +
    '```ini\n' +
    'ZSH_THEME="agnoster"\n' +
    '```\n' +
    '\n' +
    '참고로 `agnoster` 테마를 쓰려면 [powerline font](https://github.com/powerline/fonts)를\n' +
    '써야 하는데, 내 경우엔 이미 Hack 폰트를 쓰고 있어서 별도로 설치하지 않고 터미널 설정에서\n' +
    '`profile.list`의 해당 항목에 fontFamily 값만 추가하여 해결했다.\n' +
    '\n' +
    '```json|data-line="6"\n' +
    '{\n' +
    '  "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
    '  "hidden": false,\n' +
    '  "name": "Ubuntu",\n' +
    '  "source": "Windows.Terminal.Wsl",\n' +
    '  "fontFace": "Hack"\n' +
    '}\n' +
    '```\n' +
    '\n' +
    '### 터미널 color scheme 구성\n' +
    '\n' +
    '편한 눈을 위해(?) 각 컬러에 대한 상세 값을 설정할 수 있고, 개별적으로 설정이 어렵다면 이미\n' +
    '구성된 scheme들이 [windowsterminalthemes](https://windowsterminalthemes.dev/)에서\n' +
    '제공되고 있으니 이를 참고해서 구성도 가능하다.\n' +
    '\n' +
    '설정은 마찬가지로 터미널 설정에서 이루어지고, `schemes` 항목에 color scheme을 추가하고,\n' +
    '`profiles.list`의 해당 항목에 `colorScheme` 값을 추가 한 color scheme의 `name`\n' +
    '값으로 설정하면 된다.\n' +
    '\n' +
    '```json|data-line="10,16"\n' +
    '"profiles" :{\n' +
    '  "list": [\n' +
    '    ...,\n' +
    '    {\n' +
    '      "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
    '      "hidden": false,\n' +
    '      "name": "Ubuntu",\n' +
    '      "source": "Windows.Terminal.Wsl",\n' +
    '      "fontFace": "Hack",\n' +
    '      "colorScheme": "Dark+"\n' +
    '    }\n' +
    '  ],\n' +
    '},\n' +
    '"schemes": [\n' +
    '  {\n' +
    '    "name": "Dark+",\n' +
    '    "black": "#000000",\n' +
    '    ...\n' +
    '    "background": "#0e0e0e",\n' +
    '    "foreground": "#cccccc"\n' +
    '  }\n' +
    '],\n' +
    '```\n' +
    '\n' +
    '## zsh plugins 설치\n' +
    '\n' +
    '조금 더 편한 zsh 사용을 위해 플러그인을 설치한다.\n' +
    '\n' +
    '### [zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions)\n' +
    '\n' +
    '이 플러그인은 이전에 입력했던 명령을 기반으로 명령을 타이핑 할 때마다 자동 완성을 제공하고\n' +
    '방향키로 해당 자동 완성을 사용할 수 있게 해준다.\n' +
    '\n' +
    '다음 명령으로 설치하고,\n' +
    '\n' +
    '```bash\n' +
    'git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n' +
    '```\n' +
    '\n' +
    '`~/.zshrc` 파일을 열어 `plugins` 항목에 `zsh-autosuggestions`를 추가해준다.\n' +
    '\n' +
    '```ini\n' +
    'plugins=(git zsh-autosuggestions)\n' +
    '```\n' +
    '\n' +
    '### [syntax highlighting](https://github.com/zsh-users/zsh-syntax-highlighting/)\n' +
    '\n' +
    '이 플러그인은 명령어에 구문 강조를 적용해준다.\n' +
    '구문 강조가 적용되면 좋은 것 중 하나는 특정 명령을 사용할 수 있으면 녹색으로, 설치 되지 않음\n' +
    '등의 이유로 알 수 없는 명령이면 빨간색으로 나타난다.\n' +
    '\n' +
    '다음 명령으로 설치하고,\n' +
    '\n' +
    '```bash\n' +
    'git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n' +
    '```\n' +
    '\n' +
    '`~/.zshrc` 파일을 열어 `plugins` 항목에 `zsh-syntax-highlighting`을 추가해준다.\n' +
    '\n' +
    '```ini\n' +
    'plugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n' +
    '```\n' +
    '\n' +
    '## 터미널 프롬프트 변경\n' +
    '\n' +
    '터미널을 열면 다음 화면처럼 username@hostname 형태로 프롬프트가 나오는데, VS Code에서\n' +
    '터미널을 열고 작업하면 이 프롬프트가 차지하는 공간이 적지 않아 보기 불편하다.\n' +
    '\n' +
    '다행히 이것마저도 변경하거나 감출 수 있다!!\n' +
    '\n' +
    '![기본으로는 user name과 host name이 모두 노출된다](/upload/2021/terminal-prompt-full-name.jpg)\n' +
    '\n' +
    '`~/.zshrc` 파일을 열고 다음을 추가하면\n' +
    '\n' +
    '```ini\n' +
    'prompt_context() {}\n' +
    '```\n' +
    '\n' +
    '프롬프트가 사라진다. 두둔!!\n' +
    '\n' +
    '![프롬프가 사라지고 경로만 남았다](/upload/2021/terminal-prompt-hide-name.jpg)\n' +
    '\n' +
    '참고로 다음과 같이 수정하면 user name과 경로만 노출된다.\n' +
    '\n' +
    '```ini\n' +
    'prompt_context() {\n' +
    '    if [[ "$USER" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then\n' +
    '      prompt_segment black default "%(!.%{%F{yellow}%}.)$USER"\n' +
    '    fi\n' +
    '}\n' +
    '```\n' +
    '\n' +
    '### Named directory 구성\n' +
    '\n' +
    '하지만 아직 `/mnt/c/Users/{user name}/` 이 거슬린다.\n' +
    '심지어 이게 디렉토리 깊이가 깊어지면 이 또한 너무 길어진다. 하여 이 마저도 줄여보기로 한다.\n' +
    '\n' +
    '역시 마찬가지로 `~/.zshrc` 파일을 열어 다음을 참고하여 환경에 맞게 추가한다.\n' +
    '\n' +
    '내 경우엔 `c:\\Users\\mulder21c\\Project`와 `c:\\Users\\mulder21c\\Workspace`이 주 사용\n' +
    '디렉토리라 이 디렉토리들에 대한 경로를 변경하기로 했다.\n' +
    '\n' +
    '```ini\n' +
    'hash -d mulder21c=/mnt/c/Users/mulder21c\n' +
    'hash -d Project=/mnt/c/Users/mulder21c/Project\n' +
    'hash -d Workspace=/mnt/c/Users/mulder21c/Workspace\n' +
    '```\n' +
    '\n' +
    '터미널을 다시 열어보면 다음과 같이 지정한 이름으로 표시된다. (단 앞에 `~`이 붙는다.)\n' +
    '\n' +
    '![named directory를 적용하고 경로가 한결 간결해졌다](/upload/2021/terminal-named-directory.jpg)\n' +
    '\n' +
    '이제야 터미널이 좀 간결해진 것 같다.\n' +
    '\n' +
    '## nvm 설치\n' +
    '\n' +
    '마지막으로 node.js 환경을 위해 nvm을 설치한다.\n' +
    '\n' +
    '터미널에서 다음 명령을 주면 자동으로 설치가 진행된다.\n' +
    '\n' +
    '```bash\n' +
    'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n' +
    '```\n' +
    '\n' +
    '참고로, Windows에 nvm for windows가 설치되어 있다면 충돌로 설치가 진행되지 않는다. 내\n' +
    '경우엔 더 이상 Windows 시스템에서 node를 실행할 생각이 없어서 과감히 제거하고 설치했다.\n' +
    '\n' +
    '설치가 완료되면 나타난 메세지 중에 다음과 같은 메세지가 있다.\n' +
    '\n' +
    '```ini\n' +
    'export NVM_DIR="$HOME/.nvm"\n' +
    '[ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh"  # This loads nvm\n' +
    '[ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion\n' +
    '```\n' +
    '\n' +
    '이걸 복사해서 `~/.zshrc`에 추가해야 한다.\n' +
    '\n' +
    '이후 node 설치는 nvm을 이용하면 된다.\n' +
    '\n' +
    '### auto `nvm` use  설정\n' +
    '\n' +
    '마지막으로 아직 테스트 해보지는 않았지만, 최근 Node 10.x, Node 14.x, Node 15.x를 각\n' +
    '환경으로 하는 프로덕트를 왔다 갔다 하다가 Node 버전 문제로 node-sass가 오류를 내뱉는 상황을\n' +
    '자주 만나게 되었다. `nvm use` 하는 걸 까먹기도 했고 현재 프로덕트가 어느 버전에서 돌려야\n' +
    '하는지도 까먹기 일수였다 ;;;\n' +
    '\n' +
    '하여 구성하는 김에 `.nvmrc`를 이용해서 자동으로 `nvm use`가 적용되게 하는 설정을 추가했다.\n' +
    '\n' +
    '다음의 코드를 `~/.zshrc`에 추가하면되는데, 아직 테스트해보진 않아서 잘 되는지는 모르겠다 = _=a\n' +
    '뭐... stackoverflow에서 건져온 건데 추천이 많았으니 잘 되겠지...? /=ㅁ=/\n' +
    '\n' +
    '```ini\n' +
    '# place this after nvm initialization!\n' +
    'autoload -U add-zsh-hook\n' +
    'load-nvmrc() {\n' +
    '  local node_version="$(nvm version)"\n' +
    '  local nvmrc_path="$(nvm_find_nvmrc)"\n' +
    '\n' +
    '  if [ -n "$nvmrc_path" ]; then\n' +
    '    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")\n' +
    '\n' +
    '    if [ "$nvmrc_node_version" = "N/A" ]; then\n' +
    '      nvm install\n' +
    '    elif [ "$nvmrc'... 239 more characters,
  slug: 'setting-up-wsl-2-dev-env-and-zsh-on-windws-10',
  published: true,
  comments: true,
  layout: 'post',
  photos: [],
  link: '',
  _id: 'clcytfa4r00aatawwe3zac5qf',
  content: '<h2 id="기존-환경"><a href="#기존-환경" class="headerlink" title="기존 환경"></a>기존 환경</h2><p>얼마 전까지만 해도 VS Code의 터미널을 git bash로 (이하 bash) 설정해서 5년 가까이 bash\n' +
    '상에서 CLI를 사용해왔다. (아! 참고로 나는 Windows 10 사용자다. 맥이었으면 진즉부터\n' +
    'terminal을 썼겠지...)</p>\n' +
    '<p>이 블로그 테마를 제작 후에 몇 번 mac이나 linux 환경에서 테마 설치 오류에 대한 이슈가\n' +
    '올라왔었고, 최근에 어떤 사이트를 번역하는데 해당 사이트 빌드가 bash 상에서는 정상적으로\n' +
    '이루어지지 않아 확인해보니 linux 상에서는 올바르게 빌드 되어 linux 환경에 대한 필요가\n' +
    '생겨났다.</p>\n' +
    '<p>결국 미루고 미루던 WSL 사용을 시도하기로 하고 반 년 정도를 이 방식으로 써 본 것 같다.\n' +
    '(미루고 미룬 이유는 Windows를 못믿어서... &#x3D; _&#x3D;a 항상 예기치 않은 오류를 만들어주는\n' +
    ' Windows ... )</p>\n' +
    '<p>무튼, 반 년 정도의 사용 경험에서는 크게 문제를 느끼지 못해서 이제 본격적으로 WSL + zsh\n' +
    '환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가 설정을 차후에 필요할까 기록으로\n' +
    '남겨둔다. (안녕 bash~ 오래 동안 고마웠어 ㅠ)</p>\n' +
    '<h2 id="WSL-1-or-WSL-2"><a href="#WSL-1-or-WSL-2" class="headerlink" title="WSL 1 or WSL 2 ?"></a>WSL 1 or WSL 2 ?</h2><p>WSL을 쓰기로 한 시점에 결정해야 할 것 중 하나는 일단 WSL 1을 쓸 것인가 혹은 WSL 2를 쓸\n' +
    '것인가 같다. 물론, WSL 2 구성까지 해 두면 언제든지 원하는 시점에 WSL 1과 2를 오갈 수 있고\n' +
    '따라서 WSL 2 구성 방법으로 포스팅 해두기는 했다.</p>\n' +
    '<p>내 경우엔 2가지를 다 써봤는데, 써보고 난 이후에 드는 생각은 일단 내 경우에는 WSL 1을 쓰는\n' +
    '게 아직은 낫지 않을까 싶다. MS에서는 WSL 2가 더 빠르고 전체 리눅스 커널 사용, 시스템 호출\n' +
    '호환성 등을 장점으로 들고 있지만 생각보다 만나게 되는 장애물이 많았다.</p>\n' +
    '<p>일단 몇 가지 선택에 필요한 기준에 따라 나누어 보면,\n' +
    '기존의 Windows 시스템에서 이미 프로젝트가 구성되어 있고 (Node든 뭐 다른 것이든) 여기에\n' +
    'WSL을 통합하는 거라면 WSL 1을 추천한다.\n' +
    '반면 개발 환경을 새로 설정 하는 상황이나 새로 설정하는 것을 감안 할 생각이고, 리눅스 시스템에\n' +
    '거부감이 없다면 WSL 2가 나을 것 같다.</p>\n' +
    '<p>이렇게 나눈 이유는, WSL 2에서는</p>\n' +
    '<ul>\n' +
    '<li><p>Windows 파일 시스템(<code>/mnt/</code>)으로의 접근이 체감 될 만큼 느리다.</p>\n' +
    '</li>\n' +
    '<li><p>Windows 파일 시스템에 이미 구성된 프로젝트의 경우, 파일 변경을 감지 하지 못하는 듯 하다.\n' +
    '(Node의 watch 기능이 정상적으로 동작해주지 못한다. 파일 시스템이 다르니 당연한 것 같기는\n' +
    '한데 처음에 무척 당황했다.)</p>\n' +
    '</li>\n' +
    '<li><p>Windows에서 VS Code를 열고 터미널을 WSL로 사용할 때, Windows에서 연 브라우저가\n' +
    'localhost에 접근이 잘 되지 않는다.</p>\n' +
    '<p>Windows 전원 옵션에 &quot;빨리 켜기 기능&quot;을 꺼두면 localhost 포워딩이 된다고 하는데, 실제로\n' +
    '해봤을 때 localhost가 두 개의 다른 포트로 열렸을 때 하나만 되더라...</p>\n' +
    '</li>\n' +
    '</ul>\n' +
    '<p>내 경우는 이미 Windows 시스템을 기반으로 프로젝트들이 구성되어 있었고 WSL을 통합 해보는 거라\n' +
    '위의 문제들을 겪고 말았다 ㅋ</p>\n' +
    '<p>물론 내 케이스가 아니라면 WSL 2가 더 나을 것 같기는 하다.</p>\n' +
    '<h2 id="Windows-Terminal-설치"><a href="#Windows-Terminal-설치" class="headerlink" title="Windows Terminal 설치"></a>Windows Terminal 설치</h2><p>Windows에는 기본적으로 terminal이 존재하지 않기 때문에, windows terminal을\n' +
    '<a href="https://www.microsoft.com/ko-kr/p/windows-terminal/9n0dx20hk701">Store</a>에서\n' +
    '별도로 설치해야 한다.</p>\n' +
    '<p><img src="/upload/2021/windows-store-terminal.jpg" alt="Windows Terminal on Store"></p>\n' +
    '<h2 id="WSL-활성화"><a href="#WSL-활성화" class="headerlink" title="WSL 활성화"></a>WSL 활성화</h2><p>자세한 내용은 <a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10">공식문서</a>를\n' +
    '참고하자.</p>\n' +
    '<p>터미널(혹은 파워쉘)을 관리자 권한으로 실행 후, 다음을 차례대로 실행 하면된다. (물론 &#39;제어판\n' +
    '&gt; 프로그램 &gt; 프로그램 및 기능 &gt; Windows 기능 켜기&#x2F;끄기&#39; 에서 GUI로 해도 된다.)</p>\n' +
    '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span>enable<span class="token operator">-</span>feature <span class="token operator">/</span>featurename<span class="token operator">:</span>Microsoft<span class="token operator">-</span>Windows<span class="token operator">-</span>Subsystem<span class="token operator">-</span>Linux <span class="token operator">/</span>all <span class="token operator">/</span>norestart\n' +
    'dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span>enable<span class="token operator">-</span>feature <span class="token operator">/</span>featurename<span class="token operator">:</span>VirtualMachinePlatform <span class="token operator">/</span>all <span class="token operator">/</span>norestart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>\n' +
    '\n' +
    '<p>실행이 종료 되었으면 &quot;재시작&quot;하자.</p>\n' +
    '<p>일시적인 상황이었는지는 모르겠지만, 최초 이 설정을 할 때 재시작하지 않고 컴퓨터를 종료했다가\n' +
    '다음 날 켜서 설정을 계속 이어가려고 했더니 안되더라 &#x3D; _&#x3D;a</p>\n' +
    '<h3 id="WSL-2-업데이트"><a href="#WSL-2-업데이트" class="headerlink" title="WSL 2 업데이트"></a>WSL 2 업데이트</h3><p>WSL 2를 사용하려면 적어도 Windows 10 May 2020 Update가 설치되어 있어야 한다. Windows\n' +
    '10 May 2020 Update에 실제 리눅스 커널을 사용하는 WSL 2가 기본 탑재 되었다고 한다.\n' +
    '그런데 좀 이상한게, Windows 10 최신 업데이트를 쓰고 있음에도 불구하고 WSL 2를 사용하려면\n' +
    '별도 패키지를 다운 받아서 설치하고, 추가 설정을 해야 한다. (아니 WSL 2를 기본으로 탑재했으면\n' +
    'WSL 2를 기본으로 사용할 수 있어야지 왜 WSL 1을 기본으로 잡아주고 있고... WSL 2를 쓰기 위해\n' +
    '추가 설치를 왜 해야 하는가...? )</p>\n' +
    '<p><a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package">MS WSL 설명서 페이지</a>로\n' +
    '가서 Linux 커널 업데이트 패키지 다운로드 후 설치한다.</p>\n' +
    '<p><img src="/upload/2021/wsl-update.jpg" alt="Linux 커널 업데이트 설치 화면"></p>\n' +
    '<h3 id="WSL-기본-버전을-2로-설정"><a href="#WSL-기본-버전을-2로-설정" class="headerlink" title="WSL 기본 버전을 2로 설정"></a>WSL 기본 버전을 2로 설정</h3><p>터미널(혹은 파워쉘)에서 다음 명령을 시행한다.</p>\n' +
    '<p>이걸 먼저 실행해야 이후로 설치되는 리눅스 시스템이 WSL 2를 기반으로 한다.</p>\n' +
    '<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-default</span><span class="token operator">-</span>version 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
    '\n' +
    '<h2 id="Ubuntu-설치"><a href="#Ubuntu-설치" class="headerlink" title="Ubuntu  설치"></a>Ubuntu  설치</h2><p>다시 <a href="https://www.microsoft.com/ko-kr/store/apps/windows">Store</a>에서 Ubuntu를\n' +
    '검색해서 설치 한다. (물론 우분투 말고 다른 리눅스 프로덕트를 선택해도 된다. 단지 내가\n' +
    'Ubuntu가 익숙해서 그렇다<del>고 하지만 어차피 터미널인데?</del>)</p>\n' +
    '<p><img src="/upload/2021/windows-store-ubuntu.jpg" alt="Windows Store Ubuntu 검색 결과"></p>\n' +
    '<p>하지만 이 놈은 어디까지나 &quot;배포&quot; 패키지이므로 설치 후 최초 실행해야 우분투 설치가 진행된다.\n' +
    '시간이 조금 걸리니 기다리자.</p>\n' +
    '<p>설치가 완료되면 다음과 같이 설치가 완료되었다는 메세지와 함께 웰컴 투 우분투가 노출된다</p>\n' +
    '<p><img src="/upload/2021/complete-install-ubuntu.jpg" alt="우분투 설치 완료 화면"></p>\n' +
    '<h3 id="터미널-기본-프로필-Ubuntu로-설정"><a href="#터미널-기본-프로필-Ubuntu로-설정" class="headerlink" title="터미널 기본 프로필 Ubuntu로 설정"></a>터미널 기본 프로필 Ubuntu로 설정</h3><p>터미널에서도 Ubuntu가 기본으로 실행되도록 터미널 기본 프로필을 WSL로 설정한다.</p>\n' +
    '<p>터미널에서 설정으로 들어가면 관련 json 파일이 열리는데, 여기서 <code>defaultProfile</code> 값을\n' +
    '<code>profiles.list</code> 에서 Ubuntu 것의 <code>guid</code> 값으로 수정하기만 하면 된다.</p>\n' +
    '<pre class="line-numbers language-json|data-line" data-language="json|data-line"><code class="language-json|data-line">&#123;\n' +
    '  &quot;defaultProfile&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,\n' +
    '  ...\n' +
    '  &quot;profiles&quot;:\n' +
    '    &#123;\n' +
    '      ...\n' +
    '      &quot;list&quot;:\n' +
    '      [\n' +
    '        ...\n' +
    '        &#123;\n' +
    '          &quot;guid&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,\n' +
    '          &quot;hidden&quot;: false,\n' +
    '          &quot;name&quot;: &quot;Ubuntu&quot;,\n' +
    '          &quot;source&quot;: &quot;Windows.Terminal.Wsl&quot;,\n' +
    '          &quot;colorScheme&quot;: &quot;Dark+&quot;,\n' +
    '          &quot;fontFace&quot;: &quot;Hack&quot;\n' +
    '        &#125;\n' +
    '      ]\n' +
    '    &#125;,\n' +
    '&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
    '\n' +
    '<h2 id="Git-zsh-설치"><a href="#Git-zsh-설치" class="headerlink" title="Git, zsh 설치"></a>Git, zsh 설치</h2><p>Ubuntu(WSL)를 실행하고, git과 zsh부터 설치한다.</p>\n' +
    '<p>일단 패키지 레파지토리 인덱스부터 업데이트 하고</p>\n' +
    '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
    '\n' +
    '<p>git과 zsh을 설치</p>\n' +
    '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span> <span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
    '\n' +
    '<h2 id="Oh-my-zsh-설치-및-구성"><a href="#Oh-my-zsh-설치-및-구성" class="headerlink" title="Oh my zsh 설치 및 구성"></a>Oh my zsh 설치 및 구성</h2><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><p>터미널에서 다음 명령을 실행하기만 하면 된다.</p>\n' +
    '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
    '\n' +
    '<p>설치가 완료되면 다음과 같은 메세지를 볼 수 있다.</p>\n' +
    '<p><img src="/upload/2021/complete-install-oh-my-zsh.jpg" alt="oh my zsh 설치 완료 화면"></p>\n' +
    '<h3 id="테마-구성"><a href="#테마-구성" class="headerlink" title="테마 구성"></a>테마 구성</h3><p>역시 처음 설치했드면 꾸미기가 먼저다!!! 테마부터 변경한다.</p>\n' +
    '<p>테마는 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">ohmyzsh github wiki</a>에서\n' +
    '마음에 드는 걸 선택하면 될 것 같다. 내 경우엔 많이 언급되는 <code>agnoster</code>를 쓰기로...</p>\n' +
    '<p><code>~/.zshrc</code> 파일을 열어 <code>ZSH_THEME</code> 항목의 값을 변경하기만 하면 된다.</p>\n' +
    '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
    '\n' +
    '<pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">ZSH_THEME</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">agnoster</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
    '\n' +
    '<p>참고로 <code>agnoster</code> 테마를 쓰려면 <a href="https://github.com/powerline/fonts">powerline font</a>를\n' +
    '써야 하는데, 내 경우엔 이미 Hack 폰트를 쓰고 있어서 별도로 설치하지 않고 터미널 설정에서\n' +
    '<code>profile.list</code>의 해당 항목에 fontFamily 값만 추가하여 해결했다.</p>\n' +
    '<pre class="line-numbers language-j'... 11610 more characters,
  site: { data: { 'hero.db': [Array] } },
  excerpt: '',
  more: '<h2 id="기존-환경"><a href="#기존-환경" class="headerlink" title="기존 환경"></a>기존 환경</h2><p>얼마 전까지만 해도 VS Code의 터미널을 git bash로 (이하 bash) 설정해서 5년 가까이 bash\n' +
    '상에서 CLI를 사용해왔다. (아! 참고로 나는 Windows 10 사용자다. 맥이었으면 진즉부터\n' +
    'terminal을 썼겠지...)</p>\n' +
    '<p>이 블로그 테마를 제작 후에 몇 번 mac이나 linux 환경에서 테마 설치 오류에 대한 이슈가\n' +
    '올라왔었고, 최근에 어떤 사이트를 번역하는데 해당 사이트 빌드가 bash 상에서는 정상적으로\n' +
    '이루어지지 않아 확인해보니 linux 상에서는 올바르게 빌드 되어 linux 환경에 대한 필요가\n' +
    '생겨났다.</p>\n' +
    '<p>결국 미루고 미루던 WSL 사용을 시도하기로 하고 반 년 정도를 이 방식으로 써 본 것 같다.\n' +
    '(미루고 미룬 이유는 Windows를 못믿어서... &#x3D; _&#x3D;a 항상 예기치 않은 오류를 만들어주는\n' +
    ' Windows ... )</p>\n' +
    '<p>무튼, 반 년 정도의 사용 경험에서는 크게 문제를 느끼지 못해서 이제 본격적으로 WSL + zsh\n' +
    '환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가 설정을 차후에 필요할까 기록으로\n' +
    '남겨둔다. (안녕 bash~ 오래 동안 고마웠어 ㅠ)</p>\n' +
    '<h2 id="WSL-1-or-WSL-2"><a href="#WSL-1-or-WSL-2" class="headerlink" title="WSL 1 or WSL 2 ?"></a>WSL 1 or WSL 2 ?</h2><p>WSL을 쓰기로 한 시점에 결정해야 할 것 중 하나는 일단 WSL 1을 쓸 것인가 혹은 WSL 2를 쓸\n' +
    '것인가 같다. 물론, WSL 2 구성까지 해 두면 언제든지 원하는 시점에 WSL 1과 2를 오갈 수 있고\n' +
    '따라서 WSL 2 구성 방법으로 포스팅 해두기는 했다.</p>\n' +
    '<p>내 경우엔 2가지를 다 써봤는데, 써보고 난 이후에 드는 생각은 일단 내 경우에는 WSL 1을 쓰는\n' +
    '게 아직은 낫지 않을까 싶다. MS에서는 WSL 2가 더 빠르고 전체 리눅스 커널 사용, 시스템 호출\n' +
    '호환성 등을 장점으로 들고 있지만 생각보다 만나게 되는 장애물이 많았다.</p>\n' +
    '<p>일단 몇 가지 선택에 필요한 기준에 따라 나누어 보면,\n' +
    '기존의 Windows 시스템에서 이미 프로젝트가 구성되어 있고 (Node든 뭐 다른 것이든) 여기에\n' +
    'WSL을 통합하는 거라면 WSL 1을 추천한다.\n' +
    '반면 개발 환경을 새로 설정 하는 상황이나 새로 설정하는 것을 감안 할 생각이고, 리눅스 시스템에\n' +
    '거부감이 없다면 WSL 2가 나을 것 같다.</p>\n' +
    '<p>이렇게 나눈 이유는, WSL 2에서는</p>\n' +
    '<ul>\n' +
    '<li><p>Windows 파일 시스템(<code>/mnt/</code>)으로의 접근이 체감 될 만큼 느리다.</p>\n' +
    '</li>\n' +
    '<li><p>Windows 파일 시스템에 이미 구성된 프로젝트의 경우, 파일 변경을 감지 하지 못하는 듯 하다.\n' +
    '(Node의 watch 기능이 정상적으로 동작해주지 못한다. 파일 시스템이 다르니 당연한 것 같기는\n' +
    '한데 처음에 무척 당황했다.)</p>\n' +
    '</li>\n' +
    '<li><p>Windows에서 VS Code를 열고 터미널을 WSL로 사용할 때, Windows에서 연 브라우저가\n' +
    'localhost에 접근이 잘 되지 않는다.</p>\n' +
    '<p>Windows 전원 옵션에 &quot;빨리 켜기 기능&quot;을 꺼두면 localhost 포워딩이 된다고 하는데, 실제로\n' +
    '해봤을 때 localhost가 두 개의 다른 포트로 열렸을 때 하나만 되더라...</p>\n' +
    '</li>\n' +
    '</ul>\n' +
    '<p>내 경우는 이미 Windows 시스템을 기반으로 프로젝트들이 구성되어 있었고 WSL을 통합 해보는 거라\n' +
    '위의 문제들을 겪고 말았다 ㅋ</p>\n' +
    '<p>물론 내 케이스가 아니라면 WSL 2가 더 나을 것 같기는 하다.</p>\n' +
    '<h2 id="Windows-Terminal-설치"><a href="#Windows-Terminal-설치" class="headerlink" title="Windows Terminal 설치"></a>Windows Terminal 설치</h2><p>Windows에는 기본적으로 terminal이 존재하지 않기 때문에, windows terminal을\n' +
    '<a href="https://www.microsoft.com/ko-kr/p/windows-terminal/9n0dx20hk701">Store</a>에서\n' +
    '별도로 설치해야 한다.</p>\n' +
    '<p><img src="/upload/2021/windows-store-terminal.jpg" alt="Windows Terminal on Store"></p>\n' +
    '<h2 id="WSL-활성화"><a href="#WSL-활성화" class="headerlink" title="WSL 활성화"></a>WSL 활성화</h2><p>자세한 내용은 <a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10">공식문서</a>를\n' +
    '참고하자.</p>\n' +
    '<p>터미널(혹은 파워쉘)을 관리자 권한으로 실행 후, 다음을 차례대로 실행 하면된다. (물론 &#39;제어판\n' +
    '&gt; 프로그램 &gt; 프로그램 및 기능 &gt; Windows 기능 켜기&#x2F;끄기&#39; 에서 GUI로 해도 된다.)</p>\n' +
    '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span>enable<span class="token operator">-</span>feature <span class="token operator">/</span>featurename<span class="token operator">:</span>Microsoft<span class="token operator">-</span>Windows<span class="token operator">-</span>Subsystem<span class="token operator">-</span>Linux <span class="token operator">/</span>all <span class="token operator">/</span>norestart\n' +
    'dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span>enable<span class="token operator">-</span>feature <span class="token operator">/</span>featurename<span class="token operator">:</span>VirtualMachinePlatform <span class="token operator">/</span>all <span class="token operator">/</span>norestart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>\n' +
    '\n' +
    '<p>실행이 종료 되었으면 &quot;재시작&quot;하자.</p>\n' +
    '<p>일시적인 상황이었는지는 모르겠지만, 최초 이 설정을 할 때 재시작하지 않고 컴퓨터를 종료했다가\n' +
    '다음 날 켜서 설정을 계속 이어가려고 했더니 안되더라 &#x3D; _&#x3D;a</p>\n' +
    '<h3 id="WSL-2-업데이트"><a href="#WSL-2-업데이트" class="headerlink" title="WSL 2 업데이트"></a>WSL 2 업데이트</h3><p>WSL 2를 사용하려면 적어도 Windows 10 May 2020 Update가 설치되어 있어야 한다. Windows\n' +
    '10 May 2020 Update에 실제 리눅스 커널을 사용하는 WSL 2가 기본 탑재 되었다고 한다.\n' +
    '그런데 좀 이상한게, Windows 10 최신 업데이트를 쓰고 있음에도 불구하고 WSL 2를 사용하려면\n' +
    '별도 패키지를 다운 받아서 설치하고, 추가 설정을 해야 한다. (아니 WSL 2를 기본으로 탑재했으면\n' +
    'WSL 2를 기본으로 사용할 수 있어야지 왜 WSL 1을 기본으로 잡아주고 있고... WSL 2를 쓰기 위해\n' +
    '추가 설치를 왜 해야 하는가...? )</p>\n' +
    '<p><a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package">MS WSL 설명서 페이지</a>로\n' +
    '가서 Linux 커널 업데이트 패키지 다운로드 후 설치한다.</p>\n' +
    '<p><img src="/upload/2021/wsl-update.jpg" alt="Linux 커널 업데이트 설치 화면"></p>\n' +
    '<h3 id="WSL-기본-버전을-2로-설정"><a href="#WSL-기본-버전을-2로-설정" class="headerlink" title="WSL 기본 버전을 2로 설정"></a>WSL 기본 버전을 2로 설정</h3><p>터미널(혹은 파워쉘)에서 다음 명령을 시행한다.</p>\n' +
    '<p>이걸 먼저 실행해야 이후로 설치되는 리눅스 시스템이 WSL 2를 기반으로 한다.</p>\n' +
    '<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-default</span><span class="token operator">-</span>version 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
    '\n' +
    '<h2 id="Ubuntu-설치"><a href="#Ubuntu-설치" class="headerlink" title="Ubuntu  설치"></a>Ubuntu  설치</h2><p>다시 <a href="https://www.microsoft.com/ko-kr/store/apps/windows">Store</a>에서 Ubuntu를\n' +
    '검색해서 설치 한다. (물론 우분투 말고 다른 리눅스 프로덕트를 선택해도 된다. 단지 내가\n' +
    'Ubuntu가 익숙해서 그렇다<del>고 하지만 어차피 터미널인데?</del>)</p>\n' +
    '<p><img src="/upload/2021/windows-store-ubuntu.jpg" alt="Windows Store Ubuntu 검색 결과"></p>\n' +
    '<p>하지만 이 놈은 어디까지나 &quot;배포&quot; 패키지이므로 설치 후 최초 실행해야 우분투 설치가 진행된다.\n' +
    '시간이 조금 걸리니 기다리자.</p>\n' +
    '<p>설치가 완료되면 다음과 같이 설치가 완료되었다는 메세지와 함께 웰컴 투 우분투가 노출된다</p>\n' +
    '<p><img src="/upload/2021/complete-install-ubuntu.jpg" alt="우분투 설치 완료 화면"></p>\n' +
    '<h3 id="터미널-기본-프로필-Ubuntu로-설정"><a href="#터미널-기본-프로필-Ubuntu로-설정" class="headerlink" title="터미널 기본 프로필 Ubuntu로 설정"></a>터미널 기본 프로필 Ubuntu로 설정</h3><p>터미널에서도 Ubuntu가 기본으로 실행되도록 터미널 기본 프로필을 WSL로 설정한다.</p>\n' +
    '<p>터미널에서 설정으로 들어가면 관련 json 파일이 열리는데, 여기서 <code>defaultProfile</code> 값을\n' +
    '<code>profiles.list</code> 에서 Ubuntu 것의 <code>guid</code> 값으로 수정하기만 하면 된다.</p>\n' +
    '<pre class="line-numbers language-json|data-line" data-language="json|data-line"><code class="language-json|data-line">&#123;\n' +
    '  &quot;defaultProfile&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,\n' +
    '  ...\n' +
    '  &quot;profiles&quot;:\n' +
    '    &#123;\n' +
    '      ...\n' +
    '      &quot;list&quot;:\n' +
    '      [\n' +
    '        ...\n' +
    '        &#123;\n' +
    '          &quot;guid&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,\n' +
    '          &quot;hidden&quot;: false,\n' +
    '          &quot;name&quot;: &quot;Ubuntu&quot;,\n' +
    '          &quot;source&quot;: &quot;Windows.Terminal.Wsl&quot;,\n' +
    '          &quot;colorScheme&quot;: &quot;Dark+&quot;,\n' +
    '          &quot;fontFace&quot;: &quot;Hack&quot;\n' +
    '        &#125;\n' +
    '      ]\n' +
    '    &#125;,\n' +
    '&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
    '\n' +
    '<h2 id="Git-zsh-설치"><a href="#Git-zsh-설치" class="headerlink" title="Git, zsh 설치"></a>Git, zsh 설치</h2><p>Ubuntu(WSL)를 실행하고, git과 zsh부터 설치한다.</p>\n' +
    '<p>일단 패키지 레파지토리 인덱스부터 업데이트 하고</p>\n' +
    '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
    '\n' +
    '<p>git과 zsh을 설치</p>\n' +
    '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span> <span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
    '\n' +
    '<h2 id="Oh-my-zsh-설치-및-구성"><a href="#Oh-my-zsh-설치-및-구성" class="headerlink" title="Oh my zsh 설치 및 구성"></a>Oh my zsh 설치 및 구성</h2><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><p>터미널에서 다음 명령을 실행하기만 하면 된다.</p>\n' +
    '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
    '\n' +
    '<p>설치가 완료되면 다음과 같은 메세지를 볼 수 있다.</p>\n' +
    '<p><img src="/upload/2021/complete-install-oh-my-zsh.jpg" alt="oh my zsh 설치 완료 화면"></p>\n' +
    '<h3 id="테마-구성"><a href="#테마-구성" class="headerlink" title="테마 구성"></a>테마 구성</h3><p>역시 처음 설치했드면 꾸미기가 먼저다!!! 테마부터 변경한다.</p>\n' +
    '<p>테마는 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">ohmyzsh github wiki</a>에서\n' +
    '마음에 드는 걸 선택하면 될 것 같다. 내 경우엔 많이 언급되는 <code>agnoster</code>를 쓰기로...</p>\n' +
    '<p><code>~/.zshrc</code> 파일을 열어 <code>ZSH_THEME</code> 항목의 값을 변경하기만 하면 된다.</p>\n' +
    '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
    '\n' +
    '<pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">ZSH_THEME</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">agnoster</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
    '\n' +
    '<p>참고로 <code>agnoster</code> 테마를 쓰려면 <a href="https://github.com/powerline/fonts">powerline font</a>를\n' +
    '써야 하는데, 내 경우엔 이미 Hack 폰트를 쓰고 있어서 별도로 설치하지 않고 터미널 설정에서\n' +
    '<code>profile.list</code>의 해당 항목에 fontFamily 값만 추가하여 해결했다.</p>\n' +
    '<pre class="line-numbers language-j'... 11610 more characters,
  path: [Getter],
  permalink: [Getter],
  full_source: [Getter],
  asset_dir: [Getter],
  tags: [Getter],
  categories: [Getter],
  prev: <ref *1> _Document {
    title: 'json-server에 사용자 인증 구현하기',
    thumbnail: '/upload/2021/thumbs/json-server-authentication.jpg',
    hero: '/upload/2021/json-server-authentication.jpg',
    seo: {
      description: '최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에\n' +
        '있어 시도해 봤던 방법을 기록으로 남겨본다.\n',
      image: '/upload/2021/json-server-authentication.jpg'
    },
    style: '.hero {\n' +
      '  &-wrapper {\n' +
      '    text-shadow:\n' +
      '      1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
      '      -1px -1px 1em rgba(20, 12, 24, 0.5);\n' +
      '  }\n' +
      '  &__image {\n' +
      '    opacity: 0.5;\n' +
      '    filter: blur(0.35em)\n' +
      '  }\n' +
      '}\n',
    date: Moment<2021-02-06T14:10:27+09:00>,
    _content: '\n' +
      '\n' +
      '최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에 있어\n' +
      '시도해 봤던 방법을 기록으로 남겨본다. (JSON server는 사용할 줄 안다는 가정하에서 포스팅한다.)\n' +
      '\n' +
      '내 경우엔 mock API 구현에 편의를 위해 [JSON server](https://github.com/typicode/json-server)를\n' +
      '사용해 왔는데, 역시 이를 베이스로 하고 JWT 관련 패키지를 추가하여 구현을 시도해봤다.\n' +
      '\n' +
      '## 추가 한 auth 관련 패키지\n' +
      '\n' +
      '- [json-server-auth](https://github.com/jeremyben/json-server-auth)\n' +
      '\n' +
      '  JSON server용으로 만들어진 JWT 인증 미들웨어다.\n' +
      '  다른 몇 가지 패키지들을 찾아보고 가장 간편하게 구축 가능하고 문서화가 잘 되어 있는 녀석을\n' +
      '  찾다보니 이 녀석으로 정착했다.\n' +
      '\n' +
      '- [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken)\n' +
      '\n' +
      '  패키지 이름 그대로 JWT의 구현체인데, JWT verifier가 필요해서 가져왔다 = _=a\n' +
      '\n' +
      '- [cors](https://github.com/expressjs/cors)\n' +
      '\n' +
      '  CORS 관련 설정을 위한 Express용 미들웨어로, HEADER를 조작하게 되면 pre-flight 요청을\n' +
      '  처리해야 하는데 여기서 CORS 문제가 발생되기 때문에 이를 해결하기 위해서 설치 했다.\n' +
      '\n' +
      '## 기본 설정\n' +
      '\n' +
      '사실 json-server-auth가 웬만한 것들은 알아서 처리해주고 있기 때문에 특별히 할 것은 없다.\n' +
      '\n' +
      '해당 매뉴얼을 참고해서 미리 정의 된 API 이름을 그대로 가져다 쓰기만 하면 JWT 발급부터 오류까지\n' +
      '알아서 처리해 준다. (참고로 이 토큰의 유효시간은 1시간이다)\n' +
      '\n' +
      '따라서, 해야 할 일이라고는 미리 정의 된 API 외 다른 이름을 쓰고 싶을 경우의 router rewrite,\n' +
      'CORS 설정 정도면 충분하다.\n' +
      '\n' +
      '설정 방법은 [express 공식문서](https://expressjs.com/en/resources/middleware/cors.html)를\n' +
      '참고했다.\n' +
      '\n' +
      '```javascript\n' +
      'const server = jsonServer.create();\n' +
      'const auth = require("json-server-auth");\n' +
      'const cors = require("cors");\n' +
      '\n' +
      '/**\n' +
      ' * 과제에선 GET, POST, DELETE만 필요했기 때문에\n' +
      ' * 3가지 method만 작성했고,\n' +
      ' * 어차피 mock api이고 local에서 구동되는 거라\n' +
      ' * origin을 all(*)로 설정했다.\n' +
      ' */\n' +
      'server.use(\n' +
      '  cors({\n' +
      '    origin: "*",\n' +
      '    preflightContinue: false,\n' +
      '    methods: "GET,POST,DELETE"\n' +
      '  })\n' +
      ');\n' +
      '/**\n' +
      ' * 모든 router에 대해 preflight 요청 활성화\n' +
      ' */\n' +
      'server.options("*", cors());\n' +
      '\n' +
      '// 중략\n' +
      '\n' +
      'server.use(auth);\n' +
      '```\n' +
      '\n' +
      '단지 이 기본 설정만으로 회원 가입, 로그인 시 JWT 발급이 가능하고 이후 클라이언트에서\n' +
      'API 호출 시 Authorization Header에 Bearer Token을 담아 던지기만 하면 된다.\n' +
      '\n' +
      '## users/me 구현\n' +
      '\n' +
      '그런데, json-server-auth는 회원 가입 혹은 로그인 시 accessToken만을 응답으로 내려주기\n' +
      '때문에 사용자를 식별할 방법이 없다.\n' +
      '\n' +
      '아쉽게도 이 부분은 직접 구현을 해야 하는 부분으로 보였다.\n' +
      '역시 대부분 생각하는게 비슷한지 동일한 니즈를 가진 유저의 질문이\n' +
      '[issue](https://github.com/jeremyben/json-server-auth/issues/12)로 등록되어 있었고\n' +
      '해당 issue를 참고해서 별도로 구현했다.\n' +
      '\n' +
      '```javascript\n' +
      '/**\n' +
      ' * JWT 검증을 위해 jsonwebtoken 모듈을 가져왔고,\n' +
      ' * JWT의 비밀키는 json-server-auth에서 가지고 있다\n' +
      ' */\n' +
      'const jwt = require("jsonwebtoken");\n' +
      'const JWT_SECRET_KEY = require("json-server-auth/dist/constants").JWT_SECRET_KEY;\n' +
      '\n' +
      '// 중략\n' +
      '\n' +
      'server.get(`/users/me`, auth, (req, res) => {\n' +
      '  const { authorization } = req.headers;\n' +
      '  if (!authorization) {\n' +
      '    res.status(401).jsonp("Missing authorization header");\n' +
      '    return;\n' +
      '  }\n' +
      '  const [scheme, token] = authorization.split(" ");\n' +
      '  if (scheme !== "Bearer") {\n' +
      '    res.status(401).jsonp("Incorrect authorization scheme");\n' +
      '    return;\n' +
      '  }\n' +
      '  if (!token) {\n' +
      '    res.status(401).jsonp("Missing token");\n' +
      '    return;\n' +
      '  }\n' +
      '\n' +
      '  try {\n' +
      '    const data = jwt.verify(token, JWT_SECRET_KEY);\n' +
      '    const { db } = req.app;\n' +
      '    // ... 은 그냥 나머지 property들\n' +
      '    const { id, email, ... } = db\n' +
      '      .get("users")\n' +
      '      .find({ email: data.email })\n' +
      '      .value();\n' +
      '    res.status(200).json({ id, email, ... });\n' +
      '  } catch (err) {\n' +
      '    res.status(401).jsonp(err.message);\n' +
      '  }\n' +
      '});\n' +
      '```\n' +
      '\n' +
      '이렇게 해서 사용자 정보를 내려주는 users/me API도 구현했다.\n' +
      '\n' +
      '생각보다 어렵지 않게 mock에서도 인증 구현이 되서 이후로도 요긴하게(?) 사용할 수 있을 것 같다.\n' +
      '\n' +
      '## 아쉬운 부분\n' +
      '\n' +
      'json-server-auth가 내부적으로 정확히 어떻게 동작하는지까지는 찾아보지 않았는데, mock api\n' +
      '구동 중에 post 등으로 발생된 리소스는 권한이 정상적으로 동작하는 반면, mock api가 구동 되기\n' +
      '전에 존재하는 리소스는 권한이 정상적으로 동작하지 않았다.\n' +
      '\n' +
      '즉, 생성한 유저만 조회가 가능한 리소스를 설정해두었을 때, 테스트 중 mock api를 내렸다가 다시\n' +
      '올리면 기존 리소스가 사라지는 것은 아니기 때문에 기존 것이 전체가 조회 가능한 권한이 되어버리는\n' +
      '문제가 발생하기는 하더라...\n' +
      '\n' +
      '그리고 또 한가지, mock API 작성과 동시에 swagger 문서를 만들었는데 swagger 사이트에 올려\n' +
      'API 테스트를 돌리려고 하면 토큰을 발급 받을 방법을 모르겠더라 = _=a\n' +
      '결국 Swagger 사이트에 올리면 인증 테스트를 할 수 없더라는... 쿨럭...\n' +
      '\n' +
      '물론 로컬에 swagger도 설치해서 구동하면 되기는 하지만, 협업 시에는 response에 관련 된\n' +
      'yml만 작성해 올리는 걸로 만족해야 하나 싶다.',
    source: '_posts/2021-02-06-implementing-authentication-with-json-server.md',
    raw: '---\n' +
      'title: json-server에 사용자 인증 구현하기\n' +
      'tags:\n' +
      '  - Authenticatoin\n' +
      '  - Authorization\n' +
      '  - Bearer Token\n' +
      '  - json-server\n' +
      '  - json-server-auth\n' +
      '  - mock api\n' +
      '  - JWT\n' +
      'categories:\n' +
      'thumbnail: /upload/2021/thumbs/json-server-authentication.jpg\n' +
      'hero: /upload/2021/json-server-authentication.jpg\n' +
      'seo:\n' +
      '  description: |\n' +
      '    최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에\n' +
      '    있어 시도해 봤던 방법을 기록으로 남겨본다.\n' +
      '  image: /upload/2021/json-server-authentication.jpg\n' +
      'style: |\n' +
      '  .hero {\n' +
      '    &-wrapper {\n' +
      '      text-shadow:\n' +
      '        1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
      '        -1px -1px 1em rgba(20, 12, 24, 0.5);\n' +
      '    }\n' +
      '    &__image {\n' +
      '      opacity: 0.5;\n' +
      '      filter: blur(0.35em)\n' +
      '    }\n' +
      '  }\n' +
      'date: 2021-02-06 14:10:27\n' +
      '---\n' +
      '\n' +
      '\n' +
      '최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에 있어\n' +
      '시도해 봤던 방법을 기록으로 남겨본다. (JSON server는 사용할 줄 안다는 가정하에서 포스팅한다.)\n' +
      '\n' +
      '내 경우엔 mock API 구현에 편의를 위해 [JSON server](https://github.com/typicode/json-server)를\n' +
      '사용해 왔는데, 역시 이를 베이스로 하고 JWT 관련 패키지를 추가하여 구현을 시도해봤다.\n' +
      '\n' +
      '## 추가 한 auth 관련 패키지\n' +
      '\n' +
      '- [json-server-auth](https://github.com/jeremyben/json-server-auth)\n' +
      '\n' +
      '  JSON server용으로 만들어진 JWT 인증 미들웨어다.\n' +
      '  다른 몇 가지 패키지들을 찾아보고 가장 간편하게 구축 가능하고 문서화가 잘 되어 있는 녀석을\n' +
      '  찾다보니 이 녀석으로 정착했다.\n' +
      '\n' +
      '- [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken)\n' +
      '\n' +
      '  패키지 이름 그대로 JWT의 구현체인데, JWT verifier가 필요해서 가져왔다 = _=a\n' +
      '\n' +
      '- [cors](https://github.com/expressjs/cors)\n' +
      '\n' +
      '  CORS 관련 설정을 위한 Express용 미들웨어로, HEADER를 조작하게 되면 pre-flight 요청을\n' +
      '  처리해야 하는데 여기서 CORS 문제가 발생되기 때문에 이를 해결하기 위해서 설치 했다.\n' +
      '\n' +
      '## 기본 설정\n' +
      '\n' +
      '사실 json-server-auth가 웬만한 것들은 알아서 처리해주고 있기 때문에 특별히 할 것은 없다.\n' +
      '\n' +
      '해당 매뉴얼을 참고해서 미리 정의 된 API 이름을 그대로 가져다 쓰기만 하면 JWT 발급부터 오류까지\n' +
      '알아서 처리해 준다. (참고로 이 토큰의 유효시간은 1시간이다)\n' +
      '\n' +
      '따라서, 해야 할 일이라고는 미리 정의 된 API 외 다른 이름을 쓰고 싶을 경우의 router rewrite,\n' +
      'CORS 설정 정도면 충분하다.\n' +
      '\n' +
      '설정 방법은 [express 공식문서](https://expressjs.com/en/resources/middleware/cors.html)를\n' +
      '참고했다.\n' +
      '\n' +
      '```javascript\n' +
      'const server = jsonServer.create();\n' +
      'const auth = require("json-server-auth");\n' +
      'const cors = require("cors");\n' +
      '\n' +
      '/**\n' +
      ' * 과제에선 GET, POST, DELETE만 필요했기 때문에\n' +
      ' * 3가지 method만 작성했고,\n' +
      ' * 어차피 mock api이고 local에서 구동되는 거라\n' +
      ' * origin을 all(*)로 설정했다.\n' +
      ' */\n' +
      'server.use(\n' +
      '  cors({\n' +
      '    origin: "*",\n' +
      '    preflightContinue: false,\n' +
      '    methods: "GET,POST,DELETE"\n' +
      '  })\n' +
      ');\n' +
      '/**\n' +
      ' * 모든 router에 대해 preflight 요청 활성화\n' +
      ' */\n' +
      'server.options("*", cors());\n' +
      '\n' +
      '// 중략\n' +
      '\n' +
      'server.use(auth);\n' +
      '```\n' +
      '\n' +
      '단지 이 기본 설정만으로 회원 가입, 로그인 시 JWT 발급이 가능하고 이후 클라이언트에서\n' +
      'API 호출 시 Authorization Header에 Bearer Token을 담아 던지기만 하면 된다.\n' +
      '\n' +
      '## users/me 구현\n' +
      '\n' +
      '그런데, json-server-auth는 회원 가입 혹은 로그인 시 accessToken만을 응답으로 내려주기\n' +
      '때문에 사용자를 식별할 방법이 없다.\n' +
      '\n' +
      '아쉽게도 이 부분은 직접 구현을 해야 하는 부분으로 보였다.\n' +
      '역시 대부분 생각하는게 비슷한지 동일한 니즈를 가진 유저의 질문이\n' +
      '[issue](https://github.com/jeremyben/json-server-auth/issues/12)로 등록되어 있었고\n' +
      '해당 issue를 참고해서 별도로 구현했다.\n' +
      '\n' +
      '```javascript\n' +
      '/**\n' +
      ' * JWT 검증을 위해 jsonwebtoken 모듈을 가져왔고,\n' +
      ' * JWT의 비밀키는 json-server-auth에서 가지고 있다\n' +
      ' */\n' +
      'const jwt = require("jsonwebtoken");\n' +
      'const JWT_SECRET_KEY = require("json-server-auth/dist/constants").JWT_SECRET_KEY;\n' +
      '\n' +
      '// 중략\n' +
      '\n' +
      'server.get(`/users/me`, auth, (req, res) => {\n' +
      '  const { authorization } = req.headers;\n' +
      '  if (!authorization) {\n' +
      '    res.status(401).jsonp("Missing authorization header");\n' +
      '    return;\n' +
      '  }\n' +
      '  const [scheme, token] = authorization.split(" ");\n' +
      '  if (scheme !== "Bearer") {\n' +
      '    res.status(401).jsonp("Incorrect authorization scheme");\n' +
      '    return;\n' +
      '  }\n' +
      '  if (!token) {\n' +
      '    res.status(401).jsonp("Missing token");\n' +
      '    return;\n' +
      '  }\n' +
      '\n' +
      '  try {\n' +
      '    const data = jwt.verify(token, JWT_SECRET_KEY);\n' +
      '    const { db } = req.app;\n' +
      '    // ... 은 그냥 나머지 property들\n' +
      '    const { id, email, ... } = db\n' +
      '      .get("users")\n' +
      '      .find({ email: data.email })\n' +
      '      .value();\n' +
      '    res.status(200).json({ id, email, ... });\n' +
      '  } catch (err) {\n' +
      '    res.status(401).jsonp(err.message);\n' +
      '  }\n' +
      '});\n' +
      '```\n' +
      '\n' +
      '이렇게 해서 사용자 정보를 내려주는 users/me API도 구현했다.\n' +
      '\n' +
      '생각보다 어렵지 않게 mock에서도 인증 구현이 되서 이후로도 요긴하게(?) 사용할 수 있을 것 같다.\n' +
      '\n' +
      '## 아쉬운 부분\n' +
      '\n' +
      'json-server-auth가 내부적으로 정확히 어떻게 동작하는지까지는 찾아보지 않았는데, mock api\n' +
      '구동 중에 post 등으로 발생된 리소스는 권한이 정상적으로 동작하는 반면, mock api가 구동 되기\n' +
      '전에 존재하는 리소스는 권한이 정상적으로 동작하지 않았다.\n' +
      '\n' +
      '즉, 생성한 유저만 조회가 가능한 리소스를 설정해두었을 때, 테스트 중 mock api를 내렸다가 다시\n' +
      '올리면 기존 리소스가 사라지는 것은 아니기 때문에 기존 것이 전체가 조회 가능한 권한이 되어버리는\n' +
      '문제가 발생하기는 하더라...\n' +
      '\n' +
      '그리고 또 한가지, mock API 작성과 동시에 swagger 문서를 만들었는데 swagger 사이트에 올려\n' +
      'API 테스트를 돌리려고 하면 토큰을 발급 받을 방법을 모르겠더라 = _=a\n' +
      '결국 Swagger 사이트에 올리면 인증 테스트를 할 수 없더라는... 쿨럭...\n' +
      '\n' +
      '물론 로컬에 swagger도 설치해서 구동하면 되기는 하지만, 협업 시에는 response에 관련 된\n' +
      'yml만 작성해 올리는 걸로 만족해야 하나 싶다.',
    slug: 'implementing-authentication-with-json-server',
    published: true,
    comments: true,
    layout: 'post',
    photos: [],
    link: '',
    _id: 'clcytfa4s00aftaww0wf8086s',
    content: '<p>최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에 있어\n' +
      '시도해 봤던 방법을 기록으로 남겨본다. (JSON server는 사용할 줄 안다는 가정하에서 포스팅한다.)</p>\n' +
      '<p>내 경우엔 mock API 구현에 편의를 위해 <a href="https://github.com/typicode/json-server">JSON server</a>를\n' +
      '사용해 왔는데, 역시 이를 베이스로 하고 JWT 관련 패키지를 추가하여 구현을 시도해봤다.</p>\n' +
      '<h2 id="추가-한-auth-관련-패키지"><a href="#추가-한-auth-관련-패키지" class="headerlink" title="추가 한 auth 관련 패키지"></a>추가 한 auth 관련 패키지</h2><ul>\n' +
      '<li><p><a href="https://github.com/jeremyben/json-server-auth">json-server-auth</a></p>\n' +
      '<p>JSON server용으로 만들어진 JWT 인증 미들웨어다.\n' +
      '다른 몇 가지 패키지들을 찾아보고 가장 간편하게 구축 가능하고 문서화가 잘 되어 있는 녀석을\n' +
      '찾다보니 이 녀석으로 정착했다.</p>\n' +
      '</li>\n' +
      '<li><p><a href="https://www.npmjs.com/package/jsonwebtoken">jsonwebtoken</a></p>\n' +
      '<p>패키지 이름 그대로 JWT의 구현체인데, JWT verifier가 필요해서 가져왔다 &#x3D; _&#x3D;a</p>\n' +
      '</li>\n' +
      '<li><p><a href="https://github.com/expressjs/cors">cors</a></p>\n' +
      '<p>CORS 관련 설정을 위한 Express용 미들웨어로, HEADER를 조작하게 되면 pre-flight 요청을\n' +
      '처리해야 하는데 여기서 CORS 문제가 발생되기 때문에 이를 해결하기 위해서 설치 했다.</p>\n' +
      '</li>\n' +
      '</ul>\n' +
      '<h2 id="기본-설정"><a href="#기본-설정" class="headerlink" title="기본 설정"></a>기본 설정</h2><p>사실 json-server-auth가 웬만한 것들은 알아서 처리해주고 있기 때문에 특별히 할 것은 없다.</p>\n' +
      '<p>해당 매뉴얼을 참고해서 미리 정의 된 API 이름을 그대로 가져다 쓰기만 하면 JWT 발급부터 오류까지\n' +
      '알아서 처리해 준다. (참고로 이 토큰의 유효시간은 1시간이다)</p>\n' +
      '<p>따라서, 해야 할 일이라고는 미리 정의 된 API 외 다른 이름을 쓰고 싶을 경우의 router rewrite,\n' +
      'CORS 설정 정도면 충분하다.</p>\n' +
      '<p>설정 방법은 <a href="https://expressjs.com/en/resources/middleware/cors.html">express 공식문서</a>를\n' +
      '참고했다.</p>\n' +
      '<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> server <span class="token operator">=</span> jsonServer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '<span class="token keyword">const</span> auth <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"json-server-auth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '<span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '\n' +
      '<span class="token comment">/**\n' +
      ' * 과제에선 GET, POST, DELETE만 필요했기 때문에\n' +
      ' * 3가지 method만 작성했고,\n' +
      ' * 어차피 mock api이고 local에서 구동되는 거라\n' +
      ' * origin을 all(*)로 설정했다.\n' +
      ' */</span>\n' +
      'server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n' +
      '  <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n' +
      '    <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>\n' +
      '    <span class="token literal-property property">preflightContinue</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n' +
      '    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token string">"GET,POST,DELETE"</span>\n' +
      '  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n' +
      '<span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '<span class="token comment">/**\n' +
      ' * 모든 router에 대해 preflight 요청 활성화\n' +
      ' */</span>\n' +
      'server<span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '\n' +
      '<span class="token comment">// 중략</span>\n' +
      '\n' +
      'server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>단지 이 기본 설정만으로 회원 가입, 로그인 시 JWT 발급이 가능하고 이후 클라이언트에서\n' +
      'API 호출 시 Authorization Header에 Bearer Token을 담아 던지기만 하면 된다.</p>\n' +
      '<h2 id="users-x2F-me-구현"><a href="#users-x2F-me-구현" class="headerlink" title="users&#x2F;me 구현"></a>users&#x2F;me 구현</h2><p>그런데, json-server-auth는 회원 가입 혹은 로그인 시 accessToken만을 응답으로 내려주기\n' +
      '때문에 사용자를 식별할 방법이 없다.</p>\n' +
      '<p>아쉽게도 이 부분은 직접 구현을 해야 하는 부분으로 보였다.\n' +
      '역시 대부분 생각하는게 비슷한지 동일한 니즈를 가진 유저의 질문이\n' +
      '<a href="https://github.com/jeremyben/json-server-auth/issues/12">issue</a>로 등록되어 있었고\n' +
      '해당 issue를 참고해서 별도로 구현했다.</p>\n' +
      '<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**\n' +
      ' * JWT 검증을 위해 jsonwebtoken 모듈을 가져왔고,\n' +
      ' * JWT의 비밀키는 json-server-auth에서 가지고 있다\n' +
      ' */</span>\n' +
      '<span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"jsonwebtoken"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '<span class="token keyword">const</span> <span class="token constant">JWT_SECRET_KEY</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"json-server-auth/dist/constants"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token constant">JWT_SECRET_KEY</span><span class="token punctuation">;</span>\n' +
      '\n' +
      '<span class="token comment">// 중략</span>\n' +
      '\n' +
      'server<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/users/me</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> auth<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n' +
      '  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> authorization <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>\n' +
      '  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>authorization<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
      '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Missing authorization header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '    <span class="token keyword">return</span><span class="token punctuation">;</span>\n' +
      '  <span class="token punctuation">&#125;</span>\n' +
      '  <span class="token keyword">const</span> <span class="token punctuation">[</span>scheme<span class="token punctuation">,</span> token<span class="token punctuation">]</span> <span class="token operator">=</span> authorization<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '  <span class="token keyword">if</span> <span class="token punctuation">(</span>scheme <span class="token operator">!==</span> <span class="token string">"Bearer"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
      '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Incorrect authorization scheme"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '    <span class="token keyword">return</span><span class="token punctuation">;</span>\n' +
      '  <span class="token punctuation">&#125;</span>\n' +
      '  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
      '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Missing token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '    <span class="token keyword">return</span><span class="token punctuation'... 4794 more characters,
    site: { data: [Object] },
    excerpt: '',
    more: '<p>최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에 있어\n' +
      '시도해 봤던 방법을 기록으로 남겨본다. (JSON server는 사용할 줄 안다는 가정하에서 포스팅한다.)</p>\n' +
      '<p>내 경우엔 mock API 구현에 편의를 위해 <a href="https://github.com/typicode/json-server">JSON server</a>를\n' +
      '사용해 왔는데, 역시 이를 베이스로 하고 JWT 관련 패키지를 추가하여 구현을 시도해봤다.</p>\n' +
      '<h2 id="추가-한-auth-관련-패키지"><a href="#추가-한-auth-관련-패키지" class="headerlink" title="추가 한 auth 관련 패키지"></a>추가 한 auth 관련 패키지</h2><ul>\n' +
      '<li><p><a href="https://github.com/jeremyben/json-server-auth">json-server-auth</a></p>\n' +
      '<p>JSON server용으로 만들어진 JWT 인증 미들웨어다.\n' +
      '다른 몇 가지 패키지들을 찾아보고 가장 간편하게 구축 가능하고 문서화가 잘 되어 있는 녀석을\n' +
      '찾다보니 이 녀석으로 정착했다.</p>\n' +
      '</li>\n' +
      '<li><p><a href="https://www.npmjs.com/package/jsonwebtoken">jsonwebtoken</a></p>\n' +
      '<p>패키지 이름 그대로 JWT의 구현체인데, JWT verifier가 필요해서 가져왔다 &#x3D; _&#x3D;a</p>\n' +
      '</li>\n' +
      '<li><p><a href="https://github.com/expressjs/cors">cors</a></p>\n' +
      '<p>CORS 관련 설정을 위한 Express용 미들웨어로, HEADER를 조작하게 되면 pre-flight 요청을\n' +
      '처리해야 하는데 여기서 CORS 문제가 발생되기 때문에 이를 해결하기 위해서 설치 했다.</p>\n' +
      '</li>\n' +
      '</ul>\n' +
      '<h2 id="기본-설정"><a href="#기본-설정" class="headerlink" title="기본 설정"></a>기본 설정</h2><p>사실 json-server-auth가 웬만한 것들은 알아서 처리해주고 있기 때문에 특별히 할 것은 없다.</p>\n' +
      '<p>해당 매뉴얼을 참고해서 미리 정의 된 API 이름을 그대로 가져다 쓰기만 하면 JWT 발급부터 오류까지\n' +
      '알아서 처리해 준다. (참고로 이 토큰의 유효시간은 1시간이다)</p>\n' +
      '<p>따라서, 해야 할 일이라고는 미리 정의 된 API 외 다른 이름을 쓰고 싶을 경우의 router rewrite,\n' +
      'CORS 설정 정도면 충분하다.</p>\n' +
      '<p>설정 방법은 <a href="https://expressjs.com/en/resources/middleware/cors.html">express 공식문서</a>를\n' +
      '참고했다.</p>\n' +
      '<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> server <span class="token operator">=</span> jsonServer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '<span class="token keyword">const</span> auth <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"json-server-auth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '<span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '\n' +
      '<span class="token comment">/**\n' +
      ' * 과제에선 GET, POST, DELETE만 필요했기 때문에\n' +
      ' * 3가지 method만 작성했고,\n' +
      ' * 어차피 mock api이고 local에서 구동되는 거라\n' +
      ' * origin을 all(*)로 설정했다.\n' +
      ' */</span>\n' +
      'server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n' +
      '  <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n' +
      '    <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>\n' +
      '    <span class="token literal-property property">preflightContinue</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n' +
      '    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token string">"GET,POST,DELETE"</span>\n' +
      '  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n' +
      '<span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '<span class="token comment">/**\n' +
      ' * 모든 router에 대해 preflight 요청 활성화\n' +
      ' */</span>\n' +
      'server<span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '\n' +
      '<span class="token comment">// 중략</span>\n' +
      '\n' +
      'server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>단지 이 기본 설정만으로 회원 가입, 로그인 시 JWT 발급이 가능하고 이후 클라이언트에서\n' +
      'API 호출 시 Authorization Header에 Bearer Token을 담아 던지기만 하면 된다.</p>\n' +
      '<h2 id="users-x2F-me-구현"><a href="#users-x2F-me-구현" class="headerlink" title="users&#x2F;me 구현"></a>users&#x2F;me 구현</h2><p>그런데, json-server-auth는 회원 가입 혹은 로그인 시 accessToken만을 응답으로 내려주기\n' +
      '때문에 사용자를 식별할 방법이 없다.</p>\n' +
      '<p>아쉽게도 이 부분은 직접 구현을 해야 하는 부분으로 보였다.\n' +
      '역시 대부분 생각하는게 비슷한지 동일한 니즈를 가진 유저의 질문이\n' +
      '<a href="https://github.com/jeremyben/json-server-auth/issues/12">issue</a>로 등록되어 있었고\n' +
      '해당 issue를 참고해서 별도로 구현했다.</p>\n' +
      '<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**\n' +
      ' * JWT 검증을 위해 jsonwebtoken 모듈을 가져왔고,\n' +
      ' * JWT의 비밀키는 json-server-auth에서 가지고 있다\n' +
      ' */</span>\n' +
      '<span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"jsonwebtoken"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '<span class="token keyword">const</span> <span class="token constant">JWT_SECRET_KEY</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"json-server-auth/dist/constants"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token constant">JWT_SECRET_KEY</span><span class="token punctuation">;</span>\n' +
      '\n' +
      '<span class="token comment">// 중략</span>\n' +
      '\n' +
      'server<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/users/me</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> auth<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n' +
      '  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> authorization <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>\n' +
      '  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>authorization<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
      '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Missing authorization header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '    <span class="token keyword">return</span><span class="token punctuation">;</span>\n' +
      '  <span class="token punctuation">&#125;</span>\n' +
      '  <span class="token keyword">const</span> <span class="token punctuation">[</span>scheme<span class="token punctuation">,</span> token<span class="token punctuation">]</span> <span class="token operator">=</span> authorization<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '  <span class="token keyword">if</span> <span class="token punctuation">(</span>scheme <span class="token operator">!==</span> <span class="token string">"Bearer"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
      '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Incorrect authorization scheme"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '    <span class="token keyword">return</span><span class="token punctuation">;</span>\n' +
      '  <span class="token punctuation">&#125;</span>\n' +
      '  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
      '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Missing token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
      '    <span class="token keyword">return</span><span class="token punctuation'... 4794 more characters,
    path: [Getter],
    permalink: [Getter],
    full_source: [Getter],
    asset_dir: [Getter],
    tags: [Getter],
    categories: [Getter],
    prev: _Document {
      title: 'Atomic Design + Storybook 적용 후기',
      thumbnail: '/upload/2021/thumbs/atomic-storybook-vue.jpg',
      hero: null,
      seo: [Object],
      style: '.hero {\n' +
        '  &-wrapper {\n' +
        '    text-shadow:\n' +
        '      1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
        '      -1px -1px 1em rgba(20, 12, 24, 0.5);\n' +
        '  }\n' +
        '  &__image {\n' +
        '    opacity: 0.5\n' +
        '  }\n' +
        '}\n',
      date: Moment<2021-03-03T23:42:14+09:00>,
      _content: '\n' +
        '\n' +
        'ㄱ사에서 프로덕트를 만들며 [atomic design](https://atomicdesign.bradfrost.com/chapter-2/)을\n' +
        '적용하고 [storybook](https://storybook.js.org/)을 토대로 디자인 시스템을 구축해보기로\n' +
        '했다. 프로젝트 진행 초기에는 디자이너도 동의하는 부분이었지만 제대로 진행되지 못했고 결국\n' +
        '디자인 시스템을 구축하는 것은 실패로 돌아갔다.\n' +
        '\n' +
        '실패에 대한 이유와 적용 경험으로 얻은 것들을 풀어보고자 한다.\n' +
        '참고로 atomic design이나 storybook이 무엇인지는 글에 포함 시키지 않는다. 내가 글을 쓰는\n' +
        '것보다는 이미 좋은 글들이 많으니까 😁\n' +
        '\n' +
        '## 적용기\n' +
        '\n' +
        '### 실패 경험\n' +
        '\n' +
        '앞서 언급한 것처럼 입사 초 디자이너와 이야기 할 때에는storybook을 통한 디자인 시스템 구축에\n' +
        '대한 합의 점이 있었고, 이를 위해서 그 동안 관심을 가지고 있었던 atomic design을 본격적으로\n' +
        '적용해보기로 했었다.\n' +
        '\n' +
        '언제나 처음이 어렵듯이 처음 적용해 본 atomic design과 storybook은 제법 쉽지 않았다.\n' +
        '사실 당시의 storybook 버전과 Vue가 궁합이 안 맞아도 너무 안 맞았었기 때문에 발생되는 이슈가\n' +
        '많았던 것...\n' +
        '\n' +
        '하지만 이 문제를 미뤄두어도 일단 디자인 시스템 구축과 storybook 도입은 실패로 돌아 갔다.\n' +
        '\n' +
        '#### 일정 상의 문제\n' +
        '\n' +
        '일단은 개발 일정 상의 문제가 가장 크게 작용되었다.\n' +
        '\n' +
        '디자인 시스템을 구축하자면 디자이너와 긴밀하게 이야기가 진행되어야 하는데 도무지 그럴 시간적\n' +
        '여유가 없었다. 그도 그럴 것이 내가 입사한 4월부터 디자인 작업이 시작되었는데, 8월을 오픈\n' +
        '시점으로 둔 상태에서 7월에야 디자인이 나왔고 그마저도 계속 일부분은 완료되지 않고 미확정\n' +
        '상태로 진행되었다.\n' +
        '\n' +
        '디자인이 진행되고 있던 초기에는 Vue와 storybook을 통합하느라 시간을 보내고, API도 완료된\n' +
        '디자인 화면을 기준으로 만들고 있었으니 뒤로 갈 수록 개발 시간이 부족했고, 더구나 최초 예상\n' +
        '범위는 시간이 흐를 수록 점점 덩어리가 커져 가더니 MVP가 아니라 그냥 커다란 덩어리가 되어\n' +
        '버리는 통에 개발에만 시간을 쏟아도 모자를 지경이 되어버렸다. (실제로 일정 상에 문제가\n' +
        '생기기도 했다)\n' +
        '\n' +
        '#### 디자이너의 컴포넌트 단위에 대한 이해 부족\n' +
        '\n' +
        '두 번째 문제는 디자이너의 컴포넌트 단위에 대한 이해가 부족하다는 거였다. (어쩌면\n' +
        '커뮤니케이션의 문제일 수도 있다.)\n' +
        '\n' +
        '벡터 툴을 가지고 포토샵처럼 쓰는 것도 문제였지만, 예를 들어 버튼 컴포넌트의 경우 분명 같은\n' +
        '버튼 컴포넌트인데 동일한 스타일을 가지고 있지 않다. 가장 많게는 border-radius 사이즈가 너무\n' +
        '다양하게 나타났고, 종종 font-size나 font-weight가 차이가 났다.\n' +
        '\n' +
        '물론 디자이너의 눈에 이 페이지에서는 이렇게 보이는 게 이쁘다가 나올 수는 있다고 생각한다.\n' +
        '하지만 만들어야 하는 프로덕트는 아트웍이나 각각 개별 페이지 전자 인쇄물이 아니라, 여러\n' +
        '페이지로 구성되어 있는 하나의 웹사이트, 하나의 웹 어플리케이션이고 특히 컴포넌트 관점의 개발\n' +
        '도구를 사용하는 환경에서 개별 컴포넌트의 베리에이션 기준이 명확하지 않으면 전부 하드코딩해야\n' +
        '한다는 것이 된다.\n' +
        '\n' +
        '또한, 이 프로젝트에서는 디자인 변수를 미리 잡아두고 시작했는데 — 글꼴 크기 세트, 컬러 세트\n' +
        '등, 전달 받은 디자인 상에서 계속 사전 정의된 컬러 이름이 나오다가 갑자기 헥스 코드나 rgb(a)\n' +
        '값이 나타나서 확인해 보면 정의 된 값 이외의 것들이었다.\n' +
        '\n' +
        '문제는 이러한 것들이 적지 않게 튀어 나왔다는 것이고, 이미 color set을 정의해 둔 상태에서\n' +
        '어디에도 끼우기가 너무 어렵고 (그레이 색상을 12단계로 설정해 두었는데 갑자기 그 사이 어딘가의\n' +
        '값이 툭...), 해당 컬러 값이 얼마나 자주 사용 되는 지, 또 다른 어딘가의 사이 값이 추가로\n' +
        '존재하는지 확인 하려면 불필요하게 소비되는 리소스가 너무 많이 들어간다는 거였다.\n' +
        '\n' +
        '이러한 잦은 예상 외의 베리에이션이 나타나면서 하드 코딩이 잦게 발생되고, 결국은 CSS 규격화는\n' +
        '점점 물 건너 가며 template이나 organism 단위에서 CSS를 override하는 지저분한 상황이 연출\n' +
        '되기도 했다. (심하게는 시안 상에는 button 컴포넌트를 가져다 그려 놓았으나 실제는 체크 박스\n' +
        '기능인 것도 있었다.)\n' +
        '\n' +
        '어찌보면 커뮤니케이션이 원활하지 않았기 때문에 이 부분에 대한 협의가 이루어지지 않은 것도\n' +
        '있겠지만, 경험 상 퍼블리셔로서 일할 때부터 늘 디자이너와 겪는 마찰 부분이기도 하다.\n' +
        '\n' +
        '#### Nuxt와 Storybook의 궁합 문제\n' +
        '\n' +
        '세 번째 문제는 nuxt와 (당시의) storybook이 서로 궁합이 안 맞아도 너무 안 맞는다는 거였다.\n' +
        '\n' +
        'storybook에서 왜 오류가 나지?, 왜 안되지? 하고 구글링 해보면 issue로 등록되어 있거나\n' +
        'storybook 문제라는 stackoverflow의 답변들을 쉽게 발견할 수 있었다.\n' +
        '\n' +
        '본래는 온갖 해외 자료들을 뒤져가며 해결했던 그 모든 방법들을 포스팅 해보려고 했었는데, 어느\n' +
        '정도 바쁜 것들이 정리되고 본격적으로 포스팅을 시작해보기 위해 한 단계 한 단계 다시 사례를\n' +
        '만들려고 하니 버전업과 함께 해결되어 버려서 ㅋㅋㅋ (그래서 이슈 해결 보다는\n' +
        'nuxt-storybook으로 통합하는 것과 수동으로 한 땀 한 땀 통합하는 방법을 비교해서 올렸었다.)\n' +
        '\n' +
        '가장 짜증(?) 났던 것 중 하나가 mdx 포맷과 addon과 vue의 통합이 거지 같았... (addon-docs와\n' +
        'controls와 vue와 mdx가 만나면... 하하하...) 지금은 mdx를 이용해 넘나 잘 쓰고 있다.\n' +
        '\n' +
        '그리고 다른 개인 작업에서 storybook과 pug를 통합해보고 있다(읭?)\n' +
        '\n' +
        '### 재 시도\n' +
        '\n' +
        '작년 11월 IAT 세미나를 준비하면서 시연에 필요한 페이지를 Vue로 만들면서 다시 적용해봤다.\n' +
        '\n' +
        '이미 storybook 버전업으로 통합이 잘 되었고, 자잘한 버그 등의 이슈도 있었지만 다행히\n' +
        'github을 통해 issue로 등록할 때마다 nuxt-storybook 커뮤니티에서 빠르게 대응해줘서 금방\n' +
        '처리되었다.\n' +
        '\n' +
        '거기에 이직을 진행하는 과정에서 사전 과제가 나올 때마다 atomic design 방법론을 적용해서\n' +
        '만들면서 계속해서 storybook을 적용해갔고, 덕분에 이전 회사에서 완성하지 못했던 디자인\n' +
        '시스템을 page 단위까지 구축해볼 수 있었다. (뭐 그렇다고 잘 구축했다는 건 아니다. 그냥 해\n' +
        '봤다고...)\n' +
        '\n' +
        '그리고 현재는 hexo 블로그 테마를 새로 제작하면서 storybook + pug를 시도해보고 있다. (응??)\n' +
        '\n' +
        '## 실패를 피하려면,\n' +
        '\n' +
        '실패해보고 개인적으로 끝까지 storybook을 간소하게(?) 만들어보고 나니 드는 생각이, 컴포넌트\n' +
        '관점에서의 디자인 시스템 도입에 실패를 피하려면,\n' +
        '\n' +
        '- 일단 일정이 많이 들어갈 소지가 높다는 것을 염두해 두어야 하고\n' +
        '- 디자이너의 역할이 상당히 필요한 듯 하다,\n' +
        '\n' +
        '  구체적으로 이야기 해보면, 디자이너가 컴포넌트 관점에서의 개발이라는 컨셉을 이해하고 있어야\n' +
        '  하고 베리에이션의 기준을 명확히 할 수 있어야 할 것 같다.\n' +
        '  디자인부터 atom, molecule, organism 등에 대한 이해를 바탕으로 각 컴포넌트가 설계되고\n' +
        '  규격화 되어야 갈아엎고 다시 만들어야 할까 고민하는 상황이 없을 것 같다.\n' +
        '\n' +
        '- 컴포넌트를 어떻게 그룹핑하고 분류할 것인지, 서로 유기적으로 엮여야하는 인터랙션이 있다면\n' +
        '  어떻게 조합해서 이벤트 처리를 어떻게 할 것인지 등을 잘 고려해 두어야, 조립하다가\n' +
        '  재그룹핑하고 재분류하는 일을 줄일 수 있겠더라 (아, 이건 어쩔 수 없는 숙명이려나...)\n' +
        '  사실 이 부분은 지금도 만들어 볼 때마다 반복 중인 것 같기도 하다.\n' +
        '\n' +
        '## 고민 포인트\n' +
        '\n' +
        'atomic design과 storybook을 적용해가면서 몇 가지 고민 되는 포인트가 있었는데,\n' +
        '\n' +
        '첫째는 이걸 atom으로 두어야 하는가 molecule로 두어야 하는가의 고민이었다.\n' +
        '\n' +
        '한 예로 텍스트 필드 컴포넌트를 만드는데 참고한 UI Kit에서는 텍스트 필드에 항상 레이블과\n' +
        '오류 메세지가 함께 존재했고, 이 세 가지 요소 — 레이블, 입력 상자, 오류 메세지를 최소 단위로\n' +
        '보고 atom으로 두는 것이 적절할지, 아니면 아토믹 디자인에서 설명하는 텍스트 그대로 HTML\n' +
        '엘리먼트 단위를 atom으로 보고 컴포넌트는 molecule로 두어야 하는가의 고민이 반복될 수 밖에\n' +
        '없었다. (해당 UI Kit에서는 각 구성 요소가 분리된 더 작은 컴포넌트가 없었기 때문에 그 묶음을\n' +
        '최소 단위로 간주해서 atom으로 두는 걸 최종적으로 선택했다.)\n' +
        '\n' +
        '둘째는 Vue에서 이벤트 핸들링을 할 때는 `emit`을 사용해서 커스텀 이벤트를 상위 컴포넌트로\n' +
        '올려서 처리하는 방식을 권장하고 있는데, 이게 코드를 너무 지저분하게 만드는 듯한 느낌을 지우기\n' +
        '어려웠다. 더불어  Vue devtools에서도 한 번의 액션에 컴포넌트 중첩 수준 만큼에 해당하는\n' +
        '로그가 연달아 발생하니 추적 자체에도 제법 많은 시간을 써야 했다. 내 경우엔\n' +
        '[이벤트 핸들러를 props로 내려주는 방식](https://mulder21c.github.io/2021/01/24/pass-function-as-props-in-vue/)을\n' +
        '선택했는데, 이를 안티 패턴으로 보는 블로그 게시글도 있어서 다소 찜찜한 기분은 남아있다.\n' +
        '\n' +
        '셋째는 Vuex의 사용이었는데, atomic design의 컨셉 상 실제 데이터가 page 단위에서 바인딩\n' +
        '되는 형태를 따르다보니 atom, molecule, organism, template 단위에서는 Vuex 바인딩을\n' +
        '피하는 쪽으로 만들어야해서 적지 않게 props가 발생되는 느낌도 있었고, 때로는 너무 과하게\n' +
        '제한하는 건 아닐까 하는 생각도 들기도 했다. (하지만 내가 깊게 이해하지 못할 경우에는 우선\n' +
        '명세 같은 것을 최대한 존중하자는 주의라... 일단은 page에서만 Vuex에 접근하는 쪽을 유지하고\n' +
        '있다.)\n' +
        '\n' +
        '넷째는 앞서 "실패를 피하려면"에서도 마지막에 언급했던 것이지만, 어떤 컴포넌트를 조합하다 보면\n' +
        '어떻게 그룹핑 하고 어떻게 분류할 것인가가 계속 고민의 연속이 된다.\n' +
        '\n' +
        '예를 들어, modal dialog를 만드는데 dialog 껍데기와 닫기 버튼을 하나의 컴포넌트로 두고,\n' +
        'dialog 콘텐츠를 slot으로 처리해서 다른 컴포넌트가 slot으로 삽입되는 구조로 만들었는데 초점\n' +
        '관리에서 문제가 되어 버렸다. tab sequence가 양쪽 컴포넌트에 걸쳐 있다 보니 focus trap을\n' +
        '만들어야 하는데 이벤트 관리를 어떻게...\n' +
        '이리 저리 컴포넌트를 재그룹핑 해봐도 해결책이 보이지 않아 결국은 modal dialog 쪽에서\n' +
        'tabbable 엘리먼트들을 DOM에서 직접 가져와서 처리하는 방식으로 해결해두기는 했는데 인터랙션에\n' +
        '의한 컴포넌트 간의 상호작용을 고려했을 때 컴포넌트가 이렇게 두는 게 맞는지 계속 고민이다.\n' +
        '\n' +
        '다섯째는 내가 아직 Storybook을 어떻게 활용할 수 있는가에 대한 경험치 부족과 지식\n' +
        '부족이겠지만, docs와 story를 어떻게 구성해야 하는가다...\n' +
        '\n' +
        '현재는 생각 나는 대로 구성해보고 있지만, 썩 마음에 드는 건 아니다.\n' +
        '다른 기업들은 어떻게 생각하고 고민해서 어떤 방향으로 만들고 있는지, 어떻게 했더니 어떤 점이\n' +
        '어려웠었는지 이야기를 심도 있게 들어보고 싶다 ㅠㅠ\n' +
        '\n' +
        '## 어려웠던 점\n' +
        '\n' +
        '일단, 레퍼런스가 생각보다 많지 않았다.\n' +
        '다른 기업의 기술 블로그를 통해서 결과물의 일부분을 살짝 맛을 볼 수는 있는데, 결과물만 보는\n' +
        '것이지 과정을 보는 것이 아니다보니 어떤 목적과 목표를 가지고 어떻게 고민해서 만들어 왔는지의\n' +
        '여정을 보거나, 어떻게 하는 것이 모범 사례인지를 알기가 어렵다.\n' +
        '그냥 계속 남의 것을 염탐(?)하고 과정을 추측해 보는 방법 밖에는 없는걸까? 😥😥\n' +
        '\n' +
        '또, storybook이 기본적으로 react를 사용하고 있어서 그런지 다소 Vue에는 궁합이 부족한 부분이\n' +
        '더러 있고, 이걸 해결할 다른 방법을 찾는 게 쉽지 않다.\n' +
        '일례로 storybook의 소스 코드 뷰어가 react 문법을 기반으로 보여주기 때문에 실제로 보여주고\n' +
        '싶은 Vue 문법이 아니라서 이걸 별도로 보여줄 방법을 찾아야 하는가 혹은 그냥 둘 것인가 등의\n' +
        '고민 포인트가 생기고 해결은 당연히(?) 쉽지 않다. (내가 할 수 있는 건 github 이슈에 질문을\n' +
        '남기는 것 뿐...)\n' +
        '\n' +
        '더구나 주변에 이거 쓰는 사람 찾기가 어렵... 나란 놈은 인맥이 왜 이 모냥인거지...\n' +
        '\n' +
        '## 좋았던 점\n' +
        '\n' +
        '- 우선, atomic design의 컨셉 상 page 단위에 이르러서야 데이터가 바인딩 되기 때문에\n' +
        '  외부로부터 주입받아야 하는 데이터에 의존적이지 않은 컴포넌트 구현이 이루어지고 따라서\n' +
        '  재사용성이 매우 높아졌다.\n' +
        '  물론 반대로 이야기 하면, 그만큼 확장성과 추상성에 대한 고민을 해야 하고 생각 이상으로(?)\n' +
        '  수 많은 props가 탄생하기도... 쿨럭...\n' +
        '\n' +
        '- storybook이 있으니 컴포넌트에 어떤 props가 필수였는지 값에 대한 제한 사항은 무엇인지\n' +
        '  코드 레벨에서 확인하지 않아도 되니 편하더라.\n' +
        '  단지 한 쪽 브라우저에 storybook을 띄워 놓기만 하면 찾는 건 금방이니 코드를 보고 인식하는\n' +
        '  것보다 더 직관적이고 빠르다. (아, 물론 문서를 잘 작성했을 때의 이야기...)\n' +
        '\n' +
        '  그러고 보니, storybook이 jsdoc를 통한 유추가 좀 더 잘 되었으면 싶다. 내가 아직 몰라서\n' +
        '  그런 것일 수도 있지만, storybook + vue에서 props에 대한 문서화가 jsdoc으로는 이루어지지\n' +
        '  않는 것 같다. 이것만 잘 되어도 문서화가 코드 레벨에서 많이 정리 될 수 있을 거 같은데...\n' +
        '  (아, 오히려 컴포넌트 코드가 더 지저분해 보일 수도 있으니 별도 문서로 빼는 게 나을 수도\n' +
        '  있겠다는 생각도 들기도 한다.)\n' +
        '\n' +
        '- 내가 가진 기술 부채 중 한 가지가 TDD다. 그래서 컴포넌트에 대한 테스트가 다소 우려 사항\n' +
        '  중의 하나인데, storybook이 그 우려를 조금이나마 완화시켜 주고 있다.\n' +
        '\n' +
        '  storybook이 없을 때에는 한 개 컴포넌트만 렌더링 시켜서 확인하기에는 다소 불편해서 페이지\n' +
        '  단위에서 확인했었는데, storybook 이후로는 개별 컴포넌트 별로 바로 확인이 가능하니 적어도\n' +
        '  props나 event 처리에 대한 오류를 빨리 줄일 수 있었다.\n' +
        '\n' +
        '- storybook에는 다양한 addon들이 존재하는데 viewport(responsive), a11y, dark mode,\n' +
        '  zeplin&middot;figma viewer embedding 등과 같은 것들은 꽤나 도움이 될 만한 것들이라고\n' +
        '  생각된다.\n' +
        '  접근성에 지대한(?) 관심을 가지고 있는 나로서는 addon-a11y는 컴포넌트 단위부터 접근성에\n' +
        '  대한 정량 평가를 직관적으로 확인 할 수 있어 좋다고 생각한다.\n',
      source: '_posts/2021-03-03-comment-for-using-atomic-design-and-storybook.md',
      raw: '---\n' +
        'title: Atomic Design + Storybook 적용 후기\n' +
        'tags:\n' +
        '  - Atomic Design\n' +
        '  - Storybook\n' +
        '  - Design System\n' +
        'categories:\n' +
        '  - 개발노트\n' +
        '  - Front-End\n' +
        'thumbnail: /upload/2021/thumbs/atomic-storybook-vue.jpg\n' +
        'hero:\n' +
        'seo:\n' +
        '  description: |\n' +
        '    atomic design을 적용하고 storybook을 토대로 디자인 시스템을 구축해보며 실패 했던\n' +
        '    이유와 적용 경험으로 얻은 것들을 풀어보고자 한다.\n' +
        '  image: /upload/2021/atomic-storybook-vue.jpg\n' +
        'style: |\n' +
        '  .hero {\n' +
        '    &-wrapper {\n' +
        '      text-shadow:\n' +
        '        1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
        '        -1px -1px 1em rgba(20, 12, 24, 0.5);\n' +
        '    }\n' +
        '    &__image {\n' +
        '      opacity: 0.5\n' +
        '    }\n' +
        '  }\n' +
        'date: 2021-03-03 23:42:14\n' +
        '---\n' +
        '\n' +
        '\n' +
        'ㄱ사에서 프로덕트를 만들며 [atomic design](https://atomicdesign.bradfrost.com/chapter-2/)을\n' +
        '적용하고 [storybook](https://storybook.js.org/)을 토대로 디자인 시스템을 구축해보기로\n' +
        '했다. 프로젝트 진행 초기에는 디자이너도 동의하는 부분이었지만 제대로 진행되지 못했고 결국\n' +
        '디자인 시스템을 구축하는 것은 실패로 돌아갔다.\n' +
        '\n' +
        '실패에 대한 이유와 적용 경험으로 얻은 것들을 풀어보고자 한다.\n' +
        '참고로 atomic design이나 storybook이 무엇인지는 글에 포함 시키지 않는다. 내가 글을 쓰는\n' +
        '것보다는 이미 좋은 글들이 많으니까 😁\n' +
        '\n' +
        '## 적용기\n' +
        '\n' +
        '### 실패 경험\n' +
        '\n' +
        '앞서 언급한 것처럼 입사 초 디자이너와 이야기 할 때에는storybook을 통한 디자인 시스템 구축에\n' +
        '대한 합의 점이 있었고, 이를 위해서 그 동안 관심을 가지고 있었던 atomic design을 본격적으로\n' +
        '적용해보기로 했었다.\n' +
        '\n' +
        '언제나 처음이 어렵듯이 처음 적용해 본 atomic design과 storybook은 제법 쉽지 않았다.\n' +
        '사실 당시의 storybook 버전과 Vue가 궁합이 안 맞아도 너무 안 맞았었기 때문에 발생되는 이슈가\n' +
        '많았던 것...\n' +
        '\n' +
        '하지만 이 문제를 미뤄두어도 일단 디자인 시스템 구축과 storybook 도입은 실패로 돌아 갔다.\n' +
        '\n' +
        '#### 일정 상의 문제\n' +
        '\n' +
        '일단은 개발 일정 상의 문제가 가장 크게 작용되었다.\n' +
        '\n' +
        '디자인 시스템을 구축하자면 디자이너와 긴밀하게 이야기가 진행되어야 하는데 도무지 그럴 시간적\n' +
        '여유가 없었다. 그도 그럴 것이 내가 입사한 4월부터 디자인 작업이 시작되었는데, 8월을 오픈\n' +
        '시점으로 둔 상태에서 7월에야 디자인이 나왔고 그마저도 계속 일부분은 완료되지 않고 미확정\n' +
        '상태로 진행되었다.\n' +
        '\n' +
        '디자인이 진행되고 있던 초기에는 Vue와 storybook을 통합하느라 시간을 보내고, API도 완료된\n' +
        '디자인 화면을 기준으로 만들고 있었으니 뒤로 갈 수록 개발 시간이 부족했고, 더구나 최초 예상\n' +
        '범위는 시간이 흐를 수록 점점 덩어리가 커져 가더니 MVP가 아니라 그냥 커다란 덩어리가 되어\n' +
        '버리는 통에 개발에만 시간을 쏟아도 모자를 지경이 되어버렸다. (실제로 일정 상에 문제가\n' +
        '생기기도 했다)\n' +
        '\n' +
        '#### 디자이너의 컴포넌트 단위에 대한 이해 부족\n' +
        '\n' +
        '두 번째 문제는 디자이너의 컴포넌트 단위에 대한 이해가 부족하다는 거였다. (어쩌면\n' +
        '커뮤니케이션의 문제일 수도 있다.)\n' +
        '\n' +
        '벡터 툴을 가지고 포토샵처럼 쓰는 것도 문제였지만, 예를 들어 버튼 컴포넌트의 경우 분명 같은\n' +
        '버튼 컴포넌트인데 동일한 스타일을 가지고 있지 않다. 가장 많게는 border-radius 사이즈가 너무\n' +
        '다양하게 나타났고, 종종 font-size나 font-weight가 차이가 났다.\n' +
        '\n' +
        '물론 디자이너의 눈에 이 페이지에서는 이렇게 보이는 게 이쁘다가 나올 수는 있다고 생각한다.\n' +
        '하지만 만들어야 하는 프로덕트는 아트웍이나 각각 개별 페이지 전자 인쇄물이 아니라, 여러\n' +
        '페이지로 구성되어 있는 하나의 웹사이트, 하나의 웹 어플리케이션이고 특히 컴포넌트 관점의 개발\n' +
        '도구를 사용하는 환경에서 개별 컴포넌트의 베리에이션 기준이 명확하지 않으면 전부 하드코딩해야\n' +
        '한다는 것이 된다.\n' +
        '\n' +
        '또한, 이 프로젝트에서는 디자인 변수를 미리 잡아두고 시작했는데 — 글꼴 크기 세트, 컬러 세트\n' +
        '등, 전달 받은 디자인 상에서 계속 사전 정의된 컬러 이름이 나오다가 갑자기 헥스 코드나 rgb(a)\n' +
        '값이 나타나서 확인해 보면 정의 된 값 이외의 것들이었다.\n' +
        '\n' +
        '문제는 이러한 것들이 적지 않게 튀어 나왔다는 것이고, 이미 color set을 정의해 둔 상태에서\n' +
        '어디에도 끼우기가 너무 어렵고 (그레이 색상을 12단계로 설정해 두었는데 갑자기 그 사이 어딘가의\n' +
        '값이 툭...), 해당 컬러 값이 얼마나 자주 사용 되는 지, 또 다른 어딘가의 사이 값이 추가로\n' +
        '존재하는지 확인 하려면 불필요하게 소비되는 리소스가 너무 많이 들어간다는 거였다.\n' +
        '\n' +
        '이러한 잦은 예상 외의 베리에이션이 나타나면서 하드 코딩이 잦게 발생되고, 결국은 CSS 규격화는\n' +
        '점점 물 건너 가며 template이나 organism 단위에서 CSS를 override하는 지저분한 상황이 연출\n' +
        '되기도 했다. (심하게는 시안 상에는 button 컴포넌트를 가져다 그려 놓았으나 실제는 체크 박스\n' +
        '기능인 것도 있었다.)\n' +
        '\n' +
        '어찌보면 커뮤니케이션이 원활하지 않았기 때문에 이 부분에 대한 협의가 이루어지지 않은 것도\n' +
        '있겠지만, 경험 상 퍼블리셔로서 일할 때부터 늘 디자이너와 겪는 마찰 부분이기도 하다.\n' +
        '\n' +
        '#### Nuxt와 Storybook의 궁합 문제\n' +
        '\n' +
        '세 번째 문제는 nuxt와 (당시의) storybook이 서로 궁합이 안 맞아도 너무 안 맞는다는 거였다.\n' +
        '\n' +
        'storybook에서 왜 오류가 나지?, 왜 안되지? 하고 구글링 해보면 issue로 등록되어 있거나\n' +
        'storybook 문제라는 stackoverflow의 답변들을 쉽게 발견할 수 있었다.\n' +
        '\n' +
        '본래는 온갖 해외 자료들을 뒤져가며 해결했던 그 모든 방법들을 포스팅 해보려고 했었는데, 어느\n' +
        '정도 바쁜 것들이 정리되고 본격적으로 포스팅을 시작해보기 위해 한 단계 한 단계 다시 사례를\n' +
        '만들려고 하니 버전업과 함께 해결되어 버려서 ㅋㅋㅋ (그래서 이슈 해결 보다는\n' +
        'nuxt-storybook으로 통합하는 것과 수동으로 한 땀 한 땀 통합하는 방법을 비교해서 올렸었다.)\n' +
        '\n' +
        '가장 짜증(?) 났던 것 중 하나가 mdx 포맷과 addon과 vue의 통합이 거지 같았... (addon-docs와\n' +
        'controls와 vue와 mdx가 만나면... 하하하...) 지금은 mdx를 이용해 넘나 잘 쓰고 있다.\n' +
        '\n' +
        '그리고 다른 개인 작업에서 storybook과 pug를 통합해보고 있다(읭?)\n' +
        '\n' +
        '### 재 시도\n' +
        '\n' +
        '작년 11월 IAT 세미나를 준비하면서 시연에 필요한 페이지를 Vue로 만들면서 다시 적용해봤다.\n' +
        '\n' +
        '이미 storybook 버전업으로 통합이 잘 되었고, 자잘한 버그 등의 이슈도 있었지만 다행히\n' +
        'github을 통해 issue로 등록할 때마다 nuxt-storybook 커뮤니티에서 빠르게 대응해줘서 금방\n' +
        '처리되었다.\n' +
        '\n' +
        '거기에 이직을 진행하는 과정에서 사전 과제가 나올 때마다 atomic design 방법론을 적용해서\n' +
        '만들면서 계속해서 storybook을 적용해갔고, 덕분에 이전 회사에서 완성하지 못했던 디자인\n' +
        '시스템을 page 단위까지 구축해볼 수 있었다. (뭐 그렇다고 잘 구축했다는 건 아니다. 그냥 해\n' +
        '봤다고...)\n' +
        '\n' +
        '그리고 현재는 hexo 블로그 테마를 새로 제작하면서 storybook + pug를 시도해보고 있다. (응??)\n' +
        '\n' +
        '## 실패를 피하려면,\n' +
        '\n' +
        '실패해보고 개인적으로 끝까지 storybook을 간소하게(?) 만들어보고 나니 드는 생각이, 컴포넌트\n' +
        '관점에서의 디자인 시스템 도입에 실패를 피하려면,\n' +
        '\n' +
        '- 일단 일정이 많이 들어갈 소지가 높다는 것을 염두해 두어야 하고\n' +
        '- 디자이너의 역할이 상당히 필요한 듯 하다,\n' +
        '\n' +
        '  구체적으로 이야기 해보면, 디자이너가 컴포넌트 관점에서의 개발이라는 컨셉을 이해하고 있어야\n' +
        '  하고 베리에이션의 기준을 명확히 할 수 있어야 할 것 같다.\n' +
        '  디자인부터 atom, molecule, organism 등에 대한 이해를 바탕으로 각 컴포넌트가 설계되고\n' +
        '  규격화 되어야 갈아엎고 다시 만들어야 할까 고민하는 상황이 없을 것 같다.\n' +
        '\n' +
        '- 컴포넌트를 어떻게 그룹핑하고 분류할 것인지, 서로 유기적으로 엮여야하는 인터랙션이 있다면\n' +
        '  어떻게 조합해서 이벤트 처리를 어떻게 할 것인지 등을 잘 고려해 두어야, 조립하다가\n' +
        '  재그룹핑하고 재분류하는 일을 줄일 수 있겠더라 (아, 이건 어쩔 수 없는 숙명이려나...)\n' +
        '  사실 이 부분은 지금도 만들어 볼 때마다 반복 중인 것 같기도 하다.\n' +
        '\n' +
        '## 고민 포인트\n' +
        '\n' +
        'atomic design과 storybook을 적용해가면서 몇 가지 고민 되는 포인트가 있었는데,\n' +
        '\n' +
        '첫째는 이걸 atom으로 두어야 하는가 molecule로 두어야 하는가의 고민이었다.\n' +
        '\n' +
        '한 예로 텍스트 필드 컴포넌트를 만드는데 참고한 UI Kit에서는 텍스트 필드에 항상 레이블과\n' +
        '오류 메세지가 함께 존재했고, 이 세 가지 요소 — 레이블, 입력 상자, 오류 메세지를 최소 단위로\n' +
        '보고 atom으로 두는 것이 적절할지, 아니면 아토믹 디자인에서 설명하는 텍스트 그대로 HTML\n' +
        '엘리먼트 단위를 atom으로 보고 컴포넌트는 molecule로 두어야 하는가의 고민이 반복될 수 밖에\n' +
        '없었다. (해당 UI Kit에서는 각 구성 요소가 분리된 더 작은 컴포넌트가 없었기 때문에 그 묶음을\n' +
        '최소 단위로 간주해서 atom으로 두는 걸 최종적으로 선택했다.)\n' +
        '\n' +
        '둘째는 Vue에서 이벤트 핸들링을 할 때는 `emit`을 사용해서 커스텀 이벤트를 상위 컴포넌트로\n' +
        '올려서 처리하는 방식을 권장하고 있는데, 이게 코드를 너무 지저분하게 만드는 듯한 느낌을 지우기\n' +
        '어려웠다. 더불어  Vue devtools에서도 한 번의 액션에 컴포넌트 중첩 수준 만큼에 해당하는\n' +
        '로그가 연달아 발생하니 추적 자체에도 제법 많은 시간을 써야 했다. 내 경우엔\n' +
        '[이벤트 핸들러를 props로 내려주는 방식](https://mulder21c.github.io/2021/01/24/pass-function-as-props-in-vue/)을\n' +
        '선택했는데, 이를 안티 패턴으로 보는 블로그 게시글도 있어서 다소 찜찜한 기분은 남아있다.\n' +
        '\n' +
        '셋째는 Vuex의 사용이었는데, atomic design의 컨셉 상 실제 데이터가 page 단위에서 바인딩\n' +
        '되는 형태를 따르다보니 atom, molecule, organism, template 단위에서는 Vuex 바인딩을\n' +
        '피하는 쪽으로 만들어야해서 적지 않게 props가 발생되는 느낌도 있었고, 때로는 너무 과하게\n' +
        '제한하는 건 아닐까 하는 생각도 들기도 했다. (하지만 내가 깊게 이해하지 못할 경우에는 우선\n' +
        '명세 같은 것을 최대한 존중하자는 주의라... 일단은 page에서만 Vuex에 접근하는 쪽을 유지하고\n' +
        '있다.)\n' +
        '\n' +
        '넷째는 앞서 "실패를 피하려면"에서도 마지막에 언급했던 것이지만, 어떤 컴포넌트를 조합하다 보면\n' +
        '어떻게 그룹핑 하고 어떻게 분류할 것인가가 계속 고민의 연속이 된다.\n' +
        '\n' +
        '예를 들어, modal dialog를 만드는데 dialog 껍데기와 닫기 버튼을 하나의 컴포넌트로 두고,\n' +
        'dialog 콘텐츠를 slot으로 처리해서 다른 컴포넌트가 slot으로 삽입되는 구조로 만들었는데 초점\n' +
        '관리에서 문제가 되어 버렸다. tab sequence가 양쪽 컴포넌트에 걸쳐 있다 보니 focus trap을\n' +
        '만들어야 하는데 이벤트 관리를 어떻게...\n' +
        '이리 저리 컴포넌트를 재그룹핑 해봐도 해결책이 보이지 않아 결국은 modal dialog 쪽에서\n' +
        'tabbable 엘리먼트들을 DOM에서 직접 가져와서 처리하는 방식으로 해결해두기는 했는데 인터랙션에\n' +
        '의한 컴포넌트 간의 상호작용을 고려했을 때 컴포넌트가 이렇게 두는 게 맞는지 계속 고민이다.\n' +
        '\n' +
        '다섯째는 내가 아직 Storybook을 어떻게 활용할 수 있는가에 대한 경험치 부족과 지식\n' +
        '부족이겠지만, docs와 story를 어떻게 구성해야 하는가다...\n' +
        '\n' +
        '현재는 생각 나는 대로 구성해보고 있지만, 썩 마음에 드는 건 아니다.\n' +
        '다른 기업들은 어떻게 생각하고 고민해서 어떤 방향으로 만들고 있는지, 어떻게 했더니 어떤 점이\n' +
        '어려웠었는지 이야기를 심도 있게 들어보고 싶다 ㅠㅠ\n' +
        '\n' +
        '## 어려웠던 점\n' +
        '\n' +
        '일단, 레퍼런스가 생각보다 많지 않았다.\n' +
        '다른 기업의 기술 블로그를 통해서 결과물의 일부분을 살짝 맛을 볼 수는 있는데, 결과물만 보는\n' +
        '것이지 과정을 보는 것이 아니다보니 어떤 목적과 목표를 가지고 어떻게 고민해서 만들어 왔는지의\n' +
        '여정을 보거나, 어떻게 하는 것이 모범 사례인지를 알기가 어렵다.\n' +
        '그냥 계속 남의 것을 염탐(?)하고 과정을 추측해 보는 방법 밖에는 없는걸까? 😥😥\n' +
        '\n' +
        '또, storybook이 기본적으로 react를 사용하고 있어서 그런지 다소 Vue에는 궁합이 부족한 부분이\n' +
        '더러 있고, 이걸 해결할 다른 방법을 찾는 게 쉽지 않다.\n' +
        '일례로 storybook의 소스 코드 뷰어가 react 문법을 기반으로 보여주기 때문에 실제로 보여주고\n' +
        '싶은 Vue 문법이 아니라서 이걸 별도로 보여줄 방법을 찾아야 하는가 혹은 그냥 둘 것인가 등의\n' +
        '고민 포인트가 생기고 해결은 당연히(?) 쉽지 않다. (내가 할 수 있는 건 github 이슈에 질문을\n' +
        '남기는 것 뿐...)\n' +
        '\n' +
        '더구나 주변에 이거 쓰는 사람 찾기가 어렵... 나란 놈은 인맥이 왜 이 모냥인거지...\n' +
        '\n' +
        '## 좋았던 점\n' +
        '\n' +
        '- 우선, atomic design의 컨셉 상 page 단위에 이르러서야 데이터가 바인딩 되기 때문에\n' +
        '  외부로부터 주입받아야 하는 데이터에 의존적이지 않은 컴포넌트 구현이 이루어지고 따라서\n' +
        '  재사용성이 매우 높아졌다.\n' +
        '  물론 반대로 이야기 하면, 그만큼 확장성과 추상성에 대한 고민을 해야 하고 생각 이상으로(?)\n' +
        '  수 많은 props가 탄생하기도... 쿨럭...\n' +
        '\n' +
        '- storybook이 있으니 컴포넌트에 어떤 props가 필수였는지 값에 대한 제한 사항은 무엇인지\n' +
        '  코드 레벨에서 확인하지 않아도 되니 편하더라.\n' +
        '  단지 한 쪽 브라우저에 storybook을 띄워 놓기만 하면 찾는 건 금방이니 코드를 보고 인식하는\n' +
        '  것보다 더 직관적이고 빠르다. (아, 물론 문서를 잘 작성했을 때의 이야기...)\n' +
        '\n' +
        '  그러고 보니, storybook이 jsdoc를 통한 유추가 좀 더 잘 되었으면 싶다. 내가 아직 몰라서\n' +
        '  그런 것일 수도 있지만, storybook + vue에서 props에 대한 문서화가 jsdoc으로는 이루어지지\n' +
        '  않는 것 같다. 이것만 잘 되어도 문서화가 코드 레벨에서 많이 정리 될 수 있을 거 같은데...\n' +
        '  (아, 오히려 컴포넌트 코드가 더 지저분해 보일 수도 있으니 별도 문서로 빼는 게 나을 수도\n' +
        '  있겠다는 생각도 들기도 한다.)\n' +
        '\n' +
        '- 내가 가진 기술 부채 중 한 가지가 TDD다. 그래서 컴포넌트에 대한 테스트가 다소 우려 사항\n' +
        '  중의 하나인데, storybook이 그 우려를 조금이나마 완화시켜 주고 있다.\n' +
        '\n' +
        '  storybook이 없을 때에는 한 개 컴포넌트만 렌더링 시켜서 확인하기에는 다소 불편해서 페이지\n' +
        '  단위에서 확인했었는데, storybook 이후로는 개별 컴포넌트 별로 바로 확인이 가능하니 적어도\n' +
        '  props나 event 처리에 대한 오류를 빨리 줄일 수 있었다.\n' +
        '\n' +
        '- storybook에는 다양한 addon들이 존재하는데 viewport(responsive), a11y, dark mode,\n' +
        '  zeplin&middot;figma viewer embedding 등과 같은 것들은 꽤나 도움이 될 만한 것들이라고\n' +
        '  생각된다.\n' +
        '  접근성에 지대한(?) 관심을 가지고 있는 나로서는 addon-a11y는 컴포넌트 단위부터 접근성에\n' +
        '  대한 정량 평가를 직관적으로 확인 할 수 있어 좋다고 생각한다.\n',
      slug: 'comment-for-using-atomic-design-and-storybook',
      published: true,
      comments: true,
      layout: 'post',
      photos: [],
      link: '',
      _id: 'clcytfa4s00ahtaww4hn4g74d',
      content: '<p>ㄱ사에서 프로덕트를 만들며 <a href="https://atomicdesign.bradfrost.com/chapter-2/">atomic design</a>을\n' +
        '적용하고 <a href="https://storybook.js.org/">storybook</a>을 토대로 디자인 시스템을 구축해보기로\n' +
        '했다. 프로젝트 진행 초기에는 디자이너도 동의하는 부분이었지만 제대로 진행되지 못했고 결국\n' +
        '디자인 시스템을 구축하는 것은 실패로 돌아갔다.</p>\n' +
        '<p>실패에 대한 이유와 적용 경험으로 얻은 것들을 풀어보고자 한다.\n' +
        '참고로 atomic design이나 storybook이 무엇인지는 글에 포함 시키지 않는다. 내가 글을 쓰는\n' +
        '것보다는 이미 좋은 글들이 많으니까 😁</p>\n' +
        '<h2 id="적용기"><a href="#적용기" class="headerlink" title="적용기"></a>적용기</h2><h3 id="실패-경험"><a href="#실패-경험" class="headerlink" title="실패 경험"></a>실패 경험</h3><p>앞서 언급한 것처럼 입사 초 디자이너와 이야기 할 때에는storybook을 통한 디자인 시스템 구축에\n' +
        '대한 합의 점이 있었고, 이를 위해서 그 동안 관심을 가지고 있었던 atomic design을 본격적으로\n' +
        '적용해보기로 했었다.</p>\n' +
        '<p>언제나 처음이 어렵듯이 처음 적용해 본 atomic design과 storybook은 제법 쉽지 않았다.\n' +
        '사실 당시의 storybook 버전과 Vue가 궁합이 안 맞아도 너무 안 맞았었기 때문에 발생되는 이슈가\n' +
        '많았던 것...</p>\n' +
        '<p>하지만 이 문제를 미뤄두어도 일단 디자인 시스템 구축과 storybook 도입은 실패로 돌아 갔다.</p>\n' +
        '<h4 id="일정-상의-문제"><a href="#일정-상의-문제" class="headerlink" title="일정 상의 문제"></a>일정 상의 문제</h4><p>일단은 개발 일정 상의 문제가 가장 크게 작용되었다.</p>\n' +
        '<p>디자인 시스템을 구축하자면 디자이너와 긴밀하게 이야기가 진행되어야 하는데 도무지 그럴 시간적\n' +
        '여유가 없었다. 그도 그럴 것이 내가 입사한 4월부터 디자인 작업이 시작되었는데, 8월을 오픈\n' +
        '시점으로 둔 상태에서 7월에야 디자인이 나왔고 그마저도 계속 일부분은 완료되지 않고 미확정\n' +
        '상태로 진행되었다.</p>\n' +
        '<p>디자인이 진행되고 있던 초기에는 Vue와 storybook을 통합하느라 시간을 보내고, API도 완료된\n' +
        '디자인 화면을 기준으로 만들고 있었으니 뒤로 갈 수록 개발 시간이 부족했고, 더구나 최초 예상\n' +
        '범위는 시간이 흐를 수록 점점 덩어리가 커져 가더니 MVP가 아니라 그냥 커다란 덩어리가 되어\n' +
        '버리는 통에 개발에만 시간을 쏟아도 모자를 지경이 되어버렸다. (실제로 일정 상에 문제가\n' +
        '생기기도 했다)</p>\n' +
        '<h4 id="디자이너의-컴포넌트-단위에-대한-이해-부족"><a href="#디자이너의-컴포넌트-단위에-대한-이해-부족" class="headerlink" title="디자이너의 컴포넌트 단위에 대한 이해 부족"></a>디자이너의 컴포넌트 단위에 대한 이해 부족</h4><p>두 번째 문제는 디자이너의 컴포넌트 단위에 대한 이해가 부족하다는 거였다. (어쩌면\n' +
        '커뮤니케이션의 문제일 수도 있다.)</p>\n' +
        '<p>벡터 툴을 가지고 포토샵처럼 쓰는 것도 문제였지만, 예를 들어 버튼 컴포넌트의 경우 분명 같은\n' +
        '버튼 컴포넌트인데 동일한 스타일을 가지고 있지 않다. 가장 많게는 border-radius 사이즈가 너무\n' +
        '다양하게 나타났고, 종종 font-size나 font-weight가 차이가 났다.</p>\n' +
        '<p>물론 디자이너의 눈에 이 페이지에서는 이렇게 보이는 게 이쁘다가 나올 수는 있다고 생각한다.\n' +
        '하지만 만들어야 하는 프로덕트는 아트웍이나 각각 개별 페이지 전자 인쇄물이 아니라, 여러\n' +
        '페이지로 구성되어 있는 하나의 웹사이트, 하나의 웹 어플리케이션이고 특히 컴포넌트 관점의 개발\n' +
        '도구를 사용하는 환경에서 개별 컴포넌트의 베리에이션 기준이 명확하지 않으면 전부 하드코딩해야\n' +
        '한다는 것이 된다.</p>\n' +
        '<p>또한, 이 프로젝트에서는 디자인 변수를 미리 잡아두고 시작했는데 — 글꼴 크기 세트, 컬러 세트\n' +
        '등, 전달 받은 디자인 상에서 계속 사전 정의된 컬러 이름이 나오다가 갑자기 헥스 코드나 rgb(a)\n' +
        '값이 나타나서 확인해 보면 정의 된 값 이외의 것들이었다.</p>\n' +
        '<p>문제는 이러한 것들이 적지 않게 튀어 나왔다는 것이고, 이미 color set을 정의해 둔 상태에서\n' +
        '어디에도 끼우기가 너무 어렵고 (그레이 색상을 12단계로 설정해 두었는데 갑자기 그 사이 어딘가의\n' +
        '값이 툭...), 해당 컬러 값이 얼마나 자주 사용 되는 지, 또 다른 어딘가의 사이 값이 추가로\n' +
        '존재하는지 확인 하려면 불필요하게 소비되는 리소스가 너무 많이 들어간다는 거였다.</p>\n' +
        '<p>이러한 잦은 예상 외의 베리에이션이 나타나면서 하드 코딩이 잦게 발생되고, 결국은 CSS 규격화는\n' +
        '점점 물 건너 가며 template이나 organism 단위에서 CSS를 override하는 지저분한 상황이 연출\n' +
        '되기도 했다. (심하게는 시안 상에는 button 컴포넌트를 가져다 그려 놓았으나 실제는 체크 박스\n' +
        '기능인 것도 있었다.)</p>\n' +
        '<p>어찌보면 커뮤니케이션이 원활하지 않았기 때문에 이 부분에 대한 협의가 이루어지지 않은 것도\n' +
        '있겠지만, 경험 상 퍼블리셔로서 일할 때부터 늘 디자이너와 겪는 마찰 부분이기도 하다.</p>\n' +
        '<h4 id="Nuxt와-Storybook의-궁합-문제"><a href="#Nuxt와-Storybook의-궁합-문제" class="headerlink" title="Nuxt와 Storybook의 궁합 문제"></a>Nuxt와 Storybook의 궁합 문제</h4><p>세 번째 문제는 nuxt와 (당시의) storybook이 서로 궁합이 안 맞아도 너무 안 맞는다는 거였다.</p>\n' +
        '<p>storybook에서 왜 오류가 나지?, 왜 안되지? 하고 구글링 해보면 issue로 등록되어 있거나\n' +
        'storybook 문제라는 stackoverflow의 답변들을 쉽게 발견할 수 있었다.</p>\n' +
        '<p>본래는 온갖 해외 자료들을 뒤져가며 해결했던 그 모든 방법들을 포스팅 해보려고 했었는데, 어느\n' +
        '정도 바쁜 것들이 정리되고 본격적으로 포스팅을 시작해보기 위해 한 단계 한 단계 다시 사례를\n' +
        '만들려고 하니 버전업과 함께 해결되어 버려서 ㅋㅋㅋ (그래서 이슈 해결 보다는\n' +
        'nuxt-storybook으로 통합하는 것과 수동으로 한 땀 한 땀 통합하는 방법을 비교해서 올렸었다.)</p>\n' +
        '<p>가장 짜증(?) 났던 것 중 하나가 mdx 포맷과 addon과 vue의 통합이 거지 같았... (addon-docs와\n' +
        'controls와 vue와 mdx가 만나면... 하하하...) 지금은 mdx를 이용해 넘나 잘 쓰고 있다.</p>\n' +
        '<p>그리고 다른 개인 작업에서 storybook과 pug를 통합해보고 있다(읭?)</p>\n' +
        '<h3 id="재-시도"><a href="#재-시도" class="headerlink" title="재 시도"></a>재 시도</h3><p>작년 11월 IAT 세미나를 준비하면서 시연에 필요한 페이지를 Vue로 만들면서 다시 적용해봤다.</p>\n' +
        '<p>이미 storybook 버전업으로 통합이 잘 되었고, 자잘한 버그 등의 이슈도 있었지만 다행히\n' +
        'github을 통해 issue로 등록할 때마다 nuxt-storybook 커뮤니티에서 빠르게 대응해줘서 금방\n' +
        '처리되었다.</p>\n' +
        '<p>거기에 이직을 진행하는 과정에서 사전 과제가 나올 때마다 atomic design 방법론을 적용해서\n' +
        '만들면서 계속해서 storybook을 적용해갔고, 덕분에 이전 회사에서 완성하지 못했던 디자인\n' +
        '시스템을 page 단위까지 구축해볼 수 있었다. (뭐 그렇다고 잘 구축했다는 건 아니다. 그냥 해\n' +
        '봤다고...)</p>\n' +
        '<p>그리고 현재는 hexo 블로그 테마를 새로 제작하면서 storybook + pug를 시도해보고 있다. (응??)</p>\n' +
        '<h2 id="실패를-피하려면"><a href="#실패를-피하려면" class="headerlink" title="실패를 피하려면,"></a>실패를 피하려면,</h2><p>실패해보고 개인적으로 끝까지 storybook을 간소하게(?) 만들어보고 나니 드는 생각이, 컴포넌트\n' +
        '관점에서의 디자인 시스템 도입에 실패를 피하려면,</p>\n' +
        '<ul>\n' +
        '<li><p>일단 일정이 많이 들어갈 소지가 높다는 것을 염두해 두어야 하고</p>\n' +
        '</li>\n' +
        '<li><p>디자이너의 역할이 상당히 필요한 듯 하다,</p>\n' +
        '<p>구체적으로 이야기 해보면, 디자이너가 컴포넌트 관점에서의 개발이라는 컨셉을 이해하고 있어야\n' +
        '하고 베리에이션의 기준을 명확히 할 수 있어야 할 것 같다.\n' +
        '디자인부터 atom, molecule, organism 등에 대한 이해를 바탕으로 각 컴포넌트가 설계되고\n' +
        '규격화 되어야 갈아엎고 다시 만들어야 할까 고민하는 상황이 없을 것 같다.</p>\n' +
        '</li>\n' +
        '<li><p>컴포넌트를 어떻게 그룹핑하고 분류할 것인지, 서로 유기적으로 엮여야하는 인터랙션이 있다면\n' +
        '어떻게 조합해서 이벤트 처리를 어떻게 할 것인지 등을 잘 고려해 두어야, 조립하다가\n' +
        '재그룹핑하고 재분류하는 일을 줄일 수 있겠더라 (아, 이건 어쩔 수 없는 숙명이려나...)\n' +
        '사실 이 부분은 지금도 만들어 볼 때마다 반복 중인 것 같기도 하다.</p>\n' +
        '</li>\n' +
        '</ul>\n' +
        '<h2 id="고민-포인트"><a href="#고민-포인트" class="headerlink" title="고민 포인트"></a>고민 포인트</h2><p>atomic design과 storybook을 적용해가면서 몇 가지 고민 되는 포인트가 있었는데,</p>\n' +
        '<p>첫째는 이걸 atom으로 두어야 하는가 molecule로 두어야 하는가의 고민이었다.</p>\n' +
        '<p>한 예로 텍스트 필드 컴포넌트를 만드는데 참고한 UI Kit에서는 텍스트 필드에 항상 레이블과\n' +
        '오류 메세지가 함께 존재했고, 이 세 가지 요소 — 레이블, 입력 상자, 오류 메세지를 최소 단위로\n' +
        '보고 atom으로 두는 것이 적절할지, 아니면 아토믹 디자인에서 설명하는 텍스트 그대로 HTML\n' +
        '엘리먼트 단위를 atom으로 보고 컴포넌트는 molecule로 두어야 하는가의 고민이 반복될 수 밖에\n' +
        '없었다. (해당 UI Kit에서는 각 구성 요소가 분리된 더 작은 컴포넌트가 없었기 때문에 그 묶음을\n' +
        '최소 단위로 간주해서 atom으로 두는 걸 최종적으로 선택했다.)</p>\n' +
        '<p>둘째는 Vue에서 이벤트 핸들링을 할 때는 <code>emit</code>을 사용해서 커스텀 이벤트를 상위 컴포넌트로\n' +
        '올려서 처리하는 방식을 권장하고 있는데, 이게 코드를 너무 지저분하게 만드는 듯한 느낌을 지우기\n' +
        '어려웠다. 더불어  Vue devtools에서도 한 번의 액션에 컴포넌트 중첩 수준 만큼에 해당하는\n' +
        '로그가 연달아 발생하니 추적 자체에도 제법 많은 시간을 써야 했다. 내 경우엔\n' +
        '<a href="https://mulder21c.github.io/2021/01/24/pass-function-as-props-in-vue/">이벤트 핸들러를 props로 내려주는 방식</a>을\n' +
        '선택했는데, 이를 안티 패턴으로 보는 블로그 게시글도 있어서 다소 찜찜한 기분은 남아있다.</p>\n' +
        '<p>셋째는 Vuex의 사용이었는데, atomic design의 컨셉 상 실제 데이터가 page 단위에서 바인딩\n' +
        '되는 형태를 따르다보니 atom, molecule, organism, template 단위에서는 Vuex 바인딩을\n' +
        '피하는 쪽으로 만들어야해서 적지 않게 props가 발생되는 느낌도 있었고, 때로는 너무 과하게\n' +
        '제한하는 건 아닐까 하는 생각도 들기도 했다. (하지만 내가 깊게 이해하지 못할 경우에는 우선\n' +
        '명세 같은 것을 최대한 존중하자는 주의라... 일단은 page에서만 Vuex에 접근하는 쪽을 유지하고\n' +
        '있다.)</p>\n' +
        '<p>넷째는 앞서 &quot;실패를 피하려면&quot;에서도 마지막에 언급했던 것이지만, 어떤 컴포넌트를 조합하다 보면\n' +
        '어떻게 그룹핑 하고 어떻게 분류할 것인가가 계속 고민의 연속이 된다.</p>\n' +
        '<p>예를 들어, modal dialog를 만드는데 dialog 껍데기와 닫기 버튼을 하나의 컴포넌트로 두고,\n' +
        'dialog 콘텐츠를 slot으로 처리해서 다른 컴포넌트가 slot으로 삽입되는 구조로 만들었는데 초점\n' +
        '관리에서 문제가 되어 버렸다. tab sequence가 양쪽 컴포넌트에 걸쳐 있다 보니 focus trap을\n' +
        '만들어야 하는데 이벤트 관리를 어떻게...\n' +
        '이리 저리 컴포넌트를 재그룹핑 해봐도 해결책이 보이지 않아 결국은 modal dialog 쪽에서\n' +
        'tabbable 엘리먼트들을 DOM에서 직접 가져와서 처리하는 방식으로 해결해두기는 했는데 인터랙션에\n' +
        '의한 컴포넌트 간의 상호작용을 고려했을 때 컴포넌트가 이렇게 두는 게 맞는지 계속 고민이다.</p>\n' +
        '<p>다섯째는 내가 아직 Storybook을 어떻게 활용할 수 있는가에 대한 경험치 부족과 지식\n' +
        '부족이겠지만, docs와 story를 어떻게 구성해야 하는가다...</p>\n' +
        '<p>현재는 생각 나는 대로 구성해보고 있지만, 썩 마음에 드는 건 아니다.\n' +
        '다른 기업들은 어떻게 생각하고 고민해서 어떤 방향으로 만들고 있는지, 어떻게 했더니 어떤 점이\n' +
        '어려웠었는지 이야기를 심도 있게 들어보고 싶다 ㅠㅠ</p>\n' +
        '<h2 id="어려웠던-점"><a href="#어려웠던-점" class="headerlink" title="어려웠던 점"></a>어려웠던 점</h2><p>일단, 레퍼런스가 생각보다 많지 않았다.\n' +
        '다른 기업의 기술 블로그를 통해서 결과물의 일부분을 살짝 맛을 볼 수는 있는데, 결과물만 보는\n' +
        '것이지 과정을 보는 것이 아니다보니 어떤 목적과 목표를 가지고 어떻게 고민해서 만들어 왔는지의\n' +
        '여정을 보거나, 어떻게 하는 것이 모범 사례인지를 알기가 어렵다.\n' +
        '그냥 계속 남의 것을 염탐(?)하고 과정을 추측해 보는 방법 밖에는 없는걸까? 😥😥</p>\n' +
        '<p>또, storybook이 기본적으로 react를 사용하고 있어서 그런지 다소 Vue에는 궁합이 부족한 부분이\n' +
        '더러 있고, 이걸 해결할 다른 방법을 찾는 게 쉽지 않다.\n' +
        '일례로 storybook의 소스 코드 뷰어가 react 문법을 기반으로 보여주기 때문에 실제로 보여주고\n' +
        '싶은 Vue 문법이 아니라서 이걸 별도로 보여줄 방법을 찾아야 하는가 혹은 그냥 둘 것인가 등의\n' +
        '고민 포인트가 생기고 해결은 당연히(?) 쉽지 않다. (내가 할 수 있는 건 github 이슈에 질문을\n' +
        '남기는 것 뿐...)</p>\n' +
        '<p>더구나 주변에 이거 쓰는 사람 찾기가 어렵... 나란 놈은 인맥이 왜 이 모냥인거지...</p>\n' +
        '<h2 id="좋았던-점"><a href="#좋았던-점" class="headerlink" title="좋았던 점"></a>좋았던 점</h2><ul>\n' +
        '<li><p>우선, atomic design의 컨셉 상 page 단위에 이르러서야 데이터가 바인딩 되기 때문에\n' +
        '외부로부터 주입받아야 하는 데이터에 의존적이지 않은 컴포넌트 구현이 이루어지고 따라서\n' +
        '재사용성이 매우 높아졌다.\n' +
        '물론 반대로 이야기 하면, 그만큼 확장성과 추상성에 대한 고민을 해야 하고 생각 이상으로(?)\n' +
        '수 많은 props가 탄생하기도... 쿨럭...</p>\n' +
        '</li>\n' +
        '<li><p>storybook이 있으니 컴포넌트에 어떤 props가 필수였는지 값에 대한 제한 사항은 무엇인지\n' +
        '코드 레벨에서 확인하지 않아도 되니 편하더라.\n' +
        '단지 한 쪽 브라우저에 storybook을 띄워 놓기만 하면 찾는 건 금방이니 코드를 보고 인식하는\n' +
        '것보다 더 직관적이고 빠르다. (아, 물론 문서를 잘 작성했을 때의 이야기...)</p>\n' +
        '<p>그러고 보니, storybook이 jsdoc를 통한 유추가 좀 더 잘 되었으면 싶다. 내가 아직 몰라서\n' +
        '그런 것일 수도 있지만, storybook + vue에서 props에 대한 문서화가 jsdoc으로는 이루어지지\n' +
        '않는 것 같다. 이것만 잘 되어도 문서화가 코드 레벨에서 많이 정리 될 수 있을 거 같은데...\n' +
        '(아, 오히려 컴포넌트 코드가 더 지저분해 보일 수도 있으니 별도 문서로 빼는 게 나을 수도\n' +
        '있겠다는 생각도 들기도 한다.)</p>\n' +
        '</li>\n' +
        '<li><p>내가 가진 기술 부채 중 한 가지가 TDD다. 그래서 컴포넌트에 대한 테스트가 다소 우려 사항\n' +
        '중의 하나인데, storybook이 그 우려를 조금이나마 완화시켜 주고 있다.</p>\n' +
        '<p>storybook이 없을 때에는 한 개 컴포넌트만 렌더링 시켜서 확인하기에는 다소 불편해서 페이지\n' +
        '단위에서 확인했었는데, storybook 이후로는 개별 컴포넌트 별로 바로 확인이 가능하니 적어도\n' +
        'props나 event 처리에 대한 오류를 빨리 줄일 수 있었다.</p>\n' +
        '</li>\n' +
        '<li><p>storybook에는 다양한 addon들이 존재하는데 viewport(responsive), a11y, dark mode,\n' +
        'zeplin&amp;middot;figma viewer embedding 등과 같은 것들은 꽤나 도움이 될 만한 것들이라고\n' +
        '생각된다.\n' +
        '접근성에 지대한(?) 관심을 가지고 있는 나로서는 addon-a11y는 컴포넌트 단위부터 접근성에\n' +
        '대한 정량 평가를 직관적으로 확인 할 수 있어 좋다고 생각한다.</p>\n' +
        '</li>\n' +
        '</ul>\n',
      site: [Object],
      excerpt: '',
      more: '<p>ㄱ사에서 프로덕트를 만들며 <a href="https://atomicdesign.bradfrost.com/chapter-2/">atomic design</a>을\n' +
        '적용하고 <a href="https://storybook.js.org/">storybook</a>을 토대로 디자인 시스템을 구축해보기로\n' +
        '했다. 프로젝트 진행 초기에는 디자이너도 동의하는 부분이었지만 제대로 진행되지 못했고 결국\n' +
        '디자인 시스템을 구축하는 것은 실패로 돌아갔다.</p>\n' +
        '<p>실패에 대한 이유와 적용 경험으로 얻은 것들을 풀어보고자 한다.\n' +
        '참고로 atomic design이나 storybook이 무엇인지는 글에 포함 시키지 않는다. 내가 글을 쓰는\n' +
        '것보다는 이미 좋은 글들이 많으니까 😁</p>\n' +
        '<h2 id="적용기"><a href="#적용기" class="headerlink" title="적용기"></a>적용기</h2><h3 id="실패-경험"><a href="#실패-경험" class="headerlink" title="실패 경험"></a>실패 경험</h3><p>앞서 언급한 것처럼 입사 초 디자이너와 이야기 할 때에는storybook을 통한 디자인 시스템 구축에\n' +
        '대한 합의 점이 있었고, 이를 위해서 그 동안 관심을 가지고 있었던 atomic design을 본격적으로\n' +
        '적용해보기로 했었다.</p>\n' +
        '<p>언제나 처음이 어렵듯이 처음 적용해 본 atomic design과 storybook은 제법 쉽지 않았다.\n' +
        '사실 당시의 storybook 버전과 Vue가 궁합이 안 맞아도 너무 안 맞았었기 때문에 발생되는 이슈가\n' +
        '많았던 것...</p>\n' +
        '<p>하지만 이 문제를 미뤄두어도 일단 디자인 시스템 구축과 storybook 도입은 실패로 돌아 갔다.</p>\n' +
        '<h4 id="일정-상의-문제"><a href="#일정-상의-문제" class="headerlink" title="일정 상의 문제"></a>일정 상의 문제</h4><p>일단은 개발 일정 상의 문제가 가장 크게 작용되었다.</p>\n' +
        '<p>디자인 시스템을 구축하자면 디자이너와 긴밀하게 이야기가 진행되어야 하는데 도무지 그럴 시간적\n' +
        '여유가 없었다. 그도 그럴 것이 내가 입사한 4월부터 디자인 작업이 시작되었는데, 8월을 오픈\n' +
        '시점으로 둔 상태에서 7월에야 디자인이 나왔고 그마저도 계속 일부분은 완료되지 않고 미확정\n' +
        '상태로 진행되었다.</p>\n' +
        '<p>디자인이 진행되고 있던 초기에는 Vue와 storybook을 통합하느라 시간을 보내고, API도 완료된\n' +
        '디자인 화면을 기준으로 만들고 있었으니 뒤로 갈 수록 개발 시간이 부족했고, 더구나 최초 예상\n' +
        '범위는 시간이 흐를 수록 점점 덩어리가 커져 가더니 MVP가 아니라 그냥 커다란 덩어리가 되어\n' +
        '버리는 통에 개발에만 시간을 쏟아도 모자를 지경이 되어버렸다. (실제로 일정 상에 문제가\n' +
        '생기기도 했다)</p>\n' +
        '<h4 id="디자이너의-컴포넌트-단위에-대한-이해-부족"><a href="#디자이너의-컴포넌트-단위에-대한-이해-부족" class="headerlink" title="디자이너의 컴포넌트 단위에 대한 이해 부족"></a>디자이너의 컴포넌트 단위에 대한 이해 부족</h4><p>두 번째 문제는 디자이너의 컴포넌트 단위에 대한 이해가 부족하다는 거였다. (어쩌면\n' +
        '커뮤니케이션의 문제일 수도 있다.)</p>\n' +
        '<p>벡터 툴을 가지고 포토샵처럼 쓰는 것도 문제였지만, 예를 들어 버튼 컴포넌트의 경우 분명 같은\n' +
        '버튼 컴포넌트인데 동일한 스타일을 가지고 있지 않다. 가장 많게는 border-radius 사이즈가 너무\n' +
        '다양하게 나타났고, 종종 font-size나 font-weight가 차이가 났다.</p>\n' +
        '<p>물론 디자이너의 눈에 이 페이지에서는 이렇게 보이는 게 이쁘다가 나올 수는 있다고 생각한다.\n' +
        '하지만 만들어야 하는 프로덕트는 아트웍이나 각각 개별 페이지 전자 인쇄물이 아니라, 여러\n' +
        '페이지로 구성되어 있는 하나의 웹사이트, 하나의 웹 어플리케이션이고 특히 컴포넌트 관점의 개발\n' +
        '도구를 사용하는 환경에서 개별 컴포넌트의 베리에이션 기준이 명확하지 않으면 전부 하드코딩해야\n' +
        '한다는 것이 된다.</p>\n' +
        '<p>또한, 이 프로젝트에서는 디자인 변수를 미리 잡아두고 시작했는데 — 글꼴 크기 세트, 컬러 세트\n' +
        '등, 전달 받은 디자인 상에서 계속 사전 정의된 컬러 이름이 나오다가 갑자기 헥스 코드나 rgb(a)\n' +
        '값이 나타나서 확인해 보면 정의 된 값 이외의 것들이었다.</p>\n' +
        '<p>문제는 이러한 것들이 적지 않게 튀어 나왔다는 것이고, 이미 color set을 정의해 둔 상태에서\n' +
        '어디에도 끼우기가 너무 어렵고 (그레이 색상을 12단계로 설정해 두었는데 갑자기 그 사이 어딘가의\n' +
        '값이 툭...), 해당 컬러 값이 얼마나 자주 사용 되는 지, 또 다른 어딘가의 사이 값이 추가로\n' +
        '존재하는지 확인 하려면 불필요하게 소비되는 리소스가 너무 많이 들어간다는 거였다.</p>\n' +
        '<p>이러한 잦은 예상 외의 베리에이션이 나타나면서 하드 코딩이 잦게 발생되고, 결국은 CSS 규격화는\n' +
        '점점 물 건너 가며 template이나 organism 단위에서 CSS를 override하는 지저분한 상황이 연출\n' +
        '되기도 했다. (심하게는 시안 상에는 button 컴포넌트를 가져다 그려 놓았으나 실제는 체크 박스\n' +
        '기능인 것도 있었다.)</p>\n' +
        '<p>어찌보면 커뮤니케이션이 원활하지 않았기 때문에 이 부분에 대한 협의가 이루어지지 않은 것도\n' +
        '있겠지만, 경험 상 퍼블리셔로서 일할 때부터 늘 디자이너와 겪는 마찰 부분이기도 하다.</p>\n' +
        '<h4 id="Nuxt와-Storybook의-궁합-문제"><a href="#Nuxt와-Storybook의-궁합-문제" class="headerlink" title="Nuxt와 Storybook의 궁합 문제"></a>Nuxt와 Storybook의 궁합 문제</h4><p>세 번째 문제는 nuxt와 (당시의) storybook이 서로 궁합이 안 맞아도 너무 안 맞는다는 거였다.</p>\n' +
        '<p>storybook에서 왜 오류가 나지?, 왜 안되지? 하고 구글링 해보면 issue로 등록되어 있거나\n' +
        'storybook 문제라는 stackoverflow의 답변들을 쉽게 발견할 수 있었다.</p>\n' +
        '<p>본래는 온갖 해외 자료들을 뒤져가며 해결했던 그 모든 방법들을 포스팅 해보려고 했었는데, 어느\n' +
        '정도 바쁜 것들이 정리되고 본격적으로 포스팅을 시작해보기 위해 한 단계 한 단계 다시 사례를\n' +
        '만들려고 하니 버전업과 함께 해결되어 버려서 ㅋㅋㅋ (그래서 이슈 해결 보다는\n' +
        'nuxt-storybook으로 통합하는 것과 수동으로 한 땀 한 땀 통합하는 방법을 비교해서 올렸었다.)</p>\n' +
        '<p>가장 짜증(?) 났던 것 중 하나가 mdx 포맷과 addon과 vue의 통합이 거지 같았... (addon-docs와\n' +
        'controls와 vue와 mdx가 만나면... 하하하...) 지금은 mdx를 이용해 넘나 잘 쓰고 있다.</p>\n' +
        '<p>그리고 다른 개인 작업에서 storybook과 pug를 통합해보고 있다(읭?)</p>\n' +
        '<h3 id="재-시도"><a href="#재-시도" class="headerlink" title="재 시도"></a>재 시도</h3><p>작년 11월 IAT 세미나를 준비하면서 시연에 필요한 페이지를 Vue로 만들면서 다시 적용해봤다.</p>\n' +
        '<p>이미 storybook 버전업으로 통합이 잘 되었고, 자잘한 버그 등의 이슈도 있었지만 다행히\n' +
        'github을 통해 issue로 등록할 때마다 nuxt-storybook 커뮤니티에서 빠르게 대응해줘서 금방\n' +
        '처리되었다.</p>\n' +
        '<p>거기에 이직을 진행하는 과정에서 사전 과제가 나올 때마다 atomic design 방법론을 적용해서\n' +
        '만들면서 계속해서 storybook을 적용해갔고, 덕분에 이전 회사에서 완성하지 못했던 디자인\n' +
        '시스템을 page 단위까지 구축해볼 수 있었다. (뭐 그렇다고 잘 구축했다는 건 아니다. 그냥 해\n' +
        '봤다고...)</p>\n' +
        '<p>그리고 현재는 hexo 블로그 테마를 새로 제작하면서 storybook + pug를 시도해보고 있다. (응??)</p>\n' +
        '<h2 id="실패를-피하려면"><a href="#실패를-피하려면" class="headerlink" title="실패를 피하려면,"></a>실패를 피하려면,</h2><p>실패해보고 개인적으로 끝까지 storybook을 간소하게(?) 만들어보고 나니 드는 생각이, 컴포넌트\n' +
        '관점에서의 디자인 시스템 도입에 실패를 피하려면,</p>\n' +
        '<ul>\n' +
        '<li><p>일단 일정이 많이 들어갈 소지가 높다는 것을 염두해 두어야 하고</p>\n' +
        '</li>\n' +
        '<li><p>디자이너의 역할이 상당히 필요한 듯 하다,</p>\n' +
        '<p>구체적으로 이야기 해보면, 디자이너가 컴포넌트 관점에서의 개발이라는 컨셉을 이해하고 있어야\n' +
        '하고 베리에이션의 기준을 명확히 할 수 있어야 할 것 같다.\n' +
        '디자인부터 atom, molecule, organism 등에 대한 이해를 바탕으로 각 컴포넌트가 설계되고\n' +
        '규격화 되어야 갈아엎고 다시 만들어야 할까 고민하는 상황이 없을 것 같다.</p>\n' +
        '</li>\n' +
        '<li><p>컴포넌트를 어떻게 그룹핑하고 분류할 것인지, 서로 유기적으로 엮여야하는 인터랙션이 있다면\n' +
        '어떻게 조합해서 이벤트 처리를 어떻게 할 것인지 등을 잘 고려해 두어야, 조립하다가\n' +
        '재그룹핑하고 재분류하는 일을 줄일 수 있겠더라 (아, 이건 어쩔 수 없는 숙명이려나...)\n' +
        '사실 이 부분은 지금도 만들어 볼 때마다 반복 중인 것 같기도 하다.</p>\n' +
        '</li>\n' +
        '</ul>\n' +
        '<h2 id="고민-포인트"><a href="#고민-포인트" class="headerlink" title="고민 포인트"></a>고민 포인트</h2><p>atomic design과 storybook을 적용해가면서 몇 가지 고민 되는 포인트가 있었는데,</p>\n' +
        '<p>첫째는 이걸 atom으로 두어야 하는가 molecule로 두어야 하는가의 고민이었다.</p>\n' +
        '<p>한 예로 텍스트 필드 컴포넌트를 만드는데 참고한 UI Kit에서는 텍스트 필드에 항상 레이블과\n' +
        '오류 메세지가 함께 존재했고, 이 세 가지 요소 — 레이블, 입력 상자, 오류 메세지를 최소 단위로\n' +
        '보고 atom으로 두는 것이 적절할지, 아니면 아토믹 디자인에서 설명하는 텍스트 그대로 HTML\n' +
        '엘리먼트 단위를 atom으로 보고 컴포넌트는 molecule로 두어야 하는가의 고민이 반복될 수 밖에\n' +
        '없었다. (해당 UI Kit에서는 각 구성 요소가 분리된 더 작은 컴포넌트가 없었기 때문에 그 묶음을\n' +
        '최소 단위로 간주해서 atom으로 두는 걸 최종적으로 선택했다.)</p>\n' +
        '<p>둘째는 Vue에서 이벤트 핸들링을 할 때는 <code>emit</code>을 사용해서 커스텀 이벤트를 상위 컴포넌트로\n' +
        '올려서 처리하는 방식을 권장하고 있는데, 이게 코드를 너무 지저분하게 만드는 듯한 느낌을 지우기\n' +
        '어려웠다. 더불어  Vue devtools에서도 한 번의 액션에 컴포넌트 중첩 수준 만큼에 해당하는\n' +
        '로그가 연달아 발생하니 추적 자체에도 제법 많은 시간을 써야 했다. 내 경우엔\n' +
        '<a href="https://mulder21c.github.io/2021/01/24/pass-function-as-props-in-vue/">이벤트 핸들러를 props로 내려주는 방식</a>을\n' +
        '선택했는데, 이를 안티 패턴으로 보는 블로그 게시글도 있어서 다소 찜찜한 기분은 남아있다.</p>\n' +
        '<p>셋째는 Vuex의 사용이었는데, atomic design의 컨셉 상 실제 데이터가 page 단위에서 바인딩\n' +
        '되는 형태를 따르다보니 atom, molecule, organism, template 단위에서는 Vuex 바인딩을\n' +
        '피하는 쪽으로 만들어야해서 적지 않게 props가 발생되는 느낌도 있었고, 때로는 너무 과하게\n' +
        '제한하는 건 아닐까 하는 생각도 들기도 했다. (하지만 내가 깊게 이해하지 못할 경우에는 우선\n' +
        '명세 같은 것을 최대한 존중하자는 주의라... 일단은 page에서만 Vuex에 접근하는 쪽을 유지하고\n' +
        '있다.)</p>\n' +
        '<p>넷째는 앞서 &quot;실패를 피하려면&quot;에서도 마지막에 언급했던 것이지만, 어떤 컴포넌트를 조합하다 보면\n' +
        '어떻게 그룹핑 하고 어떻게 분류할 것인가가 계속 고민의 연속이 된다.</p>\n' +
        '<p>예를 들어, modal dialog를 만드는데 dialog 껍데기와 닫기 버튼을 하나의 컴포넌트로 두고,\n' +
        'dialog 콘텐츠를 slot으로 처리해서 다른 컴포넌트가 slot으로 삽입되는 구조로 만들었는데 초점\n' +
        '관리에서 문제가 되어 버렸다. tab sequence가 양쪽 컴포넌트에 걸쳐 있다 보니 focus trap을\n' +
        '만들어야 하는데 이벤트 관리를 어떻게...\n' +
        '이리 저리 컴포넌트를 재그룹핑 해봐도 해결책이 보이지 않아 결국은 modal dialog 쪽에서\n' +
        'tabbable 엘리먼트들을 DOM에서 직접 가져와서 처리하는 방식으로 해결해두기는 했는데 인터랙션에\n' +
        '의한 컴포넌트 간의 상호작용을 고려했을 때 컴포넌트가 이렇게 두는 게 맞는지 계속 고민이다.</p>\n' +
        '<p>다섯째는 내가 아직 Storybook을 어떻게 활용할 수 있는가에 대한 경험치 부족과 지식\n' +
        '부족이겠지만, docs와 story를 어떻게 구성해야 하는가다...</p>\n' +
        '<p>현재는 생각 나는 대로 구성해보고 있지만, 썩 마음에 드는 건 아니다.\n' +
        '다른 기업들은 어떻게 생각하고 고민해서 어떤 방향으로 만들고 있는지, 어떻게 했더니 어떤 점이\n' +
        '어려웠었는지 이야기를 심도 있게 들어보고 싶다 ㅠㅠ</p>\n' +
        '<h2 id="어려웠던-점"><a href="#어려웠던-점" class="headerlink" title="어려웠던 점"></a>어려웠던 점</h2><p>일단, 레퍼런스가 생각보다 많지 않았다.\n' +
        '다른 기업의 기술 블로그를 통해서 결과물의 일부분을 살짝 맛을 볼 수는 있는데, 결과물만 보는\n' +
        '것이지 과정을 보는 것이 아니다보니 어떤 목적과 목표를 가지고 어떻게 고민해서 만들어 왔는지의\n' +
        '여정을 보거나, 어떻게 하는 것이 모범 사례인지를 알기가 어렵다.\n' +
        '그냥 계속 남의 것을 염탐(?)하고 과정을 추측해 보는 방법 밖에는 없는걸까? 😥😥</p>\n' +
        '<p>또, storybook이 기본적으로 react를 사용하고 있어서 그런지 다소 Vue에는 궁합이 부족한 부분이\n' +
        '더러 있고, 이걸 해결할 다른 방법을 찾는 게 쉽지 않다.\n' +
        '일례로 storybook의 소스 코드 뷰어가 react 문법을 기반으로 보여주기 때문에 실제로 보여주고\n' +
        '싶은 Vue 문법이 아니라서 이걸 별도로 보여줄 방법을 찾아야 하는가 혹은 그냥 둘 것인가 등의\n' +
        '고민 포인트가 생기고 해결은 당연히(?) 쉽지 않다. (내가 할 수 있는 건 github 이슈에 질문을\n' +
        '남기는 것 뿐...)</p>\n' +
        '<p>더구나 주변에 이거 쓰는 사람 찾기가 어렵... 나란 놈은 인맥이 왜 이 모냥인거지...</p>\n' +
        '<h2 id="좋았던-점"><a href="#좋았던-점" class="headerlink" title="좋았던 점"></a>좋았던 점</h2><ul>\n' +
        '<li><p>우선, atomic design의 컨셉 상 page 단위에 이르러서야 데이터가 바인딩 되기 때문에\n' +
        '외부로부터 주입받아야 하는 데이터에 의존적이지 않은 컴포넌트 구현이 이루어지고 따라서\n' +
        '재사용성이 매우 높아졌다.\n' +
        '물론 반대로 이야기 하면, 그만큼 확장성과 추상성에 대한 고민을 해야 하고 생각 이상으로(?)\n' +
        '수 많은 props가 탄생하기도... 쿨럭...</p>\n' +
        '</li>\n' +
        '<li><p>storybook이 있으니 컴포넌트에 어떤 props가 필수였는지 값에 대한 제한 사항은 무엇인지\n' +
        '코드 레벨에서 확인하지 않아도 되니 편하더라.\n' +
        '단지 한 쪽 브라우저에 storybook을 띄워 놓기만 하면 찾는 건 금방이니 코드를 보고 인식하는\n' +
        '것보다 더 직관적이고 빠르다. (아, 물론 문서를 잘 작성했을 때의 이야기...)</p>\n' +
        '<p>그러고 보니, storybook이 jsdoc를 통한 유추가 좀 더 잘 되었으면 싶다. 내가 아직 몰라서\n' +
        '그런 것일 수도 있지만, storybook + vue에서 props에 대한 문서화가 jsdoc으로는 이루어지지\n' +
        '않는 것 같다. 이것만 잘 되어도 문서화가 코드 레벨에서 많이 정리 될 수 있을 거 같은데...\n' +
        '(아, 오히려 컴포넌트 코드가 더 지저분해 보일 수도 있으니 별도 문서로 빼는 게 나을 수도\n' +
        '있겠다는 생각도 들기도 한다.)</p>\n' +
        '</li>\n' +
        '<li><p>내가 가진 기술 부채 중 한 가지가 TDD다. 그래서 컴포넌트에 대한 테스트가 다소 우려 사항\n' +
        '중의 하나인데, storybook이 그 우려를 조금이나마 완화시켜 주고 있다.</p>\n' +
        '<p>storybook이 없을 때에는 한 개 컴포넌트만 렌더링 시켜서 확인하기에는 다소 불편해서 페이지\n' +
        '단위에서 확인했었는데, storybook 이후로는 개별 컴포넌트 별로 바로 확인이 가능하니 적어도\n' +
        'props나 event 처리에 대한 오류를 빨리 줄일 수 있었다.</p>\n' +
        '</li>\n' +
        '<li><p>storybook에는 다양한 addon들이 존재하는데 viewport(responsive), a11y, dark mode,\n' +
        'zeplin&amp;middot;figma viewer embedding 등과 같은 것들은 꽤나 도움이 될 만한 것들이라고\n' +
        '생각된다.\n' +
        '접근성에 지대한(?) 관심을 가지고 있는 나로서는 addon-a11y는 컴포넌트 단위부터 접근성에\n' +
        '대한 정량 평가를 직관적으로 확인 할 수 있어 좋다고 생각한다.</p>\n' +
        '</li>\n' +
        '</ul>\n',
      path: [Getter],
      permalink: [Getter],
      full_source: [Getter],
      asset_dir: [Getter],
      tags: [Getter],
      categories: [Getter],
      next: [Circular *1],
      __post: true
    },
    next: [Circular *2],
    __post: true
  },
  next: <ref *3> _Document {
    title: 'pass function as props in vue',
    seo: {
      image: '/upload/2021/props-function-vue.jpg',
      description: 'props로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
        '핸들러를 실행시키기만 하면 어떨까 하는 생각에 prop로 함수를 내려주는 방식을 생각해보게 됐다.\n'
    },
    hero: '/upload/2021/props-function-vue.jpg',
    thumbnail: '/upload/2021/thumbs/props-function-vue.jpg',
    date: Moment<2021-01-24T11:16:03+09:00>,
    style: null,
    _content: '\n' +
      '## Event handling and Atomic Design System\n' +
      '\n' +
      'Atomic Design System을 컴포넌트 설계 방법론으로 가져가면서, 각 컴포넌트에 독립적으로\n' +
      '고립(?)된 데이터 구조를 만들게 되면서 (이게 맞는 방식인지는 잘 모르겠지만) 불편함이 점점\n' +
      '발생되었던 것 중 하나가 유저 인터랙션에 의해 발생되는 데이터 변경을 위해 쌓여진 컴포넌트\n' +
      '구조를 따라 계속 이벤트를 전달하고 이벤트 리스너를 통해 처리하는 방식이었다.\n' +
      '\n' +
      '예를 들자면\n' +
      '\n' +
      '![유저 인터랙션으로 하위 컴포넌트로부터 상위 컴포넌트로의 이벤트 발생 과정](/upload/2021/event-flow-from-atom-to-page.svg)\n' +
      '\n' +
      '이런 흐름 말이다.\n' +
      '\n' +
      'Vue 공식 문서도 그렇고, 지금까지 보아온 대다수의 강의에서도 유저 인터랙션에 대한 데이터를\n' +
      '처리할 때 해당 데이터가 상위 컴포넌트에 존재할 경우, `$emit`을 이용하여 payload와 함께\n' +
      '하위 컴포넌트로부터 상위 컴포넌트로 차례로 올리고, 상위 컴포넌트에서 `v-on`으로 처리하는\n' +
      '방식을 사용하도록 안내하는 듯 하다.\n' +
      '\n' +
      'Atomic Design Sytem을 적용하기 전에는 이러한 고민이 없었는데, 적용 이후로는 atom으로부터\n' +
      '실제 데이터가 바인딩 되는 page까지 5개 단계(?)를 거치게 되니 하위 컴포넌트에서 발생한\n' +
      '이벤트와 데이터를 다시 상위 컴포넌트로 by-pass 하기 위한 이벤트 처리가 뭐랄까... 조금\n' +
      '거슬린다고 할까?\n' +
      '심지어 Vue 개발자 도구로 데이터 흐름을 확인하려고 하면 한 번의 인터랙션에 여러 개의 emit이\n' +
      '로그로 출력되니 정신이 사납기까지 한 느낌이다 = _=a\n' +
      '\n' +
      '그래서 `props`로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
      '핸들러를 실행시키기만 하면 어떨까 하는 생각에 `prop`로 함수를 내려주는 방식을 생각해보게 됐다.\n' +
      '\n' +
      '## Is it an anti-pattern?\n' +
      '\n' +
      '일단 생각을 해 봤으니 이게 가한 것은 맞는지 확인 해 볼 필요가 있었다. (처음 생각해 본\n' +
      '방법이고 Vue 관련 문서나 강의에서도 한 번도 이런 케이스를 본 적이 없으니까..)\n' +
      '\n' +
      '구글링 결과 공교롭게도(?) 가장 먼저 눈에 띈 내용은 이 방식이 안티 패턴이라는 내용이었다.\n' +
      '(혹 관련 내용이 궁금하다면 [How to Pass a Function as a Prop in Vue]([https://michaelnthiessen.com/pass-function-as-prop/](https://michaelnthiessen.com/pass-function-as-prop/))를\n' +
      '읽어보시길... 아, 중간에 구독하라고 전체 팝업창이 뜨기는 하는데 개발자라면 뭐... 다 쉽게\n' +
      '걷어내... 쿨럭... )\n' +
      '\n' +
      '하지만 왜 인지 모르겠으나... 해당 글에서는 안티 패턴임을 설명하는데 하위 컴포넌트의 mounted\n' +
      '훅에서 props로 받은 함수를 실행하는 코드를 보여주고 있었다.\n' +
      '무튼 그러면서 잘못된 것은 아니지만, Vue의 컨셉에 맞게 이벤트를 활용하거나 슬롯을 사용하라는\n' +
      '결론을 내주는게 영...\n' +
      '\n' +
      '또 다른 아티클 들에서는 단순하게 props로 함수를 내리는게 가능하다 라는 짤막한 소개 정도가\n' +
      '있었다.\n' +
      '\n' +
      '하여 안티 패턴이라 소개하는 글을 잠시 무시하기로 하고(?) props로 함수를 내리는 방식을\n' +
      '사용해봤다.\n' +
      '아, 안티 패턴이라 소개하는 글을 무시하기로 한 것은 안티 패턴을 굳이 사용하겠다는 것이 아니라,\n' +
      '안티 패턴인 이유에 대한 명확한 근거를 찾을 수 없어서다. 차후에라도 이것이 안티 패턴이라는\n' +
      '명확한 근거를 찾게 된다면 당연히 과감히 버릴거다.\n' +
      '\n' +
      '## Try it\n' +
      '\n' +
      '```jsx\n' +
      '<template>\n' +
      '  <SignUpTemplate :handle-sign-up="signUp" />\n' +
      '</template>\n' +
      '<script>\n' +
      'export default {\n' +
      '  ...\n' +
      '  methods: {\n' +
      '    ...\n' +
      '    signUp({ email, password }) {\n' +
      '      users\n' +
      '        .postSignUp({ email, password })\n' +
      '        .then(...)\n' +
      '        .catch(...)\n' +
      '    }\n' +
      '  }\n' +
      '};\n' +
      '</script>\n' +
      '```\n' +
      '\n' +
      'Page에서 이렇게 `signUp` 함수를 props로 내려주고\n' +
      '\n' +
      '```jsx\n' +
      '<template>\n' +
      '  ...\n' +
      '  <SignUpForm :handle-submit="handleSignUp" />\n' +
      '  ...\n' +
      '</template>\n' +
      '\n' +
      '<script>\n' +
      'export default {\n' +
      '  ...\n' +
      '  props: {\n' +
      '    ...\n' +
      '    handleSignUp: {\n' +
      '      type: Function,\n' +
      '      required: true,\n' +
      '      default: () => {}\n' +
      '    }\n' +
      '  },\n' +
      '  ...\n' +
      '};\n' +
      '</script>\n' +
      '```\n' +
      '\n' +
      '템플릿에서 props로 받은 함수를 다시 하위 컴포넌트로 내려주고,\n' +
      '\n' +
      '```jsx\n' +
      '<template>\n' +
      '  <form-container>\n' +
      '    ...\n' +
      '    <DefaultButton\n' +
      '      @click.native.prevent="handleClickSubmit"\n' +
      '    />\n' +
      '    ...\n' +
      '  </form-container>\n' +
      '</template>\n' +
      '\n' +
      '<script>\n' +
      'import DefaultButton from "@atoms/Button/Default";\n' +
      'export default {\n' +
      '  components: {\n' +
      '  props: {\n' +
      '    handleSubmit: {\n' +
      '      type: Function,\n' +
      '      required: true,\n' +
      '      default: () => {}\n' +
      '    }\n' +
      '  },\n' +
      '  methods: {\n' +
      '    handleClickSubmit() {\n' +
      '      const { handleSubmit, email, password, passwordConfirm } = this;\n' +
      '      ...\n' +
      '      handleSubmit && handleSubmit({ email, password });\n' +
      '    }\n' +
      '  }\n' +
      '};\n' +
      '</script>\n' +
      '```\n' +
      '\n' +
      '유저 인터랙션이 발생하는 하위 컴포넌트에서 해당 함수를 전달받아 실행하게 했다.\n' +
      '적용 결과는 당연히(?) 원하는 동작을 올바르게 수행해주었다.\n' +
      '\n' +
      '이것보다는 modal  창을 포함하는 organism 컴포넌트에서 modal 창에 대한 제어와 modal 내부에\n' +
      'slot으로 끼워진 컴포넌트에 적용되는 부분이 이 방식을 더 잘 설명할 수 있을 것 같지만 너무\n' +
      '많은 코드가 삽입 되어야 해서 포스팅에는 간단한 위 코드로 적었다.\n' +
      '\n' +
      '사실 event emit 방식으로도 충분히 대체도 가능하고 그것이 난이도나 복잡도가 더 높지는 않은\n' +
      '것 같기는 하다. 하지만, 뭐랄까 이 방식이 좀 더 dry한 느낌이 든달까? (기분탓이려나?)\n' +
      '\n' +
      '무엇보다 개발자 도구에 여러 번에 걸친 이벤트 발생 로그를 보지 않아도 되니 한결 눈이 가벼워졌다.',
    source: '_posts/2021-01-25-pass-function-as-props-in-vue.md',
    raw: '---\n' +
      'title: pass function as props in vue\n' +
      'tags:\n' +
      '  - vue\n' +
      '  - props\n' +
      '  - pass function\n' +
      'categories:\n' +
      '  - 개발노트\n' +
      '  - Front-End\n' +
      'seo:\n' +
      '  image: /upload/2021/props-function-vue.jpg\n' +
      '  description: |\n' +
      '    props로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
      '    핸들러를 실행시키기만 하면 어떨까 하는 생각에 prop로 함수를 내려주는 방식을 생각해보게 됐다.\n' +
      'hero: /upload/2021/props-function-vue.jpg\n' +
      'thumbnail: /upload/2021/thumbs/props-function-vue.jpg\n' +
      'date: 2021-01-24 11:16:03\n' +
      'style:\n' +
      '---\n' +
      '\n' +
      '## Event handling and Atomic Design System\n' +
      '\n' +
      'Atomic Design System을 컴포넌트 설계 방법론으로 가져가면서, 각 컴포넌트에 독립적으로\n' +
      '고립(?)된 데이터 구조를 만들게 되면서 (이게 맞는 방식인지는 잘 모르겠지만) 불편함이 점점\n' +
      '발생되었던 것 중 하나가 유저 인터랙션에 의해 발생되는 데이터 변경을 위해 쌓여진 컴포넌트\n' +
      '구조를 따라 계속 이벤트를 전달하고 이벤트 리스너를 통해 처리하는 방식이었다.\n' +
      '\n' +
      '예를 들자면\n' +
      '\n' +
      '![유저 인터랙션으로 하위 컴포넌트로부터 상위 컴포넌트로의 이벤트 발생 과정](/upload/2021/event-flow-from-atom-to-page.svg)\n' +
      '\n' +
      '이런 흐름 말이다.\n' +
      '\n' +
      'Vue 공식 문서도 그렇고, 지금까지 보아온 대다수의 강의에서도 유저 인터랙션에 대한 데이터를\n' +
      '처리할 때 해당 데이터가 상위 컴포넌트에 존재할 경우, `$emit`을 이용하여 payload와 함께\n' +
      '하위 컴포넌트로부터 상위 컴포넌트로 차례로 올리고, 상위 컴포넌트에서 `v-on`으로 처리하는\n' +
      '방식을 사용하도록 안내하는 듯 하다.\n' +
      '\n' +
      'Atomic Design Sytem을 적용하기 전에는 이러한 고민이 없었는데, 적용 이후로는 atom으로부터\n' +
      '실제 데이터가 바인딩 되는 page까지 5개 단계(?)를 거치게 되니 하위 컴포넌트에서 발생한\n' +
      '이벤트와 데이터를 다시 상위 컴포넌트로 by-pass 하기 위한 이벤트 처리가 뭐랄까... 조금\n' +
      '거슬린다고 할까?\n' +
      '심지어 Vue 개발자 도구로 데이터 흐름을 확인하려고 하면 한 번의 인터랙션에 여러 개의 emit이\n' +
      '로그로 출력되니 정신이 사납기까지 한 느낌이다 = _=a\n' +
      '\n' +
      '그래서 `props`로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
      '핸들러를 실행시키기만 하면 어떨까 하는 생각에 `prop`로 함수를 내려주는 방식을 생각해보게 됐다.\n' +
      '\n' +
      '## Is it an anti-pattern?\n' +
      '\n' +
      '일단 생각을 해 봤으니 이게 가한 것은 맞는지 확인 해 볼 필요가 있었다. (처음 생각해 본\n' +
      '방법이고 Vue 관련 문서나 강의에서도 한 번도 이런 케이스를 본 적이 없으니까..)\n' +
      '\n' +
      '구글링 결과 공교롭게도(?) 가장 먼저 눈에 띈 내용은 이 방식이 안티 패턴이라는 내용이었다.\n' +
      '(혹 관련 내용이 궁금하다면 [How to Pass a Function as a Prop in Vue]([https://michaelnthiessen.com/pass-function-as-prop/](https://michaelnthiessen.com/pass-function-as-prop/))를\n' +
      '읽어보시길... 아, 중간에 구독하라고 전체 팝업창이 뜨기는 하는데 개발자라면 뭐... 다 쉽게\n' +
      '걷어내... 쿨럭... )\n' +
      '\n' +
      '하지만 왜 인지 모르겠으나... 해당 글에서는 안티 패턴임을 설명하는데 하위 컴포넌트의 mounted\n' +
      '훅에서 props로 받은 함수를 실행하는 코드를 보여주고 있었다.\n' +
      '무튼 그러면서 잘못된 것은 아니지만, Vue의 컨셉에 맞게 이벤트를 활용하거나 슬롯을 사용하라는\n' +
      '결론을 내주는게 영...\n' +
      '\n' +
      '또 다른 아티클 들에서는 단순하게 props로 함수를 내리는게 가능하다 라는 짤막한 소개 정도가\n' +
      '있었다.\n' +
      '\n' +
      '하여 안티 패턴이라 소개하는 글을 잠시 무시하기로 하고(?) props로 함수를 내리는 방식을\n' +
      '사용해봤다.\n' +
      '아, 안티 패턴이라 소개하는 글을 무시하기로 한 것은 안티 패턴을 굳이 사용하겠다는 것이 아니라,\n' +
      '안티 패턴인 이유에 대한 명확한 근거를 찾을 수 없어서다. 차후에라도 이것이 안티 패턴이라는\n' +
      '명확한 근거를 찾게 된다면 당연히 과감히 버릴거다.\n' +
      '\n' +
      '## Try it\n' +
      '\n' +
      '```jsx\n' +
      '<template>\n' +
      '  <SignUpTemplate :handle-sign-up="signUp" />\n' +
      '</template>\n' +
      '<script>\n' +
      'export default {\n' +
      '  ...\n' +
      '  methods: {\n' +
      '    ...\n' +
      '    signUp({ email, password }) {\n' +
      '      users\n' +
      '        .postSignUp({ email, password })\n' +
      '        .then(...)\n' +
      '        .catch(...)\n' +
      '    }\n' +
      '  }\n' +
      '};\n' +
      '</script>\n' +
      '```\n' +
      '\n' +
      'Page에서 이렇게 `signUp` 함수를 props로 내려주고\n' +
      '\n' +
      '```jsx\n' +
      '<template>\n' +
      '  ...\n' +
      '  <SignUpForm :handle-submit="handleSignUp" />\n' +
      '  ...\n' +
      '</template>\n' +
      '\n' +
      '<script>\n' +
      'export default {\n' +
      '  ...\n' +
      '  props: {\n' +
      '    ...\n' +
      '    handleSignUp: {\n' +
      '      type: Function,\n' +
      '      required: true,\n' +
      '      default: () => {}\n' +
      '    }\n' +
      '  },\n' +
      '  ...\n' +
      '};\n' +
      '</script>\n' +
      '```\n' +
      '\n' +
      '템플릿에서 props로 받은 함수를 다시 하위 컴포넌트로 내려주고,\n' +
      '\n' +
      '```jsx\n' +
      '<template>\n' +
      '  <form-container>\n' +
      '    ...\n' +
      '    <DefaultButton\n' +
      '      @click.native.prevent="handleClickSubmit"\n' +
      '    />\n' +
      '    ...\n' +
      '  </form-container>\n' +
      '</template>\n' +
      '\n' +
      '<script>\n' +
      'import DefaultButton from "@atoms/Button/Default";\n' +
      'export default {\n' +
      '  components: {\n' +
      '  props: {\n' +
      '    handleSubmit: {\n' +
      '      type: Function,\n' +
      '      required: true,\n' +
      '      default: () => {}\n' +
      '    }\n' +
      '  },\n' +
      '  methods: {\n' +
      '    handleClickSubmit() {\n' +
      '      const { handleSubmit, email, password, passwordConfirm } = this;\n' +
      '      ...\n' +
      '      handleSubmit && handleSubmit({ email, password });\n' +
      '    }\n' +
      '  }\n' +
      '};\n' +
      '</script>\n' +
      '```\n' +
      '\n' +
      '유저 인터랙션이 발생하는 하위 컴포넌트에서 해당 함수를 전달받아 실행하게 했다.\n' +
      '적용 결과는 당연히(?) 원하는 동작을 올바르게 수행해주었다.\n' +
      '\n' +
      '이것보다는 modal  창을 포함하는 organism 컴포넌트에서 modal 창에 대한 제어와 modal 내부에\n' +
      'slot으로 끼워진 컴포넌트에 적용되는 부분이 이 방식을 더 잘 설명할 수 있을 것 같지만 너무\n' +
      '많은 코드가 삽입 되어야 해서 포스팅에는 간단한 위 코드로 적었다.\n' +
      '\n' +
      '사실 event emit 방식으로도 충분히 대체도 가능하고 그것이 난이도나 복잡도가 더 높지는 않은\n' +
      '것 같기는 하다. 하지만, 뭐랄까 이 방식이 좀 더 dry한 느낌이 든달까? (기분탓이려나?)\n' +
      '\n' +
      '무엇보다 개발자 도구에 여러 번에 걸친 이벤트 발생 로그를 보지 않아도 되니 한결 눈이 가벼워졌다.',
    slug: 'pass-function-as-props-in-vue',
    published: true,
    comments: true,
    layout: 'post',
    photos: [],
    link: '',
    _id: 'clcytfa4r00a7taww0ld1deig',
    content: '<h2 id="Event-handling-and-Atomic-Design-System"><a href="#Event-handling-and-Atomic-Design-System" class="headerlink" title="Event handling and Atomic Design System"></a>Event handling and Atomic Design System</h2><p>Atomic Design System을 컴포넌트 설계 방법론으로 가져가면서, 각 컴포넌트에 독립적으로\n' +
      '고립(?)된 데이터 구조를 만들게 되면서 (이게 맞는 방식인지는 잘 모르겠지만) 불편함이 점점\n' +
      '발생되었던 것 중 하나가 유저 인터랙션에 의해 발생되는 데이터 변경을 위해 쌓여진 컴포넌트\n' +
      '구조를 따라 계속 이벤트를 전달하고 이벤트 리스너를 통해 처리하는 방식이었다.</p>\n' +
      '<p>예를 들자면</p>\n' +
      '<p><img src="/upload/2021/event-flow-from-atom-to-page.svg" alt="유저 인터랙션으로 하위 컴포넌트로부터 상위 컴포넌트로의 이벤트 발생 과정"></p>\n' +
      '<p>이런 흐름 말이다.</p>\n' +
      '<p>Vue 공식 문서도 그렇고, 지금까지 보아온 대다수의 강의에서도 유저 인터랙션에 대한 데이터를\n' +
      '처리할 때 해당 데이터가 상위 컴포넌트에 존재할 경우, <code>$emit</code>을 이용하여 payload와 함께\n' +
      '하위 컴포넌트로부터 상위 컴포넌트로 차례로 올리고, 상위 컴포넌트에서 <code>v-on</code>으로 처리하는\n' +
      '방식을 사용하도록 안내하는 듯 하다.</p>\n' +
      '<p>Atomic Design Sytem을 적용하기 전에는 이러한 고민이 없었는데, 적용 이후로는 atom으로부터\n' +
      '실제 데이터가 바인딩 되는 page까지 5개 단계(?)를 거치게 되니 하위 컴포넌트에서 발생한\n' +
      '이벤트와 데이터를 다시 상위 컴포넌트로 by-pass 하기 위한 이벤트 처리가 뭐랄까... 조금\n' +
      '거슬린다고 할까?\n' +
      '심지어 Vue 개발자 도구로 데이터 흐름을 확인하려고 하면 한 번의 인터랙션에 여러 개의 emit이\n' +
      '로그로 출력되니 정신이 사납기까지 한 느낌이다 &#x3D; _&#x3D;a</p>\n' +
      '<p>그래서 <code>props</code>로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
      '핸들러를 실행시키기만 하면 어떨까 하는 생각에 <code>prop</code>로 함수를 내려주는 방식을 생각해보게 됐다.</p>\n' +
      '<h2 id="Is-it-an-anti-pattern"><a href="#Is-it-an-anti-pattern" class="headerlink" title="Is it an anti-pattern?"></a>Is it an anti-pattern?</h2><p>일단 생각을 해 봤으니 이게 가한 것은 맞는지 확인 해 볼 필요가 있었다. (처음 생각해 본\n' +
      '방법이고 Vue 관련 문서나 강의에서도 한 번도 이런 케이스를 본 적이 없으니까..)</p>\n' +
      '<p>구글링 결과 공교롭게도(?) 가장 먼저 눈에 띈 내용은 이 방식이 안티 패턴이라는 내용이었다.\n' +
      '(혹 관련 내용이 궁금하다면 <a href="%5Bhttps://michaelnthiessen.com/pass-function-as-prop/%5D(https://michaelnthiessen.com/pass-function-as-prop/)">How to Pass a Function as a Prop in Vue</a>를\n' +
      '읽어보시길... 아, 중간에 구독하라고 전체 팝업창이 뜨기는 하는데 개발자라면 뭐... 다 쉽게\n' +
      '걷어내... 쿨럭... )</p>\n' +
      '<p>하지만 왜 인지 모르겠으나... 해당 글에서는 안티 패턴임을 설명하는데 하위 컴포넌트의 mounted\n' +
      '훅에서 props로 받은 함수를 실행하는 코드를 보여주고 있었다.\n' +
      '무튼 그러면서 잘못된 것은 아니지만, Vue의 컨셉에 맞게 이벤트를 활용하거나 슬롯을 사용하라는\n' +
      '결론을 내주는게 영...</p>\n' +
      '<p>또 다른 아티클 들에서는 단순하게 props로 함수를 내리는게 가능하다 라는 짤막한 소개 정도가\n' +
      '있었다.</p>\n' +
      '<p>하여 안티 패턴이라 소개하는 글을 잠시 무시하기로 하고(?) props로 함수를 내리는 방식을\n' +
      '사용해봤다.\n' +
      '아, 안티 패턴이라 소개하는 글을 무시하기로 한 것은 안티 패턴을 굳이 사용하겠다는 것이 아니라,\n' +
      '안티 패턴인 이유에 대한 명확한 근거를 찾을 수 없어서다. 차후에라도 이것이 안티 패턴이라는\n' +
      '명확한 근거를 찾게 된다면 당연히 과감히 버릴거다.</p>\n' +
      '<h2 id="Try-it"><a href="#Try-it" class="headerlink" title="Try it"></a>Try it</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SignUpTemplate</span></span> <span class="token attr-name">:handle-sign-up</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>signUp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
      '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      'export default &#123;\n' +
      '  ...\n' +
      '  methods: &#123;\n' +
      '    ...\n' +
      '    signUp(&#123; email, password &#125;) &#123;\n' +
      '      users\n' +
      '        .postSignUp(&#123; email, password &#125;)\n' +
      '        .then(...)\n' +
      '        .catch(...)\n' +
      '    &#125;\n' +
      '  &#125;\n' +
      '&#125;;\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>Page에서 이렇게 <code>signUp</code> 함수를 props로 내려주고</p>\n' +
      '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      '  ...\n' +
      '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SignUpForm</span></span> <span class="token attr-name">:handle-submit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleSignUp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n' +
      '  ...\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
      '\n' +
      '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      'export default &#123;\n' +
      '  ...\n' +
      '  props: &#123;\n' +
      '    ...\n' +
      '    handleSignUp: &#123;\n' +
      '      type: Function,\n' +
      '      required: true,\n' +
      '      default: () => &#123;&#125;\n' +
      '    &#125;\n' +
      '  &#125;,\n' +
      '  ...\n' +
      '&#125;;\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>템플릿에서 props로 받은 함수를 다시 하위 컴포넌트로 내려주고,</p>\n' +
      '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form-container</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      '    ...\n' +
      '    &lt;DefaultButton\n' +
      '      @click.native.prevent="handleClickSubmit"\n' +
      '    />\n' +
      '    ...\n' +
      '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form-container</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
      '\n' +
      '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      'import DefaultButton from "@atoms/Button/Default";\n' +
      'export default &#123;\n' +
      '  components: &#123;\n' +
      '  props: &#123;\n' +
      '    handleSubmit: &#123;\n' +
      '      type: Function,\n' +
      '      required: true,\n' +
      '      default: () => &#123;&#125;\n' +
      '    &#125;\n' +
      '  &#125;,\n' +
      '  methods: &#123;\n' +
      '    handleClickSubmit() &#123;\n' +
      '      const &#123; handleSubmit, email, password, passwordConfirm &#125; = this;\n' +
      '      ...\n' +
      '      handleSubmit &amp;&amp; handleSubmit(&#123; email, password &#125;);\n' +
      '    &#125;\n' +
      '  &#125;\n' +
      '&#125;;\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>유저 인터랙션이 발생하는 하위 컴포넌트에서 해당 함수를 전달받아 실행하게 했다.\n' +
      '적용 결과는 당연히(?) 원하는 동작을 올바르게 수행해주었다.</p>\n' +
      '<p>이것보다는 modal  창을 포함하는 organism 컴포넌트에서 modal 창에 대한 제어와 modal 내부에\n' +
      'slot으로 끼워진 컴포넌트에 적용되는 부분이 이 방식을 더 잘 설명할 수 있을 것 같지만 너무\n' +
      '많은 코드가 삽입 되어야 해서 포스팅에는 간단한 위 코드로 적었다.</p>\n' +
      '<p>사실 event emit 방식으로도 충분히 대체도 가능하고 그것이 난이도나 복잡도가 더 높지는 않은\n' +
      '것 같기는 하다. 하지만, 뭐랄까 이 방식이 좀 더 dry한 느낌이 든달까? (기분탓이려나?)</p>\n' +
      '<p>무엇보다 개발자 도구에 여러 번에 걸친 이벤트 발생 로그를 보지 않아도 되니 한결 눈이 가벼워졌다.</p>\n',
    site: { data: [Object] },
    excerpt: '',
    more: '<h2 id="Event-handling-and-Atomic-Design-System"><a href="#Event-handling-and-Atomic-Design-System" class="headerlink" title="Event handling and Atomic Design System"></a>Event handling and Atomic Design System</h2><p>Atomic Design System을 컴포넌트 설계 방법론으로 가져가면서, 각 컴포넌트에 독립적으로\n' +
      '고립(?)된 데이터 구조를 만들게 되면서 (이게 맞는 방식인지는 잘 모르겠지만) 불편함이 점점\n' +
      '발생되었던 것 중 하나가 유저 인터랙션에 의해 발생되는 데이터 변경을 위해 쌓여진 컴포넌트\n' +
      '구조를 따라 계속 이벤트를 전달하고 이벤트 리스너를 통해 처리하는 방식이었다.</p>\n' +
      '<p>예를 들자면</p>\n' +
      '<p><img src="/upload/2021/event-flow-from-atom-to-page.svg" alt="유저 인터랙션으로 하위 컴포넌트로부터 상위 컴포넌트로의 이벤트 발생 과정"></p>\n' +
      '<p>이런 흐름 말이다.</p>\n' +
      '<p>Vue 공식 문서도 그렇고, 지금까지 보아온 대다수의 강의에서도 유저 인터랙션에 대한 데이터를\n' +
      '처리할 때 해당 데이터가 상위 컴포넌트에 존재할 경우, <code>$emit</code>을 이용하여 payload와 함께\n' +
      '하위 컴포넌트로부터 상위 컴포넌트로 차례로 올리고, 상위 컴포넌트에서 <code>v-on</code>으로 처리하는\n' +
      '방식을 사용하도록 안내하는 듯 하다.</p>\n' +
      '<p>Atomic Design Sytem을 적용하기 전에는 이러한 고민이 없었는데, 적용 이후로는 atom으로부터\n' +
      '실제 데이터가 바인딩 되는 page까지 5개 단계(?)를 거치게 되니 하위 컴포넌트에서 발생한\n' +
      '이벤트와 데이터를 다시 상위 컴포넌트로 by-pass 하기 위한 이벤트 처리가 뭐랄까... 조금\n' +
      '거슬린다고 할까?\n' +
      '심지어 Vue 개발자 도구로 데이터 흐름을 확인하려고 하면 한 번의 인터랙션에 여러 개의 emit이\n' +
      '로그로 출력되니 정신이 사납기까지 한 느낌이다 &#x3D; _&#x3D;a</p>\n' +
      '<p>그래서 <code>props</code>로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
      '핸들러를 실행시키기만 하면 어떨까 하는 생각에 <code>prop</code>로 함수를 내려주는 방식을 생각해보게 됐다.</p>\n' +
      '<h2 id="Is-it-an-anti-pattern"><a href="#Is-it-an-anti-pattern" class="headerlink" title="Is it an anti-pattern?"></a>Is it an anti-pattern?</h2><p>일단 생각을 해 봤으니 이게 가한 것은 맞는지 확인 해 볼 필요가 있었다. (처음 생각해 본\n' +
      '방법이고 Vue 관련 문서나 강의에서도 한 번도 이런 케이스를 본 적이 없으니까..)</p>\n' +
      '<p>구글링 결과 공교롭게도(?) 가장 먼저 눈에 띈 내용은 이 방식이 안티 패턴이라는 내용이었다.\n' +
      '(혹 관련 내용이 궁금하다면 <a href="%5Bhttps://michaelnthiessen.com/pass-function-as-prop/%5D(https://michaelnthiessen.com/pass-function-as-prop/)">How to Pass a Function as a Prop in Vue</a>를\n' +
      '읽어보시길... 아, 중간에 구독하라고 전체 팝업창이 뜨기는 하는데 개발자라면 뭐... 다 쉽게\n' +
      '걷어내... 쿨럭... )</p>\n' +
      '<p>하지만 왜 인지 모르겠으나... 해당 글에서는 안티 패턴임을 설명하는데 하위 컴포넌트의 mounted\n' +
      '훅에서 props로 받은 함수를 실행하는 코드를 보여주고 있었다.\n' +
      '무튼 그러면서 잘못된 것은 아니지만, Vue의 컨셉에 맞게 이벤트를 활용하거나 슬롯을 사용하라는\n' +
      '결론을 내주는게 영...</p>\n' +
      '<p>또 다른 아티클 들에서는 단순하게 props로 함수를 내리는게 가능하다 라는 짤막한 소개 정도가\n' +
      '있었다.</p>\n' +
      '<p>하여 안티 패턴이라 소개하는 글을 잠시 무시하기로 하고(?) props로 함수를 내리는 방식을\n' +
      '사용해봤다.\n' +
      '아, 안티 패턴이라 소개하는 글을 무시하기로 한 것은 안티 패턴을 굳이 사용하겠다는 것이 아니라,\n' +
      '안티 패턴인 이유에 대한 명확한 근거를 찾을 수 없어서다. 차후에라도 이것이 안티 패턴이라는\n' +
      '명확한 근거를 찾게 된다면 당연히 과감히 버릴거다.</p>\n' +
      '<h2 id="Try-it"><a href="#Try-it" class="headerlink" title="Try it"></a>Try it</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SignUpTemplate</span></span> <span class="token attr-name">:handle-sign-up</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>signUp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
      '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      'export default &#123;\n' +
      '  ...\n' +
      '  methods: &#123;\n' +
      '    ...\n' +
      '    signUp(&#123; email, password &#125;) &#123;\n' +
      '      users\n' +
      '        .postSignUp(&#123; email, password &#125;)\n' +
      '        .then(...)\n' +
      '        .catch(...)\n' +
      '    &#125;\n' +
      '  &#125;\n' +
      '&#125;;\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>Page에서 이렇게 <code>signUp</code> 함수를 props로 내려주고</p>\n' +
      '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      '  ...\n' +
      '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SignUpForm</span></span> <span class="token attr-name">:handle-submit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleSignUp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n' +
      '  ...\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
      '\n' +
      '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      'export default &#123;\n' +
      '  ...\n' +
      '  props: &#123;\n' +
      '    ...\n' +
      '    handleSignUp: &#123;\n' +
      '      type: Function,\n' +
      '      required: true,\n' +
      '      default: () => &#123;&#125;\n' +
      '    &#125;\n' +
      '  &#125;,\n' +
      '  ...\n' +
      '&#125;;\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>템플릿에서 props로 받은 함수를 다시 하위 컴포넌트로 내려주고,</p>\n' +
      '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form-container</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      '    ...\n' +
      '    &lt;DefaultButton\n' +
      '      @click.native.prevent="handleClickSubmit"\n' +
      '    />\n' +
      '    ...\n' +
      '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form-container</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
      '\n' +
      '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      'import DefaultButton from "@atoms/Button/Default";\n' +
      'export default &#123;\n' +
      '  components: &#123;\n' +
      '  props: &#123;\n' +
      '    handleSubmit: &#123;\n' +
      '      type: Function,\n' +
      '      required: true,\n' +
      '      default: () => &#123;&#125;\n' +
      '    &#125;\n' +
      '  &#125;,\n' +
      '  methods: &#123;\n' +
      '    handleClickSubmit() &#123;\n' +
      '      const &#123; handleSubmit, email, password, passwordConfirm &#125; = this;\n' +
      '      ...\n' +
      '      handleSubmit &amp;&amp; handleSubmit(&#123; email, password &#125;);\n' +
      '    &#125;\n' +
      '  &#125;\n' +
      '&#125;;\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>유저 인터랙션이 발생하는 하위 컴포넌트에서 해당 함수를 전달받아 실행하게 했다.\n' +
      '적용 결과는 당연히(?) 원하는 동작을 올바르게 수행해주었다.</p>\n' +
      '<p>이것보다는 modal  창을 포함하는 organism 컴포넌트에서 modal 창에 대한 제어와 modal 내부에\n' +
      'slot으로 끼워진 컴포넌트에 적용되는 부분이 이 방식을 더 잘 설명할 수 있을 것 같지만 너무\n' +
      '많은 코드가 삽입 되어야 해서 포스팅에는 간단한 위 코드로 적었다.</p>\n' +
      '<p>사실 event emit 방식으로도 충분히 대체도 가능하고 그것이 난이도나 복잡도가 더 높지는 않은\n' +
      '것 같기는 하다. 하지만, 뭐랄까 이 방식이 좀 더 dry한 느낌이 든달까? (기분탓이려나?)</p>\n' +
      '<p>무엇보다 개발자 도구에 여러 번에 걸친 이벤트 발생 로그를 보지 않아도 되니 한결 눈이 가벼워졌다.</p>\n',
    path: [Getter],
    permalink: [Getter],
    full_source: [Getter],
    asset_dir: [Getter],
    tags: [Getter],
    categories: [Getter],
    prev: [Circular *2],
    next: _Document {
      title: '2020년 회고',
      thumbnail: '/upload/2020/thumbs/loading-bar-2021.jpg',
      hero: '/upload/2020/loading-bar-2021.jpg',
      seo: [Object],
      date: Moment<2020-12-31T15:39:47+09:00>,
      style: null,
      _content: '\n' +
        '\n' +
        '올해는 아홉수를 제대로 겪은 한 해 였던 것 같다.\n' +
        '\n' +
        '## 2번의 퇴사\n' +
        '\n' +
        '아홉수를 제대로 겪게 만든 가장 큰 이벤트였다.\n' +
        '지난 2월 말 모 여행사를 퇴사했고 11월 말을 기점으로 8개월 만에 두 번째 회사를 퇴사했다.\n' +
        '\n' +
        '그리고 두 번 모두 사측의 이유로 퇴사가 진행되었고, 둘 모두 소위 거지 같은 퇴사 절차를 밟았다.\n' +
        '2월의 퇴사는 포스팅 했었으니, 차후 시간이 되면 두 번째 퇴사에 대한 이야기도 포스팅 할 예정이다.\n' +
        '\n' +
        '그렇다고 전혀 소득이 없는 것은 아니다.\n' +
        '이직에 관하여서는 잡플래닛의 평을 "관리"하여 (관리라 쓰고 직원들에게 좋은 리뷰를 쓰도록\n' +
        '요구한다고 읽음) 대외적으로 좋은 회사인 것처럼 보이도록 하는 회사가 제법 많다는걸 새삼 느끼게\n' +
        '되었다. 실제로 나 역시도 입사 후 한 달이 되기도 전에 리뷰 작성 요청을 받았지만 퇴사한\n' +
        '지금까지도 리뷰는 작성하지 않았다. 솔직한 심정으로 잡플래닛의 리뷰는 이제 좋지 않은 평가만을\n' +
        '신뢰하게 되고 좋은 평가는 신뢰하지 않게 되었다.\n' +
        '\n' +
        '업무적으로는 Vue/Nuxt로 zero-base에서 릴리즈까지 모든 과정을 한 번 겪었다는 거다.\n' +
        '또, 본격적(?)으로 아토믹 디자인과 Storybook 구축의 시도는 (그것이 잘 되었든 잘 안되었든)\n' +
        '그 과정 속에서의 고민과 문제 해결의 반복의 경험을 더 많이 늘려주었다. 아토믹 디자인과\n' +
        'Storybook을 시도해본 경험에 대해서는 차후 따로 포스팅 해 볼 예정이다.\n' +
        '\n' +
        '하지만 결과적으로 나는 다시 실업자가 되었고 다시 이직 과정 속에서 고통(?)을 겪고 있다.\n' +
        '\n' +
        '## 코로나 시국\n' +
        '\n' +
        '지난 1월에 시작된 코로나 상황이 결국 지금까지 이어지고 있다. 덕분에(?) 자연스럽게 외부 활동이\n' +
        '줄었다. 중간 중간 1:1 정도의 오프라인 모임은 이어왔었지만, 중반에 이르러서부터는 그마저도\n' +
        '하지 않고 있다. (그 좋아하는 코노를 몇 달 째 못가고 있고... 영화관을 가는 것도 포기했다... ㅠㅠ)\n' +
        '\n' +
        '점심 식사를 배달로 먹는게 익숙해져서, 배X에 천생연분 등급까지 올라가봤고...\n' +
        '182만원 정도를 배달 식비로 소비했다 ㄷㄷㄷ\n' +
        '\n' +
        '예년 같았으면 퇴사 후에 여행을 갔을 텐데, 코로나 시국 덕에 여행을 못가고 있다. 슬프다 ㅠㅠ\n' +
        '\n' +
        '## 재정\n' +
        '\n' +
        '기존에 P2P에서 전체 현금 자산의 10% 정도를 씨드머니로 해서 굴리고 있었는데, 1개 회사가\n' +
        '먹튀했고 2개 회사에서 원금 손실로 현재 기약없이 야금야금 상환중이다.\n' +
        '회고를 작성하면서 확인해보니 P2P로 얻은 수익을 반영해보면 5백만원 정도의 손실이 있는 상태다.\n' +
        '(그나마 다행인건가?) 손실률이 적게라도 빨리 상환이 이루어졌으면 좋겠다 ㅠ\n' +
        '\n' +
        '대신 풍차예·적금을 1년치 만들었고, 2년치로 확장 중에 있다. 올해 예금 금리가 너무 떨어져서\n' +
        '2금융권까지 늘렸고 2금융권으로의 예치금 비율이 더 높아졌다.\n' +
        '\n' +
        '블로그 테마에 JSON-LD 오류가 있던 걸 수정 이후 연 1회 받던 애드센스가 올해는 3번 지급받았다.\n' +
        '포스트 수가 많지도 않은데 이렇게 들어오는 걸 보니 더 많이 포스팅해야겠다는 의욕이 솟지만...\n' +
        '수익을 위한 포스팅은 하고 싶지 않다는 생각이 더 지배적이다. 애드센스는 그냥 쌈짓돈 버는 수준만\n' +
        '유지하는데 만족하고 욕심내지 않기로 했다.\n' +
        '\n' +
        '## 학습, 프로젝트, 독서\n' +
        '\n' +
        '현재 회사에 들어와서 내 철칙 중 하나를 깼었는데, 바로 야근에 대한 부분이었다.\n' +
        '\n' +
        '프로덕트를 시급하게 만들어야 하는 상황이었기 때문에 일부 번아웃을 감안하고 야근을 감당하더라도\n' +
        '진행하기로 했는데, 그 덕분에 학습하기로 했던 것이나 개인 프로젝트로 진행하기로 했던 것, 독서량을\n' +
        '늘리기로했던 것이 모두 수포로 돌아갔다.\n' +
        '\n' +
        '관련된 이야기는 차후 따로 포스팅 할 예정이지만, 무튼 시간적 여유로 작년 계획했던 것들은 대부분\n' +
        '이루어내지 못했고, 퇴사 이후에 다시 시작하고 있다. (그래서 워라밸이 중요하다고 생각한다.)\n' +
        '\n' +
        '## 블로그 운영\n' +
        '\n' +
        '매 달 포스팅을 이어가지는 못했지만,  목표치의 60% 정도는 달성했다.\n' +
        '\n' +
        '한 달에 2개 포스트를 작성하는 것은 생각보다 더 어려운 일이었다. 확실히 욕심이 앞섰던 것 같다.\n' +
        '하지만 내년에도 동일한 목표를 가져가려고 한다. 60%가 80% 까지 끌어올려지기만 해도 좋다고\n' +
        '생각하고 100%를 달성한다면 더 좋을 것이기 때문이다.\n' +
        '\n' +
        '아, 그리고 올해 Hexo가 4.x로 업데이트 되면서 3.x와의 호환성이 너무 많이 깨져서 테마를 새로\n' +
        '만들 예정이다. 아직 구체적인 부분을 잡지는 못했지만, 여전히 pug를 이용할 생각이고 이번 테마에\n' +
        '아토믹디자인 시스템과 storybook도 적용해 볼 생각이다. (뻘짓일 수도 있겠지만 시도 하는 것\n' +
        '자체가 쓸데없다고 생각하지는 않는다.)\n' +
        '\n' +
        '## 대외 활동\n' +
        '\n' +
        'AOA 활동은 여전히 지속되고 있다. ~~(빠져나올 수 없는 개미지옥)~~\n' +
        '\n' +
        '하반기에 접어들어서는 격주로 올리기로 해서 이전에 비해 여유가 생긴 편이라 다소 낮은 마감의\n' +
        '압박을 느끼며 순조롭게 번역과 영상 제작을 진행하고 있다.\n' +
        '\n' +
        'WAI-ARIA Authoring Practices 번역 덕분에 좀 더 자세히 알아가게 되는 것들이 있다. 확실히\n' +
        '공식 문서에 대한 번역은 문서를 꼼꼼하게 살펴보고 앞뒤 맥락을 살피게 되어 더 자세히 들여다보게\n' +
        '되어 깊게 알게 되는 것 같다. 내년 상반기에는 아마도 컴포넌트별 사례를 만들면서 나도 더 자세히\n' +
        '학습할 수 있게 되지 않을까 싶다.\n' +
        '\n' +
        '11월에는 생각지도 않았던 세미나 발표를 했다.\n' +
        '정보접근기술 컨퍼런스에서 WAI-ARIA 102를 주제로 발표했고, 2주라는 준비 기간에 비해서 다소\n' +
        '담백하게 잘 발표했다고 생각한다.\n' +
        '\n' +
        '하지만 여전히 접근성에 대한 인식이 더 문제라고 생각하고, 한국 사회에서는 더 강한 법으로\n' +
        '규제해야 한다고 생각한다.\n' +
        '\n' +
        '### 하코사 거리두기\n' +
        '\n' +
        '작년, 하코사를 벗어나는 것에 대해서 생각했었고 코로나 덕분이기도 하지만 어느 정도 선을 그었고\n' +
        '거리를 두어 게시판 관리 외에는 관심을 멀리했다. (물론 바쁜 상황들도 한 몫을 더했다.)\n' +
        '\n' +
        '회고를 작성하면서 잠깐 질문글 삭튀에 대한 통계를 내봤는데, 올해 1월 1일부터 29일까지\n' +
        '기준으로 1042개의 질문글이 자기에게 필요한 답변을 받고나서 글이 삭제되었고, 그렇게 해서\n' +
        '패널티를 받은 아이디가 (중복으로 패널티를 받은 것을 제외하고) 509개에 달했다.\n' +
        '\n' +
        '연간 근무일수가 250일 정도라는 것을 감안하면, 하루 새로운 2명씩은 답변을 받은 뒤 글을\n' +
        '삭제했다는 거다.\n' +
        '\n' +
        '미안한 이야기지만, 하코사는 정말 하위 역량을 가진 이들의 집단이 될 확률이 다분히 높다고\n' +
        '생각한다. 저런 곳에서 누가 지식과 경험을 공유하고 싶을까.\n' +
        '\n' +
        '## to 2021\n' +
        '\n' +
        '2021년은 내게 앞자리가 바뀌는 해다. 허허허...\n' +
        '10년전 2가 3으로 바뀔 때는 큰 감흥이 없었는데 이제 앞자리가 또 바뀐다고 생각하니 무언가\n' +
        '씁쓸하다. (내가 언제 이렇게 나이들었나 싶은... 물론 나보다 나이 많으신 분들은 코웃음 치겠지만\n' +
        'ㅎㅎㅎ)\n' +
        '하지만 내일 아침 해가 뜨면 어 아침이구나 하겠지 ㅎㅎㅎ\n' +
        '\n' +
        '이런 저런 생각이 많아지는 2020년의 마지막 날이다\n' +
        '\n' +
        '아직 2021년에 어떤 계획을 가지고 살아갈지 혹은 살아낼지 어떤 생각도 없다.\n' +
        '다만 하루하루가 흘러가지 않기를 바라고, 다시 내년 이 맘 때 쯤 회고를 작성할 때에는 올해 참\n' +
        '잘 지냈다라고 작성할 수 있기를 바란다.\n',
      source: '_posts/2020-12-31-2020-retrospective.md',
      raw: '---\n' +
        'title: 2020년 회고\n' +
        'tags:\n' +
        '  - retrospective\n' +
        '  - 2020 회고\n' +
        '  - 아홉수\n' +
        'categories:\n' +
        '  - 일상노트\n' +
        '  - miscellaneous\n' +
        'thumbnail: /upload/2020/thumbs/loading-bar-2021.jpg\n' +
        'hero: /upload/2020/loading-bar-2021.jpg\n' +
        'seo:\n' +
        '  description: |\n' +
        '    이런 저런 생각이 많아지는 2020년의 마지막 날이다.  아직 2021년에 어떤 계획을 가지고\n' +
        '    살아갈지 혹은 살아낼지 어떤 생각도 없다. 다만 하루하루가 흘러가지 않기를 바라고, 다시\n' +
        '    내년 이 맘 때 쯤 회고를 작성할 때에는 올해 참 잘 지냈다라고 작성할 수 있기를 바란다.\n' +
        'date: 2020-12-31 15:39:47\n' +
        'style:\n' +
        '---\n' +
        '\n' +
        '\n' +
        '올해는 아홉수를 제대로 겪은 한 해 였던 것 같다.\n' +
        '\n' +
        '## 2번의 퇴사\n' +
        '\n' +
        '아홉수를 제대로 겪게 만든 가장 큰 이벤트였다.\n' +
        '지난 2월 말 모 여행사를 퇴사했고 11월 말을 기점으로 8개월 만에 두 번째 회사를 퇴사했다.\n' +
        '\n' +
        '그리고 두 번 모두 사측의 이유로 퇴사가 진행되었고, 둘 모두 소위 거지 같은 퇴사 절차를 밟았다.\n' +
        '2월의 퇴사는 포스팅 했었으니, 차후 시간이 되면 두 번째 퇴사에 대한 이야기도 포스팅 할 예정이다.\n' +
        '\n' +
        '그렇다고 전혀 소득이 없는 것은 아니다.\n' +
        '이직에 관하여서는 잡플래닛의 평을 "관리"하여 (관리라 쓰고 직원들에게 좋은 리뷰를 쓰도록\n' +
        '요구한다고 읽음) 대외적으로 좋은 회사인 것처럼 보이도록 하는 회사가 제법 많다는걸 새삼 느끼게\n' +
        '되었다. 실제로 나 역시도 입사 후 한 달이 되기도 전에 리뷰 작성 요청을 받았지만 퇴사한\n' +
        '지금까지도 리뷰는 작성하지 않았다. 솔직한 심정으로 잡플래닛의 리뷰는 이제 좋지 않은 평가만을\n' +
        '신뢰하게 되고 좋은 평가는 신뢰하지 않게 되었다.\n' +
        '\n' +
        '업무적으로는 Vue/Nuxt로 zero-base에서 릴리즈까지 모든 과정을 한 번 겪었다는 거다.\n' +
        '또, 본격적(?)으로 아토믹 디자인과 Storybook 구축의 시도는 (그것이 잘 되었든 잘 안되었든)\n' +
        '그 과정 속에서의 고민과 문제 해결의 반복의 경험을 더 많이 늘려주었다. 아토믹 디자인과\n' +
        'Storybook을 시도해본 경험에 대해서는 차후 따로 포스팅 해 볼 예정이다.\n' +
        '\n' +
        '하지만 결과적으로 나는 다시 실업자가 되었고 다시 이직 과정 속에서 고통(?)을 겪고 있다.\n' +
        '\n' +
        '## 코로나 시국\n' +
        '\n' +
        '지난 1월에 시작된 코로나 상황이 결국 지금까지 이어지고 있다. 덕분에(?) 자연스럽게 외부 활동이\n' +
        '줄었다. 중간 중간 1:1 정도의 오프라인 모임은 이어왔었지만, 중반에 이르러서부터는 그마저도\n' +
        '하지 않고 있다. (그 좋아하는 코노를 몇 달 째 못가고 있고... 영화관을 가는 것도 포기했다... ㅠㅠ)\n' +
        '\n' +
        '점심 식사를 배달로 먹는게 익숙해져서, 배X에 천생연분 등급까지 올라가봤고...\n' +
        '182만원 정도를 배달 식비로 소비했다 ㄷㄷㄷ\n' +
        '\n' +
        '예년 같았으면 퇴사 후에 여행을 갔을 텐데, 코로나 시국 덕에 여행을 못가고 있다. 슬프다 ㅠㅠ\n' +
        '\n' +
        '## 재정\n' +
        '\n' +
        '기존에 P2P에서 전체 현금 자산의 10% 정도를 씨드머니로 해서 굴리고 있었는데, 1개 회사가\n' +
        '먹튀했고 2개 회사에서 원금 손실로 현재 기약없이 야금야금 상환중이다.\n' +
        '회고를 작성하면서 확인해보니 P2P로 얻은 수익을 반영해보면 5백만원 정도의 손실이 있는 상태다.\n' +
        '(그나마 다행인건가?) 손실률이 적게라도 빨리 상환이 이루어졌으면 좋겠다 ㅠ\n' +
        '\n' +
        '대신 풍차예·적금을 1년치 만들었고, 2년치로 확장 중에 있다. 올해 예금 금리가 너무 떨어져서\n' +
        '2금융권까지 늘렸고 2금융권으로의 예치금 비율이 더 높아졌다.\n' +
        '\n' +
        '블로그 테마에 JSON-LD 오류가 있던 걸 수정 이후 연 1회 받던 애드센스가 올해는 3번 지급받았다.\n' +
        '포스트 수가 많지도 않은데 이렇게 들어오는 걸 보니 더 많이 포스팅해야겠다는 의욕이 솟지만...\n' +
        '수익을 위한 포스팅은 하고 싶지 않다는 생각이 더 지배적이다. 애드센스는 그냥 쌈짓돈 버는 수준만\n' +
        '유지하는데 만족하고 욕심내지 않기로 했다.\n' +
        '\n' +
        '## 학습, 프로젝트, 독서\n' +
        '\n' +
        '현재 회사에 들어와서 내 철칙 중 하나를 깼었는데, 바로 야근에 대한 부분이었다.\n' +
        '\n' +
        '프로덕트를 시급하게 만들어야 하는 상황이었기 때문에 일부 번아웃을 감안하고 야근을 감당하더라도\n' +
        '진행하기로 했는데, 그 덕분에 학습하기로 했던 것이나 개인 프로젝트로 진행하기로 했던 것, 독서량을\n' +
        '늘리기로했던 것이 모두 수포로 돌아갔다.\n' +
        '\n' +
        '관련된 이야기는 차후 따로 포스팅 할 예정이지만, 무튼 시간적 여유로 작년 계획했던 것들은 대부분\n' +
        '이루어내지 못했고, 퇴사 이후에 다시 시작하고 있다. (그래서 워라밸이 중요하다고 생각한다.)\n' +
        '\n' +
        '## 블로그 운영\n' +
        '\n' +
        '매 달 포스팅을 이어가지는 못했지만,  목표치의 60% 정도는 달성했다.\n' +
        '\n' +
        '한 달에 2개 포스트를 작성하는 것은 생각보다 더 어려운 일이었다. 확실히 욕심이 앞섰던 것 같다.\n' +
        '하지만 내년에도 동일한 목표를 가져가려고 한다. 60%가 80% 까지 끌어올려지기만 해도 좋다고\n' +
        '생각하고 100%를 달성한다면 더 좋을 것이기 때문이다.\n' +
        '\n' +
        '아, 그리고 올해 Hexo가 4.x로 업데이트 되면서 3.x와의 호환성이 너무 많이 깨져서 테마를 새로\n' +
        '만들 예정이다. 아직 구체적인 부분을 잡지는 못했지만, 여전히 pug를 이용할 생각이고 이번 테마에\n' +
        '아토믹디자인 시스템과 storybook도 적용해 볼 생각이다. (뻘짓일 수도 있겠지만 시도 하는 것\n' +
        '자체가 쓸데없다고 생각하지는 않는다.)\n' +
        '\n' +
        '## 대외 활동\n' +
        '\n' +
        'AOA 활동은 여전히 지속되고 있다. ~~(빠져나올 수 없는 개미지옥)~~\n' +
        '\n' +
        '하반기에 접어들어서는 격주로 올리기로 해서 이전에 비해 여유가 생긴 편이라 다소 낮은 마감의\n' +
        '압박을 느끼며 순조롭게 번역과 영상 제작을 진행하고 있다.\n' +
        '\n' +
        'WAI-ARIA Authoring Practices 번역 덕분에 좀 더 자세히 알아가게 되는 것들이 있다. 확실히\n' +
        '공식 문서에 대한 번역은 문서를 꼼꼼하게 살펴보고 앞뒤 맥락을 살피게 되어 더 자세히 들여다보게\n' +
        '되어 깊게 알게 되는 것 같다. 내년 상반기에는 아마도 컴포넌트별 사례를 만들면서 나도 더 자세히\n' +
        '학습할 수 있게 되지 않을까 싶다.\n' +
        '\n' +
        '11월에는 생각지도 않았던 세미나 발표를 했다.\n' +
        '정보접근기술 컨퍼런스에서 WAI-ARIA 102를 주제로 발표했고, 2주라는 준비 기간에 비해서 다소\n' +
        '담백하게 잘 발표했다고 생각한다.\n' +
        '\n' +
        '하지만 여전히 접근성에 대한 인식이 더 문제라고 생각하고, 한국 사회에서는 더 강한 법으로\n' +
        '규제해야 한다고 생각한다.\n' +
        '\n' +
        '### 하코사 거리두기\n' +
        '\n' +
        '작년, 하코사를 벗어나는 것에 대해서 생각했었고 코로나 덕분이기도 하지만 어느 정도 선을 그었고\n' +
        '거리를 두어 게시판 관리 외에는 관심을 멀리했다. (물론 바쁜 상황들도 한 몫을 더했다.)\n' +
        '\n' +
        '회고를 작성하면서 잠깐 질문글 삭튀에 대한 통계를 내봤는데, 올해 1월 1일부터 29일까지\n' +
        '기준으로 1042개의 질문글이 자기에게 필요한 답변을 받고나서 글이 삭제되었고, 그렇게 해서\n' +
        '패널티를 받은 아이디가 (중복으로 패널티를 받은 것을 제외하고) 509개에 달했다.\n' +
        '\n' +
        '연간 근무일수가 250일 정도라는 것을 감안하면, 하루 새로운 2명씩은 답변을 받은 뒤 글을\n' +
        '삭제했다는 거다.\n' +
        '\n' +
        '미안한 이야기지만, 하코사는 정말 하위 역량을 가진 이들의 집단이 될 확률이 다분히 높다고\n' +
        '생각한다. 저런 곳에서 누가 지식과 경험을 공유하고 싶을까.\n' +
        '\n' +
        '## to 2021\n' +
        '\n' +
        '2021년은 내게 앞자리가 바뀌는 해다. 허허허...\n' +
        '10년전 2가 3으로 바뀔 때는 큰 감흥이 없었는데 이제 앞자리가 또 바뀐다고 생각하니 무언가\n' +
        '씁쓸하다. (내가 언제 이렇게 나이들었나 싶은... 물론 나보다 나이 많으신 분들은 코웃음 치겠지만\n' +
        'ㅎㅎㅎ)\n' +
        '하지만 내일 아침 해가 뜨면 어 아침이구나 하겠지 ㅎㅎㅎ\n' +
        '\n' +
        '이런 저런 생각이 많아지는 2020년의 마지막 날이다\n' +
        '\n' +
        '아직 2021년에 어떤 계획을 가지고 살아갈지 혹은 살아낼지 어떤 생각도 없다.\n' +
        '다만 하루하루가 흘러가지 않기를 바라고, 다시 내년 이 맘 때 쯤 회고를 작성할 때에는 올해 참\n' +
        '잘 지냈다라고 작성할 수 있기를 바란다.\n',
      slug: '2020-retrospective',
      published: true,
      comments: true,
      layout: 'post',
      photos: [],
      link: '',
      _id: 'clcytfa4q00a3taww5nmt96z6',
      content: '<p>올해는 아홉수를 제대로 겪은 한 해 였던 것 같다.</p>\n' +
        '<h2 id="2번의-퇴사"><a href="#2번의-퇴사" class="headerlink" title="2번의 퇴사"></a>2번의 퇴사</h2><p>아홉수를 제대로 겪게 만든 가장 큰 이벤트였다.\n' +
        '지난 2월 말 모 여행사를 퇴사했고 11월 말을 기점으로 8개월 만에 두 번째 회사를 퇴사했다.</p>\n' +
        '<p>그리고 두 번 모두 사측의 이유로 퇴사가 진행되었고, 둘 모두 소위 거지 같은 퇴사 절차를 밟았다.\n' +
        '2월의 퇴사는 포스팅 했었으니, 차후 시간이 되면 두 번째 퇴사에 대한 이야기도 포스팅 할 예정이다.</p>\n' +
        '<p>그렇다고 전혀 소득이 없는 것은 아니다.\n' +
        '이직에 관하여서는 잡플래닛의 평을 &quot;관리&quot;하여 (관리라 쓰고 직원들에게 좋은 리뷰를 쓰도록\n' +
        '요구한다고 읽음) 대외적으로 좋은 회사인 것처럼 보이도록 하는 회사가 제법 많다는걸 새삼 느끼게\n' +
        '되었다. 실제로 나 역시도 입사 후 한 달이 되기도 전에 리뷰 작성 요청을 받았지만 퇴사한\n' +
        '지금까지도 리뷰는 작성하지 않았다. 솔직한 심정으로 잡플래닛의 리뷰는 이제 좋지 않은 평가만을\n' +
        '신뢰하게 되고 좋은 평가는 신뢰하지 않게 되었다.</p>\n' +
        '<p>업무적으로는 Vue&#x2F;Nuxt로 zero-base에서 릴리즈까지 모든 과정을 한 번 겪었다는 거다.\n' +
        '또, 본격적(?)으로 아토믹 디자인과 Storybook 구축의 시도는 (그것이 잘 되었든 잘 안되었든)\n' +
        '그 과정 속에서의 고민과 문제 해결의 반복의 경험을 더 많이 늘려주었다. 아토믹 디자인과\n' +
        'Storybook을 시도해본 경험에 대해서는 차후 따로 포스팅 해 볼 예정이다.</p>\n' +
        '<p>하지만 결과적으로 나는 다시 실업자가 되었고 다시 이직 과정 속에서 고통(?)을 겪고 있다.</p>\n' +
        '<h2 id="코로나-시국"><a href="#코로나-시국" class="headerlink" title="코로나 시국"></a>코로나 시국</h2><p>지난 1월에 시작된 코로나 상황이 결국 지금까지 이어지고 있다. 덕분에(?) 자연스럽게 외부 활동이\n' +
        '줄었다. 중간 중간 1:1 정도의 오프라인 모임은 이어왔었지만, 중반에 이르러서부터는 그마저도\n' +
        '하지 않고 있다. (그 좋아하는 코노를 몇 달 째 못가고 있고... 영화관을 가는 것도 포기했다... ㅠㅠ)</p>\n' +
        '<p>점심 식사를 배달로 먹는게 익숙해져서, 배X에 천생연분 등급까지 올라가봤고...\n' +
        '182만원 정도를 배달 식비로 소비했다 ㄷㄷㄷ</p>\n' +
        '<p>예년 같았으면 퇴사 후에 여행을 갔을 텐데, 코로나 시국 덕에 여행을 못가고 있다. 슬프다 ㅠㅠ</p>\n' +
        '<h2 id="재정"><a href="#재정" class="headerlink" title="재정"></a>재정</h2><p>기존에 P2P에서 전체 현금 자산의 10% 정도를 씨드머니로 해서 굴리고 있었는데, 1개 회사가\n' +
        '먹튀했고 2개 회사에서 원금 손실로 현재 기약없이 야금야금 상환중이다.\n' +
        '회고를 작성하면서 확인해보니 P2P로 얻은 수익을 반영해보면 5백만원 정도의 손실이 있는 상태다.\n' +
        '(그나마 다행인건가?) 손실률이 적게라도 빨리 상환이 이루어졌으면 좋겠다 ㅠ</p>\n' +
        '<p>대신 풍차예·적금을 1년치 만들었고, 2년치로 확장 중에 있다. 올해 예금 금리가 너무 떨어져서\n' +
        '2금융권까지 늘렸고 2금융권으로의 예치금 비율이 더 높아졌다.</p>\n' +
        '<p>블로그 테마에 JSON-LD 오류가 있던 걸 수정 이후 연 1회 받던 애드센스가 올해는 3번 지급받았다.\n' +
        '포스트 수가 많지도 않은데 이렇게 들어오는 걸 보니 더 많이 포스팅해야겠다는 의욕이 솟지만...\n' +
        '수익을 위한 포스팅은 하고 싶지 않다는 생각이 더 지배적이다. 애드센스는 그냥 쌈짓돈 버는 수준만\n' +
        '유지하는데 만족하고 욕심내지 않기로 했다.</p>\n' +
        '<h2 id="학습-프로젝트-독서"><a href="#학습-프로젝트-독서" class="headerlink" title="학습, 프로젝트, 독서"></a>학습, 프로젝트, 독서</h2><p>현재 회사에 들어와서 내 철칙 중 하나를 깼었는데, 바로 야근에 대한 부분이었다.</p>\n' +
        '<p>프로덕트를 시급하게 만들어야 하는 상황이었기 때문에 일부 번아웃을 감안하고 야근을 감당하더라도\n' +
        '진행하기로 했는데, 그 덕분에 학습하기로 했던 것이나 개인 프로젝트로 진행하기로 했던 것, 독서량을\n' +
        '늘리기로했던 것이 모두 수포로 돌아갔다.</p>\n' +
        '<p>관련된 이야기는 차후 따로 포스팅 할 예정이지만, 무튼 시간적 여유로 작년 계획했던 것들은 대부분\n' +
        '이루어내지 못했고, 퇴사 이후에 다시 시작하고 있다. (그래서 워라밸이 중요하다고 생각한다.)</p>\n' +
        '<h2 id="블로그-운영"><a href="#블로그-운영" class="headerlink" title="블로그 운영"></a>블로그 운영</h2><p>매 달 포스팅을 이어가지는 못했지만,  목표치의 60% 정도는 달성했다.</p>\n' +
        '<p>한 달에 2개 포스트를 작성하는 것은 생각보다 더 어려운 일이었다. 확실히 욕심이 앞섰던 것 같다.\n' +
        '하지만 내년에도 동일한 목표를 가져가려고 한다. 60%가 80% 까지 끌어올려지기만 해도 좋다고\n' +
        '생각하고 100%를 달성한다면 더 좋을 것이기 때문이다.</p>\n' +
        '<p>아, 그리고 올해 Hexo가 4.x로 업데이트 되면서 3.x와의 호환성이 너무 많이 깨져서 테마를 새로\n' +
        '만들 예정이다. 아직 구체적인 부분을 잡지는 못했지만, 여전히 pug를 이용할 생각이고 이번 테마에\n' +
        '아토믹디자인 시스템과 storybook도 적용해 볼 생각이다. (뻘짓일 수도 있겠지만 시도 하는 것\n' +
        '자체가 쓸데없다고 생각하지는 않는다.)</p>\n' +
        '<h2 id="대외-활동"><a href="#대외-활동" class="headerlink" title="대외 활동"></a>대외 활동</h2><p>AOA 활동은 여전히 지속되고 있다. <del>(빠져나올 수 없는 개미지옥)</del></p>\n' +
        '<p>하반기에 접어들어서는 격주로 올리기로 해서 이전에 비해 여유가 생긴 편이라 다소 낮은 마감의\n' +
        '압박을 느끼며 순조롭게 번역과 영상 제작을 진행하고 있다.</p>\n' +
        '<p>WAI-ARIA Authoring Practices 번역 덕분에 좀 더 자세히 알아가게 되는 것들이 있다. 확실히\n' +
        '공식 문서에 대한 번역은 문서를 꼼꼼하게 살펴보고 앞뒤 맥락을 살피게 되어 더 자세히 들여다보게\n' +
        '되어 깊게 알게 되는 것 같다. 내년 상반기에는 아마도 컴포넌트별 사례를 만들면서 나도 더 자세히\n' +
        '학습할 수 있게 되지 않을까 싶다.</p>\n' +
        '<p>11월에는 생각지도 않았던 세미나 발표를 했다.\n' +
        '정보접근기술 컨퍼런스에서 WAI-ARIA 102를 주제로 발표했고, 2주라는 준비 기간에 비해서 다소\n' +
        '담백하게 잘 발표했다고 생각한다.</p>\n' +
        '<p>하지만 여전히 접근성에 대한 인식이 더 문제라고 생각하고, 한국 사회에서는 더 강한 법으로\n' +
        '규제해야 한다고 생각한다.</p>\n' +
        '<h3 id="하코사-거리두기"><a href="#하코사-거리두기" class="headerlink" title="하코사 거리두기"></a>하코사 거리두기</h3><p>작년, 하코사를 벗어나는 것에 대해서 생각했었고 코로나 덕분이기도 하지만 어느 정도 선을 그었고\n' +
        '거리를 두어 게시판 관리 외에는 관심을 멀리했다. (물론 바쁜 상황들도 한 몫을 더했다.)</p>\n' +
        '<p>회고를 작성하면서 잠깐 질문글 삭튀에 대한 통계를 내봤는데, 올해 1월 1일부터 29일까지\n' +
        '기준으로 1042개의 질문글이 자기에게 필요한 답변을 받고나서 글이 삭제되었고, 그렇게 해서\n' +
        '패널티를 받은 아이디가 (중복으로 패널티를 받은 것을 제외하고) 509개에 달했다.</p>\n' +
        '<p>연간 근무일수가 250일 정도라는 것을 감안하면, 하루 새로운 2명씩은 답변을 받은 뒤 글을\n' +
        '삭제했다는 거다.</p>\n' +
        '<p>미안한 이야기지만, 하코사는 정말 하위 역량을 가진 이들의 집단이 될 확률이 다분히 높다고\n' +
        '생각한다. 저런 곳에서 누가 지식과 경험을 공유하고 싶을까.</p>\n' +
        '<h2 id="to-2021"><a href="#to-2021" class="headerlink" title="to 2021"></a>to 2021</h2><p>2021년은 내게 앞자리가 바뀌는 해다. 허허허...\n' +
        '10년전 2가 3으로 바뀔 때는 큰 감흥이 없었는데 이제 앞자리가 또 바뀐다고 생각하니 무언가\n' +
        '씁쓸하다. (내가 언제 이렇게 나이들었나 싶은... 물론 나보다 나이 많으신 분들은 코웃음 치겠지만\n' +
        'ㅎㅎㅎ)\n' +
        '하지만 내일 아침 해가 뜨면 어 아침이구나 하겠지 ㅎㅎㅎ</p>\n' +
        '<p>이런 저런 생각이 많아지는 2020년의 마지막 날이다</p>\n' +
        '<p>아직 2021년에 어떤 계획을 가지고 살아갈지 혹은 살아낼지 어떤 생각도 없다.\n' +
        '다만 하루하루가 흘러가지 않기를 바라고, 다시 내년 이 맘 때 쯤 회고를 작성할 때에는 올해 참\n' +
        '잘 지냈다라고 작성할 수 있기를 바란다.</p>\n',
      site: [Object],
      excerpt: '',
      more: '<p>올해는 아홉수를 제대로 겪은 한 해 였던 것 같다.</p>\n' +
        '<h2 id="2번의-퇴사"><a href="#2번의-퇴사" class="headerlink" title="2번의 퇴사"></a>2번의 퇴사</h2><p>아홉수를 제대로 겪게 만든 가장 큰 이벤트였다.\n' +
        '지난 2월 말 모 여행사를 퇴사했고 11월 말을 기점으로 8개월 만에 두 번째 회사를 퇴사했다.</p>\n' +
        '<p>그리고 두 번 모두 사측의 이유로 퇴사가 진행되었고, 둘 모두 소위 거지 같은 퇴사 절차를 밟았다.\n' +
        '2월의 퇴사는 포스팅 했었으니, 차후 시간이 되면 두 번째 퇴사에 대한 이야기도 포스팅 할 예정이다.</p>\n' +
        '<p>그렇다고 전혀 소득이 없는 것은 아니다.\n' +
        '이직에 관하여서는 잡플래닛의 평을 &quot;관리&quot;하여 (관리라 쓰고 직원들에게 좋은 리뷰를 쓰도록\n' +
        '요구한다고 읽음) 대외적으로 좋은 회사인 것처럼 보이도록 하는 회사가 제법 많다는걸 새삼 느끼게\n' +
        '되었다. 실제로 나 역시도 입사 후 한 달이 되기도 전에 리뷰 작성 요청을 받았지만 퇴사한\n' +
        '지금까지도 리뷰는 작성하지 않았다. 솔직한 심정으로 잡플래닛의 리뷰는 이제 좋지 않은 평가만을\n' +
        '신뢰하게 되고 좋은 평가는 신뢰하지 않게 되었다.</p>\n' +
        '<p>업무적으로는 Vue&#x2F;Nuxt로 zero-base에서 릴리즈까지 모든 과정을 한 번 겪었다는 거다.\n' +
        '또, 본격적(?)으로 아토믹 디자인과 Storybook 구축의 시도는 (그것이 잘 되었든 잘 안되었든)\n' +
        '그 과정 속에서의 고민과 문제 해결의 반복의 경험을 더 많이 늘려주었다. 아토믹 디자인과\n' +
        'Storybook을 시도해본 경험에 대해서는 차후 따로 포스팅 해 볼 예정이다.</p>\n' +
        '<p>하지만 결과적으로 나는 다시 실업자가 되었고 다시 이직 과정 속에서 고통(?)을 겪고 있다.</p>\n' +
        '<h2 id="코로나-시국"><a href="#코로나-시국" class="headerlink" title="코로나 시국"></a>코로나 시국</h2><p>지난 1월에 시작된 코로나 상황이 결국 지금까지 이어지고 있다. 덕분에(?) 자연스럽게 외부 활동이\n' +
        '줄었다. 중간 중간 1:1 정도의 오프라인 모임은 이어왔었지만, 중반에 이르러서부터는 그마저도\n' +
        '하지 않고 있다. (그 좋아하는 코노를 몇 달 째 못가고 있고... 영화관을 가는 것도 포기했다... ㅠㅠ)</p>\n' +
        '<p>점심 식사를 배달로 먹는게 익숙해져서, 배X에 천생연분 등급까지 올라가봤고...\n' +
        '182만원 정도를 배달 식비로 소비했다 ㄷㄷㄷ</p>\n' +
        '<p>예년 같았으면 퇴사 후에 여행을 갔을 텐데, 코로나 시국 덕에 여행을 못가고 있다. 슬프다 ㅠㅠ</p>\n' +
        '<h2 id="재정"><a href="#재정" class="headerlink" title="재정"></a>재정</h2><p>기존에 P2P에서 전체 현금 자산의 10% 정도를 씨드머니로 해서 굴리고 있었는데, 1개 회사가\n' +
        '먹튀했고 2개 회사에서 원금 손실로 현재 기약없이 야금야금 상환중이다.\n' +
        '회고를 작성하면서 확인해보니 P2P로 얻은 수익을 반영해보면 5백만원 정도의 손실이 있는 상태다.\n' +
        '(그나마 다행인건가?) 손실률이 적게라도 빨리 상환이 이루어졌으면 좋겠다 ㅠ</p>\n' +
        '<p>대신 풍차예·적금을 1년치 만들었고, 2년치로 확장 중에 있다. 올해 예금 금리가 너무 떨어져서\n' +
        '2금융권까지 늘렸고 2금융권으로의 예치금 비율이 더 높아졌다.</p>\n' +
        '<p>블로그 테마에 JSON-LD 오류가 있던 걸 수정 이후 연 1회 받던 애드센스가 올해는 3번 지급받았다.\n' +
        '포스트 수가 많지도 않은데 이렇게 들어오는 걸 보니 더 많이 포스팅해야겠다는 의욕이 솟지만...\n' +
        '수익을 위한 포스팅은 하고 싶지 않다는 생각이 더 지배적이다. 애드센스는 그냥 쌈짓돈 버는 수준만\n' +
        '유지하는데 만족하고 욕심내지 않기로 했다.</p>\n' +
        '<h2 id="학습-프로젝트-독서"><a href="#학습-프로젝트-독서" class="headerlink" title="학습, 프로젝트, 독서"></a>학습, 프로젝트, 독서</h2><p>현재 회사에 들어와서 내 철칙 중 하나를 깼었는데, 바로 야근에 대한 부분이었다.</p>\n' +
        '<p>프로덕트를 시급하게 만들어야 하는 상황이었기 때문에 일부 번아웃을 감안하고 야근을 감당하더라도\n' +
        '진행하기로 했는데, 그 덕분에 학습하기로 했던 것이나 개인 프로젝트로 진행하기로 했던 것, 독서량을\n' +
        '늘리기로했던 것이 모두 수포로 돌아갔다.</p>\n' +
        '<p>관련된 이야기는 차후 따로 포스팅 할 예정이지만, 무튼 시간적 여유로 작년 계획했던 것들은 대부분\n' +
        '이루어내지 못했고, 퇴사 이후에 다시 시작하고 있다. (그래서 워라밸이 중요하다고 생각한다.)</p>\n' +
        '<h2 id="블로그-운영"><a href="#블로그-운영" class="headerlink" title="블로그 운영"></a>블로그 운영</h2><p>매 달 포스팅을 이어가지는 못했지만,  목표치의 60% 정도는 달성했다.</p>\n' +
        '<p>한 달에 2개 포스트를 작성하는 것은 생각보다 더 어려운 일이었다. 확실히 욕심이 앞섰던 것 같다.\n' +
        '하지만 내년에도 동일한 목표를 가져가려고 한다. 60%가 80% 까지 끌어올려지기만 해도 좋다고\n' +
        '생각하고 100%를 달성한다면 더 좋을 것이기 때문이다.</p>\n' +
        '<p>아, 그리고 올해 Hexo가 4.x로 업데이트 되면서 3.x와의 호환성이 너무 많이 깨져서 테마를 새로\n' +
        '만들 예정이다. 아직 구체적인 부분을 잡지는 못했지만, 여전히 pug를 이용할 생각이고 이번 테마에\n' +
        '아토믹디자인 시스템과 storybook도 적용해 볼 생각이다. (뻘짓일 수도 있겠지만 시도 하는 것\n' +
        '자체가 쓸데없다고 생각하지는 않는다.)</p>\n' +
        '<h2 id="대외-활동"><a href="#대외-활동" class="headerlink" title="대외 활동"></a>대외 활동</h2><p>AOA 활동은 여전히 지속되고 있다. <del>(빠져나올 수 없는 개미지옥)</del></p>\n' +
        '<p>하반기에 접어들어서는 격주로 올리기로 해서 이전에 비해 여유가 생긴 편이라 다소 낮은 마감의\n' +
        '압박을 느끼며 순조롭게 번역과 영상 제작을 진행하고 있다.</p>\n' +
        '<p>WAI-ARIA Authoring Practices 번역 덕분에 좀 더 자세히 알아가게 되는 것들이 있다. 확실히\n' +
        '공식 문서에 대한 번역은 문서를 꼼꼼하게 살펴보고 앞뒤 맥락을 살피게 되어 더 자세히 들여다보게\n' +
        '되어 깊게 알게 되는 것 같다. 내년 상반기에는 아마도 컴포넌트별 사례를 만들면서 나도 더 자세히\n' +
        '학습할 수 있게 되지 않을까 싶다.</p>\n' +
        '<p>11월에는 생각지도 않았던 세미나 발표를 했다.\n' +
        '정보접근기술 컨퍼런스에서 WAI-ARIA 102를 주제로 발표했고, 2주라는 준비 기간에 비해서 다소\n' +
        '담백하게 잘 발표했다고 생각한다.</p>\n' +
        '<p>하지만 여전히 접근성에 대한 인식이 더 문제라고 생각하고, 한국 사회에서는 더 강한 법으로\n' +
        '규제해야 한다고 생각한다.</p>\n' +
        '<h3 id="하코사-거리두기"><a href="#하코사-거리두기" class="headerlink" title="하코사 거리두기"></a>하코사 거리두기</h3><p>작년, 하코사를 벗어나는 것에 대해서 생각했었고 코로나 덕분이기도 하지만 어느 정도 선을 그었고\n' +
        '거리를 두어 게시판 관리 외에는 관심을 멀리했다. (물론 바쁜 상황들도 한 몫을 더했다.)</p>\n' +
        '<p>회고를 작성하면서 잠깐 질문글 삭튀에 대한 통계를 내봤는데, 올해 1월 1일부터 29일까지\n' +
        '기준으로 1042개의 질문글이 자기에게 필요한 답변을 받고나서 글이 삭제되었고, 그렇게 해서\n' +
        '패널티를 받은 아이디가 (중복으로 패널티를 받은 것을 제외하고) 509개에 달했다.</p>\n' +
        '<p>연간 근무일수가 250일 정도라는 것을 감안하면, 하루 새로운 2명씩은 답변을 받은 뒤 글을\n' +
        '삭제했다는 거다.</p>\n' +
        '<p>미안한 이야기지만, 하코사는 정말 하위 역량을 가진 이들의 집단이 될 확률이 다분히 높다고\n' +
        '생각한다. 저런 곳에서 누가 지식과 경험을 공유하고 싶을까.</p>\n' +
        '<h2 id="to-2021"><a href="#to-2021" class="headerlink" title="to 2021"></a>to 2021</h2><p>2021년은 내게 앞자리가 바뀌는 해다. 허허허...\n' +
        '10년전 2가 3으로 바뀔 때는 큰 감흥이 없었는데 이제 앞자리가 또 바뀐다고 생각하니 무언가\n' +
        '씁쓸하다. (내가 언제 이렇게 나이들었나 싶은... 물론 나보다 나이 많으신 분들은 코웃음 치겠지만\n' +
        'ㅎㅎㅎ)\n' +
        '하지만 내일 아침 해가 뜨면 어 아침이구나 하겠지 ㅎㅎㅎ</p>\n' +
        '<p>이런 저런 생각이 많아지는 2020년의 마지막 날이다</p>\n' +
        '<p>아직 2021년에 어떤 계획을 가지고 살아갈지 혹은 살아낼지 어떤 생각도 없다.\n' +
        '다만 하루하루가 흘러가지 않기를 바라고, 다시 내년 이 맘 때 쯤 회고를 작성할 때에는 올해 참\n' +
        '잘 지냈다라고 작성할 수 있기를 바란다.</p>\n',
      path: [Getter],
      permalink: [Getter],
      full_source: [Getter],
      asset_dir: [Getter],
      tags: [Getter],
      categories: [Getter],
      prev: [Circular *3],
      next: [_Document],
      __post: true
    },
    __post: true
  },
  __post: true
}
<ref *2> _Document {
  title: 'pass function as props in vue',
  seo: {
    image: '/upload/2021/props-function-vue.jpg',
    description: 'props로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
      '핸들러를 실행시키기만 하면 어떨까 하는 생각에 prop로 함수를 내려주는 방식을 생각해보게 됐다.\n'
  },
  hero: '/upload/2021/props-function-vue.jpg',
  thumbnail: '/upload/2021/thumbs/props-function-vue.jpg',
  date: Moment<2021-01-24T11:16:03+09:00>,
  style: null,
  _content: '\n' +
    '## Event handling and Atomic Design System\n' +
    '\n' +
    'Atomic Design System을 컴포넌트 설계 방법론으로 가져가면서, 각 컴포넌트에 독립적으로\n' +
    '고립(?)된 데이터 구조를 만들게 되면서 (이게 맞는 방식인지는 잘 모르겠지만) 불편함이 점점\n' +
    '발생되었던 것 중 하나가 유저 인터랙션에 의해 발생되는 데이터 변경을 위해 쌓여진 컴포넌트\n' +
    '구조를 따라 계속 이벤트를 전달하고 이벤트 리스너를 통해 처리하는 방식이었다.\n' +
    '\n' +
    '예를 들자면\n' +
    '\n' +
    '![유저 인터랙션으로 하위 컴포넌트로부터 상위 컴포넌트로의 이벤트 발생 과정](/upload/2021/event-flow-from-atom-to-page.svg)\n' +
    '\n' +
    '이런 흐름 말이다.\n' +
    '\n' +
    'Vue 공식 문서도 그렇고, 지금까지 보아온 대다수의 강의에서도 유저 인터랙션에 대한 데이터를\n' +
    '처리할 때 해당 데이터가 상위 컴포넌트에 존재할 경우, `$emit`을 이용하여 payload와 함께\n' +
    '하위 컴포넌트로부터 상위 컴포넌트로 차례로 올리고, 상위 컴포넌트에서 `v-on`으로 처리하는\n' +
    '방식을 사용하도록 안내하는 듯 하다.\n' +
    '\n' +
    'Atomic Design Sytem을 적용하기 전에는 이러한 고민이 없었는데, 적용 이후로는 atom으로부터\n' +
    '실제 데이터가 바인딩 되는 page까지 5개 단계(?)를 거치게 되니 하위 컴포넌트에서 발생한\n' +
    '이벤트와 데이터를 다시 상위 컴포넌트로 by-pass 하기 위한 이벤트 처리가 뭐랄까... 조금\n' +
    '거슬린다고 할까?\n' +
    '심지어 Vue 개발자 도구로 데이터 흐름을 확인하려고 하면 한 번의 인터랙션에 여러 개의 emit이\n' +
    '로그로 출력되니 정신이 사납기까지 한 느낌이다 = _=a\n' +
    '\n' +
    '그래서 `props`로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
    '핸들러를 실행시키기만 하면 어떨까 하는 생각에 `prop`로 함수를 내려주는 방식을 생각해보게 됐다.\n' +
    '\n' +
    '## Is it an anti-pattern?\n' +
    '\n' +
    '일단 생각을 해 봤으니 이게 가한 것은 맞는지 확인 해 볼 필요가 있었다. (처음 생각해 본\n' +
    '방법이고 Vue 관련 문서나 강의에서도 한 번도 이런 케이스를 본 적이 없으니까..)\n' +
    '\n' +
    '구글링 결과 공교롭게도(?) 가장 먼저 눈에 띈 내용은 이 방식이 안티 패턴이라는 내용이었다.\n' +
    '(혹 관련 내용이 궁금하다면 [How to Pass a Function as a Prop in Vue]([https://michaelnthiessen.com/pass-function-as-prop/](https://michaelnthiessen.com/pass-function-as-prop/))를\n' +
    '읽어보시길... 아, 중간에 구독하라고 전체 팝업창이 뜨기는 하는데 개발자라면 뭐... 다 쉽게\n' +
    '걷어내... 쿨럭... )\n' +
    '\n' +
    '하지만 왜 인지 모르겠으나... 해당 글에서는 안티 패턴임을 설명하는데 하위 컴포넌트의 mounted\n' +
    '훅에서 props로 받은 함수를 실행하는 코드를 보여주고 있었다.\n' +
    '무튼 그러면서 잘못된 것은 아니지만, Vue의 컨셉에 맞게 이벤트를 활용하거나 슬롯을 사용하라는\n' +
    '결론을 내주는게 영...\n' +
    '\n' +
    '또 다른 아티클 들에서는 단순하게 props로 함수를 내리는게 가능하다 라는 짤막한 소개 정도가\n' +
    '있었다.\n' +
    '\n' +
    '하여 안티 패턴이라 소개하는 글을 잠시 무시하기로 하고(?) props로 함수를 내리는 방식을\n' +
    '사용해봤다.\n' +
    '아, 안티 패턴이라 소개하는 글을 무시하기로 한 것은 안티 패턴을 굳이 사용하겠다는 것이 아니라,\n' +
    '안티 패턴인 이유에 대한 명확한 근거를 찾을 수 없어서다. 차후에라도 이것이 안티 패턴이라는\n' +
    '명확한 근거를 찾게 된다면 당연히 과감히 버릴거다.\n' +
    '\n' +
    '## Try it\n' +
    '\n' +
    '```jsx\n' +
    '<template>\n' +
    '  <SignUpTemplate :handle-sign-up="signUp" />\n' +
    '</template>\n' +
    '<script>\n' +
    'export default {\n' +
    '  ...\n' +
    '  methods: {\n' +
    '    ...\n' +
    '    signUp({ email, password }) {\n' +
    '      users\n' +
    '        .postSignUp({ email, password })\n' +
    '        .then(...)\n' +
    '        .catch(...)\n' +
    '    }\n' +
    '  }\n' +
    '};\n' +
    '</script>\n' +
    '```\n' +
    '\n' +
    'Page에서 이렇게 `signUp` 함수를 props로 내려주고\n' +
    '\n' +
    '```jsx\n' +
    '<template>\n' +
    '  ...\n' +
    '  <SignUpForm :handle-submit="handleSignUp" />\n' +
    '  ...\n' +
    '</template>\n' +
    '\n' +
    '<script>\n' +
    'export default {\n' +
    '  ...\n' +
    '  props: {\n' +
    '    ...\n' +
    '    handleSignUp: {\n' +
    '      type: Function,\n' +
    '      required: true,\n' +
    '      default: () => {}\n' +
    '    }\n' +
    '  },\n' +
    '  ...\n' +
    '};\n' +
    '</script>\n' +
    '```\n' +
    '\n' +
    '템플릿에서 props로 받은 함수를 다시 하위 컴포넌트로 내려주고,\n' +
    '\n' +
    '```jsx\n' +
    '<template>\n' +
    '  <form-container>\n' +
    '    ...\n' +
    '    <DefaultButton\n' +
    '      @click.native.prevent="handleClickSubmit"\n' +
    '    />\n' +
    '    ...\n' +
    '  </form-container>\n' +
    '</template>\n' +
    '\n' +
    '<script>\n' +
    'import DefaultButton from "@atoms/Button/Default";\n' +
    'export default {\n' +
    '  components: {\n' +
    '  props: {\n' +
    '    handleSubmit: {\n' +
    '      type: Function,\n' +
    '      required: true,\n' +
    '      default: () => {}\n' +
    '    }\n' +
    '  },\n' +
    '  methods: {\n' +
    '    handleClickSubmit() {\n' +
    '      const { handleSubmit, email, password, passwordConfirm } = this;\n' +
    '      ...\n' +
    '      handleSubmit && handleSubmit({ email, password });\n' +
    '    }\n' +
    '  }\n' +
    '};\n' +
    '</script>\n' +
    '```\n' +
    '\n' +
    '유저 인터랙션이 발생하는 하위 컴포넌트에서 해당 함수를 전달받아 실행하게 했다.\n' +
    '적용 결과는 당연히(?) 원하는 동작을 올바르게 수행해주었다.\n' +
    '\n' +
    '이것보다는 modal  창을 포함하는 organism 컴포넌트에서 modal 창에 대한 제어와 modal 내부에\n' +
    'slot으로 끼워진 컴포넌트에 적용되는 부분이 이 방식을 더 잘 설명할 수 있을 것 같지만 너무\n' +
    '많은 코드가 삽입 되어야 해서 포스팅에는 간단한 위 코드로 적었다.\n' +
    '\n' +
    '사실 event emit 방식으로도 충분히 대체도 가능하고 그것이 난이도나 복잡도가 더 높지는 않은\n' +
    '것 같기는 하다. 하지만, 뭐랄까 이 방식이 좀 더 dry한 느낌이 든달까? (기분탓이려나?)\n' +
    '\n' +
    '무엇보다 개발자 도구에 여러 번에 걸친 이벤트 발생 로그를 보지 않아도 되니 한결 눈이 가벼워졌다.',
  source: '_posts/2021-01-25-pass-function-as-props-in-vue.md',
  raw: '---\n' +
    'title: pass function as props in vue\n' +
    'tags:\n' +
    '  - vue\n' +
    '  - props\n' +
    '  - pass function\n' +
    'categories:\n' +
    '  - 개발노트\n' +
    '  - Front-End\n' +
    'seo:\n' +
    '  image: /upload/2021/props-function-vue.jpg\n' +
    '  description: |\n' +
    '    props로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
    '    핸들러를 실행시키기만 하면 어떨까 하는 생각에 prop로 함수를 내려주는 방식을 생각해보게 됐다.\n' +
    'hero: /upload/2021/props-function-vue.jpg\n' +
    'thumbnail: /upload/2021/thumbs/props-function-vue.jpg\n' +
    'date: 2021-01-24 11:16:03\n' +
    'style:\n' +
    '---\n' +
    '\n' +
    '## Event handling and Atomic Design System\n' +
    '\n' +
    'Atomic Design System을 컴포넌트 설계 방법론으로 가져가면서, 각 컴포넌트에 독립적으로\n' +
    '고립(?)된 데이터 구조를 만들게 되면서 (이게 맞는 방식인지는 잘 모르겠지만) 불편함이 점점\n' +
    '발생되었던 것 중 하나가 유저 인터랙션에 의해 발생되는 데이터 변경을 위해 쌓여진 컴포넌트\n' +
    '구조를 따라 계속 이벤트를 전달하고 이벤트 리스너를 통해 처리하는 방식이었다.\n' +
    '\n' +
    '예를 들자면\n' +
    '\n' +
    '![유저 인터랙션으로 하위 컴포넌트로부터 상위 컴포넌트로의 이벤트 발생 과정](/upload/2021/event-flow-from-atom-to-page.svg)\n' +
    '\n' +
    '이런 흐름 말이다.\n' +
    '\n' +
    'Vue 공식 문서도 그렇고, 지금까지 보아온 대다수의 강의에서도 유저 인터랙션에 대한 데이터를\n' +
    '처리할 때 해당 데이터가 상위 컴포넌트에 존재할 경우, `$emit`을 이용하여 payload와 함께\n' +
    '하위 컴포넌트로부터 상위 컴포넌트로 차례로 올리고, 상위 컴포넌트에서 `v-on`으로 처리하는\n' +
    '방식을 사용하도록 안내하는 듯 하다.\n' +
    '\n' +
    'Atomic Design Sytem을 적용하기 전에는 이러한 고민이 없었는데, 적용 이후로는 atom으로부터\n' +
    '실제 데이터가 바인딩 되는 page까지 5개 단계(?)를 거치게 되니 하위 컴포넌트에서 발생한\n' +
    '이벤트와 데이터를 다시 상위 컴포넌트로 by-pass 하기 위한 이벤트 처리가 뭐랄까... 조금\n' +
    '거슬린다고 할까?\n' +
    '심지어 Vue 개발자 도구로 데이터 흐름을 확인하려고 하면 한 번의 인터랙션에 여러 개의 emit이\n' +
    '로그로 출력되니 정신이 사납기까지 한 느낌이다 = _=a\n' +
    '\n' +
    '그래서 `props`로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
    '핸들러를 실행시키기만 하면 어떨까 하는 생각에 `prop`로 함수를 내려주는 방식을 생각해보게 됐다.\n' +
    '\n' +
    '## Is it an anti-pattern?\n' +
    '\n' +
    '일단 생각을 해 봤으니 이게 가한 것은 맞는지 확인 해 볼 필요가 있었다. (처음 생각해 본\n' +
    '방법이고 Vue 관련 문서나 강의에서도 한 번도 이런 케이스를 본 적이 없으니까..)\n' +
    '\n' +
    '구글링 결과 공교롭게도(?) 가장 먼저 눈에 띈 내용은 이 방식이 안티 패턴이라는 내용이었다.\n' +
    '(혹 관련 내용이 궁금하다면 [How to Pass a Function as a Prop in Vue]([https://michaelnthiessen.com/pass-function-as-prop/](https://michaelnthiessen.com/pass-function-as-prop/))를\n' +
    '읽어보시길... 아, 중간에 구독하라고 전체 팝업창이 뜨기는 하는데 개발자라면 뭐... 다 쉽게\n' +
    '걷어내... 쿨럭... )\n' +
    '\n' +
    '하지만 왜 인지 모르겠으나... 해당 글에서는 안티 패턴임을 설명하는데 하위 컴포넌트의 mounted\n' +
    '훅에서 props로 받은 함수를 실행하는 코드를 보여주고 있었다.\n' +
    '무튼 그러면서 잘못된 것은 아니지만, Vue의 컨셉에 맞게 이벤트를 활용하거나 슬롯을 사용하라는\n' +
    '결론을 내주는게 영...\n' +
    '\n' +
    '또 다른 아티클 들에서는 단순하게 props로 함수를 내리는게 가능하다 라는 짤막한 소개 정도가\n' +
    '있었다.\n' +
    '\n' +
    '하여 안티 패턴이라 소개하는 글을 잠시 무시하기로 하고(?) props로 함수를 내리는 방식을\n' +
    '사용해봤다.\n' +
    '아, 안티 패턴이라 소개하는 글을 무시하기로 한 것은 안티 패턴을 굳이 사용하겠다는 것이 아니라,\n' +
    '안티 패턴인 이유에 대한 명확한 근거를 찾을 수 없어서다. 차후에라도 이것이 안티 패턴이라는\n' +
    '명확한 근거를 찾게 된다면 당연히 과감히 버릴거다.\n' +
    '\n' +
    '## Try it\n' +
    '\n' +
    '```jsx\n' +
    '<template>\n' +
    '  <SignUpTemplate :handle-sign-up="signUp" />\n' +
    '</template>\n' +
    '<script>\n' +
    'export default {\n' +
    '  ...\n' +
    '  methods: {\n' +
    '    ...\n' +
    '    signUp({ email, password }) {\n' +
    '      users\n' +
    '        .postSignUp({ email, password })\n' +
    '        .then(...)\n' +
    '        .catch(...)\n' +
    '    }\n' +
    '  }\n' +
    '};\n' +
    '</script>\n' +
    '```\n' +
    '\n' +
    'Page에서 이렇게 `signUp` 함수를 props로 내려주고\n' +
    '\n' +
    '```jsx\n' +
    '<template>\n' +
    '  ...\n' +
    '  <SignUpForm :handle-submit="handleSignUp" />\n' +
    '  ...\n' +
    '</template>\n' +
    '\n' +
    '<script>\n' +
    'export default {\n' +
    '  ...\n' +
    '  props: {\n' +
    '    ...\n' +
    '    handleSignUp: {\n' +
    '      type: Function,\n' +
    '      required: true,\n' +
    '      default: () => {}\n' +
    '    }\n' +
    '  },\n' +
    '  ...\n' +
    '};\n' +
    '</script>\n' +
    '```\n' +
    '\n' +
    '템플릿에서 props로 받은 함수를 다시 하위 컴포넌트로 내려주고,\n' +
    '\n' +
    '```jsx\n' +
    '<template>\n' +
    '  <form-container>\n' +
    '    ...\n' +
    '    <DefaultButton\n' +
    '      @click.native.prevent="handleClickSubmit"\n' +
    '    />\n' +
    '    ...\n' +
    '  </form-container>\n' +
    '</template>\n' +
    '\n' +
    '<script>\n' +
    'import DefaultButton from "@atoms/Button/Default";\n' +
    'export default {\n' +
    '  components: {\n' +
    '  props: {\n' +
    '    handleSubmit: {\n' +
    '      type: Function,\n' +
    '      required: true,\n' +
    '      default: () => {}\n' +
    '    }\n' +
    '  },\n' +
    '  methods: {\n' +
    '    handleClickSubmit() {\n' +
    '      const { handleSubmit, email, password, passwordConfirm } = this;\n' +
    '      ...\n' +
    '      handleSubmit && handleSubmit({ email, password });\n' +
    '    }\n' +
    '  }\n' +
    '};\n' +
    '</script>\n' +
    '```\n' +
    '\n' +
    '유저 인터랙션이 발생하는 하위 컴포넌트에서 해당 함수를 전달받아 실행하게 했다.\n' +
    '적용 결과는 당연히(?) 원하는 동작을 올바르게 수행해주었다.\n' +
    '\n' +
    '이것보다는 modal  창을 포함하는 organism 컴포넌트에서 modal 창에 대한 제어와 modal 내부에\n' +
    'slot으로 끼워진 컴포넌트에 적용되는 부분이 이 방식을 더 잘 설명할 수 있을 것 같지만 너무\n' +
    '많은 코드가 삽입 되어야 해서 포스팅에는 간단한 위 코드로 적었다.\n' +
    '\n' +
    '사실 event emit 방식으로도 충분히 대체도 가능하고 그것이 난이도나 복잡도가 더 높지는 않은\n' +
    '것 같기는 하다. 하지만, 뭐랄까 이 방식이 좀 더 dry한 느낌이 든달까? (기분탓이려나?)\n' +
    '\n' +
    '무엇보다 개발자 도구에 여러 번에 걸친 이벤트 발생 로그를 보지 않아도 되니 한결 눈이 가벼워졌다.',
  slug: 'pass-function-as-props-in-vue',
  published: true,
  comments: true,
  layout: 'post',
  photos: [],
  link: '',
  _id: 'clcytfa4r00a7taww0ld1deig',
  content: '<h2 id="Event-handling-and-Atomic-Design-System"><a href="#Event-handling-and-Atomic-Design-System" class="headerlink" title="Event handling and Atomic Design System"></a>Event handling and Atomic Design System</h2><p>Atomic Design System을 컴포넌트 설계 방법론으로 가져가면서, 각 컴포넌트에 독립적으로\n' +
    '고립(?)된 데이터 구조를 만들게 되면서 (이게 맞는 방식인지는 잘 모르겠지만) 불편함이 점점\n' +
    '발생되었던 것 중 하나가 유저 인터랙션에 의해 발생되는 데이터 변경을 위해 쌓여진 컴포넌트\n' +
    '구조를 따라 계속 이벤트를 전달하고 이벤트 리스너를 통해 처리하는 방식이었다.</p>\n' +
    '<p>예를 들자면</p>\n' +
    '<p><img src="/upload/2021/event-flow-from-atom-to-page.svg" alt="유저 인터랙션으로 하위 컴포넌트로부터 상위 컴포넌트로의 이벤트 발생 과정"></p>\n' +
    '<p>이런 흐름 말이다.</p>\n' +
    '<p>Vue 공식 문서도 그렇고, 지금까지 보아온 대다수의 강의에서도 유저 인터랙션에 대한 데이터를\n' +
    '처리할 때 해당 데이터가 상위 컴포넌트에 존재할 경우, <code>$emit</code>을 이용하여 payload와 함께\n' +
    '하위 컴포넌트로부터 상위 컴포넌트로 차례로 올리고, 상위 컴포넌트에서 <code>v-on</code>으로 처리하는\n' +
    '방식을 사용하도록 안내하는 듯 하다.</p>\n' +
    '<p>Atomic Design Sytem을 적용하기 전에는 이러한 고민이 없었는데, 적용 이후로는 atom으로부터\n' +
    '실제 데이터가 바인딩 되는 page까지 5개 단계(?)를 거치게 되니 하위 컴포넌트에서 발생한\n' +
    '이벤트와 데이터를 다시 상위 컴포넌트로 by-pass 하기 위한 이벤트 처리가 뭐랄까... 조금\n' +
    '거슬린다고 할까?\n' +
    '심지어 Vue 개발자 도구로 데이터 흐름을 확인하려고 하면 한 번의 인터랙션에 여러 개의 emit이\n' +
    '로그로 출력되니 정신이 사납기까지 한 느낌이다 &#x3D; _&#x3D;a</p>\n' +
    '<p>그래서 <code>props</code>로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
    '핸들러를 실행시키기만 하면 어떨까 하는 생각에 <code>prop</code>로 함수를 내려주는 방식을 생각해보게 됐다.</p>\n' +
    '<h2 id="Is-it-an-anti-pattern"><a href="#Is-it-an-anti-pattern" class="headerlink" title="Is it an anti-pattern?"></a>Is it an anti-pattern?</h2><p>일단 생각을 해 봤으니 이게 가한 것은 맞는지 확인 해 볼 필요가 있었다. (처음 생각해 본\n' +
    '방법이고 Vue 관련 문서나 강의에서도 한 번도 이런 케이스를 본 적이 없으니까..)</p>\n' +
    '<p>구글링 결과 공교롭게도(?) 가장 먼저 눈에 띈 내용은 이 방식이 안티 패턴이라는 내용이었다.\n' +
    '(혹 관련 내용이 궁금하다면 <a href="%5Bhttps://michaelnthiessen.com/pass-function-as-prop/%5D(https://michaelnthiessen.com/pass-function-as-prop/)">How to Pass a Function as a Prop in Vue</a>를\n' +
    '읽어보시길... 아, 중간에 구독하라고 전체 팝업창이 뜨기는 하는데 개발자라면 뭐... 다 쉽게\n' +
    '걷어내... 쿨럭... )</p>\n' +
    '<p>하지만 왜 인지 모르겠으나... 해당 글에서는 안티 패턴임을 설명하는데 하위 컴포넌트의 mounted\n' +
    '훅에서 props로 받은 함수를 실행하는 코드를 보여주고 있었다.\n' +
    '무튼 그러면서 잘못된 것은 아니지만, Vue의 컨셉에 맞게 이벤트를 활용하거나 슬롯을 사용하라는\n' +
    '결론을 내주는게 영...</p>\n' +
    '<p>또 다른 아티클 들에서는 단순하게 props로 함수를 내리는게 가능하다 라는 짤막한 소개 정도가\n' +
    '있었다.</p>\n' +
    '<p>하여 안티 패턴이라 소개하는 글을 잠시 무시하기로 하고(?) props로 함수를 내리는 방식을\n' +
    '사용해봤다.\n' +
    '아, 안티 패턴이라 소개하는 글을 무시하기로 한 것은 안티 패턴을 굳이 사용하겠다는 것이 아니라,\n' +
    '안티 패턴인 이유에 대한 명확한 근거를 찾을 수 없어서다. 차후에라도 이것이 안티 패턴이라는\n' +
    '명확한 근거를 찾게 된다면 당연히 과감히 버릴거다.</p>\n' +
    '<h2 id="Try-it"><a href="#Try-it" class="headerlink" title="Try it"></a>Try it</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
    '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SignUpTemplate</span></span> <span class="token attr-name">:handle-sign-up</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>signUp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n' +
    '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
    '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
    'export default &#123;\n' +
    '  ...\n' +
    '  methods: &#123;\n' +
    '    ...\n' +
    '    signUp(&#123; email, password &#125;) &#123;\n' +
    '      users\n' +
    '        .postSignUp(&#123; email, password &#125;)\n' +
    '        .then(...)\n' +
    '        .catch(...)\n' +
    '    &#125;\n' +
    '  &#125;\n' +
    '&#125;;\n' +
    '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
    '\n' +
    '<p>Page에서 이렇게 <code>signUp</code> 함수를 props로 내려주고</p>\n' +
    '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
    '  ...\n' +
    '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SignUpForm</span></span> <span class="token attr-name">:handle-submit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleSignUp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n' +
    '  ...\n' +
    '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
    '\n' +
    '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
    'export default &#123;\n' +
    '  ...\n' +
    '  props: &#123;\n' +
    '    ...\n' +
    '    handleSignUp: &#123;\n' +
    '      type: Function,\n' +
    '      required: true,\n' +
    '      default: () => &#123;&#125;\n' +
    '    &#125;\n' +
    '  &#125;,\n' +
    '  ...\n' +
    '&#125;;\n' +
    '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
    '\n' +
    '<p>템플릿에서 props로 받은 함수를 다시 하위 컴포넌트로 내려주고,</p>\n' +
    '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
    '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form-container</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
    '    ...\n' +
    '    &lt;DefaultButton\n' +
    '      @click.native.prevent="handleClickSubmit"\n' +
    '    />\n' +
    '    ...\n' +
    '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form-container</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
    '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
    '\n' +
    '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
    'import DefaultButton from "@atoms/Button/Default";\n' +
    'export default &#123;\n' +
    '  components: &#123;\n' +
    '  props: &#123;\n' +
    '    handleSubmit: &#123;\n' +
    '      type: Function,\n' +
    '      required: true,\n' +
    '      default: () => &#123;&#125;\n' +
    '    &#125;\n' +
    '  &#125;,\n' +
    '  methods: &#123;\n' +
    '    handleClickSubmit() &#123;\n' +
    '      const &#123; handleSubmit, email, password, passwordConfirm &#125; = this;\n' +
    '      ...\n' +
    '      handleSubmit &amp;&amp; handleSubmit(&#123; email, password &#125;);\n' +
    '    &#125;\n' +
    '  &#125;\n' +
    '&#125;;\n' +
    '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
    '\n' +
    '<p>유저 인터랙션이 발생하는 하위 컴포넌트에서 해당 함수를 전달받아 실행하게 했다.\n' +
    '적용 결과는 당연히(?) 원하는 동작을 올바르게 수행해주었다.</p>\n' +
    '<p>이것보다는 modal  창을 포함하는 organism 컴포넌트에서 modal 창에 대한 제어와 modal 내부에\n' +
    'slot으로 끼워진 컴포넌트에 적용되는 부분이 이 방식을 더 잘 설명할 수 있을 것 같지만 너무\n' +
    '많은 코드가 삽입 되어야 해서 포스팅에는 간단한 위 코드로 적었다.</p>\n' +
    '<p>사실 event emit 방식으로도 충분히 대체도 가능하고 그것이 난이도나 복잡도가 더 높지는 않은\n' +
    '것 같기는 하다. 하지만, 뭐랄까 이 방식이 좀 더 dry한 느낌이 든달까? (기분탓이려나?)</p>\n' +
    '<p>무엇보다 개발자 도구에 여러 번에 걸친 이벤트 발생 로그를 보지 않아도 되니 한결 눈이 가벼워졌다.</p>\n',
  site: { data: { 'hero.db': [Array] } },
  excerpt: '',
  more: '<h2 id="Event-handling-and-Atomic-Design-System"><a href="#Event-handling-and-Atomic-Design-System" class="headerlink" title="Event handling and Atomic Design System"></a>Event handling and Atomic Design System</h2><p>Atomic Design System을 컴포넌트 설계 방법론으로 가져가면서, 각 컴포넌트에 독립적으로\n' +
    '고립(?)된 데이터 구조를 만들게 되면서 (이게 맞는 방식인지는 잘 모르겠지만) 불편함이 점점\n' +
    '발생되었던 것 중 하나가 유저 인터랙션에 의해 발생되는 데이터 변경을 위해 쌓여진 컴포넌트\n' +
    '구조를 따라 계속 이벤트를 전달하고 이벤트 리스너를 통해 처리하는 방식이었다.</p>\n' +
    '<p>예를 들자면</p>\n' +
    '<p><img src="/upload/2021/event-flow-from-atom-to-page.svg" alt="유저 인터랙션으로 하위 컴포넌트로부터 상위 컴포넌트로의 이벤트 발생 과정"></p>\n' +
    '<p>이런 흐름 말이다.</p>\n' +
    '<p>Vue 공식 문서도 그렇고, 지금까지 보아온 대다수의 강의에서도 유저 인터랙션에 대한 데이터를\n' +
    '처리할 때 해당 데이터가 상위 컴포넌트에 존재할 경우, <code>$emit</code>을 이용하여 payload와 함께\n' +
    '하위 컴포넌트로부터 상위 컴포넌트로 차례로 올리고, 상위 컴포넌트에서 <code>v-on</code>으로 처리하는\n' +
    '방식을 사용하도록 안내하는 듯 하다.</p>\n' +
    '<p>Atomic Design Sytem을 적용하기 전에는 이러한 고민이 없었는데, 적용 이후로는 atom으로부터\n' +
    '실제 데이터가 바인딩 되는 page까지 5개 단계(?)를 거치게 되니 하위 컴포넌트에서 발생한\n' +
    '이벤트와 데이터를 다시 상위 컴포넌트로 by-pass 하기 위한 이벤트 처리가 뭐랄까... 조금\n' +
    '거슬린다고 할까?\n' +
    '심지어 Vue 개발자 도구로 데이터 흐름을 확인하려고 하면 한 번의 인터랙션에 여러 개의 emit이\n' +
    '로그로 출력되니 정신이 사납기까지 한 느낌이다 &#x3D; _&#x3D;a</p>\n' +
    '<p>그래서 <code>props</code>로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
    '핸들러를 실행시키기만 하면 어떨까 하는 생각에 <code>prop</code>로 함수를 내려주는 방식을 생각해보게 됐다.</p>\n' +
    '<h2 id="Is-it-an-anti-pattern"><a href="#Is-it-an-anti-pattern" class="headerlink" title="Is it an anti-pattern?"></a>Is it an anti-pattern?</h2><p>일단 생각을 해 봤으니 이게 가한 것은 맞는지 확인 해 볼 필요가 있었다. (처음 생각해 본\n' +
    '방법이고 Vue 관련 문서나 강의에서도 한 번도 이런 케이스를 본 적이 없으니까..)</p>\n' +
    '<p>구글링 결과 공교롭게도(?) 가장 먼저 눈에 띈 내용은 이 방식이 안티 패턴이라는 내용이었다.\n' +
    '(혹 관련 내용이 궁금하다면 <a href="%5Bhttps://michaelnthiessen.com/pass-function-as-prop/%5D(https://michaelnthiessen.com/pass-function-as-prop/)">How to Pass a Function as a Prop in Vue</a>를\n' +
    '읽어보시길... 아, 중간에 구독하라고 전체 팝업창이 뜨기는 하는데 개발자라면 뭐... 다 쉽게\n' +
    '걷어내... 쿨럭... )</p>\n' +
    '<p>하지만 왜 인지 모르겠으나... 해당 글에서는 안티 패턴임을 설명하는데 하위 컴포넌트의 mounted\n' +
    '훅에서 props로 받은 함수를 실행하는 코드를 보여주고 있었다.\n' +
    '무튼 그러면서 잘못된 것은 아니지만, Vue의 컨셉에 맞게 이벤트를 활용하거나 슬롯을 사용하라는\n' +
    '결론을 내주는게 영...</p>\n' +
    '<p>또 다른 아티클 들에서는 단순하게 props로 함수를 내리는게 가능하다 라는 짤막한 소개 정도가\n' +
    '있었다.</p>\n' +
    '<p>하여 안티 패턴이라 소개하는 글을 잠시 무시하기로 하고(?) props로 함수를 내리는 방식을\n' +
    '사용해봤다.\n' +
    '아, 안티 패턴이라 소개하는 글을 무시하기로 한 것은 안티 패턴을 굳이 사용하겠다는 것이 아니라,\n' +
    '안티 패턴인 이유에 대한 명확한 근거를 찾을 수 없어서다. 차후에라도 이것이 안티 패턴이라는\n' +
    '명확한 근거를 찾게 된다면 당연히 과감히 버릴거다.</p>\n' +
    '<h2 id="Try-it"><a href="#Try-it" class="headerlink" title="Try it"></a>Try it</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
    '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SignUpTemplate</span></span> <span class="token attr-name">:handle-sign-up</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>signUp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n' +
    '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
    '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
    'export default &#123;\n' +
    '  ...\n' +
    '  methods: &#123;\n' +
    '    ...\n' +
    '    signUp(&#123; email, password &#125;) &#123;\n' +
    '      users\n' +
    '        .postSignUp(&#123; email, password &#125;)\n' +
    '        .then(...)\n' +
    '        .catch(...)\n' +
    '    &#125;\n' +
    '  &#125;\n' +
    '&#125;;\n' +
    '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
    '\n' +
    '<p>Page에서 이렇게 <code>signUp</code> 함수를 props로 내려주고</p>\n' +
    '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
    '  ...\n' +
    '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SignUpForm</span></span> <span class="token attr-name">:handle-submit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleSignUp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n' +
    '  ...\n' +
    '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
    '\n' +
    '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
    'export default &#123;\n' +
    '  ...\n' +
    '  props: &#123;\n' +
    '    ...\n' +
    '    handleSignUp: &#123;\n' +
    '      type: Function,\n' +
    '      required: true,\n' +
    '      default: () => &#123;&#125;\n' +
    '    &#125;\n' +
    '  &#125;,\n' +
    '  ...\n' +
    '&#125;;\n' +
    '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
    '\n' +
    '<p>템플릿에서 props로 받은 함수를 다시 하위 컴포넌트로 내려주고,</p>\n' +
    '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
    '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form-container</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
    '    ...\n' +
    '    &lt;DefaultButton\n' +
    '      @click.native.prevent="handleClickSubmit"\n' +
    '    />\n' +
    '    ...\n' +
    '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form-container</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
    '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
    '\n' +
    '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
    'import DefaultButton from "@atoms/Button/Default";\n' +
    'export default &#123;\n' +
    '  components: &#123;\n' +
    '  props: &#123;\n' +
    '    handleSubmit: &#123;\n' +
    '      type: Function,\n' +
    '      required: true,\n' +
    '      default: () => &#123;&#125;\n' +
    '    &#125;\n' +
    '  &#125;,\n' +
    '  methods: &#123;\n' +
    '    handleClickSubmit() &#123;\n' +
    '      const &#123; handleSubmit, email, password, passwordConfirm &#125; = this;\n' +
    '      ...\n' +
    '      handleSubmit &amp;&amp; handleSubmit(&#123; email, password &#125;);\n' +
    '    &#125;\n' +
    '  &#125;\n' +
    '&#125;;\n' +
    '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
    '\n' +
    '<p>유저 인터랙션이 발생하는 하위 컴포넌트에서 해당 함수를 전달받아 실행하게 했다.\n' +
    '적용 결과는 당연히(?) 원하는 동작을 올바르게 수행해주었다.</p>\n' +
    '<p>이것보다는 modal  창을 포함하는 organism 컴포넌트에서 modal 창에 대한 제어와 modal 내부에\n' +
    'slot으로 끼워진 컴포넌트에 적용되는 부분이 이 방식을 더 잘 설명할 수 있을 것 같지만 너무\n' +
    '많은 코드가 삽입 되어야 해서 포스팅에는 간단한 위 코드로 적었다.</p>\n' +
    '<p>사실 event emit 방식으로도 충분히 대체도 가능하고 그것이 난이도나 복잡도가 더 높지는 않은\n' +
    '것 같기는 하다. 하지만, 뭐랄까 이 방식이 좀 더 dry한 느낌이 든달까? (기분탓이려나?)</p>\n' +
    '<p>무엇보다 개발자 도구에 여러 번에 걸친 이벤트 발생 로그를 보지 않아도 되니 한결 눈이 가벼워졌다.</p>\n',
  path: [Getter],
  permalink: [Getter],
  full_source: [Getter],
  asset_dir: [Getter],
  tags: [Getter],
  categories: [Getter],
  prev: <ref *1> _Document {
    title: '개발환경 WSL2 + zsh로 갈아타기',
    thumbnail: '/upload/2021/thumbs/wsl2-zsh-on-windws-10.jpg',
    hero: '/upload/2021/wsl2-zsh-on-windws-10.jpg',
    style: '.hero {\n' +
      '  &-wrapper {\n' +
      '    text-shadow:\n' +
      '      1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
      '      -1px -1px 2em rgba(20, 12, 24, 1);\n' +
      '  }\n' +
      '  &__image {\n' +
      '    opacity: 0.35\n' +
      '  }\n' +
      '}\n',
    seo: {
      description: '본격적으로 WSL + zsh 환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가\n' +
        '설정을 차후에 필요할까 기록으로 남겨둔다.\n',
      image: '/upload/2021/wsl2-zsh-on-windws-10.jpg'
    },
    date: Moment<2021-01-28T00:32:57+09:00>,
    _content: '\n' +
      '\n' +
      '## 기존 환경\n' +
      '\n' +
      '얼마 전까지만 해도 VS Code의 터미널을 git bash로 (이하 bash) 설정해서 5년 가까이 bash\n' +
      '상에서 CLI를 사용해왔다. (아! 참고로 나는 Windows 10 사용자다. 맥이었으면 진즉부터\n' +
      'terminal을 썼겠지...)\n' +
      '\n' +
      '이 블로그 테마를 제작 후에 몇 번 mac이나 linux 환경에서 테마 설치 오류에 대한 이슈가\n' +
      '올라왔었고, 최근에 어떤 사이트를 번역하는데 해당 사이트 빌드가 bash 상에서는 정상적으로\n' +
      '이루어지지 않아 확인해보니 linux 상에서는 올바르게 빌드 되어 linux 환경에 대한 필요가\n' +
      '생겨났다.\n' +
      '\n' +
      '결국 미루고 미루던 WSL 사용을 시도하기로 하고 반 년 정도를 이 방식으로 써 본 것 같다.\n' +
      '(미루고 미룬 이유는 Windows를 못믿어서... = _=a 항상 예기치 않은 오류를 만들어주는\n' +
      ' Windows ... )\n' +
      '\n' +
      '무튼, 반 년 정도의 사용 경험에서는 크게 문제를 느끼지 못해서 이제 본격적으로 WSL + zsh\n' +
      '환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가 설정을 차후에 필요할까 기록으로\n' +
      '남겨둔다. (안녕 bash~ 오래 동안 고마웠어 ㅠ)\n' +
      '\n' +
      '## WSL 1 or WSL 2 ?\n' +
      '\n' +
      'WSL을 쓰기로 한 시점에 결정해야 할 것 중 하나는 일단 WSL 1을 쓸 것인가 혹은 WSL 2를 쓸\n' +
      '것인가 같다. 물론, WSL 2 구성까지 해 두면 언제든지 원하는 시점에 WSL 1과 2를 오갈 수 있고\n' +
      '따라서 WSL 2 구성 방법으로 포스팅 해두기는 했다.\n' +
      '\n' +
      '내 경우엔 2가지를 다 써봤는데, 써보고 난 이후에 드는 생각은 일단 내 경우에는 WSL 1을 쓰는\n' +
      '게 아직은 낫지 않을까 싶다. MS에서는 WSL 2가 더 빠르고 전체 리눅스 커널 사용, 시스템 호출\n' +
      '호환성 등을 장점으로 들고 있지만 생각보다 만나게 되는 장애물이 많았다.\n' +
      '\n' +
      '일단 몇 가지 선택에 필요한 기준에 따라 나누어 보면,\n' +
      '기존의 Windows 시스템에서 이미 프로젝트가 구성되어 있고 (Node든 뭐 다른 것이든) 여기에\n' +
      'WSL을 통합하는 거라면 WSL 1을 추천한다.\n' +
      '반면 개발 환경을 새로 설정 하는 상황이나 새로 설정하는 것을 감안 할 생각이고, 리눅스 시스템에\n' +
      '거부감이 없다면 WSL 2가 나을 것 같다.\n' +
      '\n' +
      '이렇게 나눈 이유는, WSL 2에서는\n' +
      '\n' +
      '- Windows 파일 시스템(`/mnt/`)으로의 접근이 체감 될 만큼 느리다.\n' +
      '- Windows 파일 시스템에 이미 구성된 프로젝트의 경우, 파일 변경을 감지 하지 못하는 듯 하다.\n' +
      '  (Node의 watch 기능이 정상적으로 동작해주지 못한다. 파일 시스템이 다르니 당연한 것 같기는\n' +
      '  한데 처음에 무척 당황했다.)\n' +
      '- Windows에서 VS Code를 열고 터미널을 WSL로 사용할 때, Windows에서 연 브라우저가\n' +
      '  localhost에 접근이 잘 되지 않는다.\n' +
      '\n' +
      '  Windows 전원 옵션에 "빨리 켜기 기능"을 꺼두면 localhost 포워딩이 된다고 하는데, 실제로\n' +
      '  해봤을 때 localhost가 두 개의 다른 포트로 열렸을 때 하나만 되더라...\n' +
      '\n' +
      '내 경우는 이미 Windows 시스템을 기반으로 프로젝트들이 구성되어 있었고 WSL을 통합 해보는 거라\n' +
      '위의 문제들을 겪고 말았다 ㅋ\n' +
      '\n' +
      '물론 내 케이스가 아니라면 WSL 2가 더 나을 것 같기는 하다.\n' +
      '\n' +
      '## Windows Terminal 설치\n' +
      '\n' +
      'Windows에는 기본적으로 terminal이 존재하지 않기 때문에, windows terminal을\n' +
      '[Store](https://www.microsoft.com/ko-kr/p/windows-terminal/9n0dx20hk701)에서\n' +
      '별도로 설치해야 한다.\n' +
      '\n' +
      '![Windows Terminal on Store](/upload/2021/windows-store-terminal.jpg)\n' +
      '\n' +
      '## WSL 활성화\n' +
      '\n' +
      '자세한 내용은 [공식문서](https://docs.microsoft.com/ko-kr/windows/wsl/install-win10)를\n' +
      '참고하자.\n' +
      '\n' +
      "터미널(혹은 파워쉘)을 관리자 권한으로 실행 후, 다음을 차례대로 실행 하면된다. (물론 '제어판\n" +
      "&gt; 프로그램 &gt; 프로그램 및 기능 &gt; Windows 기능 켜기/끄기' 에서 GUI로 해도 된다.)\n" +
      '\n' +
      '```jsx\n' +
      'dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n' +
      'dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n' +
      '```\n' +
      '\n' +
      '실행이 종료 되었으면 "재시작"하자.\n' +
      '\n' +
      '일시적인 상황이었는지는 모르겠지만, 최초 이 설정을 할 때 재시작하지 않고 컴퓨터를 종료했다가\n' +
      '다음 날 켜서 설정을 계속 이어가려고 했더니 안되더라 = _=a\n' +
      '\n' +
      '### WSL 2 업데이트\n' +
      '\n' +
      'WSL 2를 사용하려면 적어도 Windows 10 May 2020 Update가 설치되어 있어야 한다. Windows\n' +
      '10 May 2020 Update에 실제 리눅스 커널을 사용하는 WSL 2가 기본 탑재 되었다고 한다.\n' +
      '그런데 좀 이상한게, Windows 10 최신 업데이트를 쓰고 있음에도 불구하고 WSL 2를 사용하려면\n' +
      '별도 패키지를 다운 받아서 설치하고, 추가 설정을 해야 한다. (아니 WSL 2를 기본으로 탑재했으면\n' +
      'WSL 2를 기본으로 사용할 수 있어야지 왜 WSL 1을 기본으로 잡아주고 있고... WSL 2를 쓰기 위해\n' +
      '추가 설치를 왜 해야 하는가...? )\n' +
      '\n' +
      '[MS WSL 설명서 페이지](https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package)로\n' +
      '가서 Linux 커널 업데이트 패키지 다운로드 후 설치한다.\n' +
      '\n' +
      '![Linux 커널 업데이트 설치 화면](/upload/2021/wsl-update.jpg)\n' +
      '\n' +
      '### WSL 기본 버전을 2로 설정\n' +
      '\n' +
      '터미널(혹은 파워쉘)에서 다음 명령을 시행한다.\n' +
      '\n' +
      '이걸 먼저 실행해야 이후로 설치되는 리눅스 시스템이 WSL 2를 기반으로 한다.\n' +
      '\n' +
      '```powershell\n' +
      'wsl --set-default-version 2\n' +
      '```\n' +
      '\n' +
      '## Ubuntu  설치\n' +
      '\n' +
      '다시 [Store](https://www.microsoft.com/ko-kr/store/apps/windows)에서 Ubuntu를\n' +
      '검색해서 설치 한다. (물론 우분투 말고 다른 리눅스 프로덕트를 선택해도 된다. 단지 내가\n' +
      'Ubuntu가 익숙해서 그렇다~~고 하지만 어차피 터미널인데?~~)\n' +
      '\n' +
      '![Windows Store Ubuntu 검색 결과](/upload/2021/windows-store-ubuntu.jpg)\n' +
      '\n' +
      '하지만 이 놈은 어디까지나 "배포" 패키지이므로 설치 후 최초 실행해야 우분투 설치가 진행된다.\n' +
      '시간이 조금 걸리니 기다리자.\n' +
      '\n' +
      '설치가 완료되면 다음과 같이 설치가 완료되었다는 메세지와 함께 웰컴 투 우분투가 노출된다\n' +
      '\n' +
      '![우분투 설치 완료 화면](/upload/2021/complete-install-ubuntu.jpg)\n' +
      '\n' +
      '### 터미널 기본 프로필 Ubuntu로 설정\n' +
      '\n' +
      '터미널에서도 Ubuntu가 기본으로 실행되도록 터미널 기본 프로필을 WSL로 설정한다.\n' +
      '\n' +
      '터미널에서 설정으로 들어가면 관련 json 파일이 열리는데, 여기서 `defaultProfile` 값을\n' +
      '`profiles.list` 에서 Ubuntu 것의 `guid` 값으로 수정하기만 하면 된다.\n' +
      '\n' +
      '```json|data-line="2,11"\n' +
      '{\n' +
      '  "defaultProfile": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
      '  ...\n' +
      '  "profiles":\n' +
      '    {\n' +
      '      ...\n' +
      '      "list":\n' +
      '      [\n' +
      '        ...\n' +
      '        {\n' +
      '          "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
      '          "hidden": false,\n' +
      '          "name": "Ubuntu",\n' +
      '          "source": "Windows.Terminal.Wsl",\n' +
      '          "colorScheme": "Dark+",\n' +
      '          "fontFace": "Hack"\n' +
      '        }\n' +
      '      ]\n' +
      '    },\n' +
      '}\n' +
      '```\n' +
      '\n' +
      '## Git, zsh 설치\n' +
      '\n' +
      'Ubuntu(WSL)를 실행하고, git과 zsh부터 설치한다.\n' +
      '\n' +
      '일단 패키지 레파지토리 인덱스부터 업데이트 하고\n' +
      '\n' +
      '```bash\n' +
      'sudo apt update\n' +
      '```\n' +
      '\n' +
      'git과 zsh을 설치\n' +
      '\n' +
      '```bash\n' +
      'sudo apt install git zsh\n' +
      '```\n' +
      '\n' +
      '## Oh my zsh 설치 및 구성\n' +
      '\n' +
      '### 설치\n' +
      '\n' +
      '터미널에서 다음 명령을 실행하기만 하면 된다.\n' +
      '\n' +
      '```bash\n' +
      'sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"\n' +
      '```\n' +
      '\n' +
      '설치가 완료되면 다음과 같은 메세지를 볼 수 있다.\n' +
      '\n' +
      '![oh my zsh 설치 완료 화면](/upload/2021/complete-install-oh-my-zsh.jpg)\n' +
      '\n' +
      '### 테마 구성\n' +
      '\n' +
      '역시 처음 설치했드면 꾸미기가 먼저다!!! 테마부터 변경한다.\n' +
      '\n' +
      '테마는 [ohmyzsh github wiki](https://github.com/ohmyzsh/ohmyzsh/wiki/Themes)에서\n' +
      '마음에 드는 걸 선택하면 될 것 같다. 내 경우엔 많이 언급되는 `agnoster`를 쓰기로...\n' +
      '\n' +
      '`~/.zshrc` 파일을 열어 `ZSH_THEME` 항목의 값을 변경하기만 하면 된다.\n' +
      '\n' +
      '```bash\n' +
      'vi ~/.zshrc\n' +
      '```\n' +
      '\n' +
      '```ini\n' +
      'ZSH_THEME="agnoster"\n' +
      '```\n' +
      '\n' +
      '참고로 `agnoster` 테마를 쓰려면 [powerline font](https://github.com/powerline/fonts)를\n' +
      '써야 하는데, 내 경우엔 이미 Hack 폰트를 쓰고 있어서 별도로 설치하지 않고 터미널 설정에서\n' +
      '`profile.list`의 해당 항목에 fontFamily 값만 추가하여 해결했다.\n' +
      '\n' +
      '```json|data-line="6"\n' +
      '{\n' +
      '  "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
      '  "hidden": false,\n' +
      '  "name": "Ubuntu",\n' +
      '  "source": "Windows.Terminal.Wsl",\n' +
      '  "fontFace": "Hack"\n' +
      '}\n' +
      '```\n' +
      '\n' +
      '### 터미널 color scheme 구성\n' +
      '\n' +
      '편한 눈을 위해(?) 각 컬러에 대한 상세 값을 설정할 수 있고, 개별적으로 설정이 어렵다면 이미\n' +
      '구성된 scheme들이 [windowsterminalthemes](https://windowsterminalthemes.dev/)에서\n' +
      '제공되고 있으니 이를 참고해서 구성도 가능하다.\n' +
      '\n' +
      '설정은 마찬가지로 터미널 설정에서 이루어지고, `schemes` 항목에 color scheme을 추가하고,\n' +
      '`profiles.list`의 해당 항목에 `colorScheme` 값을 추가 한 color scheme의 `name`\n' +
      '값으로 설정하면 된다.\n' +
      '\n' +
      '```json|data-line="10,16"\n' +
      '"profiles" :{\n' +
      '  "list": [\n' +
      '    ...,\n' +
      '    {\n' +
      '      "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
      '      "hidden": false,\n' +
      '      "name": "Ubuntu",\n' +
      '      "source": "Windows.Terminal.Wsl",\n' +
      '      "fontFace": "Hack",\n' +
      '      "colorScheme": "Dark+"\n' +
      '    }\n' +
      '  ],\n' +
      '},\n' +
      '"schemes": [\n' +
      '  {\n' +
      '    "name": "Dark+",\n' +
      '    "black": "#000000",\n' +
      '    ...\n' +
      '    "background": "#0e0e0e",\n' +
      '    "foreground": "#cccccc"\n' +
      '  }\n' +
      '],\n' +
      '```\n' +
      '\n' +
      '## zsh plugins 설치\n' +
      '\n' +
      '조금 더 편한 zsh 사용을 위해 플러그인을 설치한다.\n' +
      '\n' +
      '### [zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions)\n' +
      '\n' +
      '이 플러그인은 이전에 입력했던 명령을 기반으로 명령을 타이핑 할 때마다 자동 완성을 제공하고\n' +
      '방향키로 해당 자동 완성을 사용할 수 있게 해준다.\n' +
      '\n' +
      '다음 명령으로 설치하고,\n' +
      '\n' +
      '```bash\n' +
      'git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n' +
      '```\n' +
      '\n' +
      '`~/.zshrc` 파일을 열어 `plugins` 항목에 `zsh-autosuggestions`를 추가해준다.\n' +
      '\n' +
      '```ini\n' +
      'plugins=(git zsh-autosuggestions)\n' +
      '```\n' +
      '\n' +
      '### [syntax highlighting](https://github.com/zsh-users/zsh-syntax-highlighting/)\n' +
      '\n' +
      '이 플러그인은 명령어에 구문 강조를 적용해준다.\n' +
      '구문 강조가 적용되면 좋은 것 중 하나는 특정 명령을 사용할 수 있으면 녹색으로, 설치 되지 않음\n' +
      '등의 이유로 알 수 없는 명령이면 빨간색으로 나타난다.\n' +
      '\n' +
      '다음 명령으로 설치하고,\n' +
      '\n' +
      '```bash\n' +
      'git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n' +
      '```\n' +
      '\n' +
      '`~/.zshrc` 파일을 열어 `plugins` 항목에 `zsh-syntax-highlighting`을 추가해준다.\n' +
      '\n' +
      '```ini\n' +
      'plugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n' +
      '```\n' +
      '\n' +
      '## 터미널 프롬프트 변경\n' +
      '\n' +
      '터미널을 열면 다음 화면처럼 username@hostname 형태로 프롬프트가 나오는데, VS Code에서\n' +
      '터미널을 열고 작업하면 이 프롬프트가 차지하는 공간이 적지 않아 보기 불편하다.\n' +
      '\n' +
      '다행히 이것마저도 변경하거나 감출 수 있다!!\n' +
      '\n' +
      '![기본으로는 user name과 host name이 모두 노출된다](/upload/2021/terminal-prompt-full-name.jpg)\n' +
      '\n' +
      '`~/.zshrc` 파일을 열고 다음을 추가하면\n' +
      '\n' +
      '```ini\n' +
      'prompt_context() {}\n' +
      '```\n' +
      '\n' +
      '프롬프트가 사라진다. 두둔!!\n' +
      '\n' +
      '![프롬프가 사라지고 경로만 남았다](/upload/2021/terminal-prompt-hide-name.jpg)\n' +
      '\n' +
      '참고로 다음과 같이 수정하면 user name과 경로만 노출된다.\n' +
      '\n' +
      '```ini\n' +
      'prompt_context() {\n' +
      '    if [[ "$USER" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then\n' +
      '      prompt_segment black default "%(!.%{%F{yellow}%}.)$USER"\n' +
      '    fi\n' +
      '}\n' +
      '```\n' +
      '\n' +
      '### Named directory 구성\n' +
      '\n' +
      '하지만 아직 `/mnt/c/Users/{user name}/` 이 거슬린다.\n' +
      '심지어 이게 디렉토리 깊이가 깊어지면 이 또한 너무 길어진다. 하여 이 마저도 줄여보기로 한다.\n' +
      '\n' +
      '역시 마찬가지로 `~/.zshrc` 파일을 열어 다음을 참고하여 환경에 맞게 추가한다.\n' +
      '\n' +
      '내 경우엔 `c:\\Users\\mulder21c\\Project`와 `c:\\Users\\mulder21c\\Workspace`이 주 사용\n' +
      '디렉토리라 이 디렉토리들에 대한 경로를 변경하기로 했다.\n' +
      '\n' +
      '```ini\n' +
      'hash -d mulder21c=/mnt/c/Users/mulder21c\n' +
      'hash -d Project=/mnt/c/Users/mulder21c/Project\n' +
      'hash -d Workspace=/mnt/c/Users/mulder21c/Workspace\n' +
      '```\n' +
      '\n' +
      '터미널을 다시 열어보면 다음과 같이 지정한 이름으로 표시된다. (단 앞에 `~`이 붙는다.)\n' +
      '\n' +
      '![named directory를 적용하고 경로가 한결 간결해졌다](/upload/2021/terminal-named-directory.jpg)\n' +
      '\n' +
      '이제야 터미널이 좀 간결해진 것 같다.\n' +
      '\n' +
      '## nvm 설치\n' +
      '\n' +
      '마지막으로 node.js 환경을 위해 nvm을 설치한다.\n' +
      '\n' +
      '터미널에서 다음 명령을 주면 자동으로 설치가 진행된다.\n' +
      '\n' +
      '```bash\n' +
      'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n' +
      '```\n' +
      '\n' +
      '참고로, Windows에 nvm for windows가 설치되어 있다면 충돌로 설치가 진행되지 않는다. 내\n' +
      '경우엔 더 이상 Windows 시스템에서 node를 실행할 생각이 없어서 과감히 제거하고 설치했다.\n' +
      '\n' +
      '설치가 완료되면 나타난 메세지 중에 다음과 같은 메세지가 있다.\n' +
      '\n' +
      '```ini\n' +
      'export NVM_DIR="$HOME/.nvm"\n' +
      '[ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh"  # This loads nvm\n' +
      '[ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion\n' +
      '```\n' +
      '\n' +
      '이걸 복사해서 `~/.zshrc`에 추가해야 한다.\n' +
      '\n' +
      '이후 node 설치는 nvm을 이용하면 된다.\n' +
      '\n' +
      '### auto `nvm` use  설정\n' +
      '\n' +
      '마지막으로 아직 테스트 해보지는 않았지만, 최근 Node 10.x, Node 14.x, Node 15.x를 각\n' +
      '환경으로 하는 프로덕트를 왔다 갔다 하다가 Node 버전 문제로 node-sass가 오류를 내뱉는 상황을\n' +
      '자주 만나게 되었다. `nvm use` 하는 걸 까먹기도 했고 현재 프로덕트가 어느 버전에서 돌려야\n' +
      '하는지도 까먹기 일수였다 ;;;\n' +
      '\n' +
      '하여 구성하는 김에 `.nvmrc`를 이용해서 자동으로 `nvm use`가 적용되게 하는 설정을 추가했다.\n' +
      '\n' +
      '다음의 코드를 `~/.zshrc`에 추가하면되는데, 아직 테스트해보진 않아서 잘 되는지는 모르겠다 = _=a\n' +
      '뭐... stackoverflow에서 건져온 건데 추천이 많았으니 잘 되겠지...? /=ㅁ=/\n' +
      '\n' +
      '```ini\n' +
      '# place this after nvm initialization!\n' +
      'autoload -U add-zsh-hook\n' +
      'load-nvmrc() {\n' +
      '  local node_version="$(nvm version)"\n' +
      '  local nvmrc_path="$(nvm_find_nvmrc)"\n' +
      '\n' +
      '  if [ -n "$nvmrc_path" ]; then\n' +
      '    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")\n' +
      '\n' +
      '    if [ "$nvmrc_node_version" = "N/A" ]; then\n' +
      '      nvm install\n' +
      '    elif [ "$nvmrc_node_version" != "$node_version" ]; then\n' +
      '      nvm use\n' +
      '    fi\n' +
      '  elif [ "$node_version" != "$(nvm version default)" ]; then\n' +
      '    echo "Reverting to nvm default version"\n' +
      '    nvm use default\n' +
      '  fi\n' +
      '}\n' +
      'add-zsh-hook chpwd load-nvmrc\n' +
      'load-nvmrc\n' +
      '```',
    source: '_posts/2021-01-27-setting-up-wsl-2-dev-env-and-zsh-on-windws-10.md',
    raw: '---\n' +
      'title: 개발환경 WSL2 + zsh로 갈아타기\n' +
      'tags:\n' +
      '  - WSL 2\n' +
      '  - zsh\n' +
      '  - Windows 10\n' +
      '  - terminal\n' +
      '  - nvm\n' +
      'categories:\n' +
      '  - 개발노트\n' +
      '  - Front-End\n' +
      'thumbnail: /upload/2021/thumbs/wsl2-zsh-on-windws-10.jpg\n' +
      'hero: /upload/2021/wsl2-zsh-on-windws-10.jpg\n' +
      'style: |\n' +
      '  .hero {\n' +
      '    &-wrapper {\n' +
      '      text-shadow:\n' +
      '        1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
      '        -1px -1px 2em rgba(20, 12, 24, 1);\n' +
      '    }\n' +
      '    &__image {\n' +
      '      opacity: 0.35\n' +
      '    }\n' +
      '  }\n' +
      'seo:\n' +
      '  description: |\n' +
      '    본격적으로 WSL + zsh 환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가\n' +
      '    설정을 차후에 필요할까 기록으로 남겨둔다.\n' +
      '  image: /upload/2021/wsl2-zsh-on-windws-10.jpg\n' +
      'date: 2021-01-28 00:32:57\n' +
      '---\n' +
      '\n' +
      '\n' +
      '## 기존 환경\n' +
      '\n' +
      '얼마 전까지만 해도 VS Code의 터미널을 git bash로 (이하 bash) 설정해서 5년 가까이 bash\n' +
      '상에서 CLI를 사용해왔다. (아! 참고로 나는 Windows 10 사용자다. 맥이었으면 진즉부터\n' +
      'terminal을 썼겠지...)\n' +
      '\n' +
      '이 블로그 테마를 제작 후에 몇 번 mac이나 linux 환경에서 테마 설치 오류에 대한 이슈가\n' +
      '올라왔었고, 최근에 어떤 사이트를 번역하는데 해당 사이트 빌드가 bash 상에서는 정상적으로\n' +
      '이루어지지 않아 확인해보니 linux 상에서는 올바르게 빌드 되어 linux 환경에 대한 필요가\n' +
      '생겨났다.\n' +
      '\n' +
      '결국 미루고 미루던 WSL 사용을 시도하기로 하고 반 년 정도를 이 방식으로 써 본 것 같다.\n' +
      '(미루고 미룬 이유는 Windows를 못믿어서... = _=a 항상 예기치 않은 오류를 만들어주는\n' +
      ' Windows ... )\n' +
      '\n' +
      '무튼, 반 년 정도의 사용 경험에서는 크게 문제를 느끼지 못해서 이제 본격적으로 WSL + zsh\n' +
      '환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가 설정을 차후에 필요할까 기록으로\n' +
      '남겨둔다. (안녕 bash~ 오래 동안 고마웠어 ㅠ)\n' +
      '\n' +
      '## WSL 1 or WSL 2 ?\n' +
      '\n' +
      'WSL을 쓰기로 한 시점에 결정해야 할 것 중 하나는 일단 WSL 1을 쓸 것인가 혹은 WSL 2를 쓸\n' +
      '것인가 같다. 물론, WSL 2 구성까지 해 두면 언제든지 원하는 시점에 WSL 1과 2를 오갈 수 있고\n' +
      '따라서 WSL 2 구성 방법으로 포스팅 해두기는 했다.\n' +
      '\n' +
      '내 경우엔 2가지를 다 써봤는데, 써보고 난 이후에 드는 생각은 일단 내 경우에는 WSL 1을 쓰는\n' +
      '게 아직은 낫지 않을까 싶다. MS에서는 WSL 2가 더 빠르고 전체 리눅스 커널 사용, 시스템 호출\n' +
      '호환성 등을 장점으로 들고 있지만 생각보다 만나게 되는 장애물이 많았다.\n' +
      '\n' +
      '일단 몇 가지 선택에 필요한 기준에 따라 나누어 보면,\n' +
      '기존의 Windows 시스템에서 이미 프로젝트가 구성되어 있고 (Node든 뭐 다른 것이든) 여기에\n' +
      'WSL을 통합하는 거라면 WSL 1을 추천한다.\n' +
      '반면 개발 환경을 새로 설정 하는 상황이나 새로 설정하는 것을 감안 할 생각이고, 리눅스 시스템에\n' +
      '거부감이 없다면 WSL 2가 나을 것 같다.\n' +
      '\n' +
      '이렇게 나눈 이유는, WSL 2에서는\n' +
      '\n' +
      '- Windows 파일 시스템(`/mnt/`)으로의 접근이 체감 될 만큼 느리다.\n' +
      '- Windows 파일 시스템에 이미 구성된 프로젝트의 경우, 파일 변경을 감지 하지 못하는 듯 하다.\n' +
      '  (Node의 watch 기능이 정상적으로 동작해주지 못한다. 파일 시스템이 다르니 당연한 것 같기는\n' +
      '  한데 처음에 무척 당황했다.)\n' +
      '- Windows에서 VS Code를 열고 터미널을 WSL로 사용할 때, Windows에서 연 브라우저가\n' +
      '  localhost에 접근이 잘 되지 않는다.\n' +
      '\n' +
      '  Windows 전원 옵션에 "빨리 켜기 기능"을 꺼두면 localhost 포워딩이 된다고 하는데, 실제로\n' +
      '  해봤을 때 localhost가 두 개의 다른 포트로 열렸을 때 하나만 되더라...\n' +
      '\n' +
      '내 경우는 이미 Windows 시스템을 기반으로 프로젝트들이 구성되어 있었고 WSL을 통합 해보는 거라\n' +
      '위의 문제들을 겪고 말았다 ㅋ\n' +
      '\n' +
      '물론 내 케이스가 아니라면 WSL 2가 더 나을 것 같기는 하다.\n' +
      '\n' +
      '## Windows Terminal 설치\n' +
      '\n' +
      'Windows에는 기본적으로 terminal이 존재하지 않기 때문에, windows terminal을\n' +
      '[Store](https://www.microsoft.com/ko-kr/p/windows-terminal/9n0dx20hk701)에서\n' +
      '별도로 설치해야 한다.\n' +
      '\n' +
      '![Windows Terminal on Store](/upload/2021/windows-store-terminal.jpg)\n' +
      '\n' +
      '## WSL 활성화\n' +
      '\n' +
      '자세한 내용은 [공식문서](https://docs.microsoft.com/ko-kr/windows/wsl/install-win10)를\n' +
      '참고하자.\n' +
      '\n' +
      "터미널(혹은 파워쉘)을 관리자 권한으로 실행 후, 다음을 차례대로 실행 하면된다. (물론 '제어판\n" +
      "&gt; 프로그램 &gt; 프로그램 및 기능 &gt; Windows 기능 켜기/끄기' 에서 GUI로 해도 된다.)\n" +
      '\n' +
      '```jsx\n' +
      'dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n' +
      'dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n' +
      '```\n' +
      '\n' +
      '실행이 종료 되었으면 "재시작"하자.\n' +
      '\n' +
      '일시적인 상황이었는지는 모르겠지만, 최초 이 설정을 할 때 재시작하지 않고 컴퓨터를 종료했다가\n' +
      '다음 날 켜서 설정을 계속 이어가려고 했더니 안되더라 = _=a\n' +
      '\n' +
      '### WSL 2 업데이트\n' +
      '\n' +
      'WSL 2를 사용하려면 적어도 Windows 10 May 2020 Update가 설치되어 있어야 한다. Windows\n' +
      '10 May 2020 Update에 실제 리눅스 커널을 사용하는 WSL 2가 기본 탑재 되었다고 한다.\n' +
      '그런데 좀 이상한게, Windows 10 최신 업데이트를 쓰고 있음에도 불구하고 WSL 2를 사용하려면\n' +
      '별도 패키지를 다운 받아서 설치하고, 추가 설정을 해야 한다. (아니 WSL 2를 기본으로 탑재했으면\n' +
      'WSL 2를 기본으로 사용할 수 있어야지 왜 WSL 1을 기본으로 잡아주고 있고... WSL 2를 쓰기 위해\n' +
      '추가 설치를 왜 해야 하는가...? )\n' +
      '\n' +
      '[MS WSL 설명서 페이지](https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package)로\n' +
      '가서 Linux 커널 업데이트 패키지 다운로드 후 설치한다.\n' +
      '\n' +
      '![Linux 커널 업데이트 설치 화면](/upload/2021/wsl-update.jpg)\n' +
      '\n' +
      '### WSL 기본 버전을 2로 설정\n' +
      '\n' +
      '터미널(혹은 파워쉘)에서 다음 명령을 시행한다.\n' +
      '\n' +
      '이걸 먼저 실행해야 이후로 설치되는 리눅스 시스템이 WSL 2를 기반으로 한다.\n' +
      '\n' +
      '```powershell\n' +
      'wsl --set-default-version 2\n' +
      '```\n' +
      '\n' +
      '## Ubuntu  설치\n' +
      '\n' +
      '다시 [Store](https://www.microsoft.com/ko-kr/store/apps/windows)에서 Ubuntu를\n' +
      '검색해서 설치 한다. (물론 우분투 말고 다른 리눅스 프로덕트를 선택해도 된다. 단지 내가\n' +
      'Ubuntu가 익숙해서 그렇다~~고 하지만 어차피 터미널인데?~~)\n' +
      '\n' +
      '![Windows Store Ubuntu 검색 결과](/upload/2021/windows-store-ubuntu.jpg)\n' +
      '\n' +
      '하지만 이 놈은 어디까지나 "배포" 패키지이므로 설치 후 최초 실행해야 우분투 설치가 진행된다.\n' +
      '시간이 조금 걸리니 기다리자.\n' +
      '\n' +
      '설치가 완료되면 다음과 같이 설치가 완료되었다는 메세지와 함께 웰컴 투 우분투가 노출된다\n' +
      '\n' +
      '![우분투 설치 완료 화면](/upload/2021/complete-install-ubuntu.jpg)\n' +
      '\n' +
      '### 터미널 기본 프로필 Ubuntu로 설정\n' +
      '\n' +
      '터미널에서도 Ubuntu가 기본으로 실행되도록 터미널 기본 프로필을 WSL로 설정한다.\n' +
      '\n' +
      '터미널에서 설정으로 들어가면 관련 json 파일이 열리는데, 여기서 `defaultProfile` 값을\n' +
      '`profiles.list` 에서 Ubuntu 것의 `guid` 값으로 수정하기만 하면 된다.\n' +
      '\n' +
      '```json|data-line="2,11"\n' +
      '{\n' +
      '  "defaultProfile": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
      '  ...\n' +
      '  "profiles":\n' +
      '    {\n' +
      '      ...\n' +
      '      "list":\n' +
      '      [\n' +
      '        ...\n' +
      '        {\n' +
      '          "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
      '          "hidden": false,\n' +
      '          "name": "Ubuntu",\n' +
      '          "source": "Windows.Terminal.Wsl",\n' +
      '          "colorScheme": "Dark+",\n' +
      '          "fontFace": "Hack"\n' +
      '        }\n' +
      '      ]\n' +
      '    },\n' +
      '}\n' +
      '```\n' +
      '\n' +
      '## Git, zsh 설치\n' +
      '\n' +
      'Ubuntu(WSL)를 실행하고, git과 zsh부터 설치한다.\n' +
      '\n' +
      '일단 패키지 레파지토리 인덱스부터 업데이트 하고\n' +
      '\n' +
      '```bash\n' +
      'sudo apt update\n' +
      '```\n' +
      '\n' +
      'git과 zsh을 설치\n' +
      '\n' +
      '```bash\n' +
      'sudo apt install git zsh\n' +
      '```\n' +
      '\n' +
      '## Oh my zsh 설치 및 구성\n' +
      '\n' +
      '### 설치\n' +
      '\n' +
      '터미널에서 다음 명령을 실행하기만 하면 된다.\n' +
      '\n' +
      '```bash\n' +
      'sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"\n' +
      '```\n' +
      '\n' +
      '설치가 완료되면 다음과 같은 메세지를 볼 수 있다.\n' +
      '\n' +
      '![oh my zsh 설치 완료 화면](/upload/2021/complete-install-oh-my-zsh.jpg)\n' +
      '\n' +
      '### 테마 구성\n' +
      '\n' +
      '역시 처음 설치했드면 꾸미기가 먼저다!!! 테마부터 변경한다.\n' +
      '\n' +
      '테마는 [ohmyzsh github wiki](https://github.com/ohmyzsh/ohmyzsh/wiki/Themes)에서\n' +
      '마음에 드는 걸 선택하면 될 것 같다. 내 경우엔 많이 언급되는 `agnoster`를 쓰기로...\n' +
      '\n' +
      '`~/.zshrc` 파일을 열어 `ZSH_THEME` 항목의 값을 변경하기만 하면 된다.\n' +
      '\n' +
      '```bash\n' +
      'vi ~/.zshrc\n' +
      '```\n' +
      '\n' +
      '```ini\n' +
      'ZSH_THEME="agnoster"\n' +
      '```\n' +
      '\n' +
      '참고로 `agnoster` 테마를 쓰려면 [powerline font](https://github.com/powerline/fonts)를\n' +
      '써야 하는데, 내 경우엔 이미 Hack 폰트를 쓰고 있어서 별도로 설치하지 않고 터미널 설정에서\n' +
      '`profile.list`의 해당 항목에 fontFamily 값만 추가하여 해결했다.\n' +
      '\n' +
      '```json|data-line="6"\n' +
      '{\n' +
      '  "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
      '  "hidden": false,\n' +
      '  "name": "Ubuntu",\n' +
      '  "source": "Windows.Terminal.Wsl",\n' +
      '  "fontFace": "Hack"\n' +
      '}\n' +
      '```\n' +
      '\n' +
      '### 터미널 color scheme 구성\n' +
      '\n' +
      '편한 눈을 위해(?) 각 컬러에 대한 상세 값을 설정할 수 있고, 개별적으로 설정이 어렵다면 이미\n' +
      '구성된 scheme들이 [windowsterminalthemes](https://windowsterminalthemes.dev/)에서\n' +
      '제공되고 있으니 이를 참고해서 구성도 가능하다.\n' +
      '\n' +
      '설정은 마찬가지로 터미널 설정에서 이루어지고, `schemes` 항목에 color scheme을 추가하고,\n' +
      '`profiles.list`의 해당 항목에 `colorScheme` 값을 추가 한 color scheme의 `name`\n' +
      '값으로 설정하면 된다.\n' +
      '\n' +
      '```json|data-line="10,16"\n' +
      '"profiles" :{\n' +
      '  "list": [\n' +
      '    ...,\n' +
      '    {\n' +
      '      "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
      '      "hidden": false,\n' +
      '      "name": "Ubuntu",\n' +
      '      "source": "Windows.Terminal.Wsl",\n' +
      '      "fontFace": "Hack",\n' +
      '      "colorScheme": "Dark+"\n' +
      '    }\n' +
      '  ],\n' +
      '},\n' +
      '"schemes": [\n' +
      '  {\n' +
      '    "name": "Dark+",\n' +
      '    "black": "#000000",\n' +
      '    ...\n' +
      '    "background": "#0e0e0e",\n' +
      '    "foreground": "#cccccc"\n' +
      '  }\n' +
      '],\n' +
      '```\n' +
      '\n' +
      '## zsh plugins 설치\n' +
      '\n' +
      '조금 더 편한 zsh 사용을 위해 플러그인을 설치한다.\n' +
      '\n' +
      '### [zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions)\n' +
      '\n' +
      '이 플러그인은 이전에 입력했던 명령을 기반으로 명령을 타이핑 할 때마다 자동 완성을 제공하고\n' +
      '방향키로 해당 자동 완성을 사용할 수 있게 해준다.\n' +
      '\n' +
      '다음 명령으로 설치하고,\n' +
      '\n' +
      '```bash\n' +
      'git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n' +
      '```\n' +
      '\n' +
      '`~/.zshrc` 파일을 열어 `plugins` 항목에 `zsh-autosuggestions`를 추가해준다.\n' +
      '\n' +
      '```ini\n' +
      'plugins=(git zsh-autosuggestions)\n' +
      '```\n' +
      '\n' +
      '### [syntax highlighting](https://github.com/zsh-users/zsh-syntax-highlighting/)\n' +
      '\n' +
      '이 플러그인은 명령어에 구문 강조를 적용해준다.\n' +
      '구문 강조가 적용되면 좋은 것 중 하나는 특정 명령을 사용할 수 있으면 녹색으로, 설치 되지 않음\n' +
      '등의 이유로 알 수 없는 명령이면 빨간색으로 나타난다.\n' +
      '\n' +
      '다음 명령으로 설치하고,\n' +
      '\n' +
      '```bash\n' +
      'git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n' +
      '```\n' +
      '\n' +
      '`~/.zshrc` 파일을 열어 `plugins` 항목에 `zsh-syntax-highlighting`을 추가해준다.\n' +
      '\n' +
      '```ini\n' +
      'plugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n' +
      '```\n' +
      '\n' +
      '## 터미널 프롬프트 변경\n' +
      '\n' +
      '터미널을 열면 다음 화면처럼 username@hostname 형태로 프롬프트가 나오는데, VS Code에서\n' +
      '터미널을 열고 작업하면 이 프롬프트가 차지하는 공간이 적지 않아 보기 불편하다.\n' +
      '\n' +
      '다행히 이것마저도 변경하거나 감출 수 있다!!\n' +
      '\n' +
      '![기본으로는 user name과 host name이 모두 노출된다](/upload/2021/terminal-prompt-full-name.jpg)\n' +
      '\n' +
      '`~/.zshrc` 파일을 열고 다음을 추가하면\n' +
      '\n' +
      '```ini\n' +
      'prompt_context() {}\n' +
      '```\n' +
      '\n' +
      '프롬프트가 사라진다. 두둔!!\n' +
      '\n' +
      '![프롬프가 사라지고 경로만 남았다](/upload/2021/terminal-prompt-hide-name.jpg)\n' +
      '\n' +
      '참고로 다음과 같이 수정하면 user name과 경로만 노출된다.\n' +
      '\n' +
      '```ini\n' +
      'prompt_context() {\n' +
      '    if [[ "$USER" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then\n' +
      '      prompt_segment black default "%(!.%{%F{yellow}%}.)$USER"\n' +
      '    fi\n' +
      '}\n' +
      '```\n' +
      '\n' +
      '### Named directory 구성\n' +
      '\n' +
      '하지만 아직 `/mnt/c/Users/{user name}/` 이 거슬린다.\n' +
      '심지어 이게 디렉토리 깊이가 깊어지면 이 또한 너무 길어진다. 하여 이 마저도 줄여보기로 한다.\n' +
      '\n' +
      '역시 마찬가지로 `~/.zshrc` 파일을 열어 다음을 참고하여 환경에 맞게 추가한다.\n' +
      '\n' +
      '내 경우엔 `c:\\Users\\mulder21c\\Project`와 `c:\\Users\\mulder21c\\Workspace`이 주 사용\n' +
      '디렉토리라 이 디렉토리들에 대한 경로를 변경하기로 했다.\n' +
      '\n' +
      '```ini\n' +
      'hash -d mulder21c=/mnt/c/Users/mulder21c\n' +
      'hash -d Project=/mnt/c/Users/mulder21c/Project\n' +
      'hash -d Workspace=/mnt/c/Users/mulder21c/Workspace\n' +
      '```\n' +
      '\n' +
      '터미널을 다시 열어보면 다음과 같이 지정한 이름으로 표시된다. (단 앞에 `~`이 붙는다.)\n' +
      '\n' +
      '![named directory를 적용하고 경로가 한결 간결해졌다](/upload/2021/terminal-named-directory.jpg)\n' +
      '\n' +
      '이제야 터미널이 좀 간결해진 것 같다.\n' +
      '\n' +
      '## nvm 설치\n' +
      '\n' +
      '마지막으로 node.js 환경을 위해 nvm을 설치한다.\n' +
      '\n' +
      '터미널에서 다음 명령을 주면 자동으로 설치가 진행된다.\n' +
      '\n' +
      '```bash\n' +
      'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n' +
      '```\n' +
      '\n' +
      '참고로, Windows에 nvm for windows가 설치되어 있다면 충돌로 설치가 진행되지 않는다. 내\n' +
      '경우엔 더 이상 Windows 시스템에서 node를 실행할 생각이 없어서 과감히 제거하고 설치했다.\n' +
      '\n' +
      '설치가 완료되면 나타난 메세지 중에 다음과 같은 메세지가 있다.\n' +
      '\n' +
      '```ini\n' +
      'export NVM_DIR="$HOME/.nvm"\n' +
      '[ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh"  # This loads nvm\n' +
      '[ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion\n' +
      '```\n' +
      '\n' +
      '이걸 복사해서 `~/.zshrc`에 추가해야 한다.\n' +
      '\n' +
      '이후 node 설치는 nvm을 이용하면 된다.\n' +
      '\n' +
      '### auto `nvm` use  설정\n' +
      '\n' +
      '마지막으로 아직 테스트 해보지는 않았지만, 최근 Node 10.x, Node 14.x, Node 15.x를 각\n' +
      '환경으로 하는 프로덕트를 왔다 갔다 하다가 Node 버전 문제로 node-sass가 오류를 내뱉는 상황을\n' +
      '자주 만나게 되었다. `nvm use` 하는 걸 까먹기도 했고 현재 프로덕트가 어느 버전에서 돌려야\n' +
      '하는지도 까먹기 일수였다 ;;;\n' +
      '\n' +
      '하여 구성하는 김에 `.nvmrc`를 이용해서 자동으로 `nvm use`가 적용되게 하는 설정을 추가했다.\n' +
      '\n' +
      '다음의 코드를 `~/.zshrc`에 추가하면되는데, 아직 테스트해보진 않아서 잘 되는지는 모르겠다 = _=a\n' +
      '뭐... stackoverflow에서 건져온 건데 추천이 많았으니 잘 되겠지...? /=ㅁ=/\n' +
      '\n' +
      '```ini\n' +
      '# place this after nvm initialization!\n' +
      'autoload -U add-zsh-hook\n' +
      'load-nvmrc() {\n' +
      '  local node_version="$(nvm version)"\n' +
      '  local nvmrc_path="$(nvm_find_nvmrc)"\n' +
      '\n' +
      '  if [ -n "$nvmrc_path" ]; then\n' +
      '    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")\n' +
      '\n' +
      '    if [ "$nvmrc_node_version" = "N/A" ]; then\n' +
      '      nvm install\n' +
      '    elif [ "$nvmrc'... 239 more characters,
    slug: 'setting-up-wsl-2-dev-env-and-zsh-on-windws-10',
    published: true,
    comments: true,
    layout: 'post',
    photos: [],
    link: '',
    _id: 'clcytfa4r00aatawwe3zac5qf',
    content: '<h2 id="기존-환경"><a href="#기존-환경" class="headerlink" title="기존 환경"></a>기존 환경</h2><p>얼마 전까지만 해도 VS Code의 터미널을 git bash로 (이하 bash) 설정해서 5년 가까이 bash\n' +
      '상에서 CLI를 사용해왔다. (아! 참고로 나는 Windows 10 사용자다. 맥이었으면 진즉부터\n' +
      'terminal을 썼겠지...)</p>\n' +
      '<p>이 블로그 테마를 제작 후에 몇 번 mac이나 linux 환경에서 테마 설치 오류에 대한 이슈가\n' +
      '올라왔었고, 최근에 어떤 사이트를 번역하는데 해당 사이트 빌드가 bash 상에서는 정상적으로\n' +
      '이루어지지 않아 확인해보니 linux 상에서는 올바르게 빌드 되어 linux 환경에 대한 필요가\n' +
      '생겨났다.</p>\n' +
      '<p>결국 미루고 미루던 WSL 사용을 시도하기로 하고 반 년 정도를 이 방식으로 써 본 것 같다.\n' +
      '(미루고 미룬 이유는 Windows를 못믿어서... &#x3D; _&#x3D;a 항상 예기치 않은 오류를 만들어주는\n' +
      ' Windows ... )</p>\n' +
      '<p>무튼, 반 년 정도의 사용 경험에서는 크게 문제를 느끼지 못해서 이제 본격적으로 WSL + zsh\n' +
      '환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가 설정을 차후에 필요할까 기록으로\n' +
      '남겨둔다. (안녕 bash~ 오래 동안 고마웠어 ㅠ)</p>\n' +
      '<h2 id="WSL-1-or-WSL-2"><a href="#WSL-1-or-WSL-2" class="headerlink" title="WSL 1 or WSL 2 ?"></a>WSL 1 or WSL 2 ?</h2><p>WSL을 쓰기로 한 시점에 결정해야 할 것 중 하나는 일단 WSL 1을 쓸 것인가 혹은 WSL 2를 쓸\n' +
      '것인가 같다. 물론, WSL 2 구성까지 해 두면 언제든지 원하는 시점에 WSL 1과 2를 오갈 수 있고\n' +
      '따라서 WSL 2 구성 방법으로 포스팅 해두기는 했다.</p>\n' +
      '<p>내 경우엔 2가지를 다 써봤는데, 써보고 난 이후에 드는 생각은 일단 내 경우에는 WSL 1을 쓰는\n' +
      '게 아직은 낫지 않을까 싶다. MS에서는 WSL 2가 더 빠르고 전체 리눅스 커널 사용, 시스템 호출\n' +
      '호환성 등을 장점으로 들고 있지만 생각보다 만나게 되는 장애물이 많았다.</p>\n' +
      '<p>일단 몇 가지 선택에 필요한 기준에 따라 나누어 보면,\n' +
      '기존의 Windows 시스템에서 이미 프로젝트가 구성되어 있고 (Node든 뭐 다른 것이든) 여기에\n' +
      'WSL을 통합하는 거라면 WSL 1을 추천한다.\n' +
      '반면 개발 환경을 새로 설정 하는 상황이나 새로 설정하는 것을 감안 할 생각이고, 리눅스 시스템에\n' +
      '거부감이 없다면 WSL 2가 나을 것 같다.</p>\n' +
      '<p>이렇게 나눈 이유는, WSL 2에서는</p>\n' +
      '<ul>\n' +
      '<li><p>Windows 파일 시스템(<code>/mnt/</code>)으로의 접근이 체감 될 만큼 느리다.</p>\n' +
      '</li>\n' +
      '<li><p>Windows 파일 시스템에 이미 구성된 프로젝트의 경우, 파일 변경을 감지 하지 못하는 듯 하다.\n' +
      '(Node의 watch 기능이 정상적으로 동작해주지 못한다. 파일 시스템이 다르니 당연한 것 같기는\n' +
      '한데 처음에 무척 당황했다.)</p>\n' +
      '</li>\n' +
      '<li><p>Windows에서 VS Code를 열고 터미널을 WSL로 사용할 때, Windows에서 연 브라우저가\n' +
      'localhost에 접근이 잘 되지 않는다.</p>\n' +
      '<p>Windows 전원 옵션에 &quot;빨리 켜기 기능&quot;을 꺼두면 localhost 포워딩이 된다고 하는데, 실제로\n' +
      '해봤을 때 localhost가 두 개의 다른 포트로 열렸을 때 하나만 되더라...</p>\n' +
      '</li>\n' +
      '</ul>\n' +
      '<p>내 경우는 이미 Windows 시스템을 기반으로 프로젝트들이 구성되어 있었고 WSL을 통합 해보는 거라\n' +
      '위의 문제들을 겪고 말았다 ㅋ</p>\n' +
      '<p>물론 내 케이스가 아니라면 WSL 2가 더 나을 것 같기는 하다.</p>\n' +
      '<h2 id="Windows-Terminal-설치"><a href="#Windows-Terminal-설치" class="headerlink" title="Windows Terminal 설치"></a>Windows Terminal 설치</h2><p>Windows에는 기본적으로 terminal이 존재하지 않기 때문에, windows terminal을\n' +
      '<a href="https://www.microsoft.com/ko-kr/p/windows-terminal/9n0dx20hk701">Store</a>에서\n' +
      '별도로 설치해야 한다.</p>\n' +
      '<p><img src="/upload/2021/windows-store-terminal.jpg" alt="Windows Terminal on Store"></p>\n' +
      '<h2 id="WSL-활성화"><a href="#WSL-활성화" class="headerlink" title="WSL 활성화"></a>WSL 활성화</h2><p>자세한 내용은 <a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10">공식문서</a>를\n' +
      '참고하자.</p>\n' +
      '<p>터미널(혹은 파워쉘)을 관리자 권한으로 실행 후, 다음을 차례대로 실행 하면된다. (물론 &#39;제어판\n' +
      '&gt; 프로그램 &gt; 프로그램 및 기능 &gt; Windows 기능 켜기&#x2F;끄기&#39; 에서 GUI로 해도 된다.)</p>\n' +
      '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span>enable<span class="token operator">-</span>feature <span class="token operator">/</span>featurename<span class="token operator">:</span>Microsoft<span class="token operator">-</span>Windows<span class="token operator">-</span>Subsystem<span class="token operator">-</span>Linux <span class="token operator">/</span>all <span class="token operator">/</span>norestart\n' +
      'dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span>enable<span class="token operator">-</span>feature <span class="token operator">/</span>featurename<span class="token operator">:</span>VirtualMachinePlatform <span class="token operator">/</span>all <span class="token operator">/</span>norestart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>실행이 종료 되었으면 &quot;재시작&quot;하자.</p>\n' +
      '<p>일시적인 상황이었는지는 모르겠지만, 최초 이 설정을 할 때 재시작하지 않고 컴퓨터를 종료했다가\n' +
      '다음 날 켜서 설정을 계속 이어가려고 했더니 안되더라 &#x3D; _&#x3D;a</p>\n' +
      '<h3 id="WSL-2-업데이트"><a href="#WSL-2-업데이트" class="headerlink" title="WSL 2 업데이트"></a>WSL 2 업데이트</h3><p>WSL 2를 사용하려면 적어도 Windows 10 May 2020 Update가 설치되어 있어야 한다. Windows\n' +
      '10 May 2020 Update에 실제 리눅스 커널을 사용하는 WSL 2가 기본 탑재 되었다고 한다.\n' +
      '그런데 좀 이상한게, Windows 10 최신 업데이트를 쓰고 있음에도 불구하고 WSL 2를 사용하려면\n' +
      '별도 패키지를 다운 받아서 설치하고, 추가 설정을 해야 한다. (아니 WSL 2를 기본으로 탑재했으면\n' +
      'WSL 2를 기본으로 사용할 수 있어야지 왜 WSL 1을 기본으로 잡아주고 있고... WSL 2를 쓰기 위해\n' +
      '추가 설치를 왜 해야 하는가...? )</p>\n' +
      '<p><a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package">MS WSL 설명서 페이지</a>로\n' +
      '가서 Linux 커널 업데이트 패키지 다운로드 후 설치한다.</p>\n' +
      '<p><img src="/upload/2021/wsl-update.jpg" alt="Linux 커널 업데이트 설치 화면"></p>\n' +
      '<h3 id="WSL-기본-버전을-2로-설정"><a href="#WSL-기본-버전을-2로-설정" class="headerlink" title="WSL 기본 버전을 2로 설정"></a>WSL 기본 버전을 2로 설정</h3><p>터미널(혹은 파워쉘)에서 다음 명령을 시행한다.</p>\n' +
      '<p>이걸 먼저 실행해야 이후로 설치되는 리눅스 시스템이 WSL 2를 기반으로 한다.</p>\n' +
      '<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-default</span><span class="token operator">-</span>version 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<h2 id="Ubuntu-설치"><a href="#Ubuntu-설치" class="headerlink" title="Ubuntu  설치"></a>Ubuntu  설치</h2><p>다시 <a href="https://www.microsoft.com/ko-kr/store/apps/windows">Store</a>에서 Ubuntu를\n' +
      '검색해서 설치 한다. (물론 우분투 말고 다른 리눅스 프로덕트를 선택해도 된다. 단지 내가\n' +
      'Ubuntu가 익숙해서 그렇다<del>고 하지만 어차피 터미널인데?</del>)</p>\n' +
      '<p><img src="/upload/2021/windows-store-ubuntu.jpg" alt="Windows Store Ubuntu 검색 결과"></p>\n' +
      '<p>하지만 이 놈은 어디까지나 &quot;배포&quot; 패키지이므로 설치 후 최초 실행해야 우분투 설치가 진행된다.\n' +
      '시간이 조금 걸리니 기다리자.</p>\n' +
      '<p>설치가 완료되면 다음과 같이 설치가 완료되었다는 메세지와 함께 웰컴 투 우분투가 노출된다</p>\n' +
      '<p><img src="/upload/2021/complete-install-ubuntu.jpg" alt="우분투 설치 완료 화면"></p>\n' +
      '<h3 id="터미널-기본-프로필-Ubuntu로-설정"><a href="#터미널-기본-프로필-Ubuntu로-설정" class="headerlink" title="터미널 기본 프로필 Ubuntu로 설정"></a>터미널 기본 프로필 Ubuntu로 설정</h3><p>터미널에서도 Ubuntu가 기본으로 실행되도록 터미널 기본 프로필을 WSL로 설정한다.</p>\n' +
      '<p>터미널에서 설정으로 들어가면 관련 json 파일이 열리는데, 여기서 <code>defaultProfile</code> 값을\n' +
      '<code>profiles.list</code> 에서 Ubuntu 것의 <code>guid</code> 값으로 수정하기만 하면 된다.</p>\n' +
      '<pre class="line-numbers language-json|data-line" data-language="json|data-line"><code class="language-json|data-line">&#123;\n' +
      '  &quot;defaultProfile&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,\n' +
      '  ...\n' +
      '  &quot;profiles&quot;:\n' +
      '    &#123;\n' +
      '      ...\n' +
      '      &quot;list&quot;:\n' +
      '      [\n' +
      '        ...\n' +
      '        &#123;\n' +
      '          &quot;guid&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,\n' +
      '          &quot;hidden&quot;: false,\n' +
      '          &quot;name&quot;: &quot;Ubuntu&quot;,\n' +
      '          &quot;source&quot;: &quot;Windows.Terminal.Wsl&quot;,\n' +
      '          &quot;colorScheme&quot;: &quot;Dark+&quot;,\n' +
      '          &quot;fontFace&quot;: &quot;Hack&quot;\n' +
      '        &#125;\n' +
      '      ]\n' +
      '    &#125;,\n' +
      '&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<h2 id="Git-zsh-설치"><a href="#Git-zsh-설치" class="headerlink" title="Git, zsh 설치"></a>Git, zsh 설치</h2><p>Ubuntu(WSL)를 실행하고, git과 zsh부터 설치한다.</p>\n' +
      '<p>일단 패키지 레파지토리 인덱스부터 업데이트 하고</p>\n' +
      '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<p>git과 zsh을 설치</p>\n' +
      '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span> <span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<h2 id="Oh-my-zsh-설치-및-구성"><a href="#Oh-my-zsh-설치-및-구성" class="headerlink" title="Oh my zsh 설치 및 구성"></a>Oh my zsh 설치 및 구성</h2><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><p>터미널에서 다음 명령을 실행하기만 하면 된다.</p>\n' +
      '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<p>설치가 완료되면 다음과 같은 메세지를 볼 수 있다.</p>\n' +
      '<p><img src="/upload/2021/complete-install-oh-my-zsh.jpg" alt="oh my zsh 설치 완료 화면"></p>\n' +
      '<h3 id="테마-구성"><a href="#테마-구성" class="headerlink" title="테마 구성"></a>테마 구성</h3><p>역시 처음 설치했드면 꾸미기가 먼저다!!! 테마부터 변경한다.</p>\n' +
      '<p>테마는 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">ohmyzsh github wiki</a>에서\n' +
      '마음에 드는 걸 선택하면 될 것 같다. 내 경우엔 많이 언급되는 <code>agnoster</code>를 쓰기로...</p>\n' +
      '<p><code>~/.zshrc</code> 파일을 열어 <code>ZSH_THEME</code> 항목의 값을 변경하기만 하면 된다.</p>\n' +
      '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">ZSH_THEME</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">agnoster</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<p>참고로 <code>agnoster</code> 테마를 쓰려면 <a href="https://github.com/powerline/fonts">powerline font</a>를\n' +
      '써야 하는데, 내 경우엔 이미 Hack 폰트를 쓰고 있어서 별도로 설치하지 않고 터미널 설정에서\n' +
      '<code>profile.list</code>의 해당 항목에 fontFamily 값만 추가하여 해결했다.</p>\n' +
      '<pre class="line-numbers language-j'... 11610 more characters,
    site: { data: [Object] },
    excerpt: '',
    more: '<h2 id="기존-환경"><a href="#기존-환경" class="headerlink" title="기존 환경"></a>기존 환경</h2><p>얼마 전까지만 해도 VS Code의 터미널을 git bash로 (이하 bash) 설정해서 5년 가까이 bash\n' +
      '상에서 CLI를 사용해왔다. (아! 참고로 나는 Windows 10 사용자다. 맥이었으면 진즉부터\n' +
      'terminal을 썼겠지...)</p>\n' +
      '<p>이 블로그 테마를 제작 후에 몇 번 mac이나 linux 환경에서 테마 설치 오류에 대한 이슈가\n' +
      '올라왔었고, 최근에 어떤 사이트를 번역하는데 해당 사이트 빌드가 bash 상에서는 정상적으로\n' +
      '이루어지지 않아 확인해보니 linux 상에서는 올바르게 빌드 되어 linux 환경에 대한 필요가\n' +
      '생겨났다.</p>\n' +
      '<p>결국 미루고 미루던 WSL 사용을 시도하기로 하고 반 년 정도를 이 방식으로 써 본 것 같다.\n' +
      '(미루고 미룬 이유는 Windows를 못믿어서... &#x3D; _&#x3D;a 항상 예기치 않은 오류를 만들어주는\n' +
      ' Windows ... )</p>\n' +
      '<p>무튼, 반 년 정도의 사용 경험에서는 크게 문제를 느끼지 못해서 이제 본격적으로 WSL + zsh\n' +
      '환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가 설정을 차후에 필요할까 기록으로\n' +
      '남겨둔다. (안녕 bash~ 오래 동안 고마웠어 ㅠ)</p>\n' +
      '<h2 id="WSL-1-or-WSL-2"><a href="#WSL-1-or-WSL-2" class="headerlink" title="WSL 1 or WSL 2 ?"></a>WSL 1 or WSL 2 ?</h2><p>WSL을 쓰기로 한 시점에 결정해야 할 것 중 하나는 일단 WSL 1을 쓸 것인가 혹은 WSL 2를 쓸\n' +
      '것인가 같다. 물론, WSL 2 구성까지 해 두면 언제든지 원하는 시점에 WSL 1과 2를 오갈 수 있고\n' +
      '따라서 WSL 2 구성 방법으로 포스팅 해두기는 했다.</p>\n' +
      '<p>내 경우엔 2가지를 다 써봤는데, 써보고 난 이후에 드는 생각은 일단 내 경우에는 WSL 1을 쓰는\n' +
      '게 아직은 낫지 않을까 싶다. MS에서는 WSL 2가 더 빠르고 전체 리눅스 커널 사용, 시스템 호출\n' +
      '호환성 등을 장점으로 들고 있지만 생각보다 만나게 되는 장애물이 많았다.</p>\n' +
      '<p>일단 몇 가지 선택에 필요한 기준에 따라 나누어 보면,\n' +
      '기존의 Windows 시스템에서 이미 프로젝트가 구성되어 있고 (Node든 뭐 다른 것이든) 여기에\n' +
      'WSL을 통합하는 거라면 WSL 1을 추천한다.\n' +
      '반면 개발 환경을 새로 설정 하는 상황이나 새로 설정하는 것을 감안 할 생각이고, 리눅스 시스템에\n' +
      '거부감이 없다면 WSL 2가 나을 것 같다.</p>\n' +
      '<p>이렇게 나눈 이유는, WSL 2에서는</p>\n' +
      '<ul>\n' +
      '<li><p>Windows 파일 시스템(<code>/mnt/</code>)으로의 접근이 체감 될 만큼 느리다.</p>\n' +
      '</li>\n' +
      '<li><p>Windows 파일 시스템에 이미 구성된 프로젝트의 경우, 파일 변경을 감지 하지 못하는 듯 하다.\n' +
      '(Node의 watch 기능이 정상적으로 동작해주지 못한다. 파일 시스템이 다르니 당연한 것 같기는\n' +
      '한데 처음에 무척 당황했다.)</p>\n' +
      '</li>\n' +
      '<li><p>Windows에서 VS Code를 열고 터미널을 WSL로 사용할 때, Windows에서 연 브라우저가\n' +
      'localhost에 접근이 잘 되지 않는다.</p>\n' +
      '<p>Windows 전원 옵션에 &quot;빨리 켜기 기능&quot;을 꺼두면 localhost 포워딩이 된다고 하는데, 실제로\n' +
      '해봤을 때 localhost가 두 개의 다른 포트로 열렸을 때 하나만 되더라...</p>\n' +
      '</li>\n' +
      '</ul>\n' +
      '<p>내 경우는 이미 Windows 시스템을 기반으로 프로젝트들이 구성되어 있었고 WSL을 통합 해보는 거라\n' +
      '위의 문제들을 겪고 말았다 ㅋ</p>\n' +
      '<p>물론 내 케이스가 아니라면 WSL 2가 더 나을 것 같기는 하다.</p>\n' +
      '<h2 id="Windows-Terminal-설치"><a href="#Windows-Terminal-설치" class="headerlink" title="Windows Terminal 설치"></a>Windows Terminal 설치</h2><p>Windows에는 기본적으로 terminal이 존재하지 않기 때문에, windows terminal을\n' +
      '<a href="https://www.microsoft.com/ko-kr/p/windows-terminal/9n0dx20hk701">Store</a>에서\n' +
      '별도로 설치해야 한다.</p>\n' +
      '<p><img src="/upload/2021/windows-store-terminal.jpg" alt="Windows Terminal on Store"></p>\n' +
      '<h2 id="WSL-활성화"><a href="#WSL-활성화" class="headerlink" title="WSL 활성화"></a>WSL 활성화</h2><p>자세한 내용은 <a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10">공식문서</a>를\n' +
      '참고하자.</p>\n' +
      '<p>터미널(혹은 파워쉘)을 관리자 권한으로 실행 후, 다음을 차례대로 실행 하면된다. (물론 &#39;제어판\n' +
      '&gt; 프로그램 &gt; 프로그램 및 기능 &gt; Windows 기능 켜기&#x2F;끄기&#39; 에서 GUI로 해도 된다.)</p>\n' +
      '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span>enable<span class="token operator">-</span>feature <span class="token operator">/</span>featurename<span class="token operator">:</span>Microsoft<span class="token operator">-</span>Windows<span class="token operator">-</span>Subsystem<span class="token operator">-</span>Linux <span class="token operator">/</span>all <span class="token operator">/</span>norestart\n' +
      'dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span>enable<span class="token operator">-</span>feature <span class="token operator">/</span>featurename<span class="token operator">:</span>VirtualMachinePlatform <span class="token operator">/</span>all <span class="token operator">/</span>norestart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>실행이 종료 되었으면 &quot;재시작&quot;하자.</p>\n' +
      '<p>일시적인 상황이었는지는 모르겠지만, 최초 이 설정을 할 때 재시작하지 않고 컴퓨터를 종료했다가\n' +
      '다음 날 켜서 설정을 계속 이어가려고 했더니 안되더라 &#x3D; _&#x3D;a</p>\n' +
      '<h3 id="WSL-2-업데이트"><a href="#WSL-2-업데이트" class="headerlink" title="WSL 2 업데이트"></a>WSL 2 업데이트</h3><p>WSL 2를 사용하려면 적어도 Windows 10 May 2020 Update가 설치되어 있어야 한다. Windows\n' +
      '10 May 2020 Update에 실제 리눅스 커널을 사용하는 WSL 2가 기본 탑재 되었다고 한다.\n' +
      '그런데 좀 이상한게, Windows 10 최신 업데이트를 쓰고 있음에도 불구하고 WSL 2를 사용하려면\n' +
      '별도 패키지를 다운 받아서 설치하고, 추가 설정을 해야 한다. (아니 WSL 2를 기본으로 탑재했으면\n' +
      'WSL 2를 기본으로 사용할 수 있어야지 왜 WSL 1을 기본으로 잡아주고 있고... WSL 2를 쓰기 위해\n' +
      '추가 설치를 왜 해야 하는가...? )</p>\n' +
      '<p><a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package">MS WSL 설명서 페이지</a>로\n' +
      '가서 Linux 커널 업데이트 패키지 다운로드 후 설치한다.</p>\n' +
      '<p><img src="/upload/2021/wsl-update.jpg" alt="Linux 커널 업데이트 설치 화면"></p>\n' +
      '<h3 id="WSL-기본-버전을-2로-설정"><a href="#WSL-기본-버전을-2로-설정" class="headerlink" title="WSL 기본 버전을 2로 설정"></a>WSL 기본 버전을 2로 설정</h3><p>터미널(혹은 파워쉘)에서 다음 명령을 시행한다.</p>\n' +
      '<p>이걸 먼저 실행해야 이후로 설치되는 리눅스 시스템이 WSL 2를 기반으로 한다.</p>\n' +
      '<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-default</span><span class="token operator">-</span>version 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<h2 id="Ubuntu-설치"><a href="#Ubuntu-설치" class="headerlink" title="Ubuntu  설치"></a>Ubuntu  설치</h2><p>다시 <a href="https://www.microsoft.com/ko-kr/store/apps/windows">Store</a>에서 Ubuntu를\n' +
      '검색해서 설치 한다. (물론 우분투 말고 다른 리눅스 프로덕트를 선택해도 된다. 단지 내가\n' +
      'Ubuntu가 익숙해서 그렇다<del>고 하지만 어차피 터미널인데?</del>)</p>\n' +
      '<p><img src="/upload/2021/windows-store-ubuntu.jpg" alt="Windows Store Ubuntu 검색 결과"></p>\n' +
      '<p>하지만 이 놈은 어디까지나 &quot;배포&quot; 패키지이므로 설치 후 최초 실행해야 우분투 설치가 진행된다.\n' +
      '시간이 조금 걸리니 기다리자.</p>\n' +
      '<p>설치가 완료되면 다음과 같이 설치가 완료되었다는 메세지와 함께 웰컴 투 우분투가 노출된다</p>\n' +
      '<p><img src="/upload/2021/complete-install-ubuntu.jpg" alt="우분투 설치 완료 화면"></p>\n' +
      '<h3 id="터미널-기본-프로필-Ubuntu로-설정"><a href="#터미널-기본-프로필-Ubuntu로-설정" class="headerlink" title="터미널 기본 프로필 Ubuntu로 설정"></a>터미널 기본 프로필 Ubuntu로 설정</h3><p>터미널에서도 Ubuntu가 기본으로 실행되도록 터미널 기본 프로필을 WSL로 설정한다.</p>\n' +
      '<p>터미널에서 설정으로 들어가면 관련 json 파일이 열리는데, 여기서 <code>defaultProfile</code> 값을\n' +
      '<code>profiles.list</code> 에서 Ubuntu 것의 <code>guid</code> 값으로 수정하기만 하면 된다.</p>\n' +
      '<pre class="line-numbers language-json|data-line" data-language="json|data-line"><code class="language-json|data-line">&#123;\n' +
      '  &quot;defaultProfile&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,\n' +
      '  ...\n' +
      '  &quot;profiles&quot;:\n' +
      '    &#123;\n' +
      '      ...\n' +
      '      &quot;list&quot;:\n' +
      '      [\n' +
      '        ...\n' +
      '        &#123;\n' +
      '          &quot;guid&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,\n' +
      '          &quot;hidden&quot;: false,\n' +
      '          &quot;name&quot;: &quot;Ubuntu&quot;,\n' +
      '          &quot;source&quot;: &quot;Windows.Terminal.Wsl&quot;,\n' +
      '          &quot;colorScheme&quot;: &quot;Dark+&quot;,\n' +
      '          &quot;fontFace&quot;: &quot;Hack&quot;\n' +
      '        &#125;\n' +
      '      ]\n' +
      '    &#125;,\n' +
      '&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<h2 id="Git-zsh-설치"><a href="#Git-zsh-설치" class="headerlink" title="Git, zsh 설치"></a>Git, zsh 설치</h2><p>Ubuntu(WSL)를 실행하고, git과 zsh부터 설치한다.</p>\n' +
      '<p>일단 패키지 레파지토리 인덱스부터 업데이트 하고</p>\n' +
      '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<p>git과 zsh을 설치</p>\n' +
      '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span> <span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<h2 id="Oh-my-zsh-설치-및-구성"><a href="#Oh-my-zsh-설치-및-구성" class="headerlink" title="Oh my zsh 설치 및 구성"></a>Oh my zsh 설치 및 구성</h2><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><p>터미널에서 다음 명령을 실행하기만 하면 된다.</p>\n' +
      '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<p>설치가 완료되면 다음과 같은 메세지를 볼 수 있다.</p>\n' +
      '<p><img src="/upload/2021/complete-install-oh-my-zsh.jpg" alt="oh my zsh 설치 완료 화면"></p>\n' +
      '<h3 id="테마-구성"><a href="#테마-구성" class="headerlink" title="테마 구성"></a>테마 구성</h3><p>역시 처음 설치했드면 꾸미기가 먼저다!!! 테마부터 변경한다.</p>\n' +
      '<p>테마는 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">ohmyzsh github wiki</a>에서\n' +
      '마음에 드는 걸 선택하면 될 것 같다. 내 경우엔 많이 언급되는 <code>agnoster</code>를 쓰기로...</p>\n' +
      '<p><code>~/.zshrc</code> 파일을 열어 <code>ZSH_THEME</code> 항목의 값을 변경하기만 하면 된다.</p>\n' +
      '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">ZSH_THEME</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">agnoster</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
      '\n' +
      '<p>참고로 <code>agnoster</code> 테마를 쓰려면 <a href="https://github.com/powerline/fonts">powerline font</a>를\n' +
      '써야 하는데, 내 경우엔 이미 Hack 폰트를 쓰고 있어서 별도로 설치하지 않고 터미널 설정에서\n' +
      '<code>profile.list</code>의 해당 항목에 fontFamily 값만 추가하여 해결했다.</p>\n' +
      '<pre class="line-numbers language-j'... 11610 more characters,
    path: [Getter],
    permalink: [Getter],
    full_source: [Getter],
    asset_dir: [Getter],
    tags: [Getter],
    categories: [Getter],
    prev: _Document {
      title: 'json-server에 사용자 인증 구현하기',
      thumbnail: '/upload/2021/thumbs/json-server-authentication.jpg',
      hero: '/upload/2021/json-server-authentication.jpg',
      seo: [Object],
      style: '.hero {\n' +
        '  &-wrapper {\n' +
        '    text-shadow:\n' +
        '      1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
        '      -1px -1px 1em rgba(20, 12, 24, 0.5);\n' +
        '  }\n' +
        '  &__image {\n' +
        '    opacity: 0.5;\n' +
        '    filter: blur(0.35em)\n' +
        '  }\n' +
        '}\n',
      date: Moment<2021-02-06T14:10:27+09:00>,
      _content: '\n' +
        '\n' +
        '최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에 있어\n' +
        '시도해 봤던 방법을 기록으로 남겨본다. (JSON server는 사용할 줄 안다는 가정하에서 포스팅한다.)\n' +
        '\n' +
        '내 경우엔 mock API 구현에 편의를 위해 [JSON server](https://github.com/typicode/json-server)를\n' +
        '사용해 왔는데, 역시 이를 베이스로 하고 JWT 관련 패키지를 추가하여 구현을 시도해봤다.\n' +
        '\n' +
        '## 추가 한 auth 관련 패키지\n' +
        '\n' +
        '- [json-server-auth](https://github.com/jeremyben/json-server-auth)\n' +
        '\n' +
        '  JSON server용으로 만들어진 JWT 인증 미들웨어다.\n' +
        '  다른 몇 가지 패키지들을 찾아보고 가장 간편하게 구축 가능하고 문서화가 잘 되어 있는 녀석을\n' +
        '  찾다보니 이 녀석으로 정착했다.\n' +
        '\n' +
        '- [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken)\n' +
        '\n' +
        '  패키지 이름 그대로 JWT의 구현체인데, JWT verifier가 필요해서 가져왔다 = _=a\n' +
        '\n' +
        '- [cors](https://github.com/expressjs/cors)\n' +
        '\n' +
        '  CORS 관련 설정을 위한 Express용 미들웨어로, HEADER를 조작하게 되면 pre-flight 요청을\n' +
        '  처리해야 하는데 여기서 CORS 문제가 발생되기 때문에 이를 해결하기 위해서 설치 했다.\n' +
        '\n' +
        '## 기본 설정\n' +
        '\n' +
        '사실 json-server-auth가 웬만한 것들은 알아서 처리해주고 있기 때문에 특별히 할 것은 없다.\n' +
        '\n' +
        '해당 매뉴얼을 참고해서 미리 정의 된 API 이름을 그대로 가져다 쓰기만 하면 JWT 발급부터 오류까지\n' +
        '알아서 처리해 준다. (참고로 이 토큰의 유효시간은 1시간이다)\n' +
        '\n' +
        '따라서, 해야 할 일이라고는 미리 정의 된 API 외 다른 이름을 쓰고 싶을 경우의 router rewrite,\n' +
        'CORS 설정 정도면 충분하다.\n' +
        '\n' +
        '설정 방법은 [express 공식문서](https://expressjs.com/en/resources/middleware/cors.html)를\n' +
        '참고했다.\n' +
        '\n' +
        '```javascript\n' +
        'const server = jsonServer.create();\n' +
        'const auth = require("json-server-auth");\n' +
        'const cors = require("cors");\n' +
        '\n' +
        '/**\n' +
        ' * 과제에선 GET, POST, DELETE만 필요했기 때문에\n' +
        ' * 3가지 method만 작성했고,\n' +
        ' * 어차피 mock api이고 local에서 구동되는 거라\n' +
        ' * origin을 all(*)로 설정했다.\n' +
        ' */\n' +
        'server.use(\n' +
        '  cors({\n' +
        '    origin: "*",\n' +
        '    preflightContinue: false,\n' +
        '    methods: "GET,POST,DELETE"\n' +
        '  })\n' +
        ');\n' +
        '/**\n' +
        ' * 모든 router에 대해 preflight 요청 활성화\n' +
        ' */\n' +
        'server.options("*", cors());\n' +
        '\n' +
        '// 중략\n' +
        '\n' +
        'server.use(auth);\n' +
        '```\n' +
        '\n' +
        '단지 이 기본 설정만으로 회원 가입, 로그인 시 JWT 발급이 가능하고 이후 클라이언트에서\n' +
        'API 호출 시 Authorization Header에 Bearer Token을 담아 던지기만 하면 된다.\n' +
        '\n' +
        '## users/me 구현\n' +
        '\n' +
        '그런데, json-server-auth는 회원 가입 혹은 로그인 시 accessToken만을 응답으로 내려주기\n' +
        '때문에 사용자를 식별할 방법이 없다.\n' +
        '\n' +
        '아쉽게도 이 부분은 직접 구현을 해야 하는 부분으로 보였다.\n' +
        '역시 대부분 생각하는게 비슷한지 동일한 니즈를 가진 유저의 질문이\n' +
        '[issue](https://github.com/jeremyben/json-server-auth/issues/12)로 등록되어 있었고\n' +
        '해당 issue를 참고해서 별도로 구현했다.\n' +
        '\n' +
        '```javascript\n' +
        '/**\n' +
        ' * JWT 검증을 위해 jsonwebtoken 모듈을 가져왔고,\n' +
        ' * JWT의 비밀키는 json-server-auth에서 가지고 있다\n' +
        ' */\n' +
        'const jwt = require("jsonwebtoken");\n' +
        'const JWT_SECRET_KEY = require("json-server-auth/dist/constants").JWT_SECRET_KEY;\n' +
        '\n' +
        '// 중략\n' +
        '\n' +
        'server.get(`/users/me`, auth, (req, res) => {\n' +
        '  const { authorization } = req.headers;\n' +
        '  if (!authorization) {\n' +
        '    res.status(401).jsonp("Missing authorization header");\n' +
        '    return;\n' +
        '  }\n' +
        '  const [scheme, token] = authorization.split(" ");\n' +
        '  if (scheme !== "Bearer") {\n' +
        '    res.status(401).jsonp("Incorrect authorization scheme");\n' +
        '    return;\n' +
        '  }\n' +
        '  if (!token) {\n' +
        '    res.status(401).jsonp("Missing token");\n' +
        '    return;\n' +
        '  }\n' +
        '\n' +
        '  try {\n' +
        '    const data = jwt.verify(token, JWT_SECRET_KEY);\n' +
        '    const { db } = req.app;\n' +
        '    // ... 은 그냥 나머지 property들\n' +
        '    const { id, email, ... } = db\n' +
        '      .get("users")\n' +
        '      .find({ email: data.email })\n' +
        '      .value();\n' +
        '    res.status(200).json({ id, email, ... });\n' +
        '  } catch (err) {\n' +
        '    res.status(401).jsonp(err.message);\n' +
        '  }\n' +
        '});\n' +
        '```\n' +
        '\n' +
        '이렇게 해서 사용자 정보를 내려주는 users/me API도 구현했다.\n' +
        '\n' +
        '생각보다 어렵지 않게 mock에서도 인증 구현이 되서 이후로도 요긴하게(?) 사용할 수 있을 것 같다.\n' +
        '\n' +
        '## 아쉬운 부분\n' +
        '\n' +
        'json-server-auth가 내부적으로 정확히 어떻게 동작하는지까지는 찾아보지 않았는데, mock api\n' +
        '구동 중에 post 등으로 발생된 리소스는 권한이 정상적으로 동작하는 반면, mock api가 구동 되기\n' +
        '전에 존재하는 리소스는 권한이 정상적으로 동작하지 않았다.\n' +
        '\n' +
        '즉, 생성한 유저만 조회가 가능한 리소스를 설정해두었을 때, 테스트 중 mock api를 내렸다가 다시\n' +
        '올리면 기존 리소스가 사라지는 것은 아니기 때문에 기존 것이 전체가 조회 가능한 권한이 되어버리는\n' +
        '문제가 발생하기는 하더라...\n' +
        '\n' +
        '그리고 또 한가지, mock API 작성과 동시에 swagger 문서를 만들었는데 swagger 사이트에 올려\n' +
        'API 테스트를 돌리려고 하면 토큰을 발급 받을 방법을 모르겠더라 = _=a\n' +
        '결국 Swagger 사이트에 올리면 인증 테스트를 할 수 없더라는... 쿨럭...\n' +
        '\n' +
        '물론 로컬에 swagger도 설치해서 구동하면 되기는 하지만, 협업 시에는 response에 관련 된\n' +
        'yml만 작성해 올리는 걸로 만족해야 하나 싶다.',
      source: '_posts/2021-02-06-implementing-authentication-with-json-server.md',
      raw: '---\n' +
        'title: json-server에 사용자 인증 구현하기\n' +
        'tags:\n' +
        '  - Authenticatoin\n' +
        '  - Authorization\n' +
        '  - Bearer Token\n' +
        '  - json-server\n' +
        '  - json-server-auth\n' +
        '  - mock api\n' +
        '  - JWT\n' +
        'categories:\n' +
        'thumbnail: /upload/2021/thumbs/json-server-authentication.jpg\n' +
        'hero: /upload/2021/json-server-authentication.jpg\n' +
        'seo:\n' +
        '  description: |\n' +
        '    최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에\n' +
        '    있어 시도해 봤던 방법을 기록으로 남겨본다.\n' +
        '  image: /upload/2021/json-server-authentication.jpg\n' +
        'style: |\n' +
        '  .hero {\n' +
        '    &-wrapper {\n' +
        '      text-shadow:\n' +
        '        1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
        '        -1px -1px 1em rgba(20, 12, 24, 0.5);\n' +
        '    }\n' +
        '    &__image {\n' +
        '      opacity: 0.5;\n' +
        '      filter: blur(0.35em)\n' +
        '    }\n' +
        '  }\n' +
        'date: 2021-02-06 14:10:27\n' +
        '---\n' +
        '\n' +
        '\n' +
        '최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에 있어\n' +
        '시도해 봤던 방법을 기록으로 남겨본다. (JSON server는 사용할 줄 안다는 가정하에서 포스팅한다.)\n' +
        '\n' +
        '내 경우엔 mock API 구현에 편의를 위해 [JSON server](https://github.com/typicode/json-server)를\n' +
        '사용해 왔는데, 역시 이를 베이스로 하고 JWT 관련 패키지를 추가하여 구현을 시도해봤다.\n' +
        '\n' +
        '## 추가 한 auth 관련 패키지\n' +
        '\n' +
        '- [json-server-auth](https://github.com/jeremyben/json-server-auth)\n' +
        '\n' +
        '  JSON server용으로 만들어진 JWT 인증 미들웨어다.\n' +
        '  다른 몇 가지 패키지들을 찾아보고 가장 간편하게 구축 가능하고 문서화가 잘 되어 있는 녀석을\n' +
        '  찾다보니 이 녀석으로 정착했다.\n' +
        '\n' +
        '- [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken)\n' +
        '\n' +
        '  패키지 이름 그대로 JWT의 구현체인데, JWT verifier가 필요해서 가져왔다 = _=a\n' +
        '\n' +
        '- [cors](https://github.com/expressjs/cors)\n' +
        '\n' +
        '  CORS 관련 설정을 위한 Express용 미들웨어로, HEADER를 조작하게 되면 pre-flight 요청을\n' +
        '  처리해야 하는데 여기서 CORS 문제가 발생되기 때문에 이를 해결하기 위해서 설치 했다.\n' +
        '\n' +
        '## 기본 설정\n' +
        '\n' +
        '사실 json-server-auth가 웬만한 것들은 알아서 처리해주고 있기 때문에 특별히 할 것은 없다.\n' +
        '\n' +
        '해당 매뉴얼을 참고해서 미리 정의 된 API 이름을 그대로 가져다 쓰기만 하면 JWT 발급부터 오류까지\n' +
        '알아서 처리해 준다. (참고로 이 토큰의 유효시간은 1시간이다)\n' +
        '\n' +
        '따라서, 해야 할 일이라고는 미리 정의 된 API 외 다른 이름을 쓰고 싶을 경우의 router rewrite,\n' +
        'CORS 설정 정도면 충분하다.\n' +
        '\n' +
        '설정 방법은 [express 공식문서](https://expressjs.com/en/resources/middleware/cors.html)를\n' +
        '참고했다.\n' +
        '\n' +
        '```javascript\n' +
        'const server = jsonServer.create();\n' +
        'const auth = require("json-server-auth");\n' +
        'const cors = require("cors");\n' +
        '\n' +
        '/**\n' +
        ' * 과제에선 GET, POST, DELETE만 필요했기 때문에\n' +
        ' * 3가지 method만 작성했고,\n' +
        ' * 어차피 mock api이고 local에서 구동되는 거라\n' +
        ' * origin을 all(*)로 설정했다.\n' +
        ' */\n' +
        'server.use(\n' +
        '  cors({\n' +
        '    origin: "*",\n' +
        '    preflightContinue: false,\n' +
        '    methods: "GET,POST,DELETE"\n' +
        '  })\n' +
        ');\n' +
        '/**\n' +
        ' * 모든 router에 대해 preflight 요청 활성화\n' +
        ' */\n' +
        'server.options("*", cors());\n' +
        '\n' +
        '// 중략\n' +
        '\n' +
        'server.use(auth);\n' +
        '```\n' +
        '\n' +
        '단지 이 기본 설정만으로 회원 가입, 로그인 시 JWT 발급이 가능하고 이후 클라이언트에서\n' +
        'API 호출 시 Authorization Header에 Bearer Token을 담아 던지기만 하면 된다.\n' +
        '\n' +
        '## users/me 구현\n' +
        '\n' +
        '그런데, json-server-auth는 회원 가입 혹은 로그인 시 accessToken만을 응답으로 내려주기\n' +
        '때문에 사용자를 식별할 방법이 없다.\n' +
        '\n' +
        '아쉽게도 이 부분은 직접 구현을 해야 하는 부분으로 보였다.\n' +
        '역시 대부분 생각하는게 비슷한지 동일한 니즈를 가진 유저의 질문이\n' +
        '[issue](https://github.com/jeremyben/json-server-auth/issues/12)로 등록되어 있었고\n' +
        '해당 issue를 참고해서 별도로 구현했다.\n' +
        '\n' +
        '```javascript\n' +
        '/**\n' +
        ' * JWT 검증을 위해 jsonwebtoken 모듈을 가져왔고,\n' +
        ' * JWT의 비밀키는 json-server-auth에서 가지고 있다\n' +
        ' */\n' +
        'const jwt = require("jsonwebtoken");\n' +
        'const JWT_SECRET_KEY = require("json-server-auth/dist/constants").JWT_SECRET_KEY;\n' +
        '\n' +
        '// 중략\n' +
        '\n' +
        'server.get(`/users/me`, auth, (req, res) => {\n' +
        '  const { authorization } = req.headers;\n' +
        '  if (!authorization) {\n' +
        '    res.status(401).jsonp("Missing authorization header");\n' +
        '    return;\n' +
        '  }\n' +
        '  const [scheme, token] = authorization.split(" ");\n' +
        '  if (scheme !== "Bearer") {\n' +
        '    res.status(401).jsonp("Incorrect authorization scheme");\n' +
        '    return;\n' +
        '  }\n' +
        '  if (!token) {\n' +
        '    res.status(401).jsonp("Missing token");\n' +
        '    return;\n' +
        '  }\n' +
        '\n' +
        '  try {\n' +
        '    const data = jwt.verify(token, JWT_SECRET_KEY);\n' +
        '    const { db } = req.app;\n' +
        '    // ... 은 그냥 나머지 property들\n' +
        '    const { id, email, ... } = db\n' +
        '      .get("users")\n' +
        '      .find({ email: data.email })\n' +
        '      .value();\n' +
        '    res.status(200).json({ id, email, ... });\n' +
        '  } catch (err) {\n' +
        '    res.status(401).jsonp(err.message);\n' +
        '  }\n' +
        '});\n' +
        '```\n' +
        '\n' +
        '이렇게 해서 사용자 정보를 내려주는 users/me API도 구현했다.\n' +
        '\n' +
        '생각보다 어렵지 않게 mock에서도 인증 구현이 되서 이후로도 요긴하게(?) 사용할 수 있을 것 같다.\n' +
        '\n' +
        '## 아쉬운 부분\n' +
        '\n' +
        'json-server-auth가 내부적으로 정확히 어떻게 동작하는지까지는 찾아보지 않았는데, mock api\n' +
        '구동 중에 post 등으로 발생된 리소스는 권한이 정상적으로 동작하는 반면, mock api가 구동 되기\n' +
        '전에 존재하는 리소스는 권한이 정상적으로 동작하지 않았다.\n' +
        '\n' +
        '즉, 생성한 유저만 조회가 가능한 리소스를 설정해두었을 때, 테스트 중 mock api를 내렸다가 다시\n' +
        '올리면 기존 리소스가 사라지는 것은 아니기 때문에 기존 것이 전체가 조회 가능한 권한이 되어버리는\n' +
        '문제가 발생하기는 하더라...\n' +
        '\n' +
        '그리고 또 한가지, mock API 작성과 동시에 swagger 문서를 만들었는데 swagger 사이트에 올려\n' +
        'API 테스트를 돌리려고 하면 토큰을 발급 받을 방법을 모르겠더라 = _=a\n' +
        '결국 Swagger 사이트에 올리면 인증 테스트를 할 수 없더라는... 쿨럭...\n' +
        '\n' +
        '물론 로컬에 swagger도 설치해서 구동하면 되기는 하지만, 협업 시에는 response에 관련 된\n' +
        'yml만 작성해 올리는 걸로 만족해야 하나 싶다.',
      slug: 'implementing-authentication-with-json-server',
      published: true,
      comments: true,
      layout: 'post',
      photos: [],
      link: '',
      _id: 'clcytfa4s00aftaww0wf8086s',
      content: '<p>최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에 있어\n' +
        '시도해 봤던 방법을 기록으로 남겨본다. (JSON server는 사용할 줄 안다는 가정하에서 포스팅한다.)</p>\n' +
        '<p>내 경우엔 mock API 구현에 편의를 위해 <a href="https://github.com/typicode/json-server">JSON server</a>를\n' +
        '사용해 왔는데, 역시 이를 베이스로 하고 JWT 관련 패키지를 추가하여 구현을 시도해봤다.</p>\n' +
        '<h2 id="추가-한-auth-관련-패키지"><a href="#추가-한-auth-관련-패키지" class="headerlink" title="추가 한 auth 관련 패키지"></a>추가 한 auth 관련 패키지</h2><ul>\n' +
        '<li><p><a href="https://github.com/jeremyben/json-server-auth">json-server-auth</a></p>\n' +
        '<p>JSON server용으로 만들어진 JWT 인증 미들웨어다.\n' +
        '다른 몇 가지 패키지들을 찾아보고 가장 간편하게 구축 가능하고 문서화가 잘 되어 있는 녀석을\n' +
        '찾다보니 이 녀석으로 정착했다.</p>\n' +
        '</li>\n' +
        '<li><p><a href="https://www.npmjs.com/package/jsonwebtoken">jsonwebtoken</a></p>\n' +
        '<p>패키지 이름 그대로 JWT의 구현체인데, JWT verifier가 필요해서 가져왔다 &#x3D; _&#x3D;a</p>\n' +
        '</li>\n' +
        '<li><p><a href="https://github.com/expressjs/cors">cors</a></p>\n' +
        '<p>CORS 관련 설정을 위한 Express용 미들웨어로, HEADER를 조작하게 되면 pre-flight 요청을\n' +
        '처리해야 하는데 여기서 CORS 문제가 발생되기 때문에 이를 해결하기 위해서 설치 했다.</p>\n' +
        '</li>\n' +
        '</ul>\n' +
        '<h2 id="기본-설정"><a href="#기본-설정" class="headerlink" title="기본 설정"></a>기본 설정</h2><p>사실 json-server-auth가 웬만한 것들은 알아서 처리해주고 있기 때문에 특별히 할 것은 없다.</p>\n' +
        '<p>해당 매뉴얼을 참고해서 미리 정의 된 API 이름을 그대로 가져다 쓰기만 하면 JWT 발급부터 오류까지\n' +
        '알아서 처리해 준다. (참고로 이 토큰의 유효시간은 1시간이다)</p>\n' +
        '<p>따라서, 해야 할 일이라고는 미리 정의 된 API 외 다른 이름을 쓰고 싶을 경우의 router rewrite,\n' +
        'CORS 설정 정도면 충분하다.</p>\n' +
        '<p>설정 방법은 <a href="https://expressjs.com/en/resources/middleware/cors.html">express 공식문서</a>를\n' +
        '참고했다.</p>\n' +
        '<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> server <span class="token operator">=</span> jsonServer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
        '<span class="token keyword">const</span> auth <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"json-server-auth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
        '<span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
        '\n' +
        '<span class="token comment">/**\n' +
        ' * 과제에선 GET, POST, DELETE만 필요했기 때문에\n' +
        ' * 3가지 method만 작성했고,\n' +
        ' * 어차피 mock api이고 local에서 구동되는 거라\n' +
        ' * origin을 all(*)로 설정했다.\n' +
        ' */</span>\n' +
        'server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n' +
        '  <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n' +
        '    <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>\n' +
        '    <span class="token literal-property property">preflightContinue</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n' +
        '    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token string">"GET,POST,DELETE"</span>\n' +
        '  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n' +
        '<span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
        '<span class="token comment">/**\n' +
        ' * 모든 router에 대해 preflight 요청 활성화\n' +
        ' */</span>\n' +
        'server<span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
        '\n' +
        '<span class="token comment">// 중략</span>\n' +
        '\n' +
        'server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
        '\n' +
        '<p>단지 이 기본 설정만으로 회원 가입, 로그인 시 JWT 발급이 가능하고 이후 클라이언트에서\n' +
        'API 호출 시 Authorization Header에 Bearer Token을 담아 던지기만 하면 된다.</p>\n' +
        '<h2 id="users-x2F-me-구현"><a href="#users-x2F-me-구현" class="headerlink" title="users&#x2F;me 구현"></a>users&#x2F;me 구현</h2><p>그런데, json-server-auth는 회원 가입 혹은 로그인 시 accessToken만을 응답으로 내려주기\n' +
        '때문에 사용자를 식별할 방법이 없다.</p>\n' +
        '<p>아쉽게도 이 부분은 직접 구현을 해야 하는 부분으로 보였다.\n' +
        '역시 대부분 생각하는게 비슷한지 동일한 니즈를 가진 유저의 질문이\n' +
        '<a href="https://github.com/jeremyben/json-server-auth/issues/12">issue</a>로 등록되어 있었고\n' +
        '해당 issue를 참고해서 별도로 구현했다.</p>\n' +
        '<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**\n' +
        ' * JWT 검증을 위해 jsonwebtoken 모듈을 가져왔고,\n' +
        ' * JWT의 비밀키는 json-server-auth에서 가지고 있다\n' +
        ' */</span>\n' +
        '<span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"jsonwebtoken"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
        '<span class="token keyword">const</span> <span class="token constant">JWT_SECRET_KEY</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"json-server-auth/dist/constants"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token constant">JWT_SECRET_KEY</span><span class="token punctuation">;</span>\n' +
        '\n' +
        '<span class="token comment">// 중략</span>\n' +
        '\n' +
        'server<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/users/me</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> auth<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n' +
        '  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> authorization <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>\n' +
        '  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>authorization<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
        '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Missing authorization header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
        '    <span class="token keyword">return</span><span class="token punctuation">;</span>\n' +
        '  <span class="token punctuation">&#125;</span>\n' +
        '  <span class="token keyword">const</span> <span class="token punctuation">[</span>scheme<span class="token punctuation">,</span> token<span class="token punctuation">]</span> <span class="token operator">=</span> authorization<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
        '  <span class="token keyword">if</span> <span class="token punctuation">(</span>scheme <span class="token operator">!==</span> <span class="token string">"Bearer"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
        '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Incorrect authorization scheme"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
        '    <span class="token keyword">return</span><span class="token punctuation">;</span>\n' +
        '  <span class="token punctuation">&#125;</span>\n' +
        '  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
        '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Missing token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
        '    <span class="token keyword">return</span><span class="token punctuation'... 4794 more characters,
      site: [Object],
      excerpt: '',
      more: '<p>최근 진행했던 한 기업의 사전 과제에서 JWT 인증 처리를 포함한 Mock API 구현이 범위에 있어\n' +
        '시도해 봤던 방법을 기록으로 남겨본다. (JSON server는 사용할 줄 안다는 가정하에서 포스팅한다.)</p>\n' +
        '<p>내 경우엔 mock API 구현에 편의를 위해 <a href="https://github.com/typicode/json-server">JSON server</a>를\n' +
        '사용해 왔는데, 역시 이를 베이스로 하고 JWT 관련 패키지를 추가하여 구현을 시도해봤다.</p>\n' +
        '<h2 id="추가-한-auth-관련-패키지"><a href="#추가-한-auth-관련-패키지" class="headerlink" title="추가 한 auth 관련 패키지"></a>추가 한 auth 관련 패키지</h2><ul>\n' +
        '<li><p><a href="https://github.com/jeremyben/json-server-auth">json-server-auth</a></p>\n' +
        '<p>JSON server용으로 만들어진 JWT 인증 미들웨어다.\n' +
        '다른 몇 가지 패키지들을 찾아보고 가장 간편하게 구축 가능하고 문서화가 잘 되어 있는 녀석을\n' +
        '찾다보니 이 녀석으로 정착했다.</p>\n' +
        '</li>\n' +
        '<li><p><a href="https://www.npmjs.com/package/jsonwebtoken">jsonwebtoken</a></p>\n' +
        '<p>패키지 이름 그대로 JWT의 구현체인데, JWT verifier가 필요해서 가져왔다 &#x3D; _&#x3D;a</p>\n' +
        '</li>\n' +
        '<li><p><a href="https://github.com/expressjs/cors">cors</a></p>\n' +
        '<p>CORS 관련 설정을 위한 Express용 미들웨어로, HEADER를 조작하게 되면 pre-flight 요청을\n' +
        '처리해야 하는데 여기서 CORS 문제가 발생되기 때문에 이를 해결하기 위해서 설치 했다.</p>\n' +
        '</li>\n' +
        '</ul>\n' +
        '<h2 id="기본-설정"><a href="#기본-설정" class="headerlink" title="기본 설정"></a>기본 설정</h2><p>사실 json-server-auth가 웬만한 것들은 알아서 처리해주고 있기 때문에 특별히 할 것은 없다.</p>\n' +
        '<p>해당 매뉴얼을 참고해서 미리 정의 된 API 이름을 그대로 가져다 쓰기만 하면 JWT 발급부터 오류까지\n' +
        '알아서 처리해 준다. (참고로 이 토큰의 유효시간은 1시간이다)</p>\n' +
        '<p>따라서, 해야 할 일이라고는 미리 정의 된 API 외 다른 이름을 쓰고 싶을 경우의 router rewrite,\n' +
        'CORS 설정 정도면 충분하다.</p>\n' +
        '<p>설정 방법은 <a href="https://expressjs.com/en/resources/middleware/cors.html">express 공식문서</a>를\n' +
        '참고했다.</p>\n' +
        '<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> server <span class="token operator">=</span> jsonServer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
        '<span class="token keyword">const</span> auth <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"json-server-auth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
        '<span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
        '\n' +
        '<span class="token comment">/**\n' +
        ' * 과제에선 GET, POST, DELETE만 필요했기 때문에\n' +
        ' * 3가지 method만 작성했고,\n' +
        ' * 어차피 mock api이고 local에서 구동되는 거라\n' +
        ' * origin을 all(*)로 설정했다.\n' +
        ' */</span>\n' +
        'server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n' +
        '  <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n' +
        '    <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>\n' +
        '    <span class="token literal-property property">preflightContinue</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n' +
        '    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token string">"GET,POST,DELETE"</span>\n' +
        '  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n' +
        '<span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
        '<span class="token comment">/**\n' +
        ' * 모든 router에 대해 preflight 요청 활성화\n' +
        ' */</span>\n' +
        'server<span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
        '\n' +
        '<span class="token comment">// 중략</span>\n' +
        '\n' +
        'server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
        '\n' +
        '<p>단지 이 기본 설정만으로 회원 가입, 로그인 시 JWT 발급이 가능하고 이후 클라이언트에서\n' +
        'API 호출 시 Authorization Header에 Bearer Token을 담아 던지기만 하면 된다.</p>\n' +
        '<h2 id="users-x2F-me-구현"><a href="#users-x2F-me-구현" class="headerlink" title="users&#x2F;me 구현"></a>users&#x2F;me 구현</h2><p>그런데, json-server-auth는 회원 가입 혹은 로그인 시 accessToken만을 응답으로 내려주기\n' +
        '때문에 사용자를 식별할 방법이 없다.</p>\n' +
        '<p>아쉽게도 이 부분은 직접 구현을 해야 하는 부분으로 보였다.\n' +
        '역시 대부분 생각하는게 비슷한지 동일한 니즈를 가진 유저의 질문이\n' +
        '<a href="https://github.com/jeremyben/json-server-auth/issues/12">issue</a>로 등록되어 있었고\n' +
        '해당 issue를 참고해서 별도로 구현했다.</p>\n' +
        '<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**\n' +
        ' * JWT 검증을 위해 jsonwebtoken 모듈을 가져왔고,\n' +
        ' * JWT의 비밀키는 json-server-auth에서 가지고 있다\n' +
        ' */</span>\n' +
        '<span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"jsonwebtoken"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
        '<span class="token keyword">const</span> <span class="token constant">JWT_SECRET_KEY</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"json-server-auth/dist/constants"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token constant">JWT_SECRET_KEY</span><span class="token punctuation">;</span>\n' +
        '\n' +
        '<span class="token comment">// 중략</span>\n' +
        '\n' +
        'server<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/users/me</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> auth<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n' +
        '  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> authorization <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>\n' +
        '  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>authorization<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
        '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Missing authorization header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
        '    <span class="token keyword">return</span><span class="token punctuation">;</span>\n' +
        '  <span class="token punctuation">&#125;</span>\n' +
        '  <span class="token keyword">const</span> <span class="token punctuation">[</span>scheme<span class="token punctuation">,</span> token<span class="token punctuation">]</span> <span class="token operator">=</span> authorization<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
        '  <span class="token keyword">if</span> <span class="token punctuation">(</span>scheme <span class="token operator">!==</span> <span class="token string">"Bearer"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
        '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Incorrect authorization scheme"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
        '    <span class="token keyword">return</span><span class="token punctuation">;</span>\n' +
        '  <span class="token punctuation">&#125;</span>\n' +
        '  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n' +
        '    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"Missing token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n' +
        '    <span class="token keyword">return</span><span class="token punctuation'... 4794 more characters,
      path: [Getter],
      permalink: [Getter],
      full_source: [Getter],
      asset_dir: [Getter],
      tags: [Getter],
      categories: [Getter],
      prev: [_Document],
      next: [Circular *1],
      __post: true
    },
    next: [Circular *2],
    __post: true
  },
  next: <ref *3> _Document {
    title: '2020년 회고',
    thumbnail: '/upload/2020/thumbs/loading-bar-2021.jpg',
    hero: '/upload/2020/loading-bar-2021.jpg',
    seo: {
      description: '이런 저런 생각이 많아지는 2020년의 마지막 날이다.  아직 2021년에 어떤 계획을 가지고\n' +
        '살아갈지 혹은 살아낼지 어떤 생각도 없다. 다만 하루하루가 흘러가지 않기를 바라고, 다시\n' +
        '내년 이 맘 때 쯤 회고를 작성할 때에는 올해 참 잘 지냈다라고 작성할 수 있기를 바란다.\n'
    },
    date: Moment<2020-12-31T15:39:47+09:00>,
    style: null,
    _content: '\n' +
      '\n' +
      '올해는 아홉수를 제대로 겪은 한 해 였던 것 같다.\n' +
      '\n' +
      '## 2번의 퇴사\n' +
      '\n' +
      '아홉수를 제대로 겪게 만든 가장 큰 이벤트였다.\n' +
      '지난 2월 말 모 여행사를 퇴사했고 11월 말을 기점으로 8개월 만에 두 번째 회사를 퇴사했다.\n' +
      '\n' +
      '그리고 두 번 모두 사측의 이유로 퇴사가 진행되었고, 둘 모두 소위 거지 같은 퇴사 절차를 밟았다.\n' +
      '2월의 퇴사는 포스팅 했었으니, 차후 시간이 되면 두 번째 퇴사에 대한 이야기도 포스팅 할 예정이다.\n' +
      '\n' +
      '그렇다고 전혀 소득이 없는 것은 아니다.\n' +
      '이직에 관하여서는 잡플래닛의 평을 "관리"하여 (관리라 쓰고 직원들에게 좋은 리뷰를 쓰도록\n' +
      '요구한다고 읽음) 대외적으로 좋은 회사인 것처럼 보이도록 하는 회사가 제법 많다는걸 새삼 느끼게\n' +
      '되었다. 실제로 나 역시도 입사 후 한 달이 되기도 전에 리뷰 작성 요청을 받았지만 퇴사한\n' +
      '지금까지도 리뷰는 작성하지 않았다. 솔직한 심정으로 잡플래닛의 리뷰는 이제 좋지 않은 평가만을\n' +
      '신뢰하게 되고 좋은 평가는 신뢰하지 않게 되었다.\n' +
      '\n' +
      '업무적으로는 Vue/Nuxt로 zero-base에서 릴리즈까지 모든 과정을 한 번 겪었다는 거다.\n' +
      '또, 본격적(?)으로 아토믹 디자인과 Storybook 구축의 시도는 (그것이 잘 되었든 잘 안되었든)\n' +
      '그 과정 속에서의 고민과 문제 해결의 반복의 경험을 더 많이 늘려주었다. 아토믹 디자인과\n' +
      'Storybook을 시도해본 경험에 대해서는 차후 따로 포스팅 해 볼 예정이다.\n' +
      '\n' +
      '하지만 결과적으로 나는 다시 실업자가 되었고 다시 이직 과정 속에서 고통(?)을 겪고 있다.\n' +
      '\n' +
      '## 코로나 시국\n' +
      '\n' +
      '지난 1월에 시작된 코로나 상황이 결국 지금까지 이어지고 있다. 덕분에(?) 자연스럽게 외부 활동이\n' +
      '줄었다. 중간 중간 1:1 정도의 오프라인 모임은 이어왔었지만, 중반에 이르러서부터는 그마저도\n' +
      '하지 않고 있다. (그 좋아하는 코노를 몇 달 째 못가고 있고... 영화관을 가는 것도 포기했다... ㅠㅠ)\n' +
      '\n' +
      '점심 식사를 배달로 먹는게 익숙해져서, 배X에 천생연분 등급까지 올라가봤고...\n' +
      '182만원 정도를 배달 식비로 소비했다 ㄷㄷㄷ\n' +
      '\n' +
      '예년 같았으면 퇴사 후에 여행을 갔을 텐데, 코로나 시국 덕에 여행을 못가고 있다. 슬프다 ㅠㅠ\n' +
      '\n' +
      '## 재정\n' +
      '\n' +
      '기존에 P2P에서 전체 현금 자산의 10% 정도를 씨드머니로 해서 굴리고 있었는데, 1개 회사가\n' +
      '먹튀했고 2개 회사에서 원금 손실로 현재 기약없이 야금야금 상환중이다.\n' +
      '회고를 작성하면서 확인해보니 P2P로 얻은 수익을 반영해보면 5백만원 정도의 손실이 있는 상태다.\n' +
      '(그나마 다행인건가?) 손실률이 적게라도 빨리 상환이 이루어졌으면 좋겠다 ㅠ\n' +
      '\n' +
      '대신 풍차예·적금을 1년치 만들었고, 2년치로 확장 중에 있다. 올해 예금 금리가 너무 떨어져서\n' +
      '2금융권까지 늘렸고 2금융권으로의 예치금 비율이 더 높아졌다.\n' +
      '\n' +
      '블로그 테마에 JSON-LD 오류가 있던 걸 수정 이후 연 1회 받던 애드센스가 올해는 3번 지급받았다.\n' +
      '포스트 수가 많지도 않은데 이렇게 들어오는 걸 보니 더 많이 포스팅해야겠다는 의욕이 솟지만...\n' +
      '수익을 위한 포스팅은 하고 싶지 않다는 생각이 더 지배적이다. 애드센스는 그냥 쌈짓돈 버는 수준만\n' +
      '유지하는데 만족하고 욕심내지 않기로 했다.\n' +
      '\n' +
      '## 학습, 프로젝트, 독서\n' +
      '\n' +
      '현재 회사에 들어와서 내 철칙 중 하나를 깼었는데, 바로 야근에 대한 부분이었다.\n' +
      '\n' +
      '프로덕트를 시급하게 만들어야 하는 상황이었기 때문에 일부 번아웃을 감안하고 야근을 감당하더라도\n' +
      '진행하기로 했는데, 그 덕분에 학습하기로 했던 것이나 개인 프로젝트로 진행하기로 했던 것, 독서량을\n' +
      '늘리기로했던 것이 모두 수포로 돌아갔다.\n' +
      '\n' +
      '관련된 이야기는 차후 따로 포스팅 할 예정이지만, 무튼 시간적 여유로 작년 계획했던 것들은 대부분\n' +
      '이루어내지 못했고, 퇴사 이후에 다시 시작하고 있다. (그래서 워라밸이 중요하다고 생각한다.)\n' +
      '\n' +
      '## 블로그 운영\n' +
      '\n' +
      '매 달 포스팅을 이어가지는 못했지만,  목표치의 60% 정도는 달성했다.\n' +
      '\n' +
      '한 달에 2개 포스트를 작성하는 것은 생각보다 더 어려운 일이었다. 확실히 욕심이 앞섰던 것 같다.\n' +
      '하지만 내년에도 동일한 목표를 가져가려고 한다. 60%가 80% 까지 끌어올려지기만 해도 좋다고\n' +
      '생각하고 100%를 달성한다면 더 좋을 것이기 때문이다.\n' +
      '\n' +
      '아, 그리고 올해 Hexo가 4.x로 업데이트 되면서 3.x와의 호환성이 너무 많이 깨져서 테마를 새로\n' +
      '만들 예정이다. 아직 구체적인 부분을 잡지는 못했지만, 여전히 pug를 이용할 생각이고 이번 테마에\n' +
      '아토믹디자인 시스템과 storybook도 적용해 볼 생각이다. (뻘짓일 수도 있겠지만 시도 하는 것\n' +
      '자체가 쓸데없다고 생각하지는 않는다.)\n' +
      '\n' +
      '## 대외 활동\n' +
      '\n' +
      'AOA 활동은 여전히 지속되고 있다. ~~(빠져나올 수 없는 개미지옥)~~\n' +
      '\n' +
      '하반기에 접어들어서는 격주로 올리기로 해서 이전에 비해 여유가 생긴 편이라 다소 낮은 마감의\n' +
      '압박을 느끼며 순조롭게 번역과 영상 제작을 진행하고 있다.\n' +
      '\n' +
      'WAI-ARIA Authoring Practices 번역 덕분에 좀 더 자세히 알아가게 되는 것들이 있다. 확실히\n' +
      '공식 문서에 대한 번역은 문서를 꼼꼼하게 살펴보고 앞뒤 맥락을 살피게 되어 더 자세히 들여다보게\n' +
      '되어 깊게 알게 되는 것 같다. 내년 상반기에는 아마도 컴포넌트별 사례를 만들면서 나도 더 자세히\n' +
      '학습할 수 있게 되지 않을까 싶다.\n' +
      '\n' +
      '11월에는 생각지도 않았던 세미나 발표를 했다.\n' +
      '정보접근기술 컨퍼런스에서 WAI-ARIA 102를 주제로 발표했고, 2주라는 준비 기간에 비해서 다소\n' +
      '담백하게 잘 발표했다고 생각한다.\n' +
      '\n' +
      '하지만 여전히 접근성에 대한 인식이 더 문제라고 생각하고, 한국 사회에서는 더 강한 법으로\n' +
      '규제해야 한다고 생각한다.\n' +
      '\n' +
      '### 하코사 거리두기\n' +
      '\n' +
      '작년, 하코사를 벗어나는 것에 대해서 생각했었고 코로나 덕분이기도 하지만 어느 정도 선을 그었고\n' +
      '거리를 두어 게시판 관리 외에는 관심을 멀리했다. (물론 바쁜 상황들도 한 몫을 더했다.)\n' +
      '\n' +
      '회고를 작성하면서 잠깐 질문글 삭튀에 대한 통계를 내봤는데, 올해 1월 1일부터 29일까지\n' +
      '기준으로 1042개의 질문글이 자기에게 필요한 답변을 받고나서 글이 삭제되었고, 그렇게 해서\n' +
      '패널티를 받은 아이디가 (중복으로 패널티를 받은 것을 제외하고) 509개에 달했다.\n' +
      '\n' +
      '연간 근무일수가 250일 정도라는 것을 감안하면, 하루 새로운 2명씩은 답변을 받은 뒤 글을\n' +
      '삭제했다는 거다.\n' +
      '\n' +
      '미안한 이야기지만, 하코사는 정말 하위 역량을 가진 이들의 집단이 될 확률이 다분히 높다고\n' +
      '생각한다. 저런 곳에서 누가 지식과 경험을 공유하고 싶을까.\n' +
      '\n' +
      '## to 2021\n' +
      '\n' +
      '2021년은 내게 앞자리가 바뀌는 해다. 허허허...\n' +
      '10년전 2가 3으로 바뀔 때는 큰 감흥이 없었는데 이제 앞자리가 또 바뀐다고 생각하니 무언가\n' +
      '씁쓸하다. (내가 언제 이렇게 나이들었나 싶은... 물론 나보다 나이 많으신 분들은 코웃음 치겠지만\n' +
      'ㅎㅎㅎ)\n' +
      '하지만 내일 아침 해가 뜨면 어 아침이구나 하겠지 ㅎㅎㅎ\n' +
      '\n' +
      '이런 저런 생각이 많아지는 2020년의 마지막 날이다\n' +
      '\n' +
      '아직 2021년에 어떤 계획을 가지고 살아갈지 혹은 살아낼지 어떤 생각도 없다.\n' +
      '다만 하루하루가 흘러가지 않기를 바라고, 다시 내년 이 맘 때 쯤 회고를 작성할 때에는 올해 참\n' +
      '잘 지냈다라고 작성할 수 있기를 바란다.\n',
    source: '_posts/2020-12-31-2020-retrospective.md',
    raw: '---\n' +
      'title: 2020년 회고\n' +
      'tags:\n' +
      '  - retrospective\n' +
      '  - 2020 회고\n' +
      '  - 아홉수\n' +
      'categories:\n' +
      '  - 일상노트\n' +
      '  - miscellaneous\n' +
      'thumbnail: /upload/2020/thumbs/loading-bar-2021.jpg\n' +
      'hero: /upload/2020/loading-bar-2021.jpg\n' +
      'seo:\n' +
      '  description: |\n' +
      '    이런 저런 생각이 많아지는 2020년의 마지막 날이다.  아직 2021년에 어떤 계획을 가지고\n' +
      '    살아갈지 혹은 살아낼지 어떤 생각도 없다. 다만 하루하루가 흘러가지 않기를 바라고, 다시\n' +
      '    내년 이 맘 때 쯤 회고를 작성할 때에는 올해 참 잘 지냈다라고 작성할 수 있기를 바란다.\n' +
      'date: 2020-12-31 15:39:47\n' +
      'style:\n' +
      '---\n' +
      '\n' +
      '\n' +
      '올해는 아홉수를 제대로 겪은 한 해 였던 것 같다.\n' +
      '\n' +
      '## 2번의 퇴사\n' +
      '\n' +
      '아홉수를 제대로 겪게 만든 가장 큰 이벤트였다.\n' +
      '지난 2월 말 모 여행사를 퇴사했고 11월 말을 기점으로 8개월 만에 두 번째 회사를 퇴사했다.\n' +
      '\n' +
      '그리고 두 번 모두 사측의 이유로 퇴사가 진행되었고, 둘 모두 소위 거지 같은 퇴사 절차를 밟았다.\n' +
      '2월의 퇴사는 포스팅 했었으니, 차후 시간이 되면 두 번째 퇴사에 대한 이야기도 포스팅 할 예정이다.\n' +
      '\n' +
      '그렇다고 전혀 소득이 없는 것은 아니다.\n' +
      '이직에 관하여서는 잡플래닛의 평을 "관리"하여 (관리라 쓰고 직원들에게 좋은 리뷰를 쓰도록\n' +
      '요구한다고 읽음) 대외적으로 좋은 회사인 것처럼 보이도록 하는 회사가 제법 많다는걸 새삼 느끼게\n' +
      '되었다. 실제로 나 역시도 입사 후 한 달이 되기도 전에 리뷰 작성 요청을 받았지만 퇴사한\n' +
      '지금까지도 리뷰는 작성하지 않았다. 솔직한 심정으로 잡플래닛의 리뷰는 이제 좋지 않은 평가만을\n' +
      '신뢰하게 되고 좋은 평가는 신뢰하지 않게 되었다.\n' +
      '\n' +
      '업무적으로는 Vue/Nuxt로 zero-base에서 릴리즈까지 모든 과정을 한 번 겪었다는 거다.\n' +
      '또, 본격적(?)으로 아토믹 디자인과 Storybook 구축의 시도는 (그것이 잘 되었든 잘 안되었든)\n' +
      '그 과정 속에서의 고민과 문제 해결의 반복의 경험을 더 많이 늘려주었다. 아토믹 디자인과\n' +
      'Storybook을 시도해본 경험에 대해서는 차후 따로 포스팅 해 볼 예정이다.\n' +
      '\n' +
      '하지만 결과적으로 나는 다시 실업자가 되었고 다시 이직 과정 속에서 고통(?)을 겪고 있다.\n' +
      '\n' +
      '## 코로나 시국\n' +
      '\n' +
      '지난 1월에 시작된 코로나 상황이 결국 지금까지 이어지고 있다. 덕분에(?) 자연스럽게 외부 활동이\n' +
      '줄었다. 중간 중간 1:1 정도의 오프라인 모임은 이어왔었지만, 중반에 이르러서부터는 그마저도\n' +
      '하지 않고 있다. (그 좋아하는 코노를 몇 달 째 못가고 있고... 영화관을 가는 것도 포기했다... ㅠㅠ)\n' +
      '\n' +
      '점심 식사를 배달로 먹는게 익숙해져서, 배X에 천생연분 등급까지 올라가봤고...\n' +
      '182만원 정도를 배달 식비로 소비했다 ㄷㄷㄷ\n' +
      '\n' +
      '예년 같았으면 퇴사 후에 여행을 갔을 텐데, 코로나 시국 덕에 여행을 못가고 있다. 슬프다 ㅠㅠ\n' +
      '\n' +
      '## 재정\n' +
      '\n' +
      '기존에 P2P에서 전체 현금 자산의 10% 정도를 씨드머니로 해서 굴리고 있었는데, 1개 회사가\n' +
      '먹튀했고 2개 회사에서 원금 손실로 현재 기약없이 야금야금 상환중이다.\n' +
      '회고를 작성하면서 확인해보니 P2P로 얻은 수익을 반영해보면 5백만원 정도의 손실이 있는 상태다.\n' +
      '(그나마 다행인건가?) 손실률이 적게라도 빨리 상환이 이루어졌으면 좋겠다 ㅠ\n' +
      '\n' +
      '대신 풍차예·적금을 1년치 만들었고, 2년치로 확장 중에 있다. 올해 예금 금리가 너무 떨어져서\n' +
      '2금융권까지 늘렸고 2금융권으로의 예치금 비율이 더 높아졌다.\n' +
      '\n' +
      '블로그 테마에 JSON-LD 오류가 있던 걸 수정 이후 연 1회 받던 애드센스가 올해는 3번 지급받았다.\n' +
      '포스트 수가 많지도 않은데 이렇게 들어오는 걸 보니 더 많이 포스팅해야겠다는 의욕이 솟지만...\n' +
      '수익을 위한 포스팅은 하고 싶지 않다는 생각이 더 지배적이다. 애드센스는 그냥 쌈짓돈 버는 수준만\n' +
      '유지하는데 만족하고 욕심내지 않기로 했다.\n' +
      '\n' +
      '## 학습, 프로젝트, 독서\n' +
      '\n' +
      '현재 회사에 들어와서 내 철칙 중 하나를 깼었는데, 바로 야근에 대한 부분이었다.\n' +
      '\n' +
      '프로덕트를 시급하게 만들어야 하는 상황이었기 때문에 일부 번아웃을 감안하고 야근을 감당하더라도\n' +
      '진행하기로 했는데, 그 덕분에 학습하기로 했던 것이나 개인 프로젝트로 진행하기로 했던 것, 독서량을\n' +
      '늘리기로했던 것이 모두 수포로 돌아갔다.\n' +
      '\n' +
      '관련된 이야기는 차후 따로 포스팅 할 예정이지만, 무튼 시간적 여유로 작년 계획했던 것들은 대부분\n' +
      '이루어내지 못했고, 퇴사 이후에 다시 시작하고 있다. (그래서 워라밸이 중요하다고 생각한다.)\n' +
      '\n' +
      '## 블로그 운영\n' +
      '\n' +
      '매 달 포스팅을 이어가지는 못했지만,  목표치의 60% 정도는 달성했다.\n' +
      '\n' +
      '한 달에 2개 포스트를 작성하는 것은 생각보다 더 어려운 일이었다. 확실히 욕심이 앞섰던 것 같다.\n' +
      '하지만 내년에도 동일한 목표를 가져가려고 한다. 60%가 80% 까지 끌어올려지기만 해도 좋다고\n' +
      '생각하고 100%를 달성한다면 더 좋을 것이기 때문이다.\n' +
      '\n' +
      '아, 그리고 올해 Hexo가 4.x로 업데이트 되면서 3.x와의 호환성이 너무 많이 깨져서 테마를 새로\n' +
      '만들 예정이다. 아직 구체적인 부분을 잡지는 못했지만, 여전히 pug를 이용할 생각이고 이번 테마에\n' +
      '아토믹디자인 시스템과 storybook도 적용해 볼 생각이다. (뻘짓일 수도 있겠지만 시도 하는 것\n' +
      '자체가 쓸데없다고 생각하지는 않는다.)\n' +
      '\n' +
      '## 대외 활동\n' +
      '\n' +
      'AOA 활동은 여전히 지속되고 있다. ~~(빠져나올 수 없는 개미지옥)~~\n' +
      '\n' +
      '하반기에 접어들어서는 격주로 올리기로 해서 이전에 비해 여유가 생긴 편이라 다소 낮은 마감의\n' +
      '압박을 느끼며 순조롭게 번역과 영상 제작을 진행하고 있다.\n' +
      '\n' +
      'WAI-ARIA Authoring Practices 번역 덕분에 좀 더 자세히 알아가게 되는 것들이 있다. 확실히\n' +
      '공식 문서에 대한 번역은 문서를 꼼꼼하게 살펴보고 앞뒤 맥락을 살피게 되어 더 자세히 들여다보게\n' +
      '되어 깊게 알게 되는 것 같다. 내년 상반기에는 아마도 컴포넌트별 사례를 만들면서 나도 더 자세히\n' +
      '학습할 수 있게 되지 않을까 싶다.\n' +
      '\n' +
      '11월에는 생각지도 않았던 세미나 발표를 했다.\n' +
      '정보접근기술 컨퍼런스에서 WAI-ARIA 102를 주제로 발표했고, 2주라는 준비 기간에 비해서 다소\n' +
      '담백하게 잘 발표했다고 생각한다.\n' +
      '\n' +
      '하지만 여전히 접근성에 대한 인식이 더 문제라고 생각하고, 한국 사회에서는 더 강한 법으로\n' +
      '규제해야 한다고 생각한다.\n' +
      '\n' +
      '### 하코사 거리두기\n' +
      '\n' +
      '작년, 하코사를 벗어나는 것에 대해서 생각했었고 코로나 덕분이기도 하지만 어느 정도 선을 그었고\n' +
      '거리를 두어 게시판 관리 외에는 관심을 멀리했다. (물론 바쁜 상황들도 한 몫을 더했다.)\n' +
      '\n' +
      '회고를 작성하면서 잠깐 질문글 삭튀에 대한 통계를 내봤는데, 올해 1월 1일부터 29일까지\n' +
      '기준으로 1042개의 질문글이 자기에게 필요한 답변을 받고나서 글이 삭제되었고, 그렇게 해서\n' +
      '패널티를 받은 아이디가 (중복으로 패널티를 받은 것을 제외하고) 509개에 달했다.\n' +
      '\n' +
      '연간 근무일수가 250일 정도라는 것을 감안하면, 하루 새로운 2명씩은 답변을 받은 뒤 글을\n' +
      '삭제했다는 거다.\n' +
      '\n' +
      '미안한 이야기지만, 하코사는 정말 하위 역량을 가진 이들의 집단이 될 확률이 다분히 높다고\n' +
      '생각한다. 저런 곳에서 누가 지식과 경험을 공유하고 싶을까.\n' +
      '\n' +
      '## to 2021\n' +
      '\n' +
      '2021년은 내게 앞자리가 바뀌는 해다. 허허허...\n' +
      '10년전 2가 3으로 바뀔 때는 큰 감흥이 없었는데 이제 앞자리가 또 바뀐다고 생각하니 무언가\n' +
      '씁쓸하다. (내가 언제 이렇게 나이들었나 싶은... 물론 나보다 나이 많으신 분들은 코웃음 치겠지만\n' +
      'ㅎㅎㅎ)\n' +
      '하지만 내일 아침 해가 뜨면 어 아침이구나 하겠지 ㅎㅎㅎ\n' +
      '\n' +
      '이런 저런 생각이 많아지는 2020년의 마지막 날이다\n' +
      '\n' +
      '아직 2021년에 어떤 계획을 가지고 살아갈지 혹은 살아낼지 어떤 생각도 없다.\n' +
      '다만 하루하루가 흘러가지 않기를 바라고, 다시 내년 이 맘 때 쯤 회고를 작성할 때에는 올해 참\n' +
      '잘 지냈다라고 작성할 수 있기를 바란다.\n',
    slug: '2020-retrospective',
    published: true,
    comments: true,
    layout: 'post',
    photos: [],
    link: '',
    _id: 'clcytfa4q00a3taww5nmt96z6',
    content: '<p>올해는 아홉수를 제대로 겪은 한 해 였던 것 같다.</p>\n' +
      '<h2 id="2번의-퇴사"><a href="#2번의-퇴사" class="headerlink" title="2번의 퇴사"></a>2번의 퇴사</h2><p>아홉수를 제대로 겪게 만든 가장 큰 이벤트였다.\n' +
      '지난 2월 말 모 여행사를 퇴사했고 11월 말을 기점으로 8개월 만에 두 번째 회사를 퇴사했다.</p>\n' +
      '<p>그리고 두 번 모두 사측의 이유로 퇴사가 진행되었고, 둘 모두 소위 거지 같은 퇴사 절차를 밟았다.\n' +
      '2월의 퇴사는 포스팅 했었으니, 차후 시간이 되면 두 번째 퇴사에 대한 이야기도 포스팅 할 예정이다.</p>\n' +
      '<p>그렇다고 전혀 소득이 없는 것은 아니다.\n' +
      '이직에 관하여서는 잡플래닛의 평을 &quot;관리&quot;하여 (관리라 쓰고 직원들에게 좋은 리뷰를 쓰도록\n' +
      '요구한다고 읽음) 대외적으로 좋은 회사인 것처럼 보이도록 하는 회사가 제법 많다는걸 새삼 느끼게\n' +
      '되었다. 실제로 나 역시도 입사 후 한 달이 되기도 전에 리뷰 작성 요청을 받았지만 퇴사한\n' +
      '지금까지도 리뷰는 작성하지 않았다. 솔직한 심정으로 잡플래닛의 리뷰는 이제 좋지 않은 평가만을\n' +
      '신뢰하게 되고 좋은 평가는 신뢰하지 않게 되었다.</p>\n' +
      '<p>업무적으로는 Vue&#x2F;Nuxt로 zero-base에서 릴리즈까지 모든 과정을 한 번 겪었다는 거다.\n' +
      '또, 본격적(?)으로 아토믹 디자인과 Storybook 구축의 시도는 (그것이 잘 되었든 잘 안되었든)\n' +
      '그 과정 속에서의 고민과 문제 해결의 반복의 경험을 더 많이 늘려주었다. 아토믹 디자인과\n' +
      'Storybook을 시도해본 경험에 대해서는 차후 따로 포스팅 해 볼 예정이다.</p>\n' +
      '<p>하지만 결과적으로 나는 다시 실업자가 되었고 다시 이직 과정 속에서 고통(?)을 겪고 있다.</p>\n' +
      '<h2 id="코로나-시국"><a href="#코로나-시국" class="headerlink" title="코로나 시국"></a>코로나 시국</h2><p>지난 1월에 시작된 코로나 상황이 결국 지금까지 이어지고 있다. 덕분에(?) 자연스럽게 외부 활동이\n' +
      '줄었다. 중간 중간 1:1 정도의 오프라인 모임은 이어왔었지만, 중반에 이르러서부터는 그마저도\n' +
      '하지 않고 있다. (그 좋아하는 코노를 몇 달 째 못가고 있고... 영화관을 가는 것도 포기했다... ㅠㅠ)</p>\n' +
      '<p>점심 식사를 배달로 먹는게 익숙해져서, 배X에 천생연분 등급까지 올라가봤고...\n' +
      '182만원 정도를 배달 식비로 소비했다 ㄷㄷㄷ</p>\n' +
      '<p>예년 같았으면 퇴사 후에 여행을 갔을 텐데, 코로나 시국 덕에 여행을 못가고 있다. 슬프다 ㅠㅠ</p>\n' +
      '<h2 id="재정"><a href="#재정" class="headerlink" title="재정"></a>재정</h2><p>기존에 P2P에서 전체 현금 자산의 10% 정도를 씨드머니로 해서 굴리고 있었는데, 1개 회사가\n' +
      '먹튀했고 2개 회사에서 원금 손실로 현재 기약없이 야금야금 상환중이다.\n' +
      '회고를 작성하면서 확인해보니 P2P로 얻은 수익을 반영해보면 5백만원 정도의 손실이 있는 상태다.\n' +
      '(그나마 다행인건가?) 손실률이 적게라도 빨리 상환이 이루어졌으면 좋겠다 ㅠ</p>\n' +
      '<p>대신 풍차예·적금을 1년치 만들었고, 2년치로 확장 중에 있다. 올해 예금 금리가 너무 떨어져서\n' +
      '2금융권까지 늘렸고 2금융권으로의 예치금 비율이 더 높아졌다.</p>\n' +
      '<p>블로그 테마에 JSON-LD 오류가 있던 걸 수정 이후 연 1회 받던 애드센스가 올해는 3번 지급받았다.\n' +
      '포스트 수가 많지도 않은데 이렇게 들어오는 걸 보니 더 많이 포스팅해야겠다는 의욕이 솟지만...\n' +
      '수익을 위한 포스팅은 하고 싶지 않다는 생각이 더 지배적이다. 애드센스는 그냥 쌈짓돈 버는 수준만\n' +
      '유지하는데 만족하고 욕심내지 않기로 했다.</p>\n' +
      '<h2 id="학습-프로젝트-독서"><a href="#학습-프로젝트-독서" class="headerlink" title="학습, 프로젝트, 독서"></a>학습, 프로젝트, 독서</h2><p>현재 회사에 들어와서 내 철칙 중 하나를 깼었는데, 바로 야근에 대한 부분이었다.</p>\n' +
      '<p>프로덕트를 시급하게 만들어야 하는 상황이었기 때문에 일부 번아웃을 감안하고 야근을 감당하더라도\n' +
      '진행하기로 했는데, 그 덕분에 학습하기로 했던 것이나 개인 프로젝트로 진행하기로 했던 것, 독서량을\n' +
      '늘리기로했던 것이 모두 수포로 돌아갔다.</p>\n' +
      '<p>관련된 이야기는 차후 따로 포스팅 할 예정이지만, 무튼 시간적 여유로 작년 계획했던 것들은 대부분\n' +
      '이루어내지 못했고, 퇴사 이후에 다시 시작하고 있다. (그래서 워라밸이 중요하다고 생각한다.)</p>\n' +
      '<h2 id="블로그-운영"><a href="#블로그-운영" class="headerlink" title="블로그 운영"></a>블로그 운영</h2><p>매 달 포스팅을 이어가지는 못했지만,  목표치의 60% 정도는 달성했다.</p>\n' +
      '<p>한 달에 2개 포스트를 작성하는 것은 생각보다 더 어려운 일이었다. 확실히 욕심이 앞섰던 것 같다.\n' +
      '하지만 내년에도 동일한 목표를 가져가려고 한다. 60%가 80% 까지 끌어올려지기만 해도 좋다고\n' +
      '생각하고 100%를 달성한다면 더 좋을 것이기 때문이다.</p>\n' +
      '<p>아, 그리고 올해 Hexo가 4.x로 업데이트 되면서 3.x와의 호환성이 너무 많이 깨져서 테마를 새로\n' +
      '만들 예정이다. 아직 구체적인 부분을 잡지는 못했지만, 여전히 pug를 이용할 생각이고 이번 테마에\n' +
      '아토믹디자인 시스템과 storybook도 적용해 볼 생각이다. (뻘짓일 수도 있겠지만 시도 하는 것\n' +
      '자체가 쓸데없다고 생각하지는 않는다.)</p>\n' +
      '<h2 id="대외-활동"><a href="#대외-활동" class="headerlink" title="대외 활동"></a>대외 활동</h2><p>AOA 활동은 여전히 지속되고 있다. <del>(빠져나올 수 없는 개미지옥)</del></p>\n' +
      '<p>하반기에 접어들어서는 격주로 올리기로 해서 이전에 비해 여유가 생긴 편이라 다소 낮은 마감의\n' +
      '압박을 느끼며 순조롭게 번역과 영상 제작을 진행하고 있다.</p>\n' +
      '<p>WAI-ARIA Authoring Practices 번역 덕분에 좀 더 자세히 알아가게 되는 것들이 있다. 확실히\n' +
      '공식 문서에 대한 번역은 문서를 꼼꼼하게 살펴보고 앞뒤 맥락을 살피게 되어 더 자세히 들여다보게\n' +
      '되어 깊게 알게 되는 것 같다. 내년 상반기에는 아마도 컴포넌트별 사례를 만들면서 나도 더 자세히\n' +
      '학습할 수 있게 되지 않을까 싶다.</p>\n' +
      '<p>11월에는 생각지도 않았던 세미나 발표를 했다.\n' +
      '정보접근기술 컨퍼런스에서 WAI-ARIA 102를 주제로 발표했고, 2주라는 준비 기간에 비해서 다소\n' +
      '담백하게 잘 발표했다고 생각한다.</p>\n' +
      '<p>하지만 여전히 접근성에 대한 인식이 더 문제라고 생각하고, 한국 사회에서는 더 강한 법으로\n' +
      '규제해야 한다고 생각한다.</p>\n' +
      '<h3 id="하코사-거리두기"><a href="#하코사-거리두기" class="headerlink" title="하코사 거리두기"></a>하코사 거리두기</h3><p>작년, 하코사를 벗어나는 것에 대해서 생각했었고 코로나 덕분이기도 하지만 어느 정도 선을 그었고\n' +
      '거리를 두어 게시판 관리 외에는 관심을 멀리했다. (물론 바쁜 상황들도 한 몫을 더했다.)</p>\n' +
      '<p>회고를 작성하면서 잠깐 질문글 삭튀에 대한 통계를 내봤는데, 올해 1월 1일부터 29일까지\n' +
      '기준으로 1042개의 질문글이 자기에게 필요한 답변을 받고나서 글이 삭제되었고, 그렇게 해서\n' +
      '패널티를 받은 아이디가 (중복으로 패널티를 받은 것을 제외하고) 509개에 달했다.</p>\n' +
      '<p>연간 근무일수가 250일 정도라는 것을 감안하면, 하루 새로운 2명씩은 답변을 받은 뒤 글을\n' +
      '삭제했다는 거다.</p>\n' +
      '<p>미안한 이야기지만, 하코사는 정말 하위 역량을 가진 이들의 집단이 될 확률이 다분히 높다고\n' +
      '생각한다. 저런 곳에서 누가 지식과 경험을 공유하고 싶을까.</p>\n' +
      '<h2 id="to-2021"><a href="#to-2021" class="headerlink" title="to 2021"></a>to 2021</h2><p>2021년은 내게 앞자리가 바뀌는 해다. 허허허...\n' +
      '10년전 2가 3으로 바뀔 때는 큰 감흥이 없었는데 이제 앞자리가 또 바뀐다고 생각하니 무언가\n' +
      '씁쓸하다. (내가 언제 이렇게 나이들었나 싶은... 물론 나보다 나이 많으신 분들은 코웃음 치겠지만\n' +
      'ㅎㅎㅎ)\n' +
      '하지만 내일 아침 해가 뜨면 어 아침이구나 하겠지 ㅎㅎㅎ</p>\n' +
      '<p>이런 저런 생각이 많아지는 2020년의 마지막 날이다</p>\n' +
      '<p>아직 2021년에 어떤 계획을 가지고 살아갈지 혹은 살아낼지 어떤 생각도 없다.\n' +
      '다만 하루하루가 흘러가지 않기를 바라고, 다시 내년 이 맘 때 쯤 회고를 작성할 때에는 올해 참\n' +
      '잘 지냈다라고 작성할 수 있기를 바란다.</p>\n',
    site: { data: [Object] },
    excerpt: '',
    more: '<p>올해는 아홉수를 제대로 겪은 한 해 였던 것 같다.</p>\n' +
      '<h2 id="2번의-퇴사"><a href="#2번의-퇴사" class="headerlink" title="2번의 퇴사"></a>2번의 퇴사</h2><p>아홉수를 제대로 겪게 만든 가장 큰 이벤트였다.\n' +
      '지난 2월 말 모 여행사를 퇴사했고 11월 말을 기점으로 8개월 만에 두 번째 회사를 퇴사했다.</p>\n' +
      '<p>그리고 두 번 모두 사측의 이유로 퇴사가 진행되었고, 둘 모두 소위 거지 같은 퇴사 절차를 밟았다.\n' +
      '2월의 퇴사는 포스팅 했었으니, 차후 시간이 되면 두 번째 퇴사에 대한 이야기도 포스팅 할 예정이다.</p>\n' +
      '<p>그렇다고 전혀 소득이 없는 것은 아니다.\n' +
      '이직에 관하여서는 잡플래닛의 평을 &quot;관리&quot;하여 (관리라 쓰고 직원들에게 좋은 리뷰를 쓰도록\n' +
      '요구한다고 읽음) 대외적으로 좋은 회사인 것처럼 보이도록 하는 회사가 제법 많다는걸 새삼 느끼게\n' +
      '되었다. 실제로 나 역시도 입사 후 한 달이 되기도 전에 리뷰 작성 요청을 받았지만 퇴사한\n' +
      '지금까지도 리뷰는 작성하지 않았다. 솔직한 심정으로 잡플래닛의 리뷰는 이제 좋지 않은 평가만을\n' +
      '신뢰하게 되고 좋은 평가는 신뢰하지 않게 되었다.</p>\n' +
      '<p>업무적으로는 Vue&#x2F;Nuxt로 zero-base에서 릴리즈까지 모든 과정을 한 번 겪었다는 거다.\n' +
      '또, 본격적(?)으로 아토믹 디자인과 Storybook 구축의 시도는 (그것이 잘 되었든 잘 안되었든)\n' +
      '그 과정 속에서의 고민과 문제 해결의 반복의 경험을 더 많이 늘려주었다. 아토믹 디자인과\n' +
      'Storybook을 시도해본 경험에 대해서는 차후 따로 포스팅 해 볼 예정이다.</p>\n' +
      '<p>하지만 결과적으로 나는 다시 실업자가 되었고 다시 이직 과정 속에서 고통(?)을 겪고 있다.</p>\n' +
      '<h2 id="코로나-시국"><a href="#코로나-시국" class="headerlink" title="코로나 시국"></a>코로나 시국</h2><p>지난 1월에 시작된 코로나 상황이 결국 지금까지 이어지고 있다. 덕분에(?) 자연스럽게 외부 활동이\n' +
      '줄었다. 중간 중간 1:1 정도의 오프라인 모임은 이어왔었지만, 중반에 이르러서부터는 그마저도\n' +
      '하지 않고 있다. (그 좋아하는 코노를 몇 달 째 못가고 있고... 영화관을 가는 것도 포기했다... ㅠㅠ)</p>\n' +
      '<p>점심 식사를 배달로 먹는게 익숙해져서, 배X에 천생연분 등급까지 올라가봤고...\n' +
      '182만원 정도를 배달 식비로 소비했다 ㄷㄷㄷ</p>\n' +
      '<p>예년 같았으면 퇴사 후에 여행을 갔을 텐데, 코로나 시국 덕에 여행을 못가고 있다. 슬프다 ㅠㅠ</p>\n' +
      '<h2 id="재정"><a href="#재정" class="headerlink" title="재정"></a>재정</h2><p>기존에 P2P에서 전체 현금 자산의 10% 정도를 씨드머니로 해서 굴리고 있었는데, 1개 회사가\n' +
      '먹튀했고 2개 회사에서 원금 손실로 현재 기약없이 야금야금 상환중이다.\n' +
      '회고를 작성하면서 확인해보니 P2P로 얻은 수익을 반영해보면 5백만원 정도의 손실이 있는 상태다.\n' +
      '(그나마 다행인건가?) 손실률이 적게라도 빨리 상환이 이루어졌으면 좋겠다 ㅠ</p>\n' +
      '<p>대신 풍차예·적금을 1년치 만들었고, 2년치로 확장 중에 있다. 올해 예금 금리가 너무 떨어져서\n' +
      '2금융권까지 늘렸고 2금융권으로의 예치금 비율이 더 높아졌다.</p>\n' +
      '<p>블로그 테마에 JSON-LD 오류가 있던 걸 수정 이후 연 1회 받던 애드센스가 올해는 3번 지급받았다.\n' +
      '포스트 수가 많지도 않은데 이렇게 들어오는 걸 보니 더 많이 포스팅해야겠다는 의욕이 솟지만...\n' +
      '수익을 위한 포스팅은 하고 싶지 않다는 생각이 더 지배적이다. 애드센스는 그냥 쌈짓돈 버는 수준만\n' +
      '유지하는데 만족하고 욕심내지 않기로 했다.</p>\n' +
      '<h2 id="학습-프로젝트-독서"><a href="#학습-프로젝트-독서" class="headerlink" title="학습, 프로젝트, 독서"></a>학습, 프로젝트, 독서</h2><p>현재 회사에 들어와서 내 철칙 중 하나를 깼었는데, 바로 야근에 대한 부분이었다.</p>\n' +
      '<p>프로덕트를 시급하게 만들어야 하는 상황이었기 때문에 일부 번아웃을 감안하고 야근을 감당하더라도\n' +
      '진행하기로 했는데, 그 덕분에 학습하기로 했던 것이나 개인 프로젝트로 진행하기로 했던 것, 독서량을\n' +
      '늘리기로했던 것이 모두 수포로 돌아갔다.</p>\n' +
      '<p>관련된 이야기는 차후 따로 포스팅 할 예정이지만, 무튼 시간적 여유로 작년 계획했던 것들은 대부분\n' +
      '이루어내지 못했고, 퇴사 이후에 다시 시작하고 있다. (그래서 워라밸이 중요하다고 생각한다.)</p>\n' +
      '<h2 id="블로그-운영"><a href="#블로그-운영" class="headerlink" title="블로그 운영"></a>블로그 운영</h2><p>매 달 포스팅을 이어가지는 못했지만,  목표치의 60% 정도는 달성했다.</p>\n' +
      '<p>한 달에 2개 포스트를 작성하는 것은 생각보다 더 어려운 일이었다. 확실히 욕심이 앞섰던 것 같다.\n' +
      '하지만 내년에도 동일한 목표를 가져가려고 한다. 60%가 80% 까지 끌어올려지기만 해도 좋다고\n' +
      '생각하고 100%를 달성한다면 더 좋을 것이기 때문이다.</p>\n' +
      '<p>아, 그리고 올해 Hexo가 4.x로 업데이트 되면서 3.x와의 호환성이 너무 많이 깨져서 테마를 새로\n' +
      '만들 예정이다. 아직 구체적인 부분을 잡지는 못했지만, 여전히 pug를 이용할 생각이고 이번 테마에\n' +
      '아토믹디자인 시스템과 storybook도 적용해 볼 생각이다. (뻘짓일 수도 있겠지만 시도 하는 것\n' +
      '자체가 쓸데없다고 생각하지는 않는다.)</p>\n' +
      '<h2 id="대외-활동"><a href="#대외-활동" class="headerlink" title="대외 활동"></a>대외 활동</h2><p>AOA 활동은 여전히 지속되고 있다. <del>(빠져나올 수 없는 개미지옥)</del></p>\n' +
      '<p>하반기에 접어들어서는 격주로 올리기로 해서 이전에 비해 여유가 생긴 편이라 다소 낮은 마감의\n' +
      '압박을 느끼며 순조롭게 번역과 영상 제작을 진행하고 있다.</p>\n' +
      '<p>WAI-ARIA Authoring Practices 번역 덕분에 좀 더 자세히 알아가게 되는 것들이 있다. 확실히\n' +
      '공식 문서에 대한 번역은 문서를 꼼꼼하게 살펴보고 앞뒤 맥락을 살피게 되어 더 자세히 들여다보게\n' +
      '되어 깊게 알게 되는 것 같다. 내년 상반기에는 아마도 컴포넌트별 사례를 만들면서 나도 더 자세히\n' +
      '학습할 수 있게 되지 않을까 싶다.</p>\n' +
      '<p>11월에는 생각지도 않았던 세미나 발표를 했다.\n' +
      '정보접근기술 컨퍼런스에서 WAI-ARIA 102를 주제로 발표했고, 2주라는 준비 기간에 비해서 다소\n' +
      '담백하게 잘 발표했다고 생각한다.</p>\n' +
      '<p>하지만 여전히 접근성에 대한 인식이 더 문제라고 생각하고, 한국 사회에서는 더 강한 법으로\n' +
      '규제해야 한다고 생각한다.</p>\n' +
      '<h3 id="하코사-거리두기"><a href="#하코사-거리두기" class="headerlink" title="하코사 거리두기"></a>하코사 거리두기</h3><p>작년, 하코사를 벗어나는 것에 대해서 생각했었고 코로나 덕분이기도 하지만 어느 정도 선을 그었고\n' +
      '거리를 두어 게시판 관리 외에는 관심을 멀리했다. (물론 바쁜 상황들도 한 몫을 더했다.)</p>\n' +
      '<p>회고를 작성하면서 잠깐 질문글 삭튀에 대한 통계를 내봤는데, 올해 1월 1일부터 29일까지\n' +
      '기준으로 1042개의 질문글이 자기에게 필요한 답변을 받고나서 글이 삭제되었고, 그렇게 해서\n' +
      '패널티를 받은 아이디가 (중복으로 패널티를 받은 것을 제외하고) 509개에 달했다.</p>\n' +
      '<p>연간 근무일수가 250일 정도라는 것을 감안하면, 하루 새로운 2명씩은 답변을 받은 뒤 글을\n' +
      '삭제했다는 거다.</p>\n' +
      '<p>미안한 이야기지만, 하코사는 정말 하위 역량을 가진 이들의 집단이 될 확률이 다분히 높다고\n' +
      '생각한다. 저런 곳에서 누가 지식과 경험을 공유하고 싶을까.</p>\n' +
      '<h2 id="to-2021"><a href="#to-2021" class="headerlink" title="to 2021"></a>to 2021</h2><p>2021년은 내게 앞자리가 바뀌는 해다. 허허허...\n' +
      '10년전 2가 3으로 바뀔 때는 큰 감흥이 없었는데 이제 앞자리가 또 바뀐다고 생각하니 무언가\n' +
      '씁쓸하다. (내가 언제 이렇게 나이들었나 싶은... 물론 나보다 나이 많으신 분들은 코웃음 치겠지만\n' +
      'ㅎㅎㅎ)\n' +
      '하지만 내일 아침 해가 뜨면 어 아침이구나 하겠지 ㅎㅎㅎ</p>\n' +
      '<p>이런 저런 생각이 많아지는 2020년의 마지막 날이다</p>\n' +
      '<p>아직 2021년에 어떤 계획을 가지고 살아갈지 혹은 살아낼지 어떤 생각도 없다.\n' +
      '다만 하루하루가 흘러가지 않기를 바라고, 다시 내년 이 맘 때 쯤 회고를 작성할 때에는 올해 참\n' +
      '잘 지냈다라고 작성할 수 있기를 바란다.</p>\n',
    path: [Getter],
    permalink: [Getter],
    full_source: [Getter],
    asset_dir: [Getter],
    tags: [Getter],
    categories: [Getter],
    prev: [Circular *2],
    next: _Document {
      title: 'colum flexbox에서 padding bottom 문제 해결',
      hero: '/upload/2020/fails-padding-bottom-in-flexbox.jpg',
      seo: [Object],
      thumbnail: '/upload/2020/thumbs/fails-padding-bottom-in-flexbox.jpg',
      style: '.hero {\n' +
        '  &-wrapper {\n' +
        '    text-shadow:\n' +
        '      1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
        '      -1px -1px 1em rgba(20, 12, 24, 0.5);\n' +
        '  }\n' +
        '  &__image {\n' +
        '    opacity: 0.35\n' +
        '  }\n' +
        '}\n' +
        '.article__content{\n' +
        '  &::after {\n' +
        '    @extend %clearfix;\n' +
        '  }\n' +
        '  .figure {\n' +
        '\n' +
        '    &__caption {\n' +
        '      max-width: 334px;\n' +
        '      margin-top: 1em;\n' +
        '      font-size: 0.85em;\n' +
        '      color: lighten(#000, 50%);\n' +
        '      text-align: center;\n' +
        '\n' +
        "      @include respond-to('x-small') {\n" +
        '        max-width: 100%;\n' +
        '        font-size: 0.75em;\n' +
        '      }\n' +
        '\n' +
        '      &::before {\n' +
        '        content:"[ ";\n' +
        '      }\n' +
        '      &::after {\n' +
        '        content:" ]";\n' +
        '      }\n' +
        '    }\n' +
        '  }\n' +
        '}\n',
      date: Moment<2020-12-08T19:12:13+09:00>,
      subtitle: null,
      _content: '\n' +
        '\n' +
        'FlexBox를 사용 하는 중 padding-bottom이 실종되는 상황을 만나게 되었다.\n' +
        '\n' +
        '정확하게는 Firefox에서 column flexbox에 발생 된 문제로\n' +
        '<code class="language-css">overflow: auto</code>에 의해 스크롤이 발생되었을 때\n' +
        '하단에 적용해 둔 padding이 실종되는 상황이다.\n' +
        '\n' +
        '물론, Chrome은 렌더링이 잘 된다... <s>힘내요 FireFox</s>\n' +
        '\n' +
        '## 발견된 상황\n' +
        '\n' +
        '### 적용된 코드\n' +
        '\n' +
        '해당 문제와 관련 없는 코드는 삭제해 두었고, padding-top/bottom에 해당 하는 값은\n' +
        '식별이 쉽도록 일부러 100px을 넣어두었다.\n' +
        '\n' +
        '```css\n' +
        '.frm {\n' +
        '  box-sizing: border-box;\n' +
        '  display: flex;\n' +
        '  flex-flow: column;\n' +
        '  justify-content: flex-start;\n' +
        '  align-items: flex-start;\n' +
        '  overflow: auto;\n' +
        '  margin: auto;\n' +
        '  padding: 100px 30px;\n' +
        '  ...\n' +
        '}\n' +
        '```\n' +
        '\n' +
        '### 렌더링 된 화면\n' +
        '\n' +
        '{% raw %}\n' +
        '<figure class="figure">\n' +
        '  <img\n' +
        '    src="/upload/2020/fails-padding-bottom-in-flexbox.jpg"\n' +
        '    alt="" >\n' +
        '  <figcaption class="figure__caption">\n' +
        '    상단에는 padding이 적용되어 있지만, 하단에는 padding이 적용되지 않은 것 처럼 보여진다.\n' +
        '  </figcaption>\n' +
        '</figure>\n' +
        '{% endraw %}\n' +
        '\n' +
        '## Fix it\n' +
        '\n' +
        '찾아보니 FireFox와 Safari에서 발생되는 버그로 알려져 있더라.\n' +
        '나는 Mac이 없는 관계로... Safari에서는 테스트를 해보지 못했지만, 같은 문제가 발생되더라도\n' +
        '동일한 방법으로 충분히 해결 될 거라고 생각한다.\n' +
        '\n' +
        '사실 이게 해결(?)이라기 보다는 trick에 가깝다고 봐야 할 것 같고, 아마도 특정 상황에서는\n' +
        '사용하지 못하는 방법일 수도 있다. (왜 그런지는 코드를 보면 알 거다)\n' +
        '\n' +
        '키는 <code class="language-css">::before</code>,\n' +
        '<code class="language-css">::after</code> 가상 선택자에 있다.\n' +
        '단지 아래와 같은 코드를 바꾸어주었을 뿐이다.\n' +
        '\n' +
        '```scss\n' +
        '.frm {\n' +
        '  box-sizing: border-box;\n' +
        '  display: flex;\n' +
        '  flex-flow: column;\n' +
        '  justify-content: flex-start;\n' +
        '  align-items: flex-start;\n' +
        '  overflow: auto;\n' +
        '  margin: auto;\n' +
        '  padding: 0 30px;\n' +
        '  ...\n' +
        '\n' +
        '  &::before,\n' +
        '  &::after {\n' +
        '    flex: 0 0 100px;\n' +
        '    width: 100%;\n' +
        '    content: "";\n' +
        '  }\n' +
        '}\n' +
        '```\n' +
        '\n' +
        'padding-top/bottom 에 해당하는 값을 가상선택자의 flex로 이동시켜주는 방식으로 요소 상/하\n' +
        '단에 그 만큼의 여백에 해당하는 빈 요소를 집어 넣은...\n' +
        '\n' +
        '참고로 `width: 100%`를 넣은 건, width값이 0이면\n' +
        '렌더링 되지 않아서다;; <s>나한테 왜이래 Firefox...</s>\n' +
        '\n' +
        '<code class="language-css">::before</code>,\n' +
        '<code class="language-css">::after</code>를 사용했기 때문에, 이미 이를 다른 스타일링을\n' +
        '위해 사용하고 있다면 다소 이 방법을 사용하기는 어렵겠다.\n' +
        '\n' +
        '그저 Firefox와 Safari가 이 버그를 수정해주길 기다릴 뿐...\n',
      source: '_posts/2020-12-08-fix-padding-bottom-bug-in-flex-on-firefox.md',
      raw: '---\n' +
        'title: colum flexbox에서 padding bottom 문제 해결\n' +
        'tags:\n' +
        '  - flex\n' +
        '  - flexbox\n' +
        '  - padding-bottom\n' +
        '  - firefox\n' +
        '  - overflow\n' +
        'categories:\n' +
        '  - 개발노트\n' +
        '  - HTML/CSS\n' +
        'hero: /upload/2020/fails-padding-bottom-in-flexbox.jpg\n' +
        'seo:\n' +
        '  image: /upload/2020/fails-padding-bottom-in-flexbox.jpg\n' +
        '  description: |\n' +
        '    Firefox에서 column flexbox에 하단에 적용해 둔 padding-bottom이 실종되는 상황을\n' +
        '    만나게 되었다.\n' +
        'thumbnail: /upload/2020/thumbs/fails-padding-bottom-in-flexbox.jpg\n' +
        'style: |\n' +
        '  .hero {\n' +
        '    &-wrapper {\n' +
        '      text-shadow:\n' +
        '        1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
        '        -1px -1px 1em rgba(20, 12, 24, 0.5);\n' +
        '    }\n' +
        '    &__image {\n' +
        '      opacity: 0.35\n' +
        '    }\n' +
        '  }\n' +
        '  .article__content{\n' +
        '    &::after {\n' +
        '      @extend %clearfix;\n' +
        '    }\n' +
        '    .figure {\n' +
        '\n' +
        '      &__caption {\n' +
        '        max-width: 334px;\n' +
        '        margin-top: 1em;\n' +
        '        font-size: 0.85em;\n' +
        '        color: lighten(#000, 50%);\n' +
        '        text-align: center;\n' +
        '\n' +
        "        @include respond-to('x-small') {\n" +
        '          max-width: 100%;\n' +
        '          font-size: 0.75em;\n' +
        '        }\n' +
        '\n' +
        '        &::before {\n' +
        '          content:"[ ";\n' +
        '        }\n' +
        '        &::after {\n' +
        '          content:" ]";\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '  }\n' +
        'date: 2020-12-08 19:12:13\n' +
        'subtitle:\n' +
        '---\n' +
        '\n' +
        '\n' +
        'FlexBox를 사용 하는 중 padding-bottom이 실종되는 상황을 만나게 되었다.\n' +
        '\n' +
        '정확하게는 Firefox에서 column flexbox에 발생 된 문제로\n' +
        '<code class="language-css">overflow: auto</code>에 의해 스크롤이 발생되었을 때\n' +
        '하단에 적용해 둔 padding이 실종되는 상황이다.\n' +
        '\n' +
        '물론, Chrome은 렌더링이 잘 된다... <s>힘내요 FireFox</s>\n' +
        '\n' +
        '## 발견된 상황\n' +
        '\n' +
        '### 적용된 코드\n' +
        '\n' +
        '해당 문제와 관련 없는 코드는 삭제해 두었고, padding-top/bottom에 해당 하는 값은\n' +
        '식별이 쉽도록 일부러 100px을 넣어두었다.\n' +
        '\n' +
        '```css\n' +
        '.frm {\n' +
        '  box-sizing: border-box;\n' +
        '  display: flex;\n' +
        '  flex-flow: column;\n' +
        '  justify-content: flex-start;\n' +
        '  align-items: flex-start;\n' +
        '  overflow: auto;\n' +
        '  margin: auto;\n' +
        '  padding: 100px 30px;\n' +
        '  ...\n' +
        '}\n' +
        '```\n' +
        '\n' +
        '### 렌더링 된 화면\n' +
        '\n' +
        '{% raw %}\n' +
        '<figure class="figure">\n' +
        '  <img\n' +
        '    src="/upload/2020/fails-padding-bottom-in-flexbox.jpg"\n' +
        '    alt="" >\n' +
        '  <figcaption class="figure__caption">\n' +
        '    상단에는 padding이 적용되어 있지만, 하단에는 padding이 적용되지 않은 것 처럼 보여진다.\n' +
        '  </figcaption>\n' +
        '</figure>\n' +
        '{% endraw %}\n' +
        '\n' +
        '## Fix it\n' +
        '\n' +
        '찾아보니 FireFox와 Safari에서 발생되는 버그로 알려져 있더라.\n' +
        '나는 Mac이 없는 관계로... Safari에서는 테스트를 해보지 못했지만, 같은 문제가 발생되더라도\n' +
        '동일한 방법으로 충분히 해결 될 거라고 생각한다.\n' +
        '\n' +
        '사실 이게 해결(?)이라기 보다는 trick에 가깝다고 봐야 할 것 같고, 아마도 특정 상황에서는\n' +
        '사용하지 못하는 방법일 수도 있다. (왜 그런지는 코드를 보면 알 거다)\n' +
        '\n' +
        '키는 <code class="language-css">::before</code>,\n' +
        '<code class="language-css">::after</code> 가상 선택자에 있다.\n' +
        '단지 아래와 같은 코드를 바꾸어주었을 뿐이다.\n' +
        '\n' +
        '```scss\n' +
        '.frm {\n' +
        '  box-sizing: border-box;\n' +
        '  display: flex;\n' +
        '  flex-flow: column;\n' +
        '  justify-content: flex-start;\n' +
        '  align-items: flex-start;\n' +
        '  overflow: auto;\n' +
        '  margin: auto;\n' +
        '  padding: 0 30px;\n' +
        '  ...\n' +
        '\n' +
        '  &::before,\n' +
        '  &::after {\n' +
        '    flex: 0 0 100px;\n' +
        '    width: 100%;\n' +
        '    content: "";\n' +
        '  }\n' +
        '}\n' +
        '```\n' +
        '\n' +
        'padding-top/bottom 에 해당하는 값을 가상선택자의 flex로 이동시켜주는 방식으로 요소 상/하\n' +
        '단에 그 만큼의 여백에 해당하는 빈 요소를 집어 넣은...\n' +
        '\n' +
        '참고로 `width: 100%`를 넣은 건, width값이 0이면\n' +
        '렌더링 되지 않아서다;; <s>나한테 왜이래 Firefox...</s>\n' +
        '\n' +
        '<code class="language-css">::before</code>,\n' +
        '<code class="language-css">::after</code>를 사용했기 때문에, 이미 이를 다른 스타일링을\n' +
        '위해 사용하고 있다면 다소 이 방법을 사용하기는 어렵겠다.\n' +
        '\n' +
        '그저 Firefox와 Safari가 이 버그를 수정해주길 기다릴 뿐...\n',
      slug: 'fix-padding-bottom-bug-in-flex-on-firefox',
      published: true,
      comments: true,
      layout: 'post',
      photos: [],
      link: '',
      _id: 'clcytfa4q00a0tawwhxw3h4d6',
      content: '<p>FlexBox를 사용 하는 중 padding-bottom이 실종되는 상황을 만나게 되었다.</p>\n' +
        '<p>정확하게는 Firefox에서 column flexbox에 발생 된 문제로\n' +
        '<code class="language-css">overflow: auto</code>에 의해 스크롤이 발생되었을 때\n' +
        '하단에 적용해 둔 padding이 실종되는 상황이다.</p>\n' +
        '<p>물론, Chrome은 렌더링이 잘 된다... <s>힘내요 FireFox</s></p>\n' +
        '<h2 id="발견된-상황"><a href="#발견된-상황" class="headerlink" title="발견된 상황"></a>발견된 상황</h2><h3 id="적용된-코드"><a href="#적용된-코드" class="headerlink" title="적용된 코드"></a>적용된 코드</h3><p>해당 문제와 관련 없는 코드는 삭제해 두었고, padding-top&#x2F;bottom에 해당 하는 값은\n' +
        '식별이 쉽도록 일부러 100px을 넣어두었다.</p>\n' +
        '<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.frm</span> <span class="token punctuation">&#123;</span>\n' +
        '  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>\n' +
        '  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n' +
        '  <span class="token property">flex-flow</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>\n' +
        '  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>\n' +
        '  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>\n' +
        '  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n' +
        '  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n' +
        '  <span class="token property">padding</span><span class="token punctuation">:</span> 100px 30px<span class="token punctuation">;</span>\n' +
        '  ...\n' +
        '<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
        '\n' +
        '<h3 id="렌더링-된-화면"><a href="#렌더링-된-화면" class="headerlink" title="렌더링 된 화면"></a>렌더링 된 화면</h3>\n' +
        '<figure class="figure">\n' +
        '  <img\n' +
        '    src="/upload/2020/fails-padding-bottom-in-flexbox.jpg"\n' +
        '    alt="" >\n' +
        '  <figcaption class="figure__caption">\n' +
        '    상단에는 padding이 적용되어 있지만, 하단에는 padding이 적용되지 않은 것 처럼 보여진다.\n' +
        '  </figcaption>\n' +
        '</figure>\n' +
        '\n' +
        '\n' +
        '<h2 id="Fix-it"><a href="#Fix-it" class="headerlink" title="Fix it"></a>Fix it</h2><p>찾아보니 FireFox와 Safari에서 발생되는 버그로 알려져 있더라.\n' +
        '나는 Mac이 없는 관계로... Safari에서는 테스트를 해보지 못했지만, 같은 문제가 발생되더라도\n' +
        '동일한 방법으로 충분히 해결 될 거라고 생각한다.</p>\n' +
        '<p>사실 이게 해결(?)이라기 보다는 trick에 가깝다고 봐야 할 것 같고, 아마도 특정 상황에서는\n' +
        '사용하지 못하는 방법일 수도 있다. (왜 그런지는 코드를 보면 알 거다)</p>\n' +
        '<p>키는 <code class="language-css">::before</code>,\n' +
        '<code class="language-css">::after</code> 가상 선택자에 있다.\n' +
        '단지 아래와 같은 코드를 바꾸어주었을 뿐이다.</p>\n' +
        '<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.frm </span><span class="token punctuation">&#123;</span>\n' +
        '  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>\n' +
        '  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n' +
        '  <span class="token property">flex-flow</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>\n' +
        '  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>\n' +
        '  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>\n' +
        '  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n' +
        '  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n' +
        '  <span class="token property">padding</span><span class="token punctuation">:</span> 0 30px<span class="token punctuation">;</span>\n' +
        '  <span class="token selector">...\n' +
        '\n' +
        '  <span class="token parent important">&amp;</span>::before,\n' +
        '  <span class="token parent important">&amp;</span>::after </span><span class="token punctuation">&#123;</span>\n' +
        '    <span class="token property">flex</span><span class="token punctuation">:</span> 0 0 100px<span class="token punctuation">;</span>\n' +
        '    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n' +
        '    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>\n' +
        '  <span class="token punctuation">&#125;</span>\n' +
        '<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
        '\n' +
        '<p>padding-top&#x2F;bottom 에 해당하는 값을 가상선택자의 flex로 이동시켜주는 방식으로 요소 상&#x2F;하\n' +
        '단에 그 만큼의 여백에 해당하는 빈 요소를 집어 넣은...</p>\n' +
        '<p>참고로 <code>width: 100%</code>를 넣은 건, width값이 0이면\n' +
        '렌더링 되지 않아서다;; <s>나한테 왜이래 Firefox...</s></p>\n' +
        '<p><code class="language-css">::before</code>,\n' +
        '<code class="language-css">::after</code>를 사용했기 때문에, 이미 이를 다른 스타일링을\n' +
        '위해 사용하고 있다면 다소 이 방법을 사용하기는 어렵겠다.</p>\n' +
        '<p>그저 Firefox와 Safari가 이 버그를 수정해주길 기다릴 뿐...</p>\n',
      site: [Object],
      excerpt: '',
      more: '<p>FlexBox를 사용 하는 중 padding-bottom이 실종되는 상황을 만나게 되었다.</p>\n' +
        '<p>정확하게는 Firefox에서 column flexbox에 발생 된 문제로\n' +
        '<code class="language-css">overflow: auto</code>에 의해 스크롤이 발생되었을 때\n' +
        '하단에 적용해 둔 padding이 실종되는 상황이다.</p>\n' +
        '<p>물론, Chrome은 렌더링이 잘 된다... <s>힘내요 FireFox</s></p>\n' +
        '<h2 id="발견된-상황"><a href="#발견된-상황" class="headerlink" title="발견된 상황"></a>발견된 상황</h2><h3 id="적용된-코드"><a href="#적용된-코드" class="headerlink" title="적용된 코드"></a>적용된 코드</h3><p>해당 문제와 관련 없는 코드는 삭제해 두었고, padding-top&#x2F;bottom에 해당 하는 값은\n' +
        '식별이 쉽도록 일부러 100px을 넣어두었다.</p>\n' +
        '<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.frm</span> <span class="token punctuation">&#123;</span>\n' +
        '  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>\n' +
        '  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n' +
        '  <span class="token property">flex-flow</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>\n' +
        '  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>\n' +
        '  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>\n' +
        '  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n' +
        '  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n' +
        '  <span class="token property">padding</span><span class="token punctuation">:</span> 100px 30px<span class="token punctuation">;</span>\n' +
        '  ...\n' +
        '<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
        '\n' +
        '<h3 id="렌더링-된-화면"><a href="#렌더링-된-화면" class="headerlink" title="렌더링 된 화면"></a>렌더링 된 화면</h3>\n' +
        '<figure class="figure">\n' +
        '  <img\n' +
        '    src="/upload/2020/fails-padding-bottom-in-flexbox.jpg"\n' +
        '    alt="" >\n' +
        '  <figcaption class="figure__caption">\n' +
        '    상단에는 padding이 적용되어 있지만, 하단에는 padding이 적용되지 않은 것 처럼 보여진다.\n' +
        '  </figcaption>\n' +
        '</figure>\n' +
        '\n' +
        '\n' +
        '<h2 id="Fix-it"><a href="#Fix-it" class="headerlink" title="Fix it"></a>Fix it</h2><p>찾아보니 FireFox와 Safari에서 발생되는 버그로 알려져 있더라.\n' +
        '나는 Mac이 없는 관계로... Safari에서는 테스트를 해보지 못했지만, 같은 문제가 발생되더라도\n' +
        '동일한 방법으로 충분히 해결 될 거라고 생각한다.</p>\n' +
        '<p>사실 이게 해결(?)이라기 보다는 trick에 가깝다고 봐야 할 것 같고, 아마도 특정 상황에서는\n' +
        '사용하지 못하는 방법일 수도 있다. (왜 그런지는 코드를 보면 알 거다)</p>\n' +
        '<p>키는 <code class="language-css">::before</code>,\n' +
        '<code class="language-css">::after</code> 가상 선택자에 있다.\n' +
        '단지 아래와 같은 코드를 바꾸어주었을 뿐이다.</p>\n' +
        '<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.frm </span><span class="token punctuation">&#123;</span>\n' +
        '  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>\n' +
        '  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n' +
        '  <span class="token property">flex-flow</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>\n' +
        '  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>\n' +
        '  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>\n' +
        '  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n' +
        '  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n' +
        '  <span class="token property">padding</span><span class="token punctuation">:</span> 0 30px<span class="token punctuation">;</span>\n' +
        '  <span class="token selector">...\n' +
        '\n' +
        '  <span class="token parent important">&amp;</span>::before,\n' +
        '  <span class="token parent important">&amp;</span>::after </span><span class="token punctuation">&#123;</span>\n' +
        '    <span class="token property">flex</span><span class="token punctuation">:</span> 0 0 100px<span class="token punctuation">;</span>\n' +
        '    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n' +
        '    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>\n' +
        '  <span class="token punctuation">&#125;</span>\n' +
        '<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
        '\n' +
        '<p>padding-top&#x2F;bottom 에 해당하는 값을 가상선택자의 flex로 이동시켜주는 방식으로 요소 상&#x2F;하\n' +
        '단에 그 만큼의 여백에 해당하는 빈 요소를 집어 넣은...</p>\n' +
        '<p>참고로 <code>width: 100%</code>를 넣은 건, width값이 0이면\n' +
        '렌더링 되지 않아서다;; <s>나한테 왜이래 Firefox...</s></p>\n' +
        '<p><code class="language-css">::before</code>,\n' +
        '<code class="language-css">::after</code>를 사용했기 때문에, 이미 이를 다른 스타일링을\n' +
        '위해 사용하고 있다면 다소 이 방법을 사용하기는 어렵겠다.</p>\n' +
        '<p>그저 Firefox와 Safari가 이 버그를 수정해주길 기다릴 뿐...</p>\n',
      path: [Getter],
      permalink: [Getter],
      full_source: [Getter],
      asset_dir: [Getter],
      tags: [Getter],
      categories: [Getter],
      prev: [Circular *3],
      next: [_Document],
      __post: true
    },
    __post: true
  },
  __post: true
}
<ref *2> _Document {
  title: '2020년 회고',
  thumbnail: '/upload/2020/thumbs/loading-bar-2021.jpg',
  hero: '/upload/2020/loading-bar-2021.jpg',
  seo: {
    description: '이런 저런 생각이 많아지는 2020년의 마지막 날이다.  아직 2021년에 어떤 계획을 가지고\n' +
      '살아갈지 혹은 살아낼지 어떤 생각도 없다. 다만 하루하루가 흘러가지 않기를 바라고, 다시\n' +
      '내년 이 맘 때 쯤 회고를 작성할 때에는 올해 참 잘 지냈다라고 작성할 수 있기를 바란다.\n'
  },
  date: Moment<2020-12-31T15:39:47+09:00>,
  style: null,
  _content: '\n' +
    '\n' +
    '올해는 아홉수를 제대로 겪은 한 해 였던 것 같다.\n' +
    '\n' +
    '## 2번의 퇴사\n' +
    '\n' +
    '아홉수를 제대로 겪게 만든 가장 큰 이벤트였다.\n' +
    '지난 2월 말 모 여행사를 퇴사했고 11월 말을 기점으로 8개월 만에 두 번째 회사를 퇴사했다.\n' +
    '\n' +
    '그리고 두 번 모두 사측의 이유로 퇴사가 진행되었고, 둘 모두 소위 거지 같은 퇴사 절차를 밟았다.\n' +
    '2월의 퇴사는 포스팅 했었으니, 차후 시간이 되면 두 번째 퇴사에 대한 이야기도 포스팅 할 예정이다.\n' +
    '\n' +
    '그렇다고 전혀 소득이 없는 것은 아니다.\n' +
    '이직에 관하여서는 잡플래닛의 평을 "관리"하여 (관리라 쓰고 직원들에게 좋은 리뷰를 쓰도록\n' +
    '요구한다고 읽음) 대외적으로 좋은 회사인 것처럼 보이도록 하는 회사가 제법 많다는걸 새삼 느끼게\n' +
    '되었다. 실제로 나 역시도 입사 후 한 달이 되기도 전에 리뷰 작성 요청을 받았지만 퇴사한\n' +
    '지금까지도 리뷰는 작성하지 않았다. 솔직한 심정으로 잡플래닛의 리뷰는 이제 좋지 않은 평가만을\n' +
    '신뢰하게 되고 좋은 평가는 신뢰하지 않게 되었다.\n' +
    '\n' +
    '업무적으로는 Vue/Nuxt로 zero-base에서 릴리즈까지 모든 과정을 한 번 겪었다는 거다.\n' +
    '또, 본격적(?)으로 아토믹 디자인과 Storybook 구축의 시도는 (그것이 잘 되었든 잘 안되었든)\n' +
    '그 과정 속에서의 고민과 문제 해결의 반복의 경험을 더 많이 늘려주었다. 아토믹 디자인과\n' +
    'Storybook을 시도해본 경험에 대해서는 차후 따로 포스팅 해 볼 예정이다.\n' +
    '\n' +
    '하지만 결과적으로 나는 다시 실업자가 되었고 다시 이직 과정 속에서 고통(?)을 겪고 있다.\n' +
    '\n' +
    '## 코로나 시국\n' +
    '\n' +
    '지난 1월에 시작된 코로나 상황이 결국 지금까지 이어지고 있다. 덕분에(?) 자연스럽게 외부 활동이\n' +
    '줄었다. 중간 중간 1:1 정도의 오프라인 모임은 이어왔었지만, 중반에 이르러서부터는 그마저도\n' +
    '하지 않고 있다. (그 좋아하는 코노를 몇 달 째 못가고 있고... 영화관을 가는 것도 포기했다... ㅠㅠ)\n' +
    '\n' +
    '점심 식사를 배달로 먹는게 익숙해져서, 배X에 천생연분 등급까지 올라가봤고...\n' +
    '182만원 정도를 배달 식비로 소비했다 ㄷㄷㄷ\n' +
    '\n' +
    '예년 같았으면 퇴사 후에 여행을 갔을 텐데, 코로나 시국 덕에 여행을 못가고 있다. 슬프다 ㅠㅠ\n' +
    '\n' +
    '## 재정\n' +
    '\n' +
    '기존에 P2P에서 전체 현금 자산의 10% 정도를 씨드머니로 해서 굴리고 있었는데, 1개 회사가\n' +
    '먹튀했고 2개 회사에서 원금 손실로 현재 기약없이 야금야금 상환중이다.\n' +
    '회고를 작성하면서 확인해보니 P2P로 얻은 수익을 반영해보면 5백만원 정도의 손실이 있는 상태다.\n' +
    '(그나마 다행인건가?) 손실률이 적게라도 빨리 상환이 이루어졌으면 좋겠다 ㅠ\n' +
    '\n' +
    '대신 풍차예·적금을 1년치 만들었고, 2년치로 확장 중에 있다. 올해 예금 금리가 너무 떨어져서\n' +
    '2금융권까지 늘렸고 2금융권으로의 예치금 비율이 더 높아졌다.\n' +
    '\n' +
    '블로그 테마에 JSON-LD 오류가 있던 걸 수정 이후 연 1회 받던 애드센스가 올해는 3번 지급받았다.\n' +
    '포스트 수가 많지도 않은데 이렇게 들어오는 걸 보니 더 많이 포스팅해야겠다는 의욕이 솟지만...\n' +
    '수익을 위한 포스팅은 하고 싶지 않다는 생각이 더 지배적이다. 애드센스는 그냥 쌈짓돈 버는 수준만\n' +
    '유지하는데 만족하고 욕심내지 않기로 했다.\n' +
    '\n' +
    '## 학습, 프로젝트, 독서\n' +
    '\n' +
    '현재 회사에 들어와서 내 철칙 중 하나를 깼었는데, 바로 야근에 대한 부분이었다.\n' +
    '\n' +
    '프로덕트를 시급하게 만들어야 하는 상황이었기 때문에 일부 번아웃을 감안하고 야근을 감당하더라도\n' +
    '진행하기로 했는데, 그 덕분에 학습하기로 했던 것이나 개인 프로젝트로 진행하기로 했던 것, 독서량을\n' +
    '늘리기로했던 것이 모두 수포로 돌아갔다.\n' +
    '\n' +
    '관련된 이야기는 차후 따로 포스팅 할 예정이지만, 무튼 시간적 여유로 작년 계획했던 것들은 대부분\n' +
    '이루어내지 못했고, 퇴사 이후에 다시 시작하고 있다. (그래서 워라밸이 중요하다고 생각한다.)\n' +
    '\n' +
    '## 블로그 운영\n' +
    '\n' +
    '매 달 포스팅을 이어가지는 못했지만,  목표치의 60% 정도는 달성했다.\n' +
    '\n' +
    '한 달에 2개 포스트를 작성하는 것은 생각보다 더 어려운 일이었다. 확실히 욕심이 앞섰던 것 같다.\n' +
    '하지만 내년에도 동일한 목표를 가져가려고 한다. 60%가 80% 까지 끌어올려지기만 해도 좋다고\n' +
    '생각하고 100%를 달성한다면 더 좋을 것이기 때문이다.\n' +
    '\n' +
    '아, 그리고 올해 Hexo가 4.x로 업데이트 되면서 3.x와의 호환성이 너무 많이 깨져서 테마를 새로\n' +
    '만들 예정이다. 아직 구체적인 부분을 잡지는 못했지만, 여전히 pug를 이용할 생각이고 이번 테마에\n' +
    '아토믹디자인 시스템과 storybook도 적용해 볼 생각이다. (뻘짓일 수도 있겠지만 시도 하는 것\n' +
    '자체가 쓸데없다고 생각하지는 않는다.)\n' +
    '\n' +
    '## 대외 활동\n' +
    '\n' +
    'AOA 활동은 여전히 지속되고 있다. ~~(빠져나올 수 없는 개미지옥)~~\n' +
    '\n' +
    '하반기에 접어들어서는 격주로 올리기로 해서 이전에 비해 여유가 생긴 편이라 다소 낮은 마감의\n' +
    '압박을 느끼며 순조롭게 번역과 영상 제작을 진행하고 있다.\n' +
    '\n' +
    'WAI-ARIA Authoring Practices 번역 덕분에 좀 더 자세히 알아가게 되는 것들이 있다. 확실히\n' +
    '공식 문서에 대한 번역은 문서를 꼼꼼하게 살펴보고 앞뒤 맥락을 살피게 되어 더 자세히 들여다보게\n' +
    '되어 깊게 알게 되는 것 같다. 내년 상반기에는 아마도 컴포넌트별 사례를 만들면서 나도 더 자세히\n' +
    '학습할 수 있게 되지 않을까 싶다.\n' +
    '\n' +
    '11월에는 생각지도 않았던 세미나 발표를 했다.\n' +
    '정보접근기술 컨퍼런스에서 WAI-ARIA 102를 주제로 발표했고, 2주라는 준비 기간에 비해서 다소\n' +
    '담백하게 잘 발표했다고 생각한다.\n' +
    '\n' +
    '하지만 여전히 접근성에 대한 인식이 더 문제라고 생각하고, 한국 사회에서는 더 강한 법으로\n' +
    '규제해야 한다고 생각한다.\n' +
    '\n' +
    '### 하코사 거리두기\n' +
    '\n' +
    '작년, 하코사를 벗어나는 것에 대해서 생각했었고 코로나 덕분이기도 하지만 어느 정도 선을 그었고\n' +
    '거리를 두어 게시판 관리 외에는 관심을 멀리했다. (물론 바쁜 상황들도 한 몫을 더했다.)\n' +
    '\n' +
    '회고를 작성하면서 잠깐 질문글 삭튀에 대한 통계를 내봤는데, 올해 1월 1일부터 29일까지\n' +
    '기준으로 1042개의 질문글이 자기에게 필요한 답변을 받고나서 글이 삭제되었고, 그렇게 해서\n' +
    '패널티를 받은 아이디가 (중복으로 패널티를 받은 것을 제외하고) 509개에 달했다.\n' +
    '\n' +
    '연간 근무일수가 250일 정도라는 것을 감안하면, 하루 새로운 2명씩은 답변을 받은 뒤 글을\n' +
    '삭제했다는 거다.\n' +
    '\n' +
    '미안한 이야기지만, 하코사는 정말 하위 역량을 가진 이들의 집단이 될 확률이 다분히 높다고\n' +
    '생각한다. 저런 곳에서 누가 지식과 경험을 공유하고 싶을까.\n' +
    '\n' +
    '## to 2021\n' +
    '\n' +
    '2021년은 내게 앞자리가 바뀌는 해다. 허허허...\n' +
    '10년전 2가 3으로 바뀔 때는 큰 감흥이 없었는데 이제 앞자리가 또 바뀐다고 생각하니 무언가\n' +
    '씁쓸하다. (내가 언제 이렇게 나이들었나 싶은... 물론 나보다 나이 많으신 분들은 코웃음 치겠지만\n' +
    'ㅎㅎㅎ)\n' +
    '하지만 내일 아침 해가 뜨면 어 아침이구나 하겠지 ㅎㅎㅎ\n' +
    '\n' +
    '이런 저런 생각이 많아지는 2020년의 마지막 날이다\n' +
    '\n' +
    '아직 2021년에 어떤 계획을 가지고 살아갈지 혹은 살아낼지 어떤 생각도 없다.\n' +
    '다만 하루하루가 흘러가지 않기를 바라고, 다시 내년 이 맘 때 쯤 회고를 작성할 때에는 올해 참\n' +
    '잘 지냈다라고 작성할 수 있기를 바란다.\n',
  source: '_posts/2020-12-31-2020-retrospective.md',
  raw: '---\n' +
    'title: 2020년 회고\n' +
    'tags:\n' +
    '  - retrospective\n' +
    '  - 2020 회고\n' +
    '  - 아홉수\n' +
    'categories:\n' +
    '  - 일상노트\n' +
    '  - miscellaneous\n' +
    'thumbnail: /upload/2020/thumbs/loading-bar-2021.jpg\n' +
    'hero: /upload/2020/loading-bar-2021.jpg\n' +
    'seo:\n' +
    '  description: |\n' +
    '    이런 저런 생각이 많아지는 2020년의 마지막 날이다.  아직 2021년에 어떤 계획을 가지고\n' +
    '    살아갈지 혹은 살아낼지 어떤 생각도 없다. 다만 하루하루가 흘러가지 않기를 바라고, 다시\n' +
    '    내년 이 맘 때 쯤 회고를 작성할 때에는 올해 참 잘 지냈다라고 작성할 수 있기를 바란다.\n' +
    'date: 2020-12-31 15:39:47\n' +
    'style:\n' +
    '---\n' +
    '\n' +
    '\n' +
    '올해는 아홉수를 제대로 겪은 한 해 였던 것 같다.\n' +
    '\n' +
    '## 2번의 퇴사\n' +
    '\n' +
    '아홉수를 제대로 겪게 만든 가장 큰 이벤트였다.\n' +
    '지난 2월 말 모 여행사를 퇴사했고 11월 말을 기점으로 8개월 만에 두 번째 회사를 퇴사했다.\n' +
    '\n' +
    '그리고 두 번 모두 사측의 이유로 퇴사가 진행되었고, 둘 모두 소위 거지 같은 퇴사 절차를 밟았다.\n' +
    '2월의 퇴사는 포스팅 했었으니, 차후 시간이 되면 두 번째 퇴사에 대한 이야기도 포스팅 할 예정이다.\n' +
    '\n' +
    '그렇다고 전혀 소득이 없는 것은 아니다.\n' +
    '이직에 관하여서는 잡플래닛의 평을 "관리"하여 (관리라 쓰고 직원들에게 좋은 리뷰를 쓰도록\n' +
    '요구한다고 읽음) 대외적으로 좋은 회사인 것처럼 보이도록 하는 회사가 제법 많다는걸 새삼 느끼게\n' +
    '되었다. 실제로 나 역시도 입사 후 한 달이 되기도 전에 리뷰 작성 요청을 받았지만 퇴사한\n' +
    '지금까지도 리뷰는 작성하지 않았다. 솔직한 심정으로 잡플래닛의 리뷰는 이제 좋지 않은 평가만을\n' +
    '신뢰하게 되고 좋은 평가는 신뢰하지 않게 되었다.\n' +
    '\n' +
    '업무적으로는 Vue/Nuxt로 zero-base에서 릴리즈까지 모든 과정을 한 번 겪었다는 거다.\n' +
    '또, 본격적(?)으로 아토믹 디자인과 Storybook 구축의 시도는 (그것이 잘 되었든 잘 안되었든)\n' +
    '그 과정 속에서의 고민과 문제 해결의 반복의 경험을 더 많이 늘려주었다. 아토믹 디자인과\n' +
    'Storybook을 시도해본 경험에 대해서는 차후 따로 포스팅 해 볼 예정이다.\n' +
    '\n' +
    '하지만 결과적으로 나는 다시 실업자가 되었고 다시 이직 과정 속에서 고통(?)을 겪고 있다.\n' +
    '\n' +
    '## 코로나 시국\n' +
    '\n' +
    '지난 1월에 시작된 코로나 상황이 결국 지금까지 이어지고 있다. 덕분에(?) 자연스럽게 외부 활동이\n' +
    '줄었다. 중간 중간 1:1 정도의 오프라인 모임은 이어왔었지만, 중반에 이르러서부터는 그마저도\n' +
    '하지 않고 있다. (그 좋아하는 코노를 몇 달 째 못가고 있고... 영화관을 가는 것도 포기했다... ㅠㅠ)\n' +
    '\n' +
    '점심 식사를 배달로 먹는게 익숙해져서, 배X에 천생연분 등급까지 올라가봤고...\n' +
    '182만원 정도를 배달 식비로 소비했다 ㄷㄷㄷ\n' +
    '\n' +
    '예년 같았으면 퇴사 후에 여행을 갔을 텐데, 코로나 시국 덕에 여행을 못가고 있다. 슬프다 ㅠㅠ\n' +
    '\n' +
    '## 재정\n' +
    '\n' +
    '기존에 P2P에서 전체 현금 자산의 10% 정도를 씨드머니로 해서 굴리고 있었는데, 1개 회사가\n' +
    '먹튀했고 2개 회사에서 원금 손실로 현재 기약없이 야금야금 상환중이다.\n' +
    '회고를 작성하면서 확인해보니 P2P로 얻은 수익을 반영해보면 5백만원 정도의 손실이 있는 상태다.\n' +
    '(그나마 다행인건가?) 손실률이 적게라도 빨리 상환이 이루어졌으면 좋겠다 ㅠ\n' +
    '\n' +
    '대신 풍차예·적금을 1년치 만들었고, 2년치로 확장 중에 있다. 올해 예금 금리가 너무 떨어져서\n' +
    '2금융권까지 늘렸고 2금융권으로의 예치금 비율이 더 높아졌다.\n' +
    '\n' +
    '블로그 테마에 JSON-LD 오류가 있던 걸 수정 이후 연 1회 받던 애드센스가 올해는 3번 지급받았다.\n' +
    '포스트 수가 많지도 않은데 이렇게 들어오는 걸 보니 더 많이 포스팅해야겠다는 의욕이 솟지만...\n' +
    '수익을 위한 포스팅은 하고 싶지 않다는 생각이 더 지배적이다. 애드센스는 그냥 쌈짓돈 버는 수준만\n' +
    '유지하는데 만족하고 욕심내지 않기로 했다.\n' +
    '\n' +
    '## 학습, 프로젝트, 독서\n' +
    '\n' +
    '현재 회사에 들어와서 내 철칙 중 하나를 깼었는데, 바로 야근에 대한 부분이었다.\n' +
    '\n' +
    '프로덕트를 시급하게 만들어야 하는 상황이었기 때문에 일부 번아웃을 감안하고 야근을 감당하더라도\n' +
    '진행하기로 했는데, 그 덕분에 학습하기로 했던 것이나 개인 프로젝트로 진행하기로 했던 것, 독서량을\n' +
    '늘리기로했던 것이 모두 수포로 돌아갔다.\n' +
    '\n' +
    '관련된 이야기는 차후 따로 포스팅 할 예정이지만, 무튼 시간적 여유로 작년 계획했던 것들은 대부분\n' +
    '이루어내지 못했고, 퇴사 이후에 다시 시작하고 있다. (그래서 워라밸이 중요하다고 생각한다.)\n' +
    '\n' +
    '## 블로그 운영\n' +
    '\n' +
    '매 달 포스팅을 이어가지는 못했지만,  목표치의 60% 정도는 달성했다.\n' +
    '\n' +
    '한 달에 2개 포스트를 작성하는 것은 생각보다 더 어려운 일이었다. 확실히 욕심이 앞섰던 것 같다.\n' +
    '하지만 내년에도 동일한 목표를 가져가려고 한다. 60%가 80% 까지 끌어올려지기만 해도 좋다고\n' +
    '생각하고 100%를 달성한다면 더 좋을 것이기 때문이다.\n' +
    '\n' +
    '아, 그리고 올해 Hexo가 4.x로 업데이트 되면서 3.x와의 호환성이 너무 많이 깨져서 테마를 새로\n' +
    '만들 예정이다. 아직 구체적인 부분을 잡지는 못했지만, 여전히 pug를 이용할 생각이고 이번 테마에\n' +
    '아토믹디자인 시스템과 storybook도 적용해 볼 생각이다. (뻘짓일 수도 있겠지만 시도 하는 것\n' +
    '자체가 쓸데없다고 생각하지는 않는다.)\n' +
    '\n' +
    '## 대외 활동\n' +
    '\n' +
    'AOA 활동은 여전히 지속되고 있다. ~~(빠져나올 수 없는 개미지옥)~~\n' +
    '\n' +
    '하반기에 접어들어서는 격주로 올리기로 해서 이전에 비해 여유가 생긴 편이라 다소 낮은 마감의\n' +
    '압박을 느끼며 순조롭게 번역과 영상 제작을 진행하고 있다.\n' +
    '\n' +
    'WAI-ARIA Authoring Practices 번역 덕분에 좀 더 자세히 알아가게 되는 것들이 있다. 확실히\n' +
    '공식 문서에 대한 번역은 문서를 꼼꼼하게 살펴보고 앞뒤 맥락을 살피게 되어 더 자세히 들여다보게\n' +
    '되어 깊게 알게 되는 것 같다. 내년 상반기에는 아마도 컴포넌트별 사례를 만들면서 나도 더 자세히\n' +
    '학습할 수 있게 되지 않을까 싶다.\n' +
    '\n' +
    '11월에는 생각지도 않았던 세미나 발표를 했다.\n' +
    '정보접근기술 컨퍼런스에서 WAI-ARIA 102를 주제로 발표했고, 2주라는 준비 기간에 비해서 다소\n' +
    '담백하게 잘 발표했다고 생각한다.\n' +
    '\n' +
    '하지만 여전히 접근성에 대한 인식이 더 문제라고 생각하고, 한국 사회에서는 더 강한 법으로\n' +
    '규제해야 한다고 생각한다.\n' +
    '\n' +
    '### 하코사 거리두기\n' +
    '\n' +
    '작년, 하코사를 벗어나는 것에 대해서 생각했었고 코로나 덕분이기도 하지만 어느 정도 선을 그었고\n' +
    '거리를 두어 게시판 관리 외에는 관심을 멀리했다. (물론 바쁜 상황들도 한 몫을 더했다.)\n' +
    '\n' +
    '회고를 작성하면서 잠깐 질문글 삭튀에 대한 통계를 내봤는데, 올해 1월 1일부터 29일까지\n' +
    '기준으로 1042개의 질문글이 자기에게 필요한 답변을 받고나서 글이 삭제되었고, 그렇게 해서\n' +
    '패널티를 받은 아이디가 (중복으로 패널티를 받은 것을 제외하고) 509개에 달했다.\n' +
    '\n' +
    '연간 근무일수가 250일 정도라는 것을 감안하면, 하루 새로운 2명씩은 답변을 받은 뒤 글을\n' +
    '삭제했다는 거다.\n' +
    '\n' +
    '미안한 이야기지만, 하코사는 정말 하위 역량을 가진 이들의 집단이 될 확률이 다분히 높다고\n' +
    '생각한다. 저런 곳에서 누가 지식과 경험을 공유하고 싶을까.\n' +
    '\n' +
    '## to 2021\n' +
    '\n' +
    '2021년은 내게 앞자리가 바뀌는 해다. 허허허...\n' +
    '10년전 2가 3으로 바뀔 때는 큰 감흥이 없었는데 이제 앞자리가 또 바뀐다고 생각하니 무언가\n' +
    '씁쓸하다. (내가 언제 이렇게 나이들었나 싶은... 물론 나보다 나이 많으신 분들은 코웃음 치겠지만\n' +
    'ㅎㅎㅎ)\n' +
    '하지만 내일 아침 해가 뜨면 어 아침이구나 하겠지 ㅎㅎㅎ\n' +
    '\n' +
    '이런 저런 생각이 많아지는 2020년의 마지막 날이다\n' +
    '\n' +
    '아직 2021년에 어떤 계획을 가지고 살아갈지 혹은 살아낼지 어떤 생각도 없다.\n' +
    '다만 하루하루가 흘러가지 않기를 바라고, 다시 내년 이 맘 때 쯤 회고를 작성할 때에는 올해 참\n' +
    '잘 지냈다라고 작성할 수 있기를 바란다.\n',
  slug: '2020-retrospective',
  published: true,
  comments: true,
  layout: 'post',
  photos: [],
  link: '',
  _id: 'clcytfa4q00a3taww5nmt96z6',
  content: '<p>올해는 아홉수를 제대로 겪은 한 해 였던 것 같다.</p>\n' +
    '<h2 id="2번의-퇴사"><a href="#2번의-퇴사" class="headerlink" title="2번의 퇴사"></a>2번의 퇴사</h2><p>아홉수를 제대로 겪게 만든 가장 큰 이벤트였다.\n' +
    '지난 2월 말 모 여행사를 퇴사했고 11월 말을 기점으로 8개월 만에 두 번째 회사를 퇴사했다.</p>\n' +
    '<p>그리고 두 번 모두 사측의 이유로 퇴사가 진행되었고, 둘 모두 소위 거지 같은 퇴사 절차를 밟았다.\n' +
    '2월의 퇴사는 포스팅 했었으니, 차후 시간이 되면 두 번째 퇴사에 대한 이야기도 포스팅 할 예정이다.</p>\n' +
    '<p>그렇다고 전혀 소득이 없는 것은 아니다.\n' +
    '이직에 관하여서는 잡플래닛의 평을 &quot;관리&quot;하여 (관리라 쓰고 직원들에게 좋은 리뷰를 쓰도록\n' +
    '요구한다고 읽음) 대외적으로 좋은 회사인 것처럼 보이도록 하는 회사가 제법 많다는걸 새삼 느끼게\n' +
    '되었다. 실제로 나 역시도 입사 후 한 달이 되기도 전에 리뷰 작성 요청을 받았지만 퇴사한\n' +
    '지금까지도 리뷰는 작성하지 않았다. 솔직한 심정으로 잡플래닛의 리뷰는 이제 좋지 않은 평가만을\n' +
    '신뢰하게 되고 좋은 평가는 신뢰하지 않게 되었다.</p>\n' +
    '<p>업무적으로는 Vue&#x2F;Nuxt로 zero-base에서 릴리즈까지 모든 과정을 한 번 겪었다는 거다.\n' +
    '또, 본격적(?)으로 아토믹 디자인과 Storybook 구축의 시도는 (그것이 잘 되었든 잘 안되었든)\n' +
    '그 과정 속에서의 고민과 문제 해결의 반복의 경험을 더 많이 늘려주었다. 아토믹 디자인과\n' +
    'Storybook을 시도해본 경험에 대해서는 차후 따로 포스팅 해 볼 예정이다.</p>\n' +
    '<p>하지만 결과적으로 나는 다시 실업자가 되었고 다시 이직 과정 속에서 고통(?)을 겪고 있다.</p>\n' +
    '<h2 id="코로나-시국"><a href="#코로나-시국" class="headerlink" title="코로나 시국"></a>코로나 시국</h2><p>지난 1월에 시작된 코로나 상황이 결국 지금까지 이어지고 있다. 덕분에(?) 자연스럽게 외부 활동이\n' +
    '줄었다. 중간 중간 1:1 정도의 오프라인 모임은 이어왔었지만, 중반에 이르러서부터는 그마저도\n' +
    '하지 않고 있다. (그 좋아하는 코노를 몇 달 째 못가고 있고... 영화관을 가는 것도 포기했다... ㅠㅠ)</p>\n' +
    '<p>점심 식사를 배달로 먹는게 익숙해져서, 배X에 천생연분 등급까지 올라가봤고...\n' +
    '182만원 정도를 배달 식비로 소비했다 ㄷㄷㄷ</p>\n' +
    '<p>예년 같았으면 퇴사 후에 여행을 갔을 텐데, 코로나 시국 덕에 여행을 못가고 있다. 슬프다 ㅠㅠ</p>\n' +
    '<h2 id="재정"><a href="#재정" class="headerlink" title="재정"></a>재정</h2><p>기존에 P2P에서 전체 현금 자산의 10% 정도를 씨드머니로 해서 굴리고 있었는데, 1개 회사가\n' +
    '먹튀했고 2개 회사에서 원금 손실로 현재 기약없이 야금야금 상환중이다.\n' +
    '회고를 작성하면서 확인해보니 P2P로 얻은 수익을 반영해보면 5백만원 정도의 손실이 있는 상태다.\n' +
    '(그나마 다행인건가?) 손실률이 적게라도 빨리 상환이 이루어졌으면 좋겠다 ㅠ</p>\n' +
    '<p>대신 풍차예·적금을 1년치 만들었고, 2년치로 확장 중에 있다. 올해 예금 금리가 너무 떨어져서\n' +
    '2금융권까지 늘렸고 2금융권으로의 예치금 비율이 더 높아졌다.</p>\n' +
    '<p>블로그 테마에 JSON-LD 오류가 있던 걸 수정 이후 연 1회 받던 애드센스가 올해는 3번 지급받았다.\n' +
    '포스트 수가 많지도 않은데 이렇게 들어오는 걸 보니 더 많이 포스팅해야겠다는 의욕이 솟지만...\n' +
    '수익을 위한 포스팅은 하고 싶지 않다는 생각이 더 지배적이다. 애드센스는 그냥 쌈짓돈 버는 수준만\n' +
    '유지하는데 만족하고 욕심내지 않기로 했다.</p>\n' +
    '<h2 id="학습-프로젝트-독서"><a href="#학습-프로젝트-독서" class="headerlink" title="학습, 프로젝트, 독서"></a>학습, 프로젝트, 독서</h2><p>현재 회사에 들어와서 내 철칙 중 하나를 깼었는데, 바로 야근에 대한 부분이었다.</p>\n' +
    '<p>프로덕트를 시급하게 만들어야 하는 상황이었기 때문에 일부 번아웃을 감안하고 야근을 감당하더라도\n' +
    '진행하기로 했는데, 그 덕분에 학습하기로 했던 것이나 개인 프로젝트로 진행하기로 했던 것, 독서량을\n' +
    '늘리기로했던 것이 모두 수포로 돌아갔다.</p>\n' +
    '<p>관련된 이야기는 차후 따로 포스팅 할 예정이지만, 무튼 시간적 여유로 작년 계획했던 것들은 대부분\n' +
    '이루어내지 못했고, 퇴사 이후에 다시 시작하고 있다. (그래서 워라밸이 중요하다고 생각한다.)</p>\n' +
    '<h2 id="블로그-운영"><a href="#블로그-운영" class="headerlink" title="블로그 운영"></a>블로그 운영</h2><p>매 달 포스팅을 이어가지는 못했지만,  목표치의 60% 정도는 달성했다.</p>\n' +
    '<p>한 달에 2개 포스트를 작성하는 것은 생각보다 더 어려운 일이었다. 확실히 욕심이 앞섰던 것 같다.\n' +
    '하지만 내년에도 동일한 목표를 가져가려고 한다. 60%가 80% 까지 끌어올려지기만 해도 좋다고\n' +
    '생각하고 100%를 달성한다면 더 좋을 것이기 때문이다.</p>\n' +
    '<p>아, 그리고 올해 Hexo가 4.x로 업데이트 되면서 3.x와의 호환성이 너무 많이 깨져서 테마를 새로\n' +
    '만들 예정이다. 아직 구체적인 부분을 잡지는 못했지만, 여전히 pug를 이용할 생각이고 이번 테마에\n' +
    '아토믹디자인 시스템과 storybook도 적용해 볼 생각이다. (뻘짓일 수도 있겠지만 시도 하는 것\n' +
    '자체가 쓸데없다고 생각하지는 않는다.)</p>\n' +
    '<h2 id="대외-활동"><a href="#대외-활동" class="headerlink" title="대외 활동"></a>대외 활동</h2><p>AOA 활동은 여전히 지속되고 있다. <del>(빠져나올 수 없는 개미지옥)</del></p>\n' +
    '<p>하반기에 접어들어서는 격주로 올리기로 해서 이전에 비해 여유가 생긴 편이라 다소 낮은 마감의\n' +
    '압박을 느끼며 순조롭게 번역과 영상 제작을 진행하고 있다.</p>\n' +
    '<p>WAI-ARIA Authoring Practices 번역 덕분에 좀 더 자세히 알아가게 되는 것들이 있다. 확실히\n' +
    '공식 문서에 대한 번역은 문서를 꼼꼼하게 살펴보고 앞뒤 맥락을 살피게 되어 더 자세히 들여다보게\n' +
    '되어 깊게 알게 되는 것 같다. 내년 상반기에는 아마도 컴포넌트별 사례를 만들면서 나도 더 자세히\n' +
    '학습할 수 있게 되지 않을까 싶다.</p>\n' +
    '<p>11월에는 생각지도 않았던 세미나 발표를 했다.\n' +
    '정보접근기술 컨퍼런스에서 WAI-ARIA 102를 주제로 발표했고, 2주라는 준비 기간에 비해서 다소\n' +
    '담백하게 잘 발표했다고 생각한다.</p>\n' +
    '<p>하지만 여전히 접근성에 대한 인식이 더 문제라고 생각하고, 한국 사회에서는 더 강한 법으로\n' +
    '규제해야 한다고 생각한다.</p>\n' +
    '<h3 id="하코사-거리두기"><a href="#하코사-거리두기" class="headerlink" title="하코사 거리두기"></a>하코사 거리두기</h3><p>작년, 하코사를 벗어나는 것에 대해서 생각했었고 코로나 덕분이기도 하지만 어느 정도 선을 그었고\n' +
    '거리를 두어 게시판 관리 외에는 관심을 멀리했다. (물론 바쁜 상황들도 한 몫을 더했다.)</p>\n' +
    '<p>회고를 작성하면서 잠깐 질문글 삭튀에 대한 통계를 내봤는데, 올해 1월 1일부터 29일까지\n' +
    '기준으로 1042개의 질문글이 자기에게 필요한 답변을 받고나서 글이 삭제되었고, 그렇게 해서\n' +
    '패널티를 받은 아이디가 (중복으로 패널티를 받은 것을 제외하고) 509개에 달했다.</p>\n' +
    '<p>연간 근무일수가 250일 정도라는 것을 감안하면, 하루 새로운 2명씩은 답변을 받은 뒤 글을\n' +
    '삭제했다는 거다.</p>\n' +
    '<p>미안한 이야기지만, 하코사는 정말 하위 역량을 가진 이들의 집단이 될 확률이 다분히 높다고\n' +
    '생각한다. 저런 곳에서 누가 지식과 경험을 공유하고 싶을까.</p>\n' +
    '<h2 id="to-2021"><a href="#to-2021" class="headerlink" title="to 2021"></a>to 2021</h2><p>2021년은 내게 앞자리가 바뀌는 해다. 허허허...\n' +
    '10년전 2가 3으로 바뀔 때는 큰 감흥이 없었는데 이제 앞자리가 또 바뀐다고 생각하니 무언가\n' +
    '씁쓸하다. (내가 언제 이렇게 나이들었나 싶은... 물론 나보다 나이 많으신 분들은 코웃음 치겠지만\n' +
    'ㅎㅎㅎ)\n' +
    '하지만 내일 아침 해가 뜨면 어 아침이구나 하겠지 ㅎㅎㅎ</p>\n' +
    '<p>이런 저런 생각이 많아지는 2020년의 마지막 날이다</p>\n' +
    '<p>아직 2021년에 어떤 계획을 가지고 살아갈지 혹은 살아낼지 어떤 생각도 없다.\n' +
    '다만 하루하루가 흘러가지 않기를 바라고, 다시 내년 이 맘 때 쯤 회고를 작성할 때에는 올해 참\n' +
    '잘 지냈다라고 작성할 수 있기를 바란다.</p>\n',
  site: { data: { 'hero.db': [Array] } },
  excerpt: '',
  more: '<p>올해는 아홉수를 제대로 겪은 한 해 였던 것 같다.</p>\n' +
    '<h2 id="2번의-퇴사"><a href="#2번의-퇴사" class="headerlink" title="2번의 퇴사"></a>2번의 퇴사</h2><p>아홉수를 제대로 겪게 만든 가장 큰 이벤트였다.\n' +
    '지난 2월 말 모 여행사를 퇴사했고 11월 말을 기점으로 8개월 만에 두 번째 회사를 퇴사했다.</p>\n' +
    '<p>그리고 두 번 모두 사측의 이유로 퇴사가 진행되었고, 둘 모두 소위 거지 같은 퇴사 절차를 밟았다.\n' +
    '2월의 퇴사는 포스팅 했었으니, 차후 시간이 되면 두 번째 퇴사에 대한 이야기도 포스팅 할 예정이다.</p>\n' +
    '<p>그렇다고 전혀 소득이 없는 것은 아니다.\n' +
    '이직에 관하여서는 잡플래닛의 평을 &quot;관리&quot;하여 (관리라 쓰고 직원들에게 좋은 리뷰를 쓰도록\n' +
    '요구한다고 읽음) 대외적으로 좋은 회사인 것처럼 보이도록 하는 회사가 제법 많다는걸 새삼 느끼게\n' +
    '되었다. 실제로 나 역시도 입사 후 한 달이 되기도 전에 리뷰 작성 요청을 받았지만 퇴사한\n' +
    '지금까지도 리뷰는 작성하지 않았다. 솔직한 심정으로 잡플래닛의 리뷰는 이제 좋지 않은 평가만을\n' +
    '신뢰하게 되고 좋은 평가는 신뢰하지 않게 되었다.</p>\n' +
    '<p>업무적으로는 Vue&#x2F;Nuxt로 zero-base에서 릴리즈까지 모든 과정을 한 번 겪었다는 거다.\n' +
    '또, 본격적(?)으로 아토믹 디자인과 Storybook 구축의 시도는 (그것이 잘 되었든 잘 안되었든)\n' +
    '그 과정 속에서의 고민과 문제 해결의 반복의 경험을 더 많이 늘려주었다. 아토믹 디자인과\n' +
    'Storybook을 시도해본 경험에 대해서는 차후 따로 포스팅 해 볼 예정이다.</p>\n' +
    '<p>하지만 결과적으로 나는 다시 실업자가 되었고 다시 이직 과정 속에서 고통(?)을 겪고 있다.</p>\n' +
    '<h2 id="코로나-시국"><a href="#코로나-시국" class="headerlink" title="코로나 시국"></a>코로나 시국</h2><p>지난 1월에 시작된 코로나 상황이 결국 지금까지 이어지고 있다. 덕분에(?) 자연스럽게 외부 활동이\n' +
    '줄었다. 중간 중간 1:1 정도의 오프라인 모임은 이어왔었지만, 중반에 이르러서부터는 그마저도\n' +
    '하지 않고 있다. (그 좋아하는 코노를 몇 달 째 못가고 있고... 영화관을 가는 것도 포기했다... ㅠㅠ)</p>\n' +
    '<p>점심 식사를 배달로 먹는게 익숙해져서, 배X에 천생연분 등급까지 올라가봤고...\n' +
    '182만원 정도를 배달 식비로 소비했다 ㄷㄷㄷ</p>\n' +
    '<p>예년 같았으면 퇴사 후에 여행을 갔을 텐데, 코로나 시국 덕에 여행을 못가고 있다. 슬프다 ㅠㅠ</p>\n' +
    '<h2 id="재정"><a href="#재정" class="headerlink" title="재정"></a>재정</h2><p>기존에 P2P에서 전체 현금 자산의 10% 정도를 씨드머니로 해서 굴리고 있었는데, 1개 회사가\n' +
    '먹튀했고 2개 회사에서 원금 손실로 현재 기약없이 야금야금 상환중이다.\n' +
    '회고를 작성하면서 확인해보니 P2P로 얻은 수익을 반영해보면 5백만원 정도의 손실이 있는 상태다.\n' +
    '(그나마 다행인건가?) 손실률이 적게라도 빨리 상환이 이루어졌으면 좋겠다 ㅠ</p>\n' +
    '<p>대신 풍차예·적금을 1년치 만들었고, 2년치로 확장 중에 있다. 올해 예금 금리가 너무 떨어져서\n' +
    '2금융권까지 늘렸고 2금융권으로의 예치금 비율이 더 높아졌다.</p>\n' +
    '<p>블로그 테마에 JSON-LD 오류가 있던 걸 수정 이후 연 1회 받던 애드센스가 올해는 3번 지급받았다.\n' +
    '포스트 수가 많지도 않은데 이렇게 들어오는 걸 보니 더 많이 포스팅해야겠다는 의욕이 솟지만...\n' +
    '수익을 위한 포스팅은 하고 싶지 않다는 생각이 더 지배적이다. 애드센스는 그냥 쌈짓돈 버는 수준만\n' +
    '유지하는데 만족하고 욕심내지 않기로 했다.</p>\n' +
    '<h2 id="학습-프로젝트-독서"><a href="#학습-프로젝트-독서" class="headerlink" title="학습, 프로젝트, 독서"></a>학습, 프로젝트, 독서</h2><p>현재 회사에 들어와서 내 철칙 중 하나를 깼었는데, 바로 야근에 대한 부분이었다.</p>\n' +
    '<p>프로덕트를 시급하게 만들어야 하는 상황이었기 때문에 일부 번아웃을 감안하고 야근을 감당하더라도\n' +
    '진행하기로 했는데, 그 덕분에 학습하기로 했던 것이나 개인 프로젝트로 진행하기로 했던 것, 독서량을\n' +
    '늘리기로했던 것이 모두 수포로 돌아갔다.</p>\n' +
    '<p>관련된 이야기는 차후 따로 포스팅 할 예정이지만, 무튼 시간적 여유로 작년 계획했던 것들은 대부분\n' +
    '이루어내지 못했고, 퇴사 이후에 다시 시작하고 있다. (그래서 워라밸이 중요하다고 생각한다.)</p>\n' +
    '<h2 id="블로그-운영"><a href="#블로그-운영" class="headerlink" title="블로그 운영"></a>블로그 운영</h2><p>매 달 포스팅을 이어가지는 못했지만,  목표치의 60% 정도는 달성했다.</p>\n' +
    '<p>한 달에 2개 포스트를 작성하는 것은 생각보다 더 어려운 일이었다. 확실히 욕심이 앞섰던 것 같다.\n' +
    '하지만 내년에도 동일한 목표를 가져가려고 한다. 60%가 80% 까지 끌어올려지기만 해도 좋다고\n' +
    '생각하고 100%를 달성한다면 더 좋을 것이기 때문이다.</p>\n' +
    '<p>아, 그리고 올해 Hexo가 4.x로 업데이트 되면서 3.x와의 호환성이 너무 많이 깨져서 테마를 새로\n' +
    '만들 예정이다. 아직 구체적인 부분을 잡지는 못했지만, 여전히 pug를 이용할 생각이고 이번 테마에\n' +
    '아토믹디자인 시스템과 storybook도 적용해 볼 생각이다. (뻘짓일 수도 있겠지만 시도 하는 것\n' +
    '자체가 쓸데없다고 생각하지는 않는다.)</p>\n' +
    '<h2 id="대외-활동"><a href="#대외-활동" class="headerlink" title="대외 활동"></a>대외 활동</h2><p>AOA 활동은 여전히 지속되고 있다. <del>(빠져나올 수 없는 개미지옥)</del></p>\n' +
    '<p>하반기에 접어들어서는 격주로 올리기로 해서 이전에 비해 여유가 생긴 편이라 다소 낮은 마감의\n' +
    '압박을 느끼며 순조롭게 번역과 영상 제작을 진행하고 있다.</p>\n' +
    '<p>WAI-ARIA Authoring Practices 번역 덕분에 좀 더 자세히 알아가게 되는 것들이 있다. 확실히\n' +
    '공식 문서에 대한 번역은 문서를 꼼꼼하게 살펴보고 앞뒤 맥락을 살피게 되어 더 자세히 들여다보게\n' +
    '되어 깊게 알게 되는 것 같다. 내년 상반기에는 아마도 컴포넌트별 사례를 만들면서 나도 더 자세히\n' +
    '학습할 수 있게 되지 않을까 싶다.</p>\n' +
    '<p>11월에는 생각지도 않았던 세미나 발표를 했다.\n' +
    '정보접근기술 컨퍼런스에서 WAI-ARIA 102를 주제로 발표했고, 2주라는 준비 기간에 비해서 다소\n' +
    '담백하게 잘 발표했다고 생각한다.</p>\n' +
    '<p>하지만 여전히 접근성에 대한 인식이 더 문제라고 생각하고, 한국 사회에서는 더 강한 법으로\n' +
    '규제해야 한다고 생각한다.</p>\n' +
    '<h3 id="하코사-거리두기"><a href="#하코사-거리두기" class="headerlink" title="하코사 거리두기"></a>하코사 거리두기</h3><p>작년, 하코사를 벗어나는 것에 대해서 생각했었고 코로나 덕분이기도 하지만 어느 정도 선을 그었고\n' +
    '거리를 두어 게시판 관리 외에는 관심을 멀리했다. (물론 바쁜 상황들도 한 몫을 더했다.)</p>\n' +
    '<p>회고를 작성하면서 잠깐 질문글 삭튀에 대한 통계를 내봤는데, 올해 1월 1일부터 29일까지\n' +
    '기준으로 1042개의 질문글이 자기에게 필요한 답변을 받고나서 글이 삭제되었고, 그렇게 해서\n' +
    '패널티를 받은 아이디가 (중복으로 패널티를 받은 것을 제외하고) 509개에 달했다.</p>\n' +
    '<p>연간 근무일수가 250일 정도라는 것을 감안하면, 하루 새로운 2명씩은 답변을 받은 뒤 글을\n' +
    '삭제했다는 거다.</p>\n' +
    '<p>미안한 이야기지만, 하코사는 정말 하위 역량을 가진 이들의 집단이 될 확률이 다분히 높다고\n' +
    '생각한다. 저런 곳에서 누가 지식과 경험을 공유하고 싶을까.</p>\n' +
    '<h2 id="to-2021"><a href="#to-2021" class="headerlink" title="to 2021"></a>to 2021</h2><p>2021년은 내게 앞자리가 바뀌는 해다. 허허허...\n' +
    '10년전 2가 3으로 바뀔 때는 큰 감흥이 없었는데 이제 앞자리가 또 바뀐다고 생각하니 무언가\n' +
    '씁쓸하다. (내가 언제 이렇게 나이들었나 싶은... 물론 나보다 나이 많으신 분들은 코웃음 치겠지만\n' +
    'ㅎㅎㅎ)\n' +
    '하지만 내일 아침 해가 뜨면 어 아침이구나 하겠지 ㅎㅎㅎ</p>\n' +
    '<p>이런 저런 생각이 많아지는 2020년의 마지막 날이다</p>\n' +
    '<p>아직 2021년에 어떤 계획을 가지고 살아갈지 혹은 살아낼지 어떤 생각도 없다.\n' +
    '다만 하루하루가 흘러가지 않기를 바라고, 다시 내년 이 맘 때 쯤 회고를 작성할 때에는 올해 참\n' +
    '잘 지냈다라고 작성할 수 있기를 바란다.</p>\n',
  path: [Getter],
  permalink: [Getter],
  full_source: [Getter],
  asset_dir: [Getter],
  tags: [Getter],
  categories: [Getter],
  prev: <ref *1> _Document {
    title: 'pass function as props in vue',
    seo: {
      image: '/upload/2021/props-function-vue.jpg',
      description: 'props로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
        '핸들러를 실행시키기만 하면 어떨까 하는 생각에 prop로 함수를 내려주는 방식을 생각해보게 됐다.\n'
    },
    hero: '/upload/2021/props-function-vue.jpg',
    thumbnail: '/upload/2021/thumbs/props-function-vue.jpg',
    date: Moment<2021-01-24T11:16:03+09:00>,
    style: null,
    _content: '\n' +
      '## Event handling and Atomic Design System\n' +
      '\n' +
      'Atomic Design System을 컴포넌트 설계 방법론으로 가져가면서, 각 컴포넌트에 독립적으로\n' +
      '고립(?)된 데이터 구조를 만들게 되면서 (이게 맞는 방식인지는 잘 모르겠지만) 불편함이 점점\n' +
      '발생되었던 것 중 하나가 유저 인터랙션에 의해 발생되는 데이터 변경을 위해 쌓여진 컴포넌트\n' +
      '구조를 따라 계속 이벤트를 전달하고 이벤트 리스너를 통해 처리하는 방식이었다.\n' +
      '\n' +
      '예를 들자면\n' +
      '\n' +
      '![유저 인터랙션으로 하위 컴포넌트로부터 상위 컴포넌트로의 이벤트 발생 과정](/upload/2021/event-flow-from-atom-to-page.svg)\n' +
      '\n' +
      '이런 흐름 말이다.\n' +
      '\n' +
      'Vue 공식 문서도 그렇고, 지금까지 보아온 대다수의 강의에서도 유저 인터랙션에 대한 데이터를\n' +
      '처리할 때 해당 데이터가 상위 컴포넌트에 존재할 경우, `$emit`을 이용하여 payload와 함께\n' +
      '하위 컴포넌트로부터 상위 컴포넌트로 차례로 올리고, 상위 컴포넌트에서 `v-on`으로 처리하는\n' +
      '방식을 사용하도록 안내하는 듯 하다.\n' +
      '\n' +
      'Atomic Design Sytem을 적용하기 전에는 이러한 고민이 없었는데, 적용 이후로는 atom으로부터\n' +
      '실제 데이터가 바인딩 되는 page까지 5개 단계(?)를 거치게 되니 하위 컴포넌트에서 발생한\n' +
      '이벤트와 데이터를 다시 상위 컴포넌트로 by-pass 하기 위한 이벤트 처리가 뭐랄까... 조금\n' +
      '거슬린다고 할까?\n' +
      '심지어 Vue 개발자 도구로 데이터 흐름을 확인하려고 하면 한 번의 인터랙션에 여러 개의 emit이\n' +
      '로그로 출력되니 정신이 사납기까지 한 느낌이다 = _=a\n' +
      '\n' +
      '그래서 `props`로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
      '핸들러를 실행시키기만 하면 어떨까 하는 생각에 `prop`로 함수를 내려주는 방식을 생각해보게 됐다.\n' +
      '\n' +
      '## Is it an anti-pattern?\n' +
      '\n' +
      '일단 생각을 해 봤으니 이게 가한 것은 맞는지 확인 해 볼 필요가 있었다. (처음 생각해 본\n' +
      '방법이고 Vue 관련 문서나 강의에서도 한 번도 이런 케이스를 본 적이 없으니까..)\n' +
      '\n' +
      '구글링 결과 공교롭게도(?) 가장 먼저 눈에 띈 내용은 이 방식이 안티 패턴이라는 내용이었다.\n' +
      '(혹 관련 내용이 궁금하다면 [How to Pass a Function as a Prop in Vue]([https://michaelnthiessen.com/pass-function-as-prop/](https://michaelnthiessen.com/pass-function-as-prop/))를\n' +
      '읽어보시길... 아, 중간에 구독하라고 전체 팝업창이 뜨기는 하는데 개발자라면 뭐... 다 쉽게\n' +
      '걷어내... 쿨럭... )\n' +
      '\n' +
      '하지만 왜 인지 모르겠으나... 해당 글에서는 안티 패턴임을 설명하는데 하위 컴포넌트의 mounted\n' +
      '훅에서 props로 받은 함수를 실행하는 코드를 보여주고 있었다.\n' +
      '무튼 그러면서 잘못된 것은 아니지만, Vue의 컨셉에 맞게 이벤트를 활용하거나 슬롯을 사용하라는\n' +
      '결론을 내주는게 영...\n' +
      '\n' +
      '또 다른 아티클 들에서는 단순하게 props로 함수를 내리는게 가능하다 라는 짤막한 소개 정도가\n' +
      '있었다.\n' +
      '\n' +
      '하여 안티 패턴이라 소개하는 글을 잠시 무시하기로 하고(?) props로 함수를 내리는 방식을\n' +
      '사용해봤다.\n' +
      '아, 안티 패턴이라 소개하는 글을 무시하기로 한 것은 안티 패턴을 굳이 사용하겠다는 것이 아니라,\n' +
      '안티 패턴인 이유에 대한 명확한 근거를 찾을 수 없어서다. 차후에라도 이것이 안티 패턴이라는\n' +
      '명확한 근거를 찾게 된다면 당연히 과감히 버릴거다.\n' +
      '\n' +
      '## Try it\n' +
      '\n' +
      '```jsx\n' +
      '<template>\n' +
      '  <SignUpTemplate :handle-sign-up="signUp" />\n' +
      '</template>\n' +
      '<script>\n' +
      'export default {\n' +
      '  ...\n' +
      '  methods: {\n' +
      '    ...\n' +
      '    signUp({ email, password }) {\n' +
      '      users\n' +
      '        .postSignUp({ email, password })\n' +
      '        .then(...)\n' +
      '        .catch(...)\n' +
      '    }\n' +
      '  }\n' +
      '};\n' +
      '</script>\n' +
      '```\n' +
      '\n' +
      'Page에서 이렇게 `signUp` 함수를 props로 내려주고\n' +
      '\n' +
      '```jsx\n' +
      '<template>\n' +
      '  ...\n' +
      '  <SignUpForm :handle-submit="handleSignUp" />\n' +
      '  ...\n' +
      '</template>\n' +
      '\n' +
      '<script>\n' +
      'export default {\n' +
      '  ...\n' +
      '  props: {\n' +
      '    ...\n' +
      '    handleSignUp: {\n' +
      '      type: Function,\n' +
      '      required: true,\n' +
      '      default: () => {}\n' +
      '    }\n' +
      '  },\n' +
      '  ...\n' +
      '};\n' +
      '</script>\n' +
      '```\n' +
      '\n' +
      '템플릿에서 props로 받은 함수를 다시 하위 컴포넌트로 내려주고,\n' +
      '\n' +
      '```jsx\n' +
      '<template>\n' +
      '  <form-container>\n' +
      '    ...\n' +
      '    <DefaultButton\n' +
      '      @click.native.prevent="handleClickSubmit"\n' +
      '    />\n' +
      '    ...\n' +
      '  </form-container>\n' +
      '</template>\n' +
      '\n' +
      '<script>\n' +
      'import DefaultButton from "@atoms/Button/Default";\n' +
      'export default {\n' +
      '  components: {\n' +
      '  props: {\n' +
      '    handleSubmit: {\n' +
      '      type: Function,\n' +
      '      required: true,\n' +
      '      default: () => {}\n' +
      '    }\n' +
      '  },\n' +
      '  methods: {\n' +
      '    handleClickSubmit() {\n' +
      '      const { handleSubmit, email, password, passwordConfirm } = this;\n' +
      '      ...\n' +
      '      handleSubmit && handleSubmit({ email, password });\n' +
      '    }\n' +
      '  }\n' +
      '};\n' +
      '</script>\n' +
      '```\n' +
      '\n' +
      '유저 인터랙션이 발생하는 하위 컴포넌트에서 해당 함수를 전달받아 실행하게 했다.\n' +
      '적용 결과는 당연히(?) 원하는 동작을 올바르게 수행해주었다.\n' +
      '\n' +
      '이것보다는 modal  창을 포함하는 organism 컴포넌트에서 modal 창에 대한 제어와 modal 내부에\n' +
      'slot으로 끼워진 컴포넌트에 적용되는 부분이 이 방식을 더 잘 설명할 수 있을 것 같지만 너무\n' +
      '많은 코드가 삽입 되어야 해서 포스팅에는 간단한 위 코드로 적었다.\n' +
      '\n' +
      '사실 event emit 방식으로도 충분히 대체도 가능하고 그것이 난이도나 복잡도가 더 높지는 않은\n' +
      '것 같기는 하다. 하지만, 뭐랄까 이 방식이 좀 더 dry한 느낌이 든달까? (기분탓이려나?)\n' +
      '\n' +
      '무엇보다 개발자 도구에 여러 번에 걸친 이벤트 발생 로그를 보지 않아도 되니 한결 눈이 가벼워졌다.',
    source: '_posts/2021-01-25-pass-function-as-props-in-vue.md',
    raw: '---\n' +
      'title: pass function as props in vue\n' +
      'tags:\n' +
      '  - vue\n' +
      '  - props\n' +
      '  - pass function\n' +
      'categories:\n' +
      '  - 개발노트\n' +
      '  - Front-End\n' +
      'seo:\n' +
      '  image: /upload/2021/props-function-vue.jpg\n' +
      '  description: |\n' +
      '    props로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
      '    핸들러를 실행시키기만 하면 어떨까 하는 생각에 prop로 함수를 내려주는 방식을 생각해보게 됐다.\n' +
      'hero: /upload/2021/props-function-vue.jpg\n' +
      'thumbnail: /upload/2021/thumbs/props-function-vue.jpg\n' +
      'date: 2021-01-24 11:16:03\n' +
      'style:\n' +
      '---\n' +
      '\n' +
      '## Event handling and Atomic Design System\n' +
      '\n' +
      'Atomic Design System을 컴포넌트 설계 방법론으로 가져가면서, 각 컴포넌트에 독립적으로\n' +
      '고립(?)된 데이터 구조를 만들게 되면서 (이게 맞는 방식인지는 잘 모르겠지만) 불편함이 점점\n' +
      '발생되었던 것 중 하나가 유저 인터랙션에 의해 발생되는 데이터 변경을 위해 쌓여진 컴포넌트\n' +
      '구조를 따라 계속 이벤트를 전달하고 이벤트 리스너를 통해 처리하는 방식이었다.\n' +
      '\n' +
      '예를 들자면\n' +
      '\n' +
      '![유저 인터랙션으로 하위 컴포넌트로부터 상위 컴포넌트로의 이벤트 발생 과정](/upload/2021/event-flow-from-atom-to-page.svg)\n' +
      '\n' +
      '이런 흐름 말이다.\n' +
      '\n' +
      'Vue 공식 문서도 그렇고, 지금까지 보아온 대다수의 강의에서도 유저 인터랙션에 대한 데이터를\n' +
      '처리할 때 해당 데이터가 상위 컴포넌트에 존재할 경우, `$emit`을 이용하여 payload와 함께\n' +
      '하위 컴포넌트로부터 상위 컴포넌트로 차례로 올리고, 상위 컴포넌트에서 `v-on`으로 처리하는\n' +
      '방식을 사용하도록 안내하는 듯 하다.\n' +
      '\n' +
      'Atomic Design Sytem을 적용하기 전에는 이러한 고민이 없었는데, 적용 이후로는 atom으로부터\n' +
      '실제 데이터가 바인딩 되는 page까지 5개 단계(?)를 거치게 되니 하위 컴포넌트에서 발생한\n' +
      '이벤트와 데이터를 다시 상위 컴포넌트로 by-pass 하기 위한 이벤트 처리가 뭐랄까... 조금\n' +
      '거슬린다고 할까?\n' +
      '심지어 Vue 개발자 도구로 데이터 흐름을 확인하려고 하면 한 번의 인터랙션에 여러 개의 emit이\n' +
      '로그로 출력되니 정신이 사납기까지 한 느낌이다 = _=a\n' +
      '\n' +
      '그래서 `props`로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
      '핸들러를 실행시키기만 하면 어떨까 하는 생각에 `prop`로 함수를 내려주는 방식을 생각해보게 됐다.\n' +
      '\n' +
      '## Is it an anti-pattern?\n' +
      '\n' +
      '일단 생각을 해 봤으니 이게 가한 것은 맞는지 확인 해 볼 필요가 있었다. (처음 생각해 본\n' +
      '방법이고 Vue 관련 문서나 강의에서도 한 번도 이런 케이스를 본 적이 없으니까..)\n' +
      '\n' +
      '구글링 결과 공교롭게도(?) 가장 먼저 눈에 띈 내용은 이 방식이 안티 패턴이라는 내용이었다.\n' +
      '(혹 관련 내용이 궁금하다면 [How to Pass a Function as a Prop in Vue]([https://michaelnthiessen.com/pass-function-as-prop/](https://michaelnthiessen.com/pass-function-as-prop/))를\n' +
      '읽어보시길... 아, 중간에 구독하라고 전체 팝업창이 뜨기는 하는데 개발자라면 뭐... 다 쉽게\n' +
      '걷어내... 쿨럭... )\n' +
      '\n' +
      '하지만 왜 인지 모르겠으나... 해당 글에서는 안티 패턴임을 설명하는데 하위 컴포넌트의 mounted\n' +
      '훅에서 props로 받은 함수를 실행하는 코드를 보여주고 있었다.\n' +
      '무튼 그러면서 잘못된 것은 아니지만, Vue의 컨셉에 맞게 이벤트를 활용하거나 슬롯을 사용하라는\n' +
      '결론을 내주는게 영...\n' +
      '\n' +
      '또 다른 아티클 들에서는 단순하게 props로 함수를 내리는게 가능하다 라는 짤막한 소개 정도가\n' +
      '있었다.\n' +
      '\n' +
      '하여 안티 패턴이라 소개하는 글을 잠시 무시하기로 하고(?) props로 함수를 내리는 방식을\n' +
      '사용해봤다.\n' +
      '아, 안티 패턴이라 소개하는 글을 무시하기로 한 것은 안티 패턴을 굳이 사용하겠다는 것이 아니라,\n' +
      '안티 패턴인 이유에 대한 명확한 근거를 찾을 수 없어서다. 차후에라도 이것이 안티 패턴이라는\n' +
      '명확한 근거를 찾게 된다면 당연히 과감히 버릴거다.\n' +
      '\n' +
      '## Try it\n' +
      '\n' +
      '```jsx\n' +
      '<template>\n' +
      '  <SignUpTemplate :handle-sign-up="signUp" />\n' +
      '</template>\n' +
      '<script>\n' +
      'export default {\n' +
      '  ...\n' +
      '  methods: {\n' +
      '    ...\n' +
      '    signUp({ email, password }) {\n' +
      '      users\n' +
      '        .postSignUp({ email, password })\n' +
      '        .then(...)\n' +
      '        .catch(...)\n' +
      '    }\n' +
      '  }\n' +
      '};\n' +
      '</script>\n' +
      '```\n' +
      '\n' +
      'Page에서 이렇게 `signUp` 함수를 props로 내려주고\n' +
      '\n' +
      '```jsx\n' +
      '<template>\n' +
      '  ...\n' +
      '  <SignUpForm :handle-submit="handleSignUp" />\n' +
      '  ...\n' +
      '</template>\n' +
      '\n' +
      '<script>\n' +
      'export default {\n' +
      '  ...\n' +
      '  props: {\n' +
      '    ...\n' +
      '    handleSignUp: {\n' +
      '      type: Function,\n' +
      '      required: true,\n' +
      '      default: () => {}\n' +
      '    }\n' +
      '  },\n' +
      '  ...\n' +
      '};\n' +
      '</script>\n' +
      '```\n' +
      '\n' +
      '템플릿에서 props로 받은 함수를 다시 하위 컴포넌트로 내려주고,\n' +
      '\n' +
      '```jsx\n' +
      '<template>\n' +
      '  <form-container>\n' +
      '    ...\n' +
      '    <DefaultButton\n' +
      '      @click.native.prevent="handleClickSubmit"\n' +
      '    />\n' +
      '    ...\n' +
      '  </form-container>\n' +
      '</template>\n' +
      '\n' +
      '<script>\n' +
      'import DefaultButton from "@atoms/Button/Default";\n' +
      'export default {\n' +
      '  components: {\n' +
      '  props: {\n' +
      '    handleSubmit: {\n' +
      '      type: Function,\n' +
      '      required: true,\n' +
      '      default: () => {}\n' +
      '    }\n' +
      '  },\n' +
      '  methods: {\n' +
      '    handleClickSubmit() {\n' +
      '      const { handleSubmit, email, password, passwordConfirm } = this;\n' +
      '      ...\n' +
      '      handleSubmit && handleSubmit({ email, password });\n' +
      '    }\n' +
      '  }\n' +
      '};\n' +
      '</script>\n' +
      '```\n' +
      '\n' +
      '유저 인터랙션이 발생하는 하위 컴포넌트에서 해당 함수를 전달받아 실행하게 했다.\n' +
      '적용 결과는 당연히(?) 원하는 동작을 올바르게 수행해주었다.\n' +
      '\n' +
      '이것보다는 modal  창을 포함하는 organism 컴포넌트에서 modal 창에 대한 제어와 modal 내부에\n' +
      'slot으로 끼워진 컴포넌트에 적용되는 부분이 이 방식을 더 잘 설명할 수 있을 것 같지만 너무\n' +
      '많은 코드가 삽입 되어야 해서 포스팅에는 간단한 위 코드로 적었다.\n' +
      '\n' +
      '사실 event emit 방식으로도 충분히 대체도 가능하고 그것이 난이도나 복잡도가 더 높지는 않은\n' +
      '것 같기는 하다. 하지만, 뭐랄까 이 방식이 좀 더 dry한 느낌이 든달까? (기분탓이려나?)\n' +
      '\n' +
      '무엇보다 개발자 도구에 여러 번에 걸친 이벤트 발생 로그를 보지 않아도 되니 한결 눈이 가벼워졌다.',
    slug: 'pass-function-as-props-in-vue',
    published: true,
    comments: true,
    layout: 'post',
    photos: [],
    link: '',
    _id: 'clcytfa4r00a7taww0ld1deig',
    content: '<h2 id="Event-handling-and-Atomic-Design-System"><a href="#Event-handling-and-Atomic-Design-System" class="headerlink" title="Event handling and Atomic Design System"></a>Event handling and Atomic Design System</h2><p>Atomic Design System을 컴포넌트 설계 방법론으로 가져가면서, 각 컴포넌트에 독립적으로\n' +
      '고립(?)된 데이터 구조를 만들게 되면서 (이게 맞는 방식인지는 잘 모르겠지만) 불편함이 점점\n' +
      '발생되었던 것 중 하나가 유저 인터랙션에 의해 발생되는 데이터 변경을 위해 쌓여진 컴포넌트\n' +
      '구조를 따라 계속 이벤트를 전달하고 이벤트 리스너를 통해 처리하는 방식이었다.</p>\n' +
      '<p>예를 들자면</p>\n' +
      '<p><img src="/upload/2021/event-flow-from-atom-to-page.svg" alt="유저 인터랙션으로 하위 컴포넌트로부터 상위 컴포넌트로의 이벤트 발생 과정"></p>\n' +
      '<p>이런 흐름 말이다.</p>\n' +
      '<p>Vue 공식 문서도 그렇고, 지금까지 보아온 대다수의 강의에서도 유저 인터랙션에 대한 데이터를\n' +
      '처리할 때 해당 데이터가 상위 컴포넌트에 존재할 경우, <code>$emit</code>을 이용하여 payload와 함께\n' +
      '하위 컴포넌트로부터 상위 컴포넌트로 차례로 올리고, 상위 컴포넌트에서 <code>v-on</code>으로 처리하는\n' +
      '방식을 사용하도록 안내하는 듯 하다.</p>\n' +
      '<p>Atomic Design Sytem을 적용하기 전에는 이러한 고민이 없었는데, 적용 이후로는 atom으로부터\n' +
      '실제 데이터가 바인딩 되는 page까지 5개 단계(?)를 거치게 되니 하위 컴포넌트에서 발생한\n' +
      '이벤트와 데이터를 다시 상위 컴포넌트로 by-pass 하기 위한 이벤트 처리가 뭐랄까... 조금\n' +
      '거슬린다고 할까?\n' +
      '심지어 Vue 개발자 도구로 데이터 흐름을 확인하려고 하면 한 번의 인터랙션에 여러 개의 emit이\n' +
      '로그로 출력되니 정신이 사납기까지 한 느낌이다 &#x3D; _&#x3D;a</p>\n' +
      '<p>그래서 <code>props</code>로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
      '핸들러를 실행시키기만 하면 어떨까 하는 생각에 <code>prop</code>로 함수를 내려주는 방식을 생각해보게 됐다.</p>\n' +
      '<h2 id="Is-it-an-anti-pattern"><a href="#Is-it-an-anti-pattern" class="headerlink" title="Is it an anti-pattern?"></a>Is it an anti-pattern?</h2><p>일단 생각을 해 봤으니 이게 가한 것은 맞는지 확인 해 볼 필요가 있었다. (처음 생각해 본\n' +
      '방법이고 Vue 관련 문서나 강의에서도 한 번도 이런 케이스를 본 적이 없으니까..)</p>\n' +
      '<p>구글링 결과 공교롭게도(?) 가장 먼저 눈에 띈 내용은 이 방식이 안티 패턴이라는 내용이었다.\n' +
      '(혹 관련 내용이 궁금하다면 <a href="%5Bhttps://michaelnthiessen.com/pass-function-as-prop/%5D(https://michaelnthiessen.com/pass-function-as-prop/)">How to Pass a Function as a Prop in Vue</a>를\n' +
      '읽어보시길... 아, 중간에 구독하라고 전체 팝업창이 뜨기는 하는데 개발자라면 뭐... 다 쉽게\n' +
      '걷어내... 쿨럭... )</p>\n' +
      '<p>하지만 왜 인지 모르겠으나... 해당 글에서는 안티 패턴임을 설명하는데 하위 컴포넌트의 mounted\n' +
      '훅에서 props로 받은 함수를 실행하는 코드를 보여주고 있었다.\n' +
      '무튼 그러면서 잘못된 것은 아니지만, Vue의 컨셉에 맞게 이벤트를 활용하거나 슬롯을 사용하라는\n' +
      '결론을 내주는게 영...</p>\n' +
      '<p>또 다른 아티클 들에서는 단순하게 props로 함수를 내리는게 가능하다 라는 짤막한 소개 정도가\n' +
      '있었다.</p>\n' +
      '<p>하여 안티 패턴이라 소개하는 글을 잠시 무시하기로 하고(?) props로 함수를 내리는 방식을\n' +
      '사용해봤다.\n' +
      '아, 안티 패턴이라 소개하는 글을 무시하기로 한 것은 안티 패턴을 굳이 사용하겠다는 것이 아니라,\n' +
      '안티 패턴인 이유에 대한 명확한 근거를 찾을 수 없어서다. 차후에라도 이것이 안티 패턴이라는\n' +
      '명확한 근거를 찾게 된다면 당연히 과감히 버릴거다.</p>\n' +
      '<h2 id="Try-it"><a href="#Try-it" class="headerlink" title="Try it"></a>Try it</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SignUpTemplate</span></span> <span class="token attr-name">:handle-sign-up</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>signUp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
      '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      'export default &#123;\n' +
      '  ...\n' +
      '  methods: &#123;\n' +
      '    ...\n' +
      '    signUp(&#123; email, password &#125;) &#123;\n' +
      '      users\n' +
      '        .postSignUp(&#123; email, password &#125;)\n' +
      '        .then(...)\n' +
      '        .catch(...)\n' +
      '    &#125;\n' +
      '  &#125;\n' +
      '&#125;;\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>Page에서 이렇게 <code>signUp</code> 함수를 props로 내려주고</p>\n' +
      '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      '  ...\n' +
      '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SignUpForm</span></span> <span class="token attr-name">:handle-submit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleSignUp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n' +
      '  ...\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
      '\n' +
      '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      'export default &#123;\n' +
      '  ...\n' +
      '  props: &#123;\n' +
      '    ...\n' +
      '    handleSignUp: &#123;\n' +
      '      type: Function,\n' +
      '      required: true,\n' +
      '      default: () => &#123;&#125;\n' +
      '    &#125;\n' +
      '  &#125;,\n' +
      '  ...\n' +
      '&#125;;\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>템플릿에서 props로 받은 함수를 다시 하위 컴포넌트로 내려주고,</p>\n' +
      '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form-container</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      '    ...\n' +
      '    &lt;DefaultButton\n' +
      '      @click.native.prevent="handleClickSubmit"\n' +
      '    />\n' +
      '    ...\n' +
      '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form-container</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
      '\n' +
      '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      'import DefaultButton from "@atoms/Button/Default";\n' +
      'export default &#123;\n' +
      '  components: &#123;\n' +
      '  props: &#123;\n' +
      '    handleSubmit: &#123;\n' +
      '      type: Function,\n' +
      '      required: true,\n' +
      '      default: () => &#123;&#125;\n' +
      '    &#125;\n' +
      '  &#125;,\n' +
      '  methods: &#123;\n' +
      '    handleClickSubmit() &#123;\n' +
      '      const &#123; handleSubmit, email, password, passwordConfirm &#125; = this;\n' +
      '      ...\n' +
      '      handleSubmit &amp;&amp; handleSubmit(&#123; email, password &#125;);\n' +
      '    &#125;\n' +
      '  &#125;\n' +
      '&#125;;\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>유저 인터랙션이 발생하는 하위 컴포넌트에서 해당 함수를 전달받아 실행하게 했다.\n' +
      '적용 결과는 당연히(?) 원하는 동작을 올바르게 수행해주었다.</p>\n' +
      '<p>이것보다는 modal  창을 포함하는 organism 컴포넌트에서 modal 창에 대한 제어와 modal 내부에\n' +
      'slot으로 끼워진 컴포넌트에 적용되는 부분이 이 방식을 더 잘 설명할 수 있을 것 같지만 너무\n' +
      '많은 코드가 삽입 되어야 해서 포스팅에는 간단한 위 코드로 적었다.</p>\n' +
      '<p>사실 event emit 방식으로도 충분히 대체도 가능하고 그것이 난이도나 복잡도가 더 높지는 않은\n' +
      '것 같기는 하다. 하지만, 뭐랄까 이 방식이 좀 더 dry한 느낌이 든달까? (기분탓이려나?)</p>\n' +
      '<p>무엇보다 개발자 도구에 여러 번에 걸친 이벤트 발생 로그를 보지 않아도 되니 한결 눈이 가벼워졌다.</p>\n',
    site: { data: [Object] },
    excerpt: '',
    more: '<h2 id="Event-handling-and-Atomic-Design-System"><a href="#Event-handling-and-Atomic-Design-System" class="headerlink" title="Event handling and Atomic Design System"></a>Event handling and Atomic Design System</h2><p>Atomic Design System을 컴포넌트 설계 방법론으로 가져가면서, 각 컴포넌트에 독립적으로\n' +
      '고립(?)된 데이터 구조를 만들게 되면서 (이게 맞는 방식인지는 잘 모르겠지만) 불편함이 점점\n' +
      '발생되었던 것 중 하나가 유저 인터랙션에 의해 발생되는 데이터 변경을 위해 쌓여진 컴포넌트\n' +
      '구조를 따라 계속 이벤트를 전달하고 이벤트 리스너를 통해 처리하는 방식이었다.</p>\n' +
      '<p>예를 들자면</p>\n' +
      '<p><img src="/upload/2021/event-flow-from-atom-to-page.svg" alt="유저 인터랙션으로 하위 컴포넌트로부터 상위 컴포넌트로의 이벤트 발생 과정"></p>\n' +
      '<p>이런 흐름 말이다.</p>\n' +
      '<p>Vue 공식 문서도 그렇고, 지금까지 보아온 대다수의 강의에서도 유저 인터랙션에 대한 데이터를\n' +
      '처리할 때 해당 데이터가 상위 컴포넌트에 존재할 경우, <code>$emit</code>을 이용하여 payload와 함께\n' +
      '하위 컴포넌트로부터 상위 컴포넌트로 차례로 올리고, 상위 컴포넌트에서 <code>v-on</code>으로 처리하는\n' +
      '방식을 사용하도록 안내하는 듯 하다.</p>\n' +
      '<p>Atomic Design Sytem을 적용하기 전에는 이러한 고민이 없었는데, 적용 이후로는 atom으로부터\n' +
      '실제 데이터가 바인딩 되는 page까지 5개 단계(?)를 거치게 되니 하위 컴포넌트에서 발생한\n' +
      '이벤트와 데이터를 다시 상위 컴포넌트로 by-pass 하기 위한 이벤트 처리가 뭐랄까... 조금\n' +
      '거슬린다고 할까?\n' +
      '심지어 Vue 개발자 도구로 데이터 흐름을 확인하려고 하면 한 번의 인터랙션에 여러 개의 emit이\n' +
      '로그로 출력되니 정신이 사납기까지 한 느낌이다 &#x3D; _&#x3D;a</p>\n' +
      '<p>그래서 <code>props</code>로 이벤트 핸들러를 내려주고, 가장 기저에 있는 atom에 해당하는 컴포넌트가 이\n' +
      '핸들러를 실행시키기만 하면 어떨까 하는 생각에 <code>prop</code>로 함수를 내려주는 방식을 생각해보게 됐다.</p>\n' +
      '<h2 id="Is-it-an-anti-pattern"><a href="#Is-it-an-anti-pattern" class="headerlink" title="Is it an anti-pattern?"></a>Is it an anti-pattern?</h2><p>일단 생각을 해 봤으니 이게 가한 것은 맞는지 확인 해 볼 필요가 있었다. (처음 생각해 본\n' +
      '방법이고 Vue 관련 문서나 강의에서도 한 번도 이런 케이스를 본 적이 없으니까..)</p>\n' +
      '<p>구글링 결과 공교롭게도(?) 가장 먼저 눈에 띈 내용은 이 방식이 안티 패턴이라는 내용이었다.\n' +
      '(혹 관련 내용이 궁금하다면 <a href="%5Bhttps://michaelnthiessen.com/pass-function-as-prop/%5D(https://michaelnthiessen.com/pass-function-as-prop/)">How to Pass a Function as a Prop in Vue</a>를\n' +
      '읽어보시길... 아, 중간에 구독하라고 전체 팝업창이 뜨기는 하는데 개발자라면 뭐... 다 쉽게\n' +
      '걷어내... 쿨럭... )</p>\n' +
      '<p>하지만 왜 인지 모르겠으나... 해당 글에서는 안티 패턴임을 설명하는데 하위 컴포넌트의 mounted\n' +
      '훅에서 props로 받은 함수를 실행하는 코드를 보여주고 있었다.\n' +
      '무튼 그러면서 잘못된 것은 아니지만, Vue의 컨셉에 맞게 이벤트를 활용하거나 슬롯을 사용하라는\n' +
      '결론을 내주는게 영...</p>\n' +
      '<p>또 다른 아티클 들에서는 단순하게 props로 함수를 내리는게 가능하다 라는 짤막한 소개 정도가\n' +
      '있었다.</p>\n' +
      '<p>하여 안티 패턴이라 소개하는 글을 잠시 무시하기로 하고(?) props로 함수를 내리는 방식을\n' +
      '사용해봤다.\n' +
      '아, 안티 패턴이라 소개하는 글을 무시하기로 한 것은 안티 패턴을 굳이 사용하겠다는 것이 아니라,\n' +
      '안티 패턴인 이유에 대한 명확한 근거를 찾을 수 없어서다. 차후에라도 이것이 안티 패턴이라는\n' +
      '명확한 근거를 찾게 된다면 당연히 과감히 버릴거다.</p>\n' +
      '<h2 id="Try-it"><a href="#Try-it" class="headerlink" title="Try it"></a>Try it</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SignUpTemplate</span></span> <span class="token attr-name">:handle-sign-up</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>signUp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
      '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      'export default &#123;\n' +
      '  ...\n' +
      '  methods: &#123;\n' +
      '    ...\n' +
      '    signUp(&#123; email, password &#125;) &#123;\n' +
      '      users\n' +
      '        .postSignUp(&#123; email, password &#125;)\n' +
      '        .then(...)\n' +
      '        .catch(...)\n' +
      '    &#125;\n' +
      '  &#125;\n' +
      '&#125;;\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>Page에서 이렇게 <code>signUp</code> 함수를 props로 내려주고</p>\n' +
      '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      '  ...\n' +
      '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SignUpForm</span></span> <span class="token attr-name">:handle-submit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleSignUp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n' +
      '  ...\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
      '\n' +
      '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      'export default &#123;\n' +
      '  ...\n' +
      '  props: &#123;\n' +
      '    ...\n' +
      '    handleSignUp: &#123;\n' +
      '      type: Function,\n' +
      '      required: true,\n' +
      '      default: () => &#123;&#125;\n' +
      '    &#125;\n' +
      '  &#125;,\n' +
      '  ...\n' +
      '&#125;;\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>템플릿에서 props로 받은 함수를 다시 하위 컴포넌트로 내려주고,</p>\n' +
      '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form-container</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      '    ...\n' +
      '    &lt;DefaultButton\n' +
      '      @click.native.prevent="handleClickSubmit"\n' +
      '    />\n' +
      '    ...\n' +
      '  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form-container</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n' +
      '\n' +
      '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">\n' +
      'import DefaultButton from "@atoms/Button/Default";\n' +
      'export default &#123;\n' +
      '  components: &#123;\n' +
      '  props: &#123;\n' +
      '    handleSubmit: &#123;\n' +
      '      type: Function,\n' +
      '      required: true,\n' +
      '      default: () => &#123;&#125;\n' +
      '    &#125;\n' +
      '  &#125;,\n' +
      '  methods: &#123;\n' +
      '    handleClickSubmit() &#123;\n' +
      '      const &#123; handleSubmit, email, password, passwordConfirm &#125; = this;\n' +
      '      ...\n' +
      '      handleSubmit &amp;&amp; handleSubmit(&#123; email, password &#125;);\n' +
      '    &#125;\n' +
      '  &#125;\n' +
      '&#125;;\n' +
      '</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>유저 인터랙션이 발생하는 하위 컴포넌트에서 해당 함수를 전달받아 실행하게 했다.\n' +
      '적용 결과는 당연히(?) 원하는 동작을 올바르게 수행해주었다.</p>\n' +
      '<p>이것보다는 modal  창을 포함하는 organism 컴포넌트에서 modal 창에 대한 제어와 modal 내부에\n' +
      'slot으로 끼워진 컴포넌트에 적용되는 부분이 이 방식을 더 잘 설명할 수 있을 것 같지만 너무\n' +
      '많은 코드가 삽입 되어야 해서 포스팅에는 간단한 위 코드로 적었다.</p>\n' +
      '<p>사실 event emit 방식으로도 충분히 대체도 가능하고 그것이 난이도나 복잡도가 더 높지는 않은\n' +
      '것 같기는 하다. 하지만, 뭐랄까 이 방식이 좀 더 dry한 느낌이 든달까? (기분탓이려나?)</p>\n' +
      '<p>무엇보다 개발자 도구에 여러 번에 걸친 이벤트 발생 로그를 보지 않아도 되니 한결 눈이 가벼워졌다.</p>\n',
    path: [Getter],
    permalink: [Getter],
    full_source: [Getter],
    asset_dir: [Getter],
    tags: [Getter],
    categories: [Getter],
    prev: _Document {
      title: '개발환경 WSL2 + zsh로 갈아타기',
      thumbnail: '/upload/2021/thumbs/wsl2-zsh-on-windws-10.jpg',
      hero: '/upload/2021/wsl2-zsh-on-windws-10.jpg',
      style: '.hero {\n' +
        '  &-wrapper {\n' +
        '    text-shadow:\n' +
        '      1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
        '      -1px -1px 2em rgba(20, 12, 24, 1);\n' +
        '  }\n' +
        '  &__image {\n' +
        '    opacity: 0.35\n' +
        '  }\n' +
        '}\n',
      seo: [Object],
      date: Moment<2021-01-28T00:32:57+09:00>,
      _content: '\n' +
        '\n' +
        '## 기존 환경\n' +
        '\n' +
        '얼마 전까지만 해도 VS Code의 터미널을 git bash로 (이하 bash) 설정해서 5년 가까이 bash\n' +
        '상에서 CLI를 사용해왔다. (아! 참고로 나는 Windows 10 사용자다. 맥이었으면 진즉부터\n' +
        'terminal을 썼겠지...)\n' +
        '\n' +
        '이 블로그 테마를 제작 후에 몇 번 mac이나 linux 환경에서 테마 설치 오류에 대한 이슈가\n' +
        '올라왔었고, 최근에 어떤 사이트를 번역하는데 해당 사이트 빌드가 bash 상에서는 정상적으로\n' +
        '이루어지지 않아 확인해보니 linux 상에서는 올바르게 빌드 되어 linux 환경에 대한 필요가\n' +
        '생겨났다.\n' +
        '\n' +
        '결국 미루고 미루던 WSL 사용을 시도하기로 하고 반 년 정도를 이 방식으로 써 본 것 같다.\n' +
        '(미루고 미룬 이유는 Windows를 못믿어서... = _=a 항상 예기치 않은 오류를 만들어주는\n' +
        ' Windows ... )\n' +
        '\n' +
        '무튼, 반 년 정도의 사용 경험에서는 크게 문제를 느끼지 못해서 이제 본격적으로 WSL + zsh\n' +
        '환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가 설정을 차후에 필요할까 기록으로\n' +
        '남겨둔다. (안녕 bash~ 오래 동안 고마웠어 ㅠ)\n' +
        '\n' +
        '## WSL 1 or WSL 2 ?\n' +
        '\n' +
        'WSL을 쓰기로 한 시점에 결정해야 할 것 중 하나는 일단 WSL 1을 쓸 것인가 혹은 WSL 2를 쓸\n' +
        '것인가 같다. 물론, WSL 2 구성까지 해 두면 언제든지 원하는 시점에 WSL 1과 2를 오갈 수 있고\n' +
        '따라서 WSL 2 구성 방법으로 포스팅 해두기는 했다.\n' +
        '\n' +
        '내 경우엔 2가지를 다 써봤는데, 써보고 난 이후에 드는 생각은 일단 내 경우에는 WSL 1을 쓰는\n' +
        '게 아직은 낫지 않을까 싶다. MS에서는 WSL 2가 더 빠르고 전체 리눅스 커널 사용, 시스템 호출\n' +
        '호환성 등을 장점으로 들고 있지만 생각보다 만나게 되는 장애물이 많았다.\n' +
        '\n' +
        '일단 몇 가지 선택에 필요한 기준에 따라 나누어 보면,\n' +
        '기존의 Windows 시스템에서 이미 프로젝트가 구성되어 있고 (Node든 뭐 다른 것이든) 여기에\n' +
        'WSL을 통합하는 거라면 WSL 1을 추천한다.\n' +
        '반면 개발 환경을 새로 설정 하는 상황이나 새로 설정하는 것을 감안 할 생각이고, 리눅스 시스템에\n' +
        '거부감이 없다면 WSL 2가 나을 것 같다.\n' +
        '\n' +
        '이렇게 나눈 이유는, WSL 2에서는\n' +
        '\n' +
        '- Windows 파일 시스템(`/mnt/`)으로의 접근이 체감 될 만큼 느리다.\n' +
        '- Windows 파일 시스템에 이미 구성된 프로젝트의 경우, 파일 변경을 감지 하지 못하는 듯 하다.\n' +
        '  (Node의 watch 기능이 정상적으로 동작해주지 못한다. 파일 시스템이 다르니 당연한 것 같기는\n' +
        '  한데 처음에 무척 당황했다.)\n' +
        '- Windows에서 VS Code를 열고 터미널을 WSL로 사용할 때, Windows에서 연 브라우저가\n' +
        '  localhost에 접근이 잘 되지 않는다.\n' +
        '\n' +
        '  Windows 전원 옵션에 "빨리 켜기 기능"을 꺼두면 localhost 포워딩이 된다고 하는데, 실제로\n' +
        '  해봤을 때 localhost가 두 개의 다른 포트로 열렸을 때 하나만 되더라...\n' +
        '\n' +
        '내 경우는 이미 Windows 시스템을 기반으로 프로젝트들이 구성되어 있었고 WSL을 통합 해보는 거라\n' +
        '위의 문제들을 겪고 말았다 ㅋ\n' +
        '\n' +
        '물론 내 케이스가 아니라면 WSL 2가 더 나을 것 같기는 하다.\n' +
        '\n' +
        '## Windows Terminal 설치\n' +
        '\n' +
        'Windows에는 기본적으로 terminal이 존재하지 않기 때문에, windows terminal을\n' +
        '[Store](https://www.microsoft.com/ko-kr/p/windows-terminal/9n0dx20hk701)에서\n' +
        '별도로 설치해야 한다.\n' +
        '\n' +
        '![Windows Terminal on Store](/upload/2021/windows-store-terminal.jpg)\n' +
        '\n' +
        '## WSL 활성화\n' +
        '\n' +
        '자세한 내용은 [공식문서](https://docs.microsoft.com/ko-kr/windows/wsl/install-win10)를\n' +
        '참고하자.\n' +
        '\n' +
        "터미널(혹은 파워쉘)을 관리자 권한으로 실행 후, 다음을 차례대로 실행 하면된다. (물론 '제어판\n" +
        "&gt; 프로그램 &gt; 프로그램 및 기능 &gt; Windows 기능 켜기/끄기' 에서 GUI로 해도 된다.)\n" +
        '\n' +
        '```jsx\n' +
        'dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n' +
        'dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n' +
        '```\n' +
        '\n' +
        '실행이 종료 되었으면 "재시작"하자.\n' +
        '\n' +
        '일시적인 상황이었는지는 모르겠지만, 최초 이 설정을 할 때 재시작하지 않고 컴퓨터를 종료했다가\n' +
        '다음 날 켜서 설정을 계속 이어가려고 했더니 안되더라 = _=a\n' +
        '\n' +
        '### WSL 2 업데이트\n' +
        '\n' +
        'WSL 2를 사용하려면 적어도 Windows 10 May 2020 Update가 설치되어 있어야 한다. Windows\n' +
        '10 May 2020 Update에 실제 리눅스 커널을 사용하는 WSL 2가 기본 탑재 되었다고 한다.\n' +
        '그런데 좀 이상한게, Windows 10 최신 업데이트를 쓰고 있음에도 불구하고 WSL 2를 사용하려면\n' +
        '별도 패키지를 다운 받아서 설치하고, 추가 설정을 해야 한다. (아니 WSL 2를 기본으로 탑재했으면\n' +
        'WSL 2를 기본으로 사용할 수 있어야지 왜 WSL 1을 기본으로 잡아주고 있고... WSL 2를 쓰기 위해\n' +
        '추가 설치를 왜 해야 하는가...? )\n' +
        '\n' +
        '[MS WSL 설명서 페이지](https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package)로\n' +
        '가서 Linux 커널 업데이트 패키지 다운로드 후 설치한다.\n' +
        '\n' +
        '![Linux 커널 업데이트 설치 화면](/upload/2021/wsl-update.jpg)\n' +
        '\n' +
        '### WSL 기본 버전을 2로 설정\n' +
        '\n' +
        '터미널(혹은 파워쉘)에서 다음 명령을 시행한다.\n' +
        '\n' +
        '이걸 먼저 실행해야 이후로 설치되는 리눅스 시스템이 WSL 2를 기반으로 한다.\n' +
        '\n' +
        '```powershell\n' +
        'wsl --set-default-version 2\n' +
        '```\n' +
        '\n' +
        '## Ubuntu  설치\n' +
        '\n' +
        '다시 [Store](https://www.microsoft.com/ko-kr/store/apps/windows)에서 Ubuntu를\n' +
        '검색해서 설치 한다. (물론 우분투 말고 다른 리눅스 프로덕트를 선택해도 된다. 단지 내가\n' +
        'Ubuntu가 익숙해서 그렇다~~고 하지만 어차피 터미널인데?~~)\n' +
        '\n' +
        '![Windows Store Ubuntu 검색 결과](/upload/2021/windows-store-ubuntu.jpg)\n' +
        '\n' +
        '하지만 이 놈은 어디까지나 "배포" 패키지이므로 설치 후 최초 실행해야 우분투 설치가 진행된다.\n' +
        '시간이 조금 걸리니 기다리자.\n' +
        '\n' +
        '설치가 완료되면 다음과 같이 설치가 완료되었다는 메세지와 함께 웰컴 투 우분투가 노출된다\n' +
        '\n' +
        '![우분투 설치 완료 화면](/upload/2021/complete-install-ubuntu.jpg)\n' +
        '\n' +
        '### 터미널 기본 프로필 Ubuntu로 설정\n' +
        '\n' +
        '터미널에서도 Ubuntu가 기본으로 실행되도록 터미널 기본 프로필을 WSL로 설정한다.\n' +
        '\n' +
        '터미널에서 설정으로 들어가면 관련 json 파일이 열리는데, 여기서 `defaultProfile` 값을\n' +
        '`profiles.list` 에서 Ubuntu 것의 `guid` 값으로 수정하기만 하면 된다.\n' +
        '\n' +
        '```json|data-line="2,11"\n' +
        '{\n' +
        '  "defaultProfile": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
        '  ...\n' +
        '  "profiles":\n' +
        '    {\n' +
        '      ...\n' +
        '      "list":\n' +
        '      [\n' +
        '        ...\n' +
        '        {\n' +
        '          "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
        '          "hidden": false,\n' +
        '          "name": "Ubuntu",\n' +
        '          "source": "Windows.Terminal.Wsl",\n' +
        '          "colorScheme": "Dark+",\n' +
        '          "fontFace": "Hack"\n' +
        '        }\n' +
        '      ]\n' +
        '    },\n' +
        '}\n' +
        '```\n' +
        '\n' +
        '## Git, zsh 설치\n' +
        '\n' +
        'Ubuntu(WSL)를 실행하고, git과 zsh부터 설치한다.\n' +
        '\n' +
        '일단 패키지 레파지토리 인덱스부터 업데이트 하고\n' +
        '\n' +
        '```bash\n' +
        'sudo apt update\n' +
        '```\n' +
        '\n' +
        'git과 zsh을 설치\n' +
        '\n' +
        '```bash\n' +
        'sudo apt install git zsh\n' +
        '```\n' +
        '\n' +
        '## Oh my zsh 설치 및 구성\n' +
        '\n' +
        '### 설치\n' +
        '\n' +
        '터미널에서 다음 명령을 실행하기만 하면 된다.\n' +
        '\n' +
        '```bash\n' +
        'sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"\n' +
        '```\n' +
        '\n' +
        '설치가 완료되면 다음과 같은 메세지를 볼 수 있다.\n' +
        '\n' +
        '![oh my zsh 설치 완료 화면](/upload/2021/complete-install-oh-my-zsh.jpg)\n' +
        '\n' +
        '### 테마 구성\n' +
        '\n' +
        '역시 처음 설치했드면 꾸미기가 먼저다!!! 테마부터 변경한다.\n' +
        '\n' +
        '테마는 [ohmyzsh github wiki](https://github.com/ohmyzsh/ohmyzsh/wiki/Themes)에서\n' +
        '마음에 드는 걸 선택하면 될 것 같다. 내 경우엔 많이 언급되는 `agnoster`를 쓰기로...\n' +
        '\n' +
        '`~/.zshrc` 파일을 열어 `ZSH_THEME` 항목의 값을 변경하기만 하면 된다.\n' +
        '\n' +
        '```bash\n' +
        'vi ~/.zshrc\n' +
        '```\n' +
        '\n' +
        '```ini\n' +
        'ZSH_THEME="agnoster"\n' +
        '```\n' +
        '\n' +
        '참고로 `agnoster` 테마를 쓰려면 [powerline font](https://github.com/powerline/fonts)를\n' +
        '써야 하는데, 내 경우엔 이미 Hack 폰트를 쓰고 있어서 별도로 설치하지 않고 터미널 설정에서\n' +
        '`profile.list`의 해당 항목에 fontFamily 값만 추가하여 해결했다.\n' +
        '\n' +
        '```json|data-line="6"\n' +
        '{\n' +
        '  "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
        '  "hidden": false,\n' +
        '  "name": "Ubuntu",\n' +
        '  "source": "Windows.Terminal.Wsl",\n' +
        '  "fontFace": "Hack"\n' +
        '}\n' +
        '```\n' +
        '\n' +
        '### 터미널 color scheme 구성\n' +
        '\n' +
        '편한 눈을 위해(?) 각 컬러에 대한 상세 값을 설정할 수 있고, 개별적으로 설정이 어렵다면 이미\n' +
        '구성된 scheme들이 [windowsterminalthemes](https://windowsterminalthemes.dev/)에서\n' +
        '제공되고 있으니 이를 참고해서 구성도 가능하다.\n' +
        '\n' +
        '설정은 마찬가지로 터미널 설정에서 이루어지고, `schemes` 항목에 color scheme을 추가하고,\n' +
        '`profiles.list`의 해당 항목에 `colorScheme` 값을 추가 한 color scheme의 `name`\n' +
        '값으로 설정하면 된다.\n' +
        '\n' +
        '```json|data-line="10,16"\n' +
        '"profiles" :{\n' +
        '  "list": [\n' +
        '    ...,\n' +
        '    {\n' +
        '      "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
        '      "hidden": false,\n' +
        '      "name": "Ubuntu",\n' +
        '      "source": "Windows.Terminal.Wsl",\n' +
        '      "fontFace": "Hack",\n' +
        '      "colorScheme": "Dark+"\n' +
        '    }\n' +
        '  ],\n' +
        '},\n' +
        '"schemes": [\n' +
        '  {\n' +
        '    "name": "Dark+",\n' +
        '    "black": "#000000",\n' +
        '    ...\n' +
        '    "background": "#0e0e0e",\n' +
        '    "foreground": "#cccccc"\n' +
        '  }\n' +
        '],\n' +
        '```\n' +
        '\n' +
        '## zsh plugins 설치\n' +
        '\n' +
        '조금 더 편한 zsh 사용을 위해 플러그인을 설치한다.\n' +
        '\n' +
        '### [zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions)\n' +
        '\n' +
        '이 플러그인은 이전에 입력했던 명령을 기반으로 명령을 타이핑 할 때마다 자동 완성을 제공하고\n' +
        '방향키로 해당 자동 완성을 사용할 수 있게 해준다.\n' +
        '\n' +
        '다음 명령으로 설치하고,\n' +
        '\n' +
        '```bash\n' +
        'git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n' +
        '```\n' +
        '\n' +
        '`~/.zshrc` 파일을 열어 `plugins` 항목에 `zsh-autosuggestions`를 추가해준다.\n' +
        '\n' +
        '```ini\n' +
        'plugins=(git zsh-autosuggestions)\n' +
        '```\n' +
        '\n' +
        '### [syntax highlighting](https://github.com/zsh-users/zsh-syntax-highlighting/)\n' +
        '\n' +
        '이 플러그인은 명령어에 구문 강조를 적용해준다.\n' +
        '구문 강조가 적용되면 좋은 것 중 하나는 특정 명령을 사용할 수 있으면 녹색으로, 설치 되지 않음\n' +
        '등의 이유로 알 수 없는 명령이면 빨간색으로 나타난다.\n' +
        '\n' +
        '다음 명령으로 설치하고,\n' +
        '\n' +
        '```bash\n' +
        'git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n' +
        '```\n' +
        '\n' +
        '`~/.zshrc` 파일을 열어 `plugins` 항목에 `zsh-syntax-highlighting`을 추가해준다.\n' +
        '\n' +
        '```ini\n' +
        'plugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n' +
        '```\n' +
        '\n' +
        '## 터미널 프롬프트 변경\n' +
        '\n' +
        '터미널을 열면 다음 화면처럼 username@hostname 형태로 프롬프트가 나오는데, VS Code에서\n' +
        '터미널을 열고 작업하면 이 프롬프트가 차지하는 공간이 적지 않아 보기 불편하다.\n' +
        '\n' +
        '다행히 이것마저도 변경하거나 감출 수 있다!!\n' +
        '\n' +
        '![기본으로는 user name과 host name이 모두 노출된다](/upload/2021/terminal-prompt-full-name.jpg)\n' +
        '\n' +
        '`~/.zshrc` 파일을 열고 다음을 추가하면\n' +
        '\n' +
        '```ini\n' +
        'prompt_context() {}\n' +
        '```\n' +
        '\n' +
        '프롬프트가 사라진다. 두둔!!\n' +
        '\n' +
        '![프롬프가 사라지고 경로만 남았다](/upload/2021/terminal-prompt-hide-name.jpg)\n' +
        '\n' +
        '참고로 다음과 같이 수정하면 user name과 경로만 노출된다.\n' +
        '\n' +
        '```ini\n' +
        'prompt_context() {\n' +
        '    if [[ "$USER" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then\n' +
        '      prompt_segment black default "%(!.%{%F{yellow}%}.)$USER"\n' +
        '    fi\n' +
        '}\n' +
        '```\n' +
        '\n' +
        '### Named directory 구성\n' +
        '\n' +
        '하지만 아직 `/mnt/c/Users/{user name}/` 이 거슬린다.\n' +
        '심지어 이게 디렉토리 깊이가 깊어지면 이 또한 너무 길어진다. 하여 이 마저도 줄여보기로 한다.\n' +
        '\n' +
        '역시 마찬가지로 `~/.zshrc` 파일을 열어 다음을 참고하여 환경에 맞게 추가한다.\n' +
        '\n' +
        '내 경우엔 `c:\\Users\\mulder21c\\Project`와 `c:\\Users\\mulder21c\\Workspace`이 주 사용\n' +
        '디렉토리라 이 디렉토리들에 대한 경로를 변경하기로 했다.\n' +
        '\n' +
        '```ini\n' +
        'hash -d mulder21c=/mnt/c/Users/mulder21c\n' +
        'hash -d Project=/mnt/c/Users/mulder21c/Project\n' +
        'hash -d Workspace=/mnt/c/Users/mulder21c/Workspace\n' +
        '```\n' +
        '\n' +
        '터미널을 다시 열어보면 다음과 같이 지정한 이름으로 표시된다. (단 앞에 `~`이 붙는다.)\n' +
        '\n' +
        '![named directory를 적용하고 경로가 한결 간결해졌다](/upload/2021/terminal-named-directory.jpg)\n' +
        '\n' +
        '이제야 터미널이 좀 간결해진 것 같다.\n' +
        '\n' +
        '## nvm 설치\n' +
        '\n' +
        '마지막으로 node.js 환경을 위해 nvm을 설치한다.\n' +
        '\n' +
        '터미널에서 다음 명령을 주면 자동으로 설치가 진행된다.\n' +
        '\n' +
        '```bash\n' +
        'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n' +
        '```\n' +
        '\n' +
        '참고로, Windows에 nvm for windows가 설치되어 있다면 충돌로 설치가 진행되지 않는다. 내\n' +
        '경우엔 더 이상 Windows 시스템에서 node를 실행할 생각이 없어서 과감히 제거하고 설치했다.\n' +
        '\n' +
        '설치가 완료되면 나타난 메세지 중에 다음과 같은 메세지가 있다.\n' +
        '\n' +
        '```ini\n' +
        'export NVM_DIR="$HOME/.nvm"\n' +
        '[ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh"  # This loads nvm\n' +
        '[ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion\n' +
        '```\n' +
        '\n' +
        '이걸 복사해서 `~/.zshrc`에 추가해야 한다.\n' +
        '\n' +
        '이후 node 설치는 nvm을 이용하면 된다.\n' +
        '\n' +
        '### auto `nvm` use  설정\n' +
        '\n' +
        '마지막으로 아직 테스트 해보지는 않았지만, 최근 Node 10.x, Node 14.x, Node 15.x를 각\n' +
        '환경으로 하는 프로덕트를 왔다 갔다 하다가 Node 버전 문제로 node-sass가 오류를 내뱉는 상황을\n' +
        '자주 만나게 되었다. `nvm use` 하는 걸 까먹기도 했고 현재 프로덕트가 어느 버전에서 돌려야\n' +
        '하는지도 까먹기 일수였다 ;;;\n' +
        '\n' +
        '하여 구성하는 김에 `.nvmrc`를 이용해서 자동으로 `nvm use`가 적용되게 하는 설정을 추가했다.\n' +
        '\n' +
        '다음의 코드를 `~/.zshrc`에 추가하면되는데, 아직 테스트해보진 않아서 잘 되는지는 모르겠다 = _=a\n' +
        '뭐... stackoverflow에서 건져온 건데 추천이 많았으니 잘 되겠지...? /=ㅁ=/\n' +
        '\n' +
        '```ini\n' +
        '# place this after nvm initialization!\n' +
        'autoload -U add-zsh-hook\n' +
        'load-nvmrc() {\n' +
        '  local node_version="$(nvm version)"\n' +
        '  local nvmrc_path="$(nvm_find_nvmrc)"\n' +
        '\n' +
        '  if [ -n "$nvmrc_path" ]; then\n' +
        '    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")\n' +
        '\n' +
        '    if [ "$nvmrc_node_version" = "N/A" ]; then\n' +
        '      nvm install\n' +
        '    elif [ "$nvmrc_node_version" != "$node_version" ]; then\n' +
        '      nvm use\n' +
        '    fi\n' +
        '  elif [ "$node_version" != "$(nvm version default)" ]; then\n' +
        '    echo "Reverting to nvm default version"\n' +
        '    nvm use default\n' +
        '  fi\n' +
        '}\n' +
        'add-zsh-hook chpwd load-nvmrc\n' +
        'load-nvmrc\n' +
        '```',
      source: '_posts/2021-01-27-setting-up-wsl-2-dev-env-and-zsh-on-windws-10.md',
      raw: '---\n' +
        'title: 개발환경 WSL2 + zsh로 갈아타기\n' +
        'tags:\n' +
        '  - WSL 2\n' +
        '  - zsh\n' +
        '  - Windows 10\n' +
        '  - terminal\n' +
        '  - nvm\n' +
        'categories:\n' +
        '  - 개발노트\n' +
        '  - Front-End\n' +
        'thumbnail: /upload/2021/thumbs/wsl2-zsh-on-windws-10.jpg\n' +
        'hero: /upload/2021/wsl2-zsh-on-windws-10.jpg\n' +
        'style: |\n' +
        '  .hero {\n' +
        '    &-wrapper {\n' +
        '      text-shadow:\n' +
        '        1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
        '        -1px -1px 2em rgba(20, 12, 24, 1);\n' +
        '    }\n' +
        '    &__image {\n' +
        '      opacity: 0.35\n' +
        '    }\n' +
        '  }\n' +
        'seo:\n' +
        '  description: |\n' +
        '    본격적으로 WSL + zsh 환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가\n' +
        '    설정을 차후에 필요할까 기록으로 남겨둔다.\n' +
        '  image: /upload/2021/wsl2-zsh-on-windws-10.jpg\n' +
        'date: 2021-01-28 00:32:57\n' +
        '---\n' +
        '\n' +
        '\n' +
        '## 기존 환경\n' +
        '\n' +
        '얼마 전까지만 해도 VS Code의 터미널을 git bash로 (이하 bash) 설정해서 5년 가까이 bash\n' +
        '상에서 CLI를 사용해왔다. (아! 참고로 나는 Windows 10 사용자다. 맥이었으면 진즉부터\n' +
        'terminal을 썼겠지...)\n' +
        '\n' +
        '이 블로그 테마를 제작 후에 몇 번 mac이나 linux 환경에서 테마 설치 오류에 대한 이슈가\n' +
        '올라왔었고, 최근에 어떤 사이트를 번역하는데 해당 사이트 빌드가 bash 상에서는 정상적으로\n' +
        '이루어지지 않아 확인해보니 linux 상에서는 올바르게 빌드 되어 linux 환경에 대한 필요가\n' +
        '생겨났다.\n' +
        '\n' +
        '결국 미루고 미루던 WSL 사용을 시도하기로 하고 반 년 정도를 이 방식으로 써 본 것 같다.\n' +
        '(미루고 미룬 이유는 Windows를 못믿어서... = _=a 항상 예기치 않은 오류를 만들어주는\n' +
        ' Windows ... )\n' +
        '\n' +
        '무튼, 반 년 정도의 사용 경험에서는 크게 문제를 느끼지 못해서 이제 본격적으로 WSL + zsh\n' +
        '환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가 설정을 차후에 필요할까 기록으로\n' +
        '남겨둔다. (안녕 bash~ 오래 동안 고마웠어 ㅠ)\n' +
        '\n' +
        '## WSL 1 or WSL 2 ?\n' +
        '\n' +
        'WSL을 쓰기로 한 시점에 결정해야 할 것 중 하나는 일단 WSL 1을 쓸 것인가 혹은 WSL 2를 쓸\n' +
        '것인가 같다. 물론, WSL 2 구성까지 해 두면 언제든지 원하는 시점에 WSL 1과 2를 오갈 수 있고\n' +
        '따라서 WSL 2 구성 방법으로 포스팅 해두기는 했다.\n' +
        '\n' +
        '내 경우엔 2가지를 다 써봤는데, 써보고 난 이후에 드는 생각은 일단 내 경우에는 WSL 1을 쓰는\n' +
        '게 아직은 낫지 않을까 싶다. MS에서는 WSL 2가 더 빠르고 전체 리눅스 커널 사용, 시스템 호출\n' +
        '호환성 등을 장점으로 들고 있지만 생각보다 만나게 되는 장애물이 많았다.\n' +
        '\n' +
        '일단 몇 가지 선택에 필요한 기준에 따라 나누어 보면,\n' +
        '기존의 Windows 시스템에서 이미 프로젝트가 구성되어 있고 (Node든 뭐 다른 것이든) 여기에\n' +
        'WSL을 통합하는 거라면 WSL 1을 추천한다.\n' +
        '반면 개발 환경을 새로 설정 하는 상황이나 새로 설정하는 것을 감안 할 생각이고, 리눅스 시스템에\n' +
        '거부감이 없다면 WSL 2가 나을 것 같다.\n' +
        '\n' +
        '이렇게 나눈 이유는, WSL 2에서는\n' +
        '\n' +
        '- Windows 파일 시스템(`/mnt/`)으로의 접근이 체감 될 만큼 느리다.\n' +
        '- Windows 파일 시스템에 이미 구성된 프로젝트의 경우, 파일 변경을 감지 하지 못하는 듯 하다.\n' +
        '  (Node의 watch 기능이 정상적으로 동작해주지 못한다. 파일 시스템이 다르니 당연한 것 같기는\n' +
        '  한데 처음에 무척 당황했다.)\n' +
        '- Windows에서 VS Code를 열고 터미널을 WSL로 사용할 때, Windows에서 연 브라우저가\n' +
        '  localhost에 접근이 잘 되지 않는다.\n' +
        '\n' +
        '  Windows 전원 옵션에 "빨리 켜기 기능"을 꺼두면 localhost 포워딩이 된다고 하는데, 실제로\n' +
        '  해봤을 때 localhost가 두 개의 다른 포트로 열렸을 때 하나만 되더라...\n' +
        '\n' +
        '내 경우는 이미 Windows 시스템을 기반으로 프로젝트들이 구성되어 있었고 WSL을 통합 해보는 거라\n' +
        '위의 문제들을 겪고 말았다 ㅋ\n' +
        '\n' +
        '물론 내 케이스가 아니라면 WSL 2가 더 나을 것 같기는 하다.\n' +
        '\n' +
        '## Windows Terminal 설치\n' +
        '\n' +
        'Windows에는 기본적으로 terminal이 존재하지 않기 때문에, windows terminal을\n' +
        '[Store](https://www.microsoft.com/ko-kr/p/windows-terminal/9n0dx20hk701)에서\n' +
        '별도로 설치해야 한다.\n' +
        '\n' +
        '![Windows Terminal on Store](/upload/2021/windows-store-terminal.jpg)\n' +
        '\n' +
        '## WSL 활성화\n' +
        '\n' +
        '자세한 내용은 [공식문서](https://docs.microsoft.com/ko-kr/windows/wsl/install-win10)를\n' +
        '참고하자.\n' +
        '\n' +
        "터미널(혹은 파워쉘)을 관리자 권한으로 실행 후, 다음을 차례대로 실행 하면된다. (물론 '제어판\n" +
        "&gt; 프로그램 &gt; 프로그램 및 기능 &gt; Windows 기능 켜기/끄기' 에서 GUI로 해도 된다.)\n" +
        '\n' +
        '```jsx\n' +
        'dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n' +
        'dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n' +
        '```\n' +
        '\n' +
        '실행이 종료 되었으면 "재시작"하자.\n' +
        '\n' +
        '일시적인 상황이었는지는 모르겠지만, 최초 이 설정을 할 때 재시작하지 않고 컴퓨터를 종료했다가\n' +
        '다음 날 켜서 설정을 계속 이어가려고 했더니 안되더라 = _=a\n' +
        '\n' +
        '### WSL 2 업데이트\n' +
        '\n' +
        'WSL 2를 사용하려면 적어도 Windows 10 May 2020 Update가 설치되어 있어야 한다. Windows\n' +
        '10 May 2020 Update에 실제 리눅스 커널을 사용하는 WSL 2가 기본 탑재 되었다고 한다.\n' +
        '그런데 좀 이상한게, Windows 10 최신 업데이트를 쓰고 있음에도 불구하고 WSL 2를 사용하려면\n' +
        '별도 패키지를 다운 받아서 설치하고, 추가 설정을 해야 한다. (아니 WSL 2를 기본으로 탑재했으면\n' +
        'WSL 2를 기본으로 사용할 수 있어야지 왜 WSL 1을 기본으로 잡아주고 있고... WSL 2를 쓰기 위해\n' +
        '추가 설치를 왜 해야 하는가...? )\n' +
        '\n' +
        '[MS WSL 설명서 페이지](https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package)로\n' +
        '가서 Linux 커널 업데이트 패키지 다운로드 후 설치한다.\n' +
        '\n' +
        '![Linux 커널 업데이트 설치 화면](/upload/2021/wsl-update.jpg)\n' +
        '\n' +
        '### WSL 기본 버전을 2로 설정\n' +
        '\n' +
        '터미널(혹은 파워쉘)에서 다음 명령을 시행한다.\n' +
        '\n' +
        '이걸 먼저 실행해야 이후로 설치되는 리눅스 시스템이 WSL 2를 기반으로 한다.\n' +
        '\n' +
        '```powershell\n' +
        'wsl --set-default-version 2\n' +
        '```\n' +
        '\n' +
        '## Ubuntu  설치\n' +
        '\n' +
        '다시 [Store](https://www.microsoft.com/ko-kr/store/apps/windows)에서 Ubuntu를\n' +
        '검색해서 설치 한다. (물론 우분투 말고 다른 리눅스 프로덕트를 선택해도 된다. 단지 내가\n' +
        'Ubuntu가 익숙해서 그렇다~~고 하지만 어차피 터미널인데?~~)\n' +
        '\n' +
        '![Windows Store Ubuntu 검색 결과](/upload/2021/windows-store-ubuntu.jpg)\n' +
        '\n' +
        '하지만 이 놈은 어디까지나 "배포" 패키지이므로 설치 후 최초 실행해야 우분투 설치가 진행된다.\n' +
        '시간이 조금 걸리니 기다리자.\n' +
        '\n' +
        '설치가 완료되면 다음과 같이 설치가 완료되었다는 메세지와 함께 웰컴 투 우분투가 노출된다\n' +
        '\n' +
        '![우분투 설치 완료 화면](/upload/2021/complete-install-ubuntu.jpg)\n' +
        '\n' +
        '### 터미널 기본 프로필 Ubuntu로 설정\n' +
        '\n' +
        '터미널에서도 Ubuntu가 기본으로 실행되도록 터미널 기본 프로필을 WSL로 설정한다.\n' +
        '\n' +
        '터미널에서 설정으로 들어가면 관련 json 파일이 열리는데, 여기서 `defaultProfile` 값을\n' +
        '`profiles.list` 에서 Ubuntu 것의 `guid` 값으로 수정하기만 하면 된다.\n' +
        '\n' +
        '```json|data-line="2,11"\n' +
        '{\n' +
        '  "defaultProfile": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
        '  ...\n' +
        '  "profiles":\n' +
        '    {\n' +
        '      ...\n' +
        '      "list":\n' +
        '      [\n' +
        '        ...\n' +
        '        {\n' +
        '          "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
        '          "hidden": false,\n' +
        '          "name": "Ubuntu",\n' +
        '          "source": "Windows.Terminal.Wsl",\n' +
        '          "colorScheme": "Dark+",\n' +
        '          "fontFace": "Hack"\n' +
        '        }\n' +
        '      ]\n' +
        '    },\n' +
        '}\n' +
        '```\n' +
        '\n' +
        '## Git, zsh 설치\n' +
        '\n' +
        'Ubuntu(WSL)를 실행하고, git과 zsh부터 설치한다.\n' +
        '\n' +
        '일단 패키지 레파지토리 인덱스부터 업데이트 하고\n' +
        '\n' +
        '```bash\n' +
        'sudo apt update\n' +
        '```\n' +
        '\n' +
        'git과 zsh을 설치\n' +
        '\n' +
        '```bash\n' +
        'sudo apt install git zsh\n' +
        '```\n' +
        '\n' +
        '## Oh my zsh 설치 및 구성\n' +
        '\n' +
        '### 설치\n' +
        '\n' +
        '터미널에서 다음 명령을 실행하기만 하면 된다.\n' +
        '\n' +
        '```bash\n' +
        'sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"\n' +
        '```\n' +
        '\n' +
        '설치가 완료되면 다음과 같은 메세지를 볼 수 있다.\n' +
        '\n' +
        '![oh my zsh 설치 완료 화면](/upload/2021/complete-install-oh-my-zsh.jpg)\n' +
        '\n' +
        '### 테마 구성\n' +
        '\n' +
        '역시 처음 설치했드면 꾸미기가 먼저다!!! 테마부터 변경한다.\n' +
        '\n' +
        '테마는 [ohmyzsh github wiki](https://github.com/ohmyzsh/ohmyzsh/wiki/Themes)에서\n' +
        '마음에 드는 걸 선택하면 될 것 같다. 내 경우엔 많이 언급되는 `agnoster`를 쓰기로...\n' +
        '\n' +
        '`~/.zshrc` 파일을 열어 `ZSH_THEME` 항목의 값을 변경하기만 하면 된다.\n' +
        '\n' +
        '```bash\n' +
        'vi ~/.zshrc\n' +
        '```\n' +
        '\n' +
        '```ini\n' +
        'ZSH_THEME="agnoster"\n' +
        '```\n' +
        '\n' +
        '참고로 `agnoster` 테마를 쓰려면 [powerline font](https://github.com/powerline/fonts)를\n' +
        '써야 하는데, 내 경우엔 이미 Hack 폰트를 쓰고 있어서 별도로 설치하지 않고 터미널 설정에서\n' +
        '`profile.list`의 해당 항목에 fontFamily 값만 추가하여 해결했다.\n' +
        '\n' +
        '```json|data-line="6"\n' +
        '{\n' +
        '  "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
        '  "hidden": false,\n' +
        '  "name": "Ubuntu",\n' +
        '  "source": "Windows.Terminal.Wsl",\n' +
        '  "fontFace": "Hack"\n' +
        '}\n' +
        '```\n' +
        '\n' +
        '### 터미널 color scheme 구성\n' +
        '\n' +
        '편한 눈을 위해(?) 각 컬러에 대한 상세 값을 설정할 수 있고, 개별적으로 설정이 어렵다면 이미\n' +
        '구성된 scheme들이 [windowsterminalthemes](https://windowsterminalthemes.dev/)에서\n' +
        '제공되고 있으니 이를 참고해서 구성도 가능하다.\n' +
        '\n' +
        '설정은 마찬가지로 터미널 설정에서 이루어지고, `schemes` 항목에 color scheme을 추가하고,\n' +
        '`profiles.list`의 해당 항목에 `colorScheme` 값을 추가 한 color scheme의 `name`\n' +
        '값으로 설정하면 된다.\n' +
        '\n' +
        '```json|data-line="10,16"\n' +
        '"profiles" :{\n' +
        '  "list": [\n' +
        '    ...,\n' +
        '    {\n' +
        '      "guid": "{2c4de342-38b7-51cf-b940-2309a097f518}",\n' +
        '      "hidden": false,\n' +
        '      "name": "Ubuntu",\n' +
        '      "source": "Windows.Terminal.Wsl",\n' +
        '      "fontFace": "Hack",\n' +
        '      "colorScheme": "Dark+"\n' +
        '    }\n' +
        '  ],\n' +
        '},\n' +
        '"schemes": [\n' +
        '  {\n' +
        '    "name": "Dark+",\n' +
        '    "black": "#000000",\n' +
        '    ...\n' +
        '    "background": "#0e0e0e",\n' +
        '    "foreground": "#cccccc"\n' +
        '  }\n' +
        '],\n' +
        '```\n' +
        '\n' +
        '## zsh plugins 설치\n' +
        '\n' +
        '조금 더 편한 zsh 사용을 위해 플러그인을 설치한다.\n' +
        '\n' +
        '### [zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions)\n' +
        '\n' +
        '이 플러그인은 이전에 입력했던 명령을 기반으로 명령을 타이핑 할 때마다 자동 완성을 제공하고\n' +
        '방향키로 해당 자동 완성을 사용할 수 있게 해준다.\n' +
        '\n' +
        '다음 명령으로 설치하고,\n' +
        '\n' +
        '```bash\n' +
        'git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n' +
        '```\n' +
        '\n' +
        '`~/.zshrc` 파일을 열어 `plugins` 항목에 `zsh-autosuggestions`를 추가해준다.\n' +
        '\n' +
        '```ini\n' +
        'plugins=(git zsh-autosuggestions)\n' +
        '```\n' +
        '\n' +
        '### [syntax highlighting](https://github.com/zsh-users/zsh-syntax-highlighting/)\n' +
        '\n' +
        '이 플러그인은 명령어에 구문 강조를 적용해준다.\n' +
        '구문 강조가 적용되면 좋은 것 중 하나는 특정 명령을 사용할 수 있으면 녹색으로, 설치 되지 않음\n' +
        '등의 이유로 알 수 없는 명령이면 빨간색으로 나타난다.\n' +
        '\n' +
        '다음 명령으로 설치하고,\n' +
        '\n' +
        '```bash\n' +
        'git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n' +
        '```\n' +
        '\n' +
        '`~/.zshrc` 파일을 열어 `plugins` 항목에 `zsh-syntax-highlighting`을 추가해준다.\n' +
        '\n' +
        '```ini\n' +
        'plugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n' +
        '```\n' +
        '\n' +
        '## 터미널 프롬프트 변경\n' +
        '\n' +
        '터미널을 열면 다음 화면처럼 username@hostname 형태로 프롬프트가 나오는데, VS Code에서\n' +
        '터미널을 열고 작업하면 이 프롬프트가 차지하는 공간이 적지 않아 보기 불편하다.\n' +
        '\n' +
        '다행히 이것마저도 변경하거나 감출 수 있다!!\n' +
        '\n' +
        '![기본으로는 user name과 host name이 모두 노출된다](/upload/2021/terminal-prompt-full-name.jpg)\n' +
        '\n' +
        '`~/.zshrc` 파일을 열고 다음을 추가하면\n' +
        '\n' +
        '```ini\n' +
        'prompt_context() {}\n' +
        '```\n' +
        '\n' +
        '프롬프트가 사라진다. 두둔!!\n' +
        '\n' +
        '![프롬프가 사라지고 경로만 남았다](/upload/2021/terminal-prompt-hide-name.jpg)\n' +
        '\n' +
        '참고로 다음과 같이 수정하면 user name과 경로만 노출된다.\n' +
        '\n' +
        '```ini\n' +
        'prompt_context() {\n' +
        '    if [[ "$USER" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then\n' +
        '      prompt_segment black default "%(!.%{%F{yellow}%}.)$USER"\n' +
        '    fi\n' +
        '}\n' +
        '```\n' +
        '\n' +
        '### Named directory 구성\n' +
        '\n' +
        '하지만 아직 `/mnt/c/Users/{user name}/` 이 거슬린다.\n' +
        '심지어 이게 디렉토리 깊이가 깊어지면 이 또한 너무 길어진다. 하여 이 마저도 줄여보기로 한다.\n' +
        '\n' +
        '역시 마찬가지로 `~/.zshrc` 파일을 열어 다음을 참고하여 환경에 맞게 추가한다.\n' +
        '\n' +
        '내 경우엔 `c:\\Users\\mulder21c\\Project`와 `c:\\Users\\mulder21c\\Workspace`이 주 사용\n' +
        '디렉토리라 이 디렉토리들에 대한 경로를 변경하기로 했다.\n' +
        '\n' +
        '```ini\n' +
        'hash -d mulder21c=/mnt/c/Users/mulder21c\n' +
        'hash -d Project=/mnt/c/Users/mulder21c/Project\n' +
        'hash -d Workspace=/mnt/c/Users/mulder21c/Workspace\n' +
        '```\n' +
        '\n' +
        '터미널을 다시 열어보면 다음과 같이 지정한 이름으로 표시된다. (단 앞에 `~`이 붙는다.)\n' +
        '\n' +
        '![named directory를 적용하고 경로가 한결 간결해졌다](/upload/2021/terminal-named-directory.jpg)\n' +
        '\n' +
        '이제야 터미널이 좀 간결해진 것 같다.\n' +
        '\n' +
        '## nvm 설치\n' +
        '\n' +
        '마지막으로 node.js 환경을 위해 nvm을 설치한다.\n' +
        '\n' +
        '터미널에서 다음 명령을 주면 자동으로 설치가 진행된다.\n' +
        '\n' +
        '```bash\n' +
        'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n' +
        '```\n' +
        '\n' +
        '참고로, Windows에 nvm for windows가 설치되어 있다면 충돌로 설치가 진행되지 않는다. 내\n' +
        '경우엔 더 이상 Windows 시스템에서 node를 실행할 생각이 없어서 과감히 제거하고 설치했다.\n' +
        '\n' +
        '설치가 완료되면 나타난 메세지 중에 다음과 같은 메세지가 있다.\n' +
        '\n' +
        '```ini\n' +
        'export NVM_DIR="$HOME/.nvm"\n' +
        '[ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh"  # This loads nvm\n' +
        '[ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion\n' +
        '```\n' +
        '\n' +
        '이걸 복사해서 `~/.zshrc`에 추가해야 한다.\n' +
        '\n' +
        '이후 node 설치는 nvm을 이용하면 된다.\n' +
        '\n' +
        '### auto `nvm` use  설정\n' +
        '\n' +
        '마지막으로 아직 테스트 해보지는 않았지만, 최근 Node 10.x, Node 14.x, Node 15.x를 각\n' +
        '환경으로 하는 프로덕트를 왔다 갔다 하다가 Node 버전 문제로 node-sass가 오류를 내뱉는 상황을\n' +
        '자주 만나게 되었다. `nvm use` 하는 걸 까먹기도 했고 현재 프로덕트가 어느 버전에서 돌려야\n' +
        '하는지도 까먹기 일수였다 ;;;\n' +
        '\n' +
        '하여 구성하는 김에 `.nvmrc`를 이용해서 자동으로 `nvm use`가 적용되게 하는 설정을 추가했다.\n' +
        '\n' +
        '다음의 코드를 `~/.zshrc`에 추가하면되는데, 아직 테스트해보진 않아서 잘 되는지는 모르겠다 = _=a\n' +
        '뭐... stackoverflow에서 건져온 건데 추천이 많았으니 잘 되겠지...? /=ㅁ=/\n' +
        '\n' +
        '```ini\n' +
        '# place this after nvm initialization!\n' +
        'autoload -U add-zsh-hook\n' +
        'load-nvmrc() {\n' +
        '  local node_version="$(nvm version)"\n' +
        '  local nvmrc_path="$(nvm_find_nvmrc)"\n' +
        '\n' +
        '  if [ -n "$nvmrc_path" ]; then\n' +
        '    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")\n' +
        '\n' +
        '    if [ "$nvmrc_node_version" = "N/A" ]; then\n' +
        '      nvm install\n' +
        '    elif [ "$nvmrc'... 239 more characters,
      slug: 'setting-up-wsl-2-dev-env-and-zsh-on-windws-10',
      published: true,
      comments: true,
      layout: 'post',
      photos: [],
      link: '',
      _id: 'clcytfa4r00aatawwe3zac5qf',
      content: '<h2 id="기존-환경"><a href="#기존-환경" class="headerlink" title="기존 환경"></a>기존 환경</h2><p>얼마 전까지만 해도 VS Code의 터미널을 git bash로 (이하 bash) 설정해서 5년 가까이 bash\n' +
        '상에서 CLI를 사용해왔다. (아! 참고로 나는 Windows 10 사용자다. 맥이었으면 진즉부터\n' +
        'terminal을 썼겠지...)</p>\n' +
        '<p>이 블로그 테마를 제작 후에 몇 번 mac이나 linux 환경에서 테마 설치 오류에 대한 이슈가\n' +
        '올라왔었고, 최근에 어떤 사이트를 번역하는데 해당 사이트 빌드가 bash 상에서는 정상적으로\n' +
        '이루어지지 않아 확인해보니 linux 상에서는 올바르게 빌드 되어 linux 환경에 대한 필요가\n' +
        '생겨났다.</p>\n' +
        '<p>결국 미루고 미루던 WSL 사용을 시도하기로 하고 반 년 정도를 이 방식으로 써 본 것 같다.\n' +
        '(미루고 미룬 이유는 Windows를 못믿어서... &#x3D; _&#x3D;a 항상 예기치 않은 오류를 만들어주는\n' +
        ' Windows ... )</p>\n' +
        '<p>무튼, 반 년 정도의 사용 경험에서는 크게 문제를 느끼지 못해서 이제 본격적으로 WSL + zsh\n' +
        '환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가 설정을 차후에 필요할까 기록으로\n' +
        '남겨둔다. (안녕 bash~ 오래 동안 고마웠어 ㅠ)</p>\n' +
        '<h2 id="WSL-1-or-WSL-2"><a href="#WSL-1-or-WSL-2" class="headerlink" title="WSL 1 or WSL 2 ?"></a>WSL 1 or WSL 2 ?</h2><p>WSL을 쓰기로 한 시점에 결정해야 할 것 중 하나는 일단 WSL 1을 쓸 것인가 혹은 WSL 2를 쓸\n' +
        '것인가 같다. 물론, WSL 2 구성까지 해 두면 언제든지 원하는 시점에 WSL 1과 2를 오갈 수 있고\n' +
        '따라서 WSL 2 구성 방법으로 포스팅 해두기는 했다.</p>\n' +
        '<p>내 경우엔 2가지를 다 써봤는데, 써보고 난 이후에 드는 생각은 일단 내 경우에는 WSL 1을 쓰는\n' +
        '게 아직은 낫지 않을까 싶다. MS에서는 WSL 2가 더 빠르고 전체 리눅스 커널 사용, 시스템 호출\n' +
        '호환성 등을 장점으로 들고 있지만 생각보다 만나게 되는 장애물이 많았다.</p>\n' +
        '<p>일단 몇 가지 선택에 필요한 기준에 따라 나누어 보면,\n' +
        '기존의 Windows 시스템에서 이미 프로젝트가 구성되어 있고 (Node든 뭐 다른 것이든) 여기에\n' +
        'WSL을 통합하는 거라면 WSL 1을 추천한다.\n' +
        '반면 개발 환경을 새로 설정 하는 상황이나 새로 설정하는 것을 감안 할 생각이고, 리눅스 시스템에\n' +
        '거부감이 없다면 WSL 2가 나을 것 같다.</p>\n' +
        '<p>이렇게 나눈 이유는, WSL 2에서는</p>\n' +
        '<ul>\n' +
        '<li><p>Windows 파일 시스템(<code>/mnt/</code>)으로의 접근이 체감 될 만큼 느리다.</p>\n' +
        '</li>\n' +
        '<li><p>Windows 파일 시스템에 이미 구성된 프로젝트의 경우, 파일 변경을 감지 하지 못하는 듯 하다.\n' +
        '(Node의 watch 기능이 정상적으로 동작해주지 못한다. 파일 시스템이 다르니 당연한 것 같기는\n' +
        '한데 처음에 무척 당황했다.)</p>\n' +
        '</li>\n' +
        '<li><p>Windows에서 VS Code를 열고 터미널을 WSL로 사용할 때, Windows에서 연 브라우저가\n' +
        'localhost에 접근이 잘 되지 않는다.</p>\n' +
        '<p>Windows 전원 옵션에 &quot;빨리 켜기 기능&quot;을 꺼두면 localhost 포워딩이 된다고 하는데, 실제로\n' +
        '해봤을 때 localhost가 두 개의 다른 포트로 열렸을 때 하나만 되더라...</p>\n' +
        '</li>\n' +
        '</ul>\n' +
        '<p>내 경우는 이미 Windows 시스템을 기반으로 프로젝트들이 구성되어 있었고 WSL을 통합 해보는 거라\n' +
        '위의 문제들을 겪고 말았다 ㅋ</p>\n' +
        '<p>물론 내 케이스가 아니라면 WSL 2가 더 나을 것 같기는 하다.</p>\n' +
        '<h2 id="Windows-Terminal-설치"><a href="#Windows-Terminal-설치" class="headerlink" title="Windows Terminal 설치"></a>Windows Terminal 설치</h2><p>Windows에는 기본적으로 terminal이 존재하지 않기 때문에, windows terminal을\n' +
        '<a href="https://www.microsoft.com/ko-kr/p/windows-terminal/9n0dx20hk701">Store</a>에서\n' +
        '별도로 설치해야 한다.</p>\n' +
        '<p><img src="/upload/2021/windows-store-terminal.jpg" alt="Windows Terminal on Store"></p>\n' +
        '<h2 id="WSL-활성화"><a href="#WSL-활성화" class="headerlink" title="WSL 활성화"></a>WSL 활성화</h2><p>자세한 내용은 <a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10">공식문서</a>를\n' +
        '참고하자.</p>\n' +
        '<p>터미널(혹은 파워쉘)을 관리자 권한으로 실행 후, 다음을 차례대로 실행 하면된다. (물론 &#39;제어판\n' +
        '&gt; 프로그램 &gt; 프로그램 및 기능 &gt; Windows 기능 켜기&#x2F;끄기&#39; 에서 GUI로 해도 된다.)</p>\n' +
        '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span>enable<span class="token operator">-</span>feature <span class="token operator">/</span>featurename<span class="token operator">:</span>Microsoft<span class="token operator">-</span>Windows<span class="token operator">-</span>Subsystem<span class="token operator">-</span>Linux <span class="token operator">/</span>all <span class="token operator">/</span>norestart\n' +
        'dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span>enable<span class="token operator">-</span>feature <span class="token operator">/</span>featurename<span class="token operator">:</span>VirtualMachinePlatform <span class="token operator">/</span>all <span class="token operator">/</span>norestart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>\n' +
        '\n' +
        '<p>실행이 종료 되었으면 &quot;재시작&quot;하자.</p>\n' +
        '<p>일시적인 상황이었는지는 모르겠지만, 최초 이 설정을 할 때 재시작하지 않고 컴퓨터를 종료했다가\n' +
        '다음 날 켜서 설정을 계속 이어가려고 했더니 안되더라 &#x3D; _&#x3D;a</p>\n' +
        '<h3 id="WSL-2-업데이트"><a href="#WSL-2-업데이트" class="headerlink" title="WSL 2 업데이트"></a>WSL 2 업데이트</h3><p>WSL 2를 사용하려면 적어도 Windows 10 May 2020 Update가 설치되어 있어야 한다. Windows\n' +
        '10 May 2020 Update에 실제 리눅스 커널을 사용하는 WSL 2가 기본 탑재 되었다고 한다.\n' +
        '그런데 좀 이상한게, Windows 10 최신 업데이트를 쓰고 있음에도 불구하고 WSL 2를 사용하려면\n' +
        '별도 패키지를 다운 받아서 설치하고, 추가 설정을 해야 한다. (아니 WSL 2를 기본으로 탑재했으면\n' +
        'WSL 2를 기본으로 사용할 수 있어야지 왜 WSL 1을 기본으로 잡아주고 있고... WSL 2를 쓰기 위해\n' +
        '추가 설치를 왜 해야 하는가...? )</p>\n' +
        '<p><a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package">MS WSL 설명서 페이지</a>로\n' +
        '가서 Linux 커널 업데이트 패키지 다운로드 후 설치한다.</p>\n' +
        '<p><img src="/upload/2021/wsl-update.jpg" alt="Linux 커널 업데이트 설치 화면"></p>\n' +
        '<h3 id="WSL-기본-버전을-2로-설정"><a href="#WSL-기본-버전을-2로-설정" class="headerlink" title="WSL 기본 버전을 2로 설정"></a>WSL 기본 버전을 2로 설정</h3><p>터미널(혹은 파워쉘)에서 다음 명령을 시행한다.</p>\n' +
        '<p>이걸 먼저 실행해야 이후로 설치되는 리눅스 시스템이 WSL 2를 기반으로 한다.</p>\n' +
        '<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-default</span><span class="token operator">-</span>version 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<h2 id="Ubuntu-설치"><a href="#Ubuntu-설치" class="headerlink" title="Ubuntu  설치"></a>Ubuntu  설치</h2><p>다시 <a href="https://www.microsoft.com/ko-kr/store/apps/windows">Store</a>에서 Ubuntu를\n' +
        '검색해서 설치 한다. (물론 우분투 말고 다른 리눅스 프로덕트를 선택해도 된다. 단지 내가\n' +
        'Ubuntu가 익숙해서 그렇다<del>고 하지만 어차피 터미널인데?</del>)</p>\n' +
        '<p><img src="/upload/2021/windows-store-ubuntu.jpg" alt="Windows Store Ubuntu 검색 결과"></p>\n' +
        '<p>하지만 이 놈은 어디까지나 &quot;배포&quot; 패키지이므로 설치 후 최초 실행해야 우분투 설치가 진행된다.\n' +
        '시간이 조금 걸리니 기다리자.</p>\n' +
        '<p>설치가 완료되면 다음과 같이 설치가 완료되었다는 메세지와 함께 웰컴 투 우분투가 노출된다</p>\n' +
        '<p><img src="/upload/2021/complete-install-ubuntu.jpg" alt="우분투 설치 완료 화면"></p>\n' +
        '<h3 id="터미널-기본-프로필-Ubuntu로-설정"><a href="#터미널-기본-프로필-Ubuntu로-설정" class="headerlink" title="터미널 기본 프로필 Ubuntu로 설정"></a>터미널 기본 프로필 Ubuntu로 설정</h3><p>터미널에서도 Ubuntu가 기본으로 실행되도록 터미널 기본 프로필을 WSL로 설정한다.</p>\n' +
        '<p>터미널에서 설정으로 들어가면 관련 json 파일이 열리는데, 여기서 <code>defaultProfile</code> 값을\n' +
        '<code>profiles.list</code> 에서 Ubuntu 것의 <code>guid</code> 값으로 수정하기만 하면 된다.</p>\n' +
        '<pre class="line-numbers language-json|data-line" data-language="json|data-line"><code class="language-json|data-line">&#123;\n' +
        '  &quot;defaultProfile&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,\n' +
        '  ...\n' +
        '  &quot;profiles&quot;:\n' +
        '    &#123;\n' +
        '      ...\n' +
        '      &quot;list&quot;:\n' +
        '      [\n' +
        '        ...\n' +
        '        &#123;\n' +
        '          &quot;guid&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,\n' +
        '          &quot;hidden&quot;: false,\n' +
        '          &quot;name&quot;: &quot;Ubuntu&quot;,\n' +
        '          &quot;source&quot;: &quot;Windows.Terminal.Wsl&quot;,\n' +
        '          &quot;colorScheme&quot;: &quot;Dark+&quot;,\n' +
        '          &quot;fontFace&quot;: &quot;Hack&quot;\n' +
        '        &#125;\n' +
        '      ]\n' +
        '    &#125;,\n' +
        '&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
        '\n' +
        '<h2 id="Git-zsh-설치"><a href="#Git-zsh-설치" class="headerlink" title="Git, zsh 설치"></a>Git, zsh 설치</h2><p>Ubuntu(WSL)를 실행하고, git과 zsh부터 설치한다.</p>\n' +
        '<p>일단 패키지 레파지토리 인덱스부터 업데이트 하고</p>\n' +
        '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<p>git과 zsh을 설치</p>\n' +
        '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span> <span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<h2 id="Oh-my-zsh-설치-및-구성"><a href="#Oh-my-zsh-설치-및-구성" class="headerlink" title="Oh my zsh 설치 및 구성"></a>Oh my zsh 설치 및 구성</h2><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><p>터미널에서 다음 명령을 실행하기만 하면 된다.</p>\n' +
        '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<p>설치가 완료되면 다음과 같은 메세지를 볼 수 있다.</p>\n' +
        '<p><img src="/upload/2021/complete-install-oh-my-zsh.jpg" alt="oh my zsh 설치 완료 화면"></p>\n' +
        '<h3 id="테마-구성"><a href="#테마-구성" class="headerlink" title="테마 구성"></a>테마 구성</h3><p>역시 처음 설치했드면 꾸미기가 먼저다!!! 테마부터 변경한다.</p>\n' +
        '<p>테마는 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">ohmyzsh github wiki</a>에서\n' +
        '마음에 드는 걸 선택하면 될 것 같다. 내 경우엔 많이 언급되는 <code>agnoster</code>를 쓰기로...</p>\n' +
        '<p><code>~/.zshrc</code> 파일을 열어 <code>ZSH_THEME</code> 항목의 값을 변경하기만 하면 된다.</p>\n' +
        '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">ZSH_THEME</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">agnoster</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<p>참고로 <code>agnoster</code> 테마를 쓰려면 <a href="https://github.com/powerline/fonts">powerline font</a>를\n' +
        '써야 하는데, 내 경우엔 이미 Hack 폰트를 쓰고 있어서 별도로 설치하지 않고 터미널 설정에서\n' +
        '<code>profile.list</code>의 해당 항목에 fontFamily 값만 추가하여 해결했다.</p>\n' +
        '<pre class="line-numbers language-j'... 11610 more characters,
      site: [Object],
      excerpt: '',
      more: '<h2 id="기존-환경"><a href="#기존-환경" class="headerlink" title="기존 환경"></a>기존 환경</h2><p>얼마 전까지만 해도 VS Code의 터미널을 git bash로 (이하 bash) 설정해서 5년 가까이 bash\n' +
        '상에서 CLI를 사용해왔다. (아! 참고로 나는 Windows 10 사용자다. 맥이었으면 진즉부터\n' +
        'terminal을 썼겠지...)</p>\n' +
        '<p>이 블로그 테마를 제작 후에 몇 번 mac이나 linux 환경에서 테마 설치 오류에 대한 이슈가\n' +
        '올라왔었고, 최근에 어떤 사이트를 번역하는데 해당 사이트 빌드가 bash 상에서는 정상적으로\n' +
        '이루어지지 않아 확인해보니 linux 상에서는 올바르게 빌드 되어 linux 환경에 대한 필요가\n' +
        '생겨났다.</p>\n' +
        '<p>결국 미루고 미루던 WSL 사용을 시도하기로 하고 반 년 정도를 이 방식으로 써 본 것 같다.\n' +
        '(미루고 미룬 이유는 Windows를 못믿어서... &#x3D; _&#x3D;a 항상 예기치 않은 오류를 만들어주는\n' +
        ' Windows ... )</p>\n' +
        '<p>무튼, 반 년 정도의 사용 경험에서는 크게 문제를 느끼지 못해서 이제 본격적으로 WSL + zsh\n' +
        '환경을 기본 환경으로 설정하기로 하고, 개인적으로 필요한 추가 설정을 차후에 필요할까 기록으로\n' +
        '남겨둔다. (안녕 bash~ 오래 동안 고마웠어 ㅠ)</p>\n' +
        '<h2 id="WSL-1-or-WSL-2"><a href="#WSL-1-or-WSL-2" class="headerlink" title="WSL 1 or WSL 2 ?"></a>WSL 1 or WSL 2 ?</h2><p>WSL을 쓰기로 한 시점에 결정해야 할 것 중 하나는 일단 WSL 1을 쓸 것인가 혹은 WSL 2를 쓸\n' +
        '것인가 같다. 물론, WSL 2 구성까지 해 두면 언제든지 원하는 시점에 WSL 1과 2를 오갈 수 있고\n' +
        '따라서 WSL 2 구성 방법으로 포스팅 해두기는 했다.</p>\n' +
        '<p>내 경우엔 2가지를 다 써봤는데, 써보고 난 이후에 드는 생각은 일단 내 경우에는 WSL 1을 쓰는\n' +
        '게 아직은 낫지 않을까 싶다. MS에서는 WSL 2가 더 빠르고 전체 리눅스 커널 사용, 시스템 호출\n' +
        '호환성 등을 장점으로 들고 있지만 생각보다 만나게 되는 장애물이 많았다.</p>\n' +
        '<p>일단 몇 가지 선택에 필요한 기준에 따라 나누어 보면,\n' +
        '기존의 Windows 시스템에서 이미 프로젝트가 구성되어 있고 (Node든 뭐 다른 것이든) 여기에\n' +
        'WSL을 통합하는 거라면 WSL 1을 추천한다.\n' +
        '반면 개발 환경을 새로 설정 하는 상황이나 새로 설정하는 것을 감안 할 생각이고, 리눅스 시스템에\n' +
        '거부감이 없다면 WSL 2가 나을 것 같다.</p>\n' +
        '<p>이렇게 나눈 이유는, WSL 2에서는</p>\n' +
        '<ul>\n' +
        '<li><p>Windows 파일 시스템(<code>/mnt/</code>)으로의 접근이 체감 될 만큼 느리다.</p>\n' +
        '</li>\n' +
        '<li><p>Windows 파일 시스템에 이미 구성된 프로젝트의 경우, 파일 변경을 감지 하지 못하는 듯 하다.\n' +
        '(Node의 watch 기능이 정상적으로 동작해주지 못한다. 파일 시스템이 다르니 당연한 것 같기는\n' +
        '한데 처음에 무척 당황했다.)</p>\n' +
        '</li>\n' +
        '<li><p>Windows에서 VS Code를 열고 터미널을 WSL로 사용할 때, Windows에서 연 브라우저가\n' +
        'localhost에 접근이 잘 되지 않는다.</p>\n' +
        '<p>Windows 전원 옵션에 &quot;빨리 켜기 기능&quot;을 꺼두면 localhost 포워딩이 된다고 하는데, 실제로\n' +
        '해봤을 때 localhost가 두 개의 다른 포트로 열렸을 때 하나만 되더라...</p>\n' +
        '</li>\n' +
        '</ul>\n' +
        '<p>내 경우는 이미 Windows 시스템을 기반으로 프로젝트들이 구성되어 있었고 WSL을 통합 해보는 거라\n' +
        '위의 문제들을 겪고 말았다 ㅋ</p>\n' +
        '<p>물론 내 케이스가 아니라면 WSL 2가 더 나을 것 같기는 하다.</p>\n' +
        '<h2 id="Windows-Terminal-설치"><a href="#Windows-Terminal-설치" class="headerlink" title="Windows Terminal 설치"></a>Windows Terminal 설치</h2><p>Windows에는 기본적으로 terminal이 존재하지 않기 때문에, windows terminal을\n' +
        '<a href="https://www.microsoft.com/ko-kr/p/windows-terminal/9n0dx20hk701">Store</a>에서\n' +
        '별도로 설치해야 한다.</p>\n' +
        '<p><img src="/upload/2021/windows-store-terminal.jpg" alt="Windows Terminal on Store"></p>\n' +
        '<h2 id="WSL-활성화"><a href="#WSL-활성화" class="headerlink" title="WSL 활성화"></a>WSL 활성화</h2><p>자세한 내용은 <a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10">공식문서</a>를\n' +
        '참고하자.</p>\n' +
        '<p>터미널(혹은 파워쉘)을 관리자 권한으로 실행 후, 다음을 차례대로 실행 하면된다. (물론 &#39;제어판\n' +
        '&gt; 프로그램 &gt; 프로그램 및 기능 &gt; Windows 기능 켜기&#x2F;끄기&#39; 에서 GUI로 해도 된다.)</p>\n' +
        '<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span>enable<span class="token operator">-</span>feature <span class="token operator">/</span>featurename<span class="token operator">:</span>Microsoft<span class="token operator">-</span>Windows<span class="token operator">-</span>Subsystem<span class="token operator">-</span>Linux <span class="token operator">/</span>all <span class="token operator">/</span>norestart\n' +
        'dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span>enable<span class="token operator">-</span>feature <span class="token operator">/</span>featurename<span class="token operator">:</span>VirtualMachinePlatform <span class="token operator">/</span>all <span class="token operator">/</span>norestart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>\n' +
        '\n' +
        '<p>실행이 종료 되었으면 &quot;재시작&quot;하자.</p>\n' +
        '<p>일시적인 상황이었는지는 모르겠지만, 최초 이 설정을 할 때 재시작하지 않고 컴퓨터를 종료했다가\n' +
        '다음 날 켜서 설정을 계속 이어가려고 했더니 안되더라 &#x3D; _&#x3D;a</p>\n' +
        '<h3 id="WSL-2-업데이트"><a href="#WSL-2-업데이트" class="headerlink" title="WSL 2 업데이트"></a>WSL 2 업데이트</h3><p>WSL 2를 사용하려면 적어도 Windows 10 May 2020 Update가 설치되어 있어야 한다. Windows\n' +
        '10 May 2020 Update에 실제 리눅스 커널을 사용하는 WSL 2가 기본 탑재 되었다고 한다.\n' +
        '그런데 좀 이상한게, Windows 10 최신 업데이트를 쓰고 있음에도 불구하고 WSL 2를 사용하려면\n' +
        '별도 패키지를 다운 받아서 설치하고, 추가 설정을 해야 한다. (아니 WSL 2를 기본으로 탑재했으면\n' +
        'WSL 2를 기본으로 사용할 수 있어야지 왜 WSL 1을 기본으로 잡아주고 있고... WSL 2를 쓰기 위해\n' +
        '추가 설치를 왜 해야 하는가...? )</p>\n' +
        '<p><a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package">MS WSL 설명서 페이지</a>로\n' +
        '가서 Linux 커널 업데이트 패키지 다운로드 후 설치한다.</p>\n' +
        '<p><img src="/upload/2021/wsl-update.jpg" alt="Linux 커널 업데이트 설치 화면"></p>\n' +
        '<h3 id="WSL-기본-버전을-2로-설정"><a href="#WSL-기본-버전을-2로-설정" class="headerlink" title="WSL 기본 버전을 2로 설정"></a>WSL 기본 버전을 2로 설정</h3><p>터미널(혹은 파워쉘)에서 다음 명령을 시행한다.</p>\n' +
        '<p>이걸 먼저 실행해야 이후로 설치되는 리눅스 시스템이 WSL 2를 기반으로 한다.</p>\n' +
        '<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-default</span><span class="token operator">-</span>version 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<h2 id="Ubuntu-설치"><a href="#Ubuntu-설치" class="headerlink" title="Ubuntu  설치"></a>Ubuntu  설치</h2><p>다시 <a href="https://www.microsoft.com/ko-kr/store/apps/windows">Store</a>에서 Ubuntu를\n' +
        '검색해서 설치 한다. (물론 우분투 말고 다른 리눅스 프로덕트를 선택해도 된다. 단지 내가\n' +
        'Ubuntu가 익숙해서 그렇다<del>고 하지만 어차피 터미널인데?</del>)</p>\n' +
        '<p><img src="/upload/2021/windows-store-ubuntu.jpg" alt="Windows Store Ubuntu 검색 결과"></p>\n' +
        '<p>하지만 이 놈은 어디까지나 &quot;배포&quot; 패키지이므로 설치 후 최초 실행해야 우분투 설치가 진행된다.\n' +
        '시간이 조금 걸리니 기다리자.</p>\n' +
        '<p>설치가 완료되면 다음과 같이 설치가 완료되었다는 메세지와 함께 웰컴 투 우분투가 노출된다</p>\n' +
        '<p><img src="/upload/2021/complete-install-ubuntu.jpg" alt="우분투 설치 완료 화면"></p>\n' +
        '<h3 id="터미널-기본-프로필-Ubuntu로-설정"><a href="#터미널-기본-프로필-Ubuntu로-설정" class="headerlink" title="터미널 기본 프로필 Ubuntu로 설정"></a>터미널 기본 프로필 Ubuntu로 설정</h3><p>터미널에서도 Ubuntu가 기본으로 실행되도록 터미널 기본 프로필을 WSL로 설정한다.</p>\n' +
        '<p>터미널에서 설정으로 들어가면 관련 json 파일이 열리는데, 여기서 <code>defaultProfile</code> 값을\n' +
        '<code>profiles.list</code> 에서 Ubuntu 것의 <code>guid</code> 값으로 수정하기만 하면 된다.</p>\n' +
        '<pre class="line-numbers language-json|data-line" data-language="json|data-line"><code class="language-json|data-line">&#123;\n' +
        '  &quot;defaultProfile&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,\n' +
        '  ...\n' +
        '  &quot;profiles&quot;:\n' +
        '    &#123;\n' +
        '      ...\n' +
        '      &quot;list&quot;:\n' +
        '      [\n' +
        '        ...\n' +
        '        &#123;\n' +
        '          &quot;guid&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;,\n' +
        '          &quot;hidden&quot;: false,\n' +
        '          &quot;name&quot;: &quot;Ubuntu&quot;,\n' +
        '          &quot;source&quot;: &quot;Windows.Terminal.Wsl&quot;,\n' +
        '          &quot;colorScheme&quot;: &quot;Dark+&quot;,\n' +
        '          &quot;fontFace&quot;: &quot;Hack&quot;\n' +
        '        &#125;\n' +
        '      ]\n' +
        '    &#125;,\n' +
        '&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
        '\n' +
        '<h2 id="Git-zsh-설치"><a href="#Git-zsh-설치" class="headerlink" title="Git, zsh 설치"></a>Git, zsh 설치</h2><p>Ubuntu(WSL)를 실행하고, git과 zsh부터 설치한다.</p>\n' +
        '<p>일단 패키지 레파지토리 인덱스부터 업데이트 하고</p>\n' +
        '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<p>git과 zsh을 설치</p>\n' +
        '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span> <span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<h2 id="Oh-my-zsh-설치-및-구성"><a href="#Oh-my-zsh-설치-및-구성" class="headerlink" title="Oh my zsh 설치 및 구성"></a>Oh my zsh 설치 및 구성</h2><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><p>터미널에서 다음 명령을 실행하기만 하면 된다.</p>\n' +
        '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<p>설치가 완료되면 다음과 같은 메세지를 볼 수 있다.</p>\n' +
        '<p><img src="/upload/2021/complete-install-oh-my-zsh.jpg" alt="oh my zsh 설치 완료 화면"></p>\n' +
        '<h3 id="테마-구성"><a href="#테마-구성" class="headerlink" title="테마 구성"></a>테마 구성</h3><p>역시 처음 설치했드면 꾸미기가 먼저다!!! 테마부터 변경한다.</p>\n' +
        '<p>테마는 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">ohmyzsh github wiki</a>에서\n' +
        '마음에 드는 걸 선택하면 될 것 같다. 내 경우엔 많이 언급되는 <code>agnoster</code>를 쓰기로...</p>\n' +
        '<p><code>~/.zshrc</code> 파일을 열어 <code>ZSH_THEME</code> 항목의 값을 변경하기만 하면 된다.</p>\n' +
        '<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">ZSH_THEME</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">agnoster</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>\n' +
        '\n' +
        '<p>참고로 <code>agnoster</code> 테마를 쓰려면 <a href="https://github.com/powerline/fonts">powerline font</a>를\n' +
        '써야 하는데, 내 경우엔 이미 Hack 폰트를 쓰고 있어서 별도로 설치하지 않고 터미널 설정에서\n' +
        '<code>profile.list</code>의 해당 항목에 fontFamily 값만 추가하여 해결했다.</p>\n' +
        '<pre class="line-numbers language-j'... 11610 more characters,
      path: [Getter],
      permalink: [Getter],
      full_source: [Getter],
      asset_dir: [Getter],
      tags: [Getter],
      categories: [Getter],
      prev: [_Document],
      next: [Circular *1],
      __post: true
    },
    next: [Circular *2],
    __post: true
  },
  next: <ref *3> _Document {
    title: 'colum flexbox에서 padding bottom 문제 해결',
    hero: '/upload/2020/fails-padding-bottom-in-flexbox.jpg',
    seo: {
      image: '/upload/2020/fails-padding-bottom-in-flexbox.jpg',
      description: 'Firefox에서 column flexbox에 하단에 적용해 둔 padding-bottom이 실종되는 상황을\n만나게 되었다.\n'
    },
    thumbnail: '/upload/2020/thumbs/fails-padding-bottom-in-flexbox.jpg',
    style: '.hero {\n' +
      '  &-wrapper {\n' +
      '    text-shadow:\n' +
      '      1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
      '      -1px -1px 1em rgba(20, 12, 24, 0.5);\n' +
      '  }\n' +
      '  &__image {\n' +
      '    opacity: 0.35\n' +
      '  }\n' +
      '}\n' +
      '.article__content{\n' +
      '  &::after {\n' +
      '    @extend %clearfix;\n' +
      '  }\n' +
      '  .figure {\n' +
      '\n' +
      '    &__caption {\n' +
      '      max-width: 334px;\n' +
      '      margin-top: 1em;\n' +
      '      font-size: 0.85em;\n' +
      '      color: lighten(#000, 50%);\n' +
      '      text-align: center;\n' +
      '\n' +
      "      @include respond-to('x-small') {\n" +
      '        max-width: 100%;\n' +
      '        font-size: 0.75em;\n' +
      '      }\n' +
      '\n' +
      '      &::before {\n' +
      '        content:"[ ";\n' +
      '      }\n' +
      '      &::after {\n' +
      '        content:" ]";\n' +
      '      }\n' +
      '    }\n' +
      '  }\n' +
      '}\n',
    date: Moment<2020-12-08T19:12:13+09:00>,
    subtitle: null,
    _content: '\n' +
      '\n' +
      'FlexBox를 사용 하는 중 padding-bottom이 실종되는 상황을 만나게 되었다.\n' +
      '\n' +
      '정확하게는 Firefox에서 column flexbox에 발생 된 문제로\n' +
      '<code class="language-css">overflow: auto</code>에 의해 스크롤이 발생되었을 때\n' +
      '하단에 적용해 둔 padding이 실종되는 상황이다.\n' +
      '\n' +
      '물론, Chrome은 렌더링이 잘 된다... <s>힘내요 FireFox</s>\n' +
      '\n' +
      '## 발견된 상황\n' +
      '\n' +
      '### 적용된 코드\n' +
      '\n' +
      '해당 문제와 관련 없는 코드는 삭제해 두었고, padding-top/bottom에 해당 하는 값은\n' +
      '식별이 쉽도록 일부러 100px을 넣어두었다.\n' +
      '\n' +
      '```css\n' +
      '.frm {\n' +
      '  box-sizing: border-box;\n' +
      '  display: flex;\n' +
      '  flex-flow: column;\n' +
      '  justify-content: flex-start;\n' +
      '  align-items: flex-start;\n' +
      '  overflow: auto;\n' +
      '  margin: auto;\n' +
      '  padding: 100px 30px;\n' +
      '  ...\n' +
      '}\n' +
      '```\n' +
      '\n' +
      '### 렌더링 된 화면\n' +
      '\n' +
      '{% raw %}\n' +
      '<figure class="figure">\n' +
      '  <img\n' +
      '    src="/upload/2020/fails-padding-bottom-in-flexbox.jpg"\n' +
      '    alt="" >\n' +
      '  <figcaption class="figure__caption">\n' +
      '    상단에는 padding이 적용되어 있지만, 하단에는 padding이 적용되지 않은 것 처럼 보여진다.\n' +
      '  </figcaption>\n' +
      '</figure>\n' +
      '{% endraw %}\n' +
      '\n' +
      '## Fix it\n' +
      '\n' +
      '찾아보니 FireFox와 Safari에서 발생되는 버그로 알려져 있더라.\n' +
      '나는 Mac이 없는 관계로... Safari에서는 테스트를 해보지 못했지만, 같은 문제가 발생되더라도\n' +
      '동일한 방법으로 충분히 해결 될 거라고 생각한다.\n' +
      '\n' +
      '사실 이게 해결(?)이라기 보다는 trick에 가깝다고 봐야 할 것 같고, 아마도 특정 상황에서는\n' +
      '사용하지 못하는 방법일 수도 있다. (왜 그런지는 코드를 보면 알 거다)\n' +
      '\n' +
      '키는 <code class="language-css">::before</code>,\n' +
      '<code class="language-css">::after</code> 가상 선택자에 있다.\n' +
      '단지 아래와 같은 코드를 바꾸어주었을 뿐이다.\n' +
      '\n' +
      '```scss\n' +
      '.frm {\n' +
      '  box-sizing: border-box;\n' +
      '  display: flex;\n' +
      '  flex-flow: column;\n' +
      '  justify-content: flex-start;\n' +
      '  align-items: flex-start;\n' +
      '  overflow: auto;\n' +
      '  margin: auto;\n' +
      '  padding: 0 30px;\n' +
      '  ...\n' +
      '\n' +
      '  &::before,\n' +
      '  &::after {\n' +
      '    flex: 0 0 100px;\n' +
      '    width: 100%;\n' +
      '    content: "";\n' +
      '  }\n' +
      '}\n' +
      '```\n' +
      '\n' +
      'padding-top/bottom 에 해당하는 값을 가상선택자의 flex로 이동시켜주는 방식으로 요소 상/하\n' +
      '단에 그 만큼의 여백에 해당하는 빈 요소를 집어 넣은...\n' +
      '\n' +
      '참고로 `width: 100%`를 넣은 건, width값이 0이면\n' +
      '렌더링 되지 않아서다;; <s>나한테 왜이래 Firefox...</s>\n' +
      '\n' +
      '<code class="language-css">::before</code>,\n' +
      '<code class="language-css">::after</code>를 사용했기 때문에, 이미 이를 다른 스타일링을\n' +
      '위해 사용하고 있다면 다소 이 방법을 사용하기는 어렵겠다.\n' +
      '\n' +
      '그저 Firefox와 Safari가 이 버그를 수정해주길 기다릴 뿐...\n',
    source: '_posts/2020-12-08-fix-padding-bottom-bug-in-flex-on-firefox.md',
    raw: '---\n' +
      'title: colum flexbox에서 padding bottom 문제 해결\n' +
      'tags:\n' +
      '  - flex\n' +
      '  - flexbox\n' +
      '  - padding-bottom\n' +
      '  - firefox\n' +
      '  - overflow\n' +
      'categories:\n' +
      '  - 개발노트\n' +
      '  - HTML/CSS\n' +
      'hero: /upload/2020/fails-padding-bottom-in-flexbox.jpg\n' +
      'seo:\n' +
      '  image: /upload/2020/fails-padding-bottom-in-flexbox.jpg\n' +
      '  description: |\n' +
      '    Firefox에서 column flexbox에 하단에 적용해 둔 padding-bottom이 실종되는 상황을\n' +
      '    만나게 되었다.\n' +
      'thumbnail: /upload/2020/thumbs/fails-padding-bottom-in-flexbox.jpg\n' +
      'style: |\n' +
      '  .hero {\n' +
      '    &-wrapper {\n' +
      '      text-shadow:\n' +
      '        1px 1px 1em rgba(20, 12, 24, 0.9),\n' +
      '        -1px -1px 1em rgba(20, 12, 24, 0.5);\n' +
      '    }\n' +
      '    &__image {\n' +
      '      opacity: 0.35\n' +
      '    }\n' +
      '  }\n' +
      '  .article__content{\n' +
      '    &::after {\n' +
      '      @extend %clearfix;\n' +
      '    }\n' +
      '    .figure {\n' +
      '\n' +
      '      &__caption {\n' +
      '        max-width: 334px;\n' +
      '        margin-top: 1em;\n' +
      '        font-size: 0.85em;\n' +
      '        color: lighten(#000, 50%);\n' +
      '        text-align: center;\n' +
      '\n' +
      "        @include respond-to('x-small') {\n" +
      '          max-width: 100%;\n' +
      '          font-size: 0.75em;\n' +
      '        }\n' +
      '\n' +
      '        &::before {\n' +
      '          content:"[ ";\n' +
      '        }\n' +
      '        &::after {\n' +
      '          content:" ]";\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '  }\n' +
      'date: 2020-12-08 19:12:13\n' +
      'subtitle:\n' +
      '---\n' +
      '\n' +
      '\n' +
      'FlexBox를 사용 하는 중 padding-bottom이 실종되는 상황을 만나게 되었다.\n' +
      '\n' +
      '정확하게는 Firefox에서 column flexbox에 발생 된 문제로\n' +
      '<code class="language-css">overflow: auto</code>에 의해 스크롤이 발생되었을 때\n' +
      '하단에 적용해 둔 padding이 실종되는 상황이다.\n' +
      '\n' +
      '물론, Chrome은 렌더링이 잘 된다... <s>힘내요 FireFox</s>\n' +
      '\n' +
      '## 발견된 상황\n' +
      '\n' +
      '### 적용된 코드\n' +
      '\n' +
      '해당 문제와 관련 없는 코드는 삭제해 두었고, padding-top/bottom에 해당 하는 값은\n' +
      '식별이 쉽도록 일부러 100px을 넣어두었다.\n' +
      '\n' +
      '```css\n' +
      '.frm {\n' +
      '  box-sizing: border-box;\n' +
      '  display: flex;\n' +
      '  flex-flow: column;\n' +
      '  justify-content: flex-start;\n' +
      '  align-items: flex-start;\n' +
      '  overflow: auto;\n' +
      '  margin: auto;\n' +
      '  padding: 100px 30px;\n' +
      '  ...\n' +
      '}\n' +
      '```\n' +
      '\n' +
      '### 렌더링 된 화면\n' +
      '\n' +
      '{% raw %}\n' +
      '<figure class="figure">\n' +
      '  <img\n' +
      '    src="/upload/2020/fails-padding-bottom-in-flexbox.jpg"\n' +
      '    alt="" >\n' +
      '  <figcaption class="figure__caption">\n' +
      '    상단에는 padding이 적용되어 있지만, 하단에는 padding이 적용되지 않은 것 처럼 보여진다.\n' +
      '  </figcaption>\n' +
      '</figure>\n' +
      '{% endraw %}\n' +
      '\n' +
      '## Fix it\n' +
      '\n' +
      '찾아보니 FireFox와 Safari에서 발생되는 버그로 알려져 있더라.\n' +
      '나는 Mac이 없는 관계로... Safari에서는 테스트를 해보지 못했지만, 같은 문제가 발생되더라도\n' +
      '동일한 방법으로 충분히 해결 될 거라고 생각한다.\n' +
      '\n' +
      '사실 이게 해결(?)이라기 보다는 trick에 가깝다고 봐야 할 것 같고, 아마도 특정 상황에서는\n' +
      '사용하지 못하는 방법일 수도 있다. (왜 그런지는 코드를 보면 알 거다)\n' +
      '\n' +
      '키는 <code class="language-css">::before</code>,\n' +
      '<code class="language-css">::after</code> 가상 선택자에 있다.\n' +
      '단지 아래와 같은 코드를 바꾸어주었을 뿐이다.\n' +
      '\n' +
      '```scss\n' +
      '.frm {\n' +
      '  box-sizing: border-box;\n' +
      '  display: flex;\n' +
      '  flex-flow: column;\n' +
      '  justify-content: flex-start;\n' +
      '  align-items: flex-start;\n' +
      '  overflow: auto;\n' +
      '  margin: auto;\n' +
      '  padding: 0 30px;\n' +
      '  ...\n' +
      '\n' +
      '  &::before,\n' +
      '  &::after {\n' +
      '    flex: 0 0 100px;\n' +
      '    width: 100%;\n' +
      '    content: "";\n' +
      '  }\n' +
      '}\n' +
      '```\n' +
      '\n' +
      'padding-top/bottom 에 해당하는 값을 가상선택자의 flex로 이동시켜주는 방식으로 요소 상/하\n' +
      '단에 그 만큼의 여백에 해당하는 빈 요소를 집어 넣은...\n' +
      '\n' +
      '참고로 `width: 100%`를 넣은 건, width값이 0이면\n' +
      '렌더링 되지 않아서다;; <s>나한테 왜이래 Firefox...</s>\n' +
      '\n' +
      '<code class="language-css">::before</code>,\n' +
      '<code class="language-css">::after</code>를 사용했기 때문에, 이미 이를 다른 스타일링을\n' +
      '위해 사용하고 있다면 다소 이 방법을 사용하기는 어렵겠다.\n' +
      '\n' +
      '그저 Firefox와 Safari가 이 버그를 수정해주길 기다릴 뿐...\n',
    slug: 'fix-padding-bottom-bug-in-flex-on-firefox',
    published: true,
    comments: true,
    layout: 'post',
    photos: [],
    link: '',
    _id: 'clcytfa4q00a0tawwhxw3h4d6',
    content: '<p>FlexBox를 사용 하는 중 padding-bottom이 실종되는 상황을 만나게 되었다.</p>\n' +
      '<p>정확하게는 Firefox에서 column flexbox에 발생 된 문제로\n' +
      '<code class="language-css">overflow: auto</code>에 의해 스크롤이 발생되었을 때\n' +
      '하단에 적용해 둔 padding이 실종되는 상황이다.</p>\n' +
      '<p>물론, Chrome은 렌더링이 잘 된다... <s>힘내요 FireFox</s></p>\n' +
      '<h2 id="발견된-상황"><a href="#발견된-상황" class="headerlink" title="발견된 상황"></a>발견된 상황</h2><h3 id="적용된-코드"><a href="#적용된-코드" class="headerlink" title="적용된 코드"></a>적용된 코드</h3><p>해당 문제와 관련 없는 코드는 삭제해 두었고, padding-top&#x2F;bottom에 해당 하는 값은\n' +
      '식별이 쉽도록 일부러 100px을 넣어두었다.</p>\n' +
      '<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.frm</span> <span class="token punctuation">&#123;</span>\n' +
      '  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>\n' +
      '  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n' +
      '  <span class="token property">flex-flow</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>\n' +
      '  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>\n' +
      '  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>\n' +
      '  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n' +
      '  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n' +
      '  <span class="token property">padding</span><span class="token punctuation">:</span> 100px 30px<span class="token punctuation">;</span>\n' +
      '  ...\n' +
      '<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<h3 id="렌더링-된-화면"><a href="#렌더링-된-화면" class="headerlink" title="렌더링 된 화면"></a>렌더링 된 화면</h3>\n' +
      '<figure class="figure">\n' +
      '  <img\n' +
      '    src="/upload/2020/fails-padding-bottom-in-flexbox.jpg"\n' +
      '    alt="" >\n' +
      '  <figcaption class="figure__caption">\n' +
      '    상단에는 padding이 적용되어 있지만, 하단에는 padding이 적용되지 않은 것 처럼 보여진다.\n' +
      '  </figcaption>\n' +
      '</figure>\n' +
      '\n' +
      '\n' +
      '<h2 id="Fix-it"><a href="#Fix-it" class="headerlink" title="Fix it"></a>Fix it</h2><p>찾아보니 FireFox와 Safari에서 발생되는 버그로 알려져 있더라.\n' +
      '나는 Mac이 없는 관계로... Safari에서는 테스트를 해보지 못했지만, 같은 문제가 발생되더라도\n' +
      '동일한 방법으로 충분히 해결 될 거라고 생각한다.</p>\n' +
      '<p>사실 이게 해결(?)이라기 보다는 trick에 가깝다고 봐야 할 것 같고, 아마도 특정 상황에서는\n' +
      '사용하지 못하는 방법일 수도 있다. (왜 그런지는 코드를 보면 알 거다)</p>\n' +
      '<p>키는 <code class="language-css">::before</code>,\n' +
      '<code class="language-css">::after</code> 가상 선택자에 있다.\n' +
      '단지 아래와 같은 코드를 바꾸어주었을 뿐이다.</p>\n' +
      '<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.frm </span><span class="token punctuation">&#123;</span>\n' +
      '  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>\n' +
      '  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n' +
      '  <span class="token property">flex-flow</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>\n' +
      '  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>\n' +
      '  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>\n' +
      '  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n' +
      '  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n' +
      '  <span class="token property">padding</span><span class="token punctuation">:</span> 0 30px<span class="token punctuation">;</span>\n' +
      '  <span class="token selector">...\n' +
      '\n' +
      '  <span class="token parent important">&amp;</span>::before,\n' +
      '  <span class="token parent important">&amp;</span>::after </span><span class="token punctuation">&#123;</span>\n' +
      '    <span class="token property">flex</span><span class="token punctuation">:</span> 0 0 100px<span class="token punctuation">;</span>\n' +
      '    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n' +
      '    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>\n' +
      '  <span class="token punctuation">&#125;</span>\n' +
      '<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>padding-top&#x2F;bottom 에 해당하는 값을 가상선택자의 flex로 이동시켜주는 방식으로 요소 상&#x2F;하\n' +
      '단에 그 만큼의 여백에 해당하는 빈 요소를 집어 넣은...</p>\n' +
      '<p>참고로 <code>width: 100%</code>를 넣은 건, width값이 0이면\n' +
      '렌더링 되지 않아서다;; <s>나한테 왜이래 Firefox...</s></p>\n' +
      '<p><code class="language-css">::before</code>,\n' +
      '<code class="language-css">::after</code>를 사용했기 때문에, 이미 이를 다른 스타일링을\n' +
      '위해 사용하고 있다면 다소 이 방법을 사용하기는 어렵겠다.</p>\n' +
      '<p>그저 Firefox와 Safari가 이 버그를 수정해주길 기다릴 뿐...</p>\n',
    site: { data: [Object] },
    excerpt: '',
    more: '<p>FlexBox를 사용 하는 중 padding-bottom이 실종되는 상황을 만나게 되었다.</p>\n' +
      '<p>정확하게는 Firefox에서 column flexbox에 발생 된 문제로\n' +
      '<code class="language-css">overflow: auto</code>에 의해 스크롤이 발생되었을 때\n' +
      '하단에 적용해 둔 padding이 실종되는 상황이다.</p>\n' +
      '<p>물론, Chrome은 렌더링이 잘 된다... <s>힘내요 FireFox</s></p>\n' +
      '<h2 id="발견된-상황"><a href="#발견된-상황" class="headerlink" title="발견된 상황"></a>발견된 상황</h2><h3 id="적용된-코드"><a href="#적용된-코드" class="headerlink" title="적용된 코드"></a>적용된 코드</h3><p>해당 문제와 관련 없는 코드는 삭제해 두었고, padding-top&#x2F;bottom에 해당 하는 값은\n' +
      '식별이 쉽도록 일부러 100px을 넣어두었다.</p>\n' +
      '<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.frm</span> <span class="token punctuation">&#123;</span>\n' +
      '  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>\n' +
      '  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n' +
      '  <span class="token property">flex-flow</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>\n' +
      '  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>\n' +
      '  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>\n' +
      '  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n' +
      '  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n' +
      '  <span class="token property">padding</span><span class="token punctuation">:</span> 100px 30px<span class="token punctuation">;</span>\n' +
      '  ...\n' +
      '<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<h3 id="렌더링-된-화면"><a href="#렌더링-된-화면" class="headerlink" title="렌더링 된 화면"></a>렌더링 된 화면</h3>\n' +
      '<figure class="figure">\n' +
      '  <img\n' +
      '    src="/upload/2020/fails-padding-bottom-in-flexbox.jpg"\n' +
      '    alt="" >\n' +
      '  <figcaption class="figure__caption">\n' +
      '    상단에는 padding이 적용되어 있지만, 하단에는 padding이 적용되지 않은 것 처럼 보여진다.\n' +
      '  </figcaption>\n' +
      '</figure>\n' +
      '\n' +
      '\n' +
      '<h2 id="Fix-it"><a href="#Fix-it" class="headerlink" title="Fix it"></a>Fix it</h2><p>찾아보니 FireFox와 Safari에서 발생되는 버그로 알려져 있더라.\n' +
      '나는 Mac이 없는 관계로... Safari에서는 테스트를 해보지 못했지만, 같은 문제가 발생되더라도\n' +
      '동일한 방법으로 충분히 해결 될 거라고 생각한다.</p>\n' +
      '<p>사실 이게 해결(?)이라기 보다는 trick에 가깝다고 봐야 할 것 같고, 아마도 특정 상황에서는\n' +
      '사용하지 못하는 방법일 수도 있다. (왜 그런지는 코드를 보면 알 거다)</p>\n' +
      '<p>키는 <code class="language-css">::before</code>,\n' +
      '<code class="language-css">::after</code> 가상 선택자에 있다.\n' +
      '단지 아래와 같은 코드를 바꾸어주었을 뿐이다.</p>\n' +
      '<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.frm </span><span class="token punctuation">&#123;</span>\n' +
      '  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>\n' +
      '  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n' +
      '  <span class="token property">flex-flow</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>\n' +
      '  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>\n' +
      '  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>\n' +
      '  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n' +
      '  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n' +
      '  <span class="token property">padding</span><span class="token punctuation">:</span> 0 30px<span class="token punctuation">;</span>\n' +
      '  <span class="token selector">...\n' +
      '\n' +
      '  <span class="token parent important">&amp;</span>::before,\n' +
      '  <span class="token parent important">&amp;</span>::after </span><span class="token punctuation">&#123;</span>\n' +
      '    <span class="token property">flex</span><span class="token punctuation">:</span> 0 0 100px<span class="token punctuation">;</span>\n' +
      '    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n' +
      '    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>\n' +
      '  <span class="token punctuation">&#125;</span>\n' +
      '<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n' +
      '\n' +
      '<p>padding-top&#x2F;bottom 에 해당하는 값을 가상선택자의 flex로 이동시켜주는 방식으로 요소 상&#x2F;하\n' +
      '단에 그 만큼의 여백에 해당하는 빈 요소를 집어 넣은...</p>\n' +
      '<p>참고로 <code>width: 100%</code>를 넣은 건, width값이 0이면\n' +
      '렌더링 되지 않아서다;; <s>나한테 왜이래 Firefox...</s></p>\n' +
      '<p><code class="language-css">::before</code>,\n' +
      '<code class="language-css">::after</code>를 사용했기 때문에, 이미 이를 다른 스타일링을\n' +
      '위해 사용하고 있다면 다소 이 방법을 사용하기는 어렵겠다.</p>\n' +
      '<p>그저 Firefox와 Safari가 이 버그를 수정해주길 기다릴 뿐...</p>\n',
    path: [Getter],
    permalink: [Getter],
    full_source: [Getter],
    asset_dir: [Getter],
    tags: [Getter],
    categories: [Getter],
    prev: [Circular *2],
    next: _Document {
      title: 'Nuxt를 통해 보는 프론트엔드 개발자가 하는 일',
      subtitle: '흔한 착각 in 하코사 (1)',
      thumbnail: [Array],
      hero: '/upload/2020/front-end-developer.jpg',
      seo: [Object],
      style: '.note {\n' +
        '  font-style: italic;\n' +
        '  font-size: .85em;\n' +
        '}\n' +
        '.article__content{\n' +
        '  .figure {\n' +
        '    margin: 0;\n' +
        '\n' +
        '    &__caption {\n' +
        '      margin-top: 1em;\n' +
        '      font-size: 0.85em;\n' +
        '      color: lighten(#000, 50%);\n' +
        '      text-align: center;\n' +
        '\n' +
        "      @include respond-to('x-small') {\n" +
        '        max-width: 100%;\n' +
        '        font-size: 0.75em;\n' +
        '      }\n' +
        '\n' +
        '      &::before {\n' +
        '        content:"[ ";\n' +
        '      }\n' +
        '      &::after {\n' +
        '        content:" ]";\n' +
        '      }\n' +
        '    }\n' +
        '  }\n' +
        '}\n',
      date: Moment<2020-10-31T14:07:47+09:00>,
      _content: '\n' +
        '\n' +
        '<div class="note">\n' +
        '* 미리 언급해두지만, 여기서 이야기하는 프론트엔드 개발자는 넓은 범위의 프론트엔드 개발자가\n' +
        '아니라 좁은 의미 — 소위 Front-End framework를 이용하며 JS(혹은 TS)를 주 언어로 프로덕트를\n' +
        '개발하는, 현재 기업들이 채용하고 있는 Front-End 개발자로 한정한다.\n' +
        '\n' +
        '또한, 내가 개발하고 있는 방법에서의 이야기이기 때문에 이것을 일반화 시킬 수 없고, 초급 수준의\n' +
        '프론트엔드 개발자로서 (내가 생각하는) 최소한 이 것들을 해야 함을 알고 시작하시라 이야기하기\n' +
        '위한 참고 정도로 보시라.\n' +
        '\n' +
        '이글의 목적은 오롯이 자바스크립트를 (추가로) 공부해서 프론트엔드 개발자가 되겠다고\n' +
        '이야기하는 퍼블리셔에게 그 속에 얼마나 많은 구멍이 있는가를 알리는데 있다. (무엇 무엇을\n' +
        '학습하세요~하는 글이 아니다)\n' +
        '</div>\n' +
        '\n' +
        '---\n' +
        '\n' +
        '하코사에서 활동하다보면 매우 종종 그리고 쉽게 볼 수 있는 글들 중 하나가 웹 퍼블리셔로 일하다가\n' +
        '자바스크립트를 공부해서 프론트엔드 개발자로 넘어가려고 한다거나 프론트엔드를 꿈꾸며(?)\n' +
        '퍼블리셔로 일단 시작하려고 한다는 식의 이야기다.\n' +
        '작년 2, 3번에 걸쳐 미니 세미나 형식으로 이것이 얼마나 착각 속의 이야기인지에 대해서 이야기\n' +
        '했었는데, 그 연장선 상에서 좀 더 실제적인 것을 가지고 이야기 해보려고 한다.\n' +
        '\n' +
        '우선 결론부터 이야기 하자면, 웹 퍼블리셔로 근무하다가 자바스크립트를 공부하면 프론트엔드\n' +
        '개발자가 될 수 있을 거라는 생각은 큰 착각이고 과장을 덧붙이면 오만한 이야기다.\n' +
        '\n' +
        '이야기들을 들어보면, 사실 프론트엔드 개발자가 무얼 하는지 알고 그런 이야기를 하는 사람은\n' +
        '없었다. 거짓말 하나 보태지 않고 정말 한 명도 없었다. 물론 내가 만났던 사람들이 프론트엔드를\n' +
        '준비하는 모두를 대변한다고 보기는 어렵다. 하지만 그렇다손 치더라도 한 명도 없는 것은 적잖이\n' +
        '문제가 있다고 밖에는 볼 수 없다.\n' +
        '\n' +
        '무튼, 그래서 Nuxt (Vue) 프로젝트 파일 구조를 통해서 프론트엔드 개발자가 무얼 하는지 하나씩\n' +
        '(디렉토리 순서에 따라) 짚어보려고 한다. 물론 이렇게 보는 것이 사실 적절하지는 않다고 생각한다.\n' +
        '하지만 이렇게 한정 된 사례라도 들지 않으면 "자바스크립트를 빡세게 공부해서 프론트엔드 개발자\n' +
        '될 거다"라는 빈약한 논리나 막연한 준비를 벗어나기 어려울 테니 말이다.\n' +
        '\n' +
        '{% raw %}\n' +
        '<figure class="figure">\n' +
        '  <img\n' +
        '    src="/upload/2020/nuxt-directory-structure.jpg"\n' +
        '    alt="" >\n' +
        '  <figcaption class="figure__caption">\n' +
        '    현재 내가 사용하고 있는 Nuxt 공통 파일 구조\n' +
        '  </figcaption>\n' +
        '</figure>\n' +
        '{% endraw %}\n' +
        '\n' +
        '## 개발 환경 및 프로젝트 설정\n' +
        '\n' +
        '70%의 확률로 장담하건대, 웹 퍼블리셔에서 자바스크립트를 공부해서 프론트엔드로 넘어가겠다고\n' +
        '이야기하는 사람의 대다수는 여기서부터가 이미 허들일거다.\n' +
        '\n' +
        'Node 기반의 개발 환경에 대한 이해도 없을 뿐더러 그러니 당연히 node modules에 대한 이해도\n' +
        '없고 당연히 그 외의 환경 설정들은 전혀 모르는 경우가 많다.\n' +
        '실제로 하코사에는 `npm install`부터가 허들인 경우를 쉽게 발견할 수 있고, 심각하게는(?)\n' +
        '로컬 서버에 대한 개념 자체가 없는 경우도 쉽게 발견된다.\n' +
        '\n' +
        '회사에서 채용을 진행하면서 과제를 받고 리뷰하며 다시 질문을 던져보면 브라우저 대응을\n' +
        '어디까지 했다고 하면서 그와 일치하는 설정은 코드 어디에도 없거나, lint 오류를 수정하는게\n' +
        '아니라 오류가 눈에 보이지 않게 하기 위해 lint를 꺼두는 일이 비일비재하게 일어났다.\n' +
        '\n' +
        '최소한 필요한 모듈을 어떻게 설치하고 설정해야 하는지, 프로덕트의 브라우저 대응 범위를\n' +
        '정했다면 그 브라우저 범위를 대응하기 위해 어떤 설정을 해주어야 하는지, 기본 설정을\n' +
        '변경해야 한다면 어떻게 설정 해야 하는지 등은 알고 있어야 하지 않을까?\n' +
        '\n' +
        '## APIs 구현\n' +
        '\n' +
        'REST API를 구현한다는 것이 아니라, REST API를 호출하고 응답을 처리하는 함수를 구현한다.\n' +
        '함수를 구현한다고 하니 뭐 별거 없겠거니 생각할지 모르겠지만, 왠만큼 작은(?) 프로덕트가\n' +
        '아닌 이상 사용해야 하는 API는 십 수개가 아니라 수 십개에 달한다.\n' +
        '\n' +
        '때문에 단순히 `index.js`파일 하나에 API를 호출하는 함수를 작성하면 되는게 아니라, 어떻게\n' +
        '분류하고 모듈화 해서 어느 수준까지 directory를 나누고 file을 어떻게 구성할지 등을 설계하고\n' +
        '구현해야 한다.\n' +
        '\n' +
        '그 뿐일까?\n' +
        'API를 호출하는데 있어 HEADER 정보를 조작해야 할 때도 있고, 응답에 실패했다 하더라도\n' +
        'app이 crash 되지 않도록 처리해야 할 때도 있으며, 때로는 응답 데이터를 사용하기에 적절하게\n' +
        '가공해야 하는 경우도 있다.\n' +
        '\n' +
        '따라서 HTTP header, HTTP status code, HTTP methods, 비동기 통신, 비동기 처리, CORS\n' +
        '등을 다룰 수 있어야 한다.\n' +
        '\n' +
        '너무 당연하게 이것들은 웹 퍼블리셔를 하다가 자바스크립트나 React 등의 프레임워크를\n' +
        '공부한다고 학습되는 것들이 아니다.\n' +
        '\n' +
        '## assets (and static) 설계\n' +
        '\n' +
        'assets을 무슨 설계까지 하냐고?\n' +
        '아니, 무엇을 assets에 둘 것인지 무엇을 static에 둘 것인지의 결정은 오롯이 프론트엔드\n' +
        '개발자의 몫이다. 잘 설계하는 것은 둘째치더라도 static과 assets의 차이를 이해해야 반드시\n' +
        'static에 두어야 할 것을 올바르게 처리할 수 있다.\n' +
        '\n' +
        'SA(C)SS, Stylus 등을 사용하는 경우, 일반적으로 해당 파일들을 분류하여 관리한다\n' +
        '(e.g, variables, functions, mixins 등 등).\n' +
        '다시 말해, 프로젝트 규모에 따라 파일을 어떻게 분류하여 처리할 것인지 적절한 설계를 해야 하고\n' +
        '필요 시 전처리 언어(?)를 처리하기 위해 webpack에 필요한 loader를 설정할 수도 있어야 한다.\n' +
        '\n' +
        'loader 설정은 프레임워크를 학습하다가 얻어질 수 있는 것일지는 몰라도, 단순히 동영상을 따라\n' +
        '치는 수준으로 학습하는 경우에는 스스로 필요한 loader를 설정할 수 없을 소지가 높을 뿐더러,\n' +
        '어떤 파일을 asset으로 둘 것인지의 결정 그리고 전처리 언어의 모듈화는 (웹 퍼블리셔로 근무할\n' +
        '때 이미 전처리 언어를 모듈링 하고 있던 경우를 제외하고) 웹 퍼블리셔를 하다가 자바스크립트를\n' +
        '공부한다고 얻어지지 않는다.\n' +
        '\n' +
        '## components, layout, pages 설계 및 구현\n' +
        '\n' +
        'React든 Vue든 Angular든 모두 컴포넌트 관점에서 개발하고, 컴포넌트 단위로 개발한다.\n' +
        '1개 컴포넌트에 관련된 템플릿을 짜고, 스타일을 정의하고, 데이터를 정의하고, 기능을 개발한다.\n' +
        '오롯이 이 컴포넌트에만 관련해서 말이다.\n' +
        '\n' +
        '대부분의 퍼블리셔는 컴포넌트 단위로 퍼블리싱 하거나, 컴포넌트 단위로 고민해 본 경험이 없는\n' +
        '경우가 많다. 생각의 틀 자체가 컴포넌트 단위가 아니라 전체로부터 영향을 받는 부분이다.\n' +
        '그렇다보니 외부의 영향 없이 컴포넌트만을 단독으로 개발하는 것 자체에 이질감과 어려움을\n' +
        '느끼는 경우가 많다. 오히려 이제는 각 개별 컴포넌트들이 모여서 한 페이지를 구성하게 될 때의\n' +
        '연결성을 고려하지 못하는 경우도 쉽게 발견 되기도 한다.\n' +
        '\n' +
        '템플릿을 짜는데  pug 같은 템플릿 언어를 사용하고 있다면 해당 템플릿 언어도 다룰 수 있어야\n' +
        '한다. 템플릿 언어를 사용하지 않는다 하더라도 보간법, `v-for` 같은 것을 쓰기만 해도\n' +
        '하코사에서 쉽게 발견 할 수 있는 그 말, “그건 개발자가 하는거 아닌가요?”를 해야 하는거다.\n' +
        '(뭐... 프론트엔드 개발자로 가기로 했다면 그건 이제 감수하기로 한 걸로 봐야 하려나...?)\n' +
        '\n' +
        'UI를 만드는 건 또 어떠할까? 퍼블리셔는 DOM을 제어 해왔지 data를 컨트롤 해 오지 않았다.\n' +
        '지금도 jQuery가 아니면 UI를 개발할 수 없는 이들이 많다.\n' +
        '\n' +
        'jQuery를 vanilla JavaScript로 할 수 있으면 되는 것 아니냐 하는 이도 더러 있는데 아니,\n' +
        '애초에 jQuery로 하던 것을 vanilla로 한다고 해서 크게 바뀌지 않는다. 결국에 퍼블리셔가 UI를\n' +
        '제어하는 것은 DOM을 제어하는 것에서 크게 벗어나지 않기 때문이다.\n' +
        '\n' +
        '그런데 Front-End Framework들에서 DOM을 제어하는 경우는 없다. 오로지 데이터를 변경할\n' +
        '뿐이고,  변경 된 데이터가 템플릿에 반영되는 등의 프로세스를 거쳐 최종적으로 DOM이 업데이트\n' +
        '될 뿐이다.  이 관점을 바꾸지 못하니 학습 중에 자꾸 React(혹은 Vue)에 jQuery를 들고와서\n' +
        'DOM을 제어하려고 하는 퍼블리셔들이 많다. (그리고 실제로 채용 중 그렇게 구현 한 과제도\n' +
        '받아봤다.)\n' +
        '\n' +
        '그 뿐일까?\n' +
        '어떤 컴포넌트를 (혹은 컴포넌트 내의 어떤 부분을) 서버에서 렌더링 하게 할 것인지 또는\n' +
        '클라이언트에서 렌더링 하게 할 것인지, 개별 컴포넌트를 넘어서 컴포넌트와 컴포넌트 간에\n' +
        '데이터를 어떻게 공유할 것인지, 이벤트를 어떻게 공유할 것인지 역시 설계되어야 하고 구현되어야\n' +
        '한다.\n' +
        '\n' +
        '즉, 무엇을 data에 넣을지 무엇을 props로 받을지 무엇을 computed로 관리할지 무엇을 watch로\n' +
        '관리할지, 각 데이터는 언제 채울지, 이벤트 핸들링은 상위 컴포넌트에서 처리할지 개별\n' +
        '컴포넌트에서 처리할지 등을 설계·구현 할 수 있어야 한다.\n' +
        '\n' +
        'Nuxt의 경우 layout 컴포넌트도 설계해야 하고, 라우터 구성을 어떻게 할 것인가에 따라 page\n' +
        '파일 구성도 달라진다.\n' +
        '\n' +
        '이것들이 과연 JavaScript를 더 공부한다고 될까?\n' +
        '\n' +
        '## middleware 구현\n' +
        '\n' +
        '이건 넣어야 할지 말지 약간 고민이었는데 일단 넣기로...\n' +
        '(넣지 말까 고민한 이유는 주니어가 이것들까지 할 줄 알아야 하느냐고 따질 사람들이 충분히\n' +
        '예상되기 때문이다. 하지만, 개발자 라면 응당 해야 하는 것이라 생각하기 때문에 글에 포함\n' +
        '시키기로 했다.)\n' +
        '\n' +
        '많은 퍼블리셔들이 퍼블리싱에 JavaScript를 더 공부하면 프론트엔드 개발을 할 수 있는 것으로\n' +
        '오해 하는 이유 중 하나가 "브라우저에서" 일어나는 일 — 화면에 보이는 것을 개발하는 정도로\n' +
        '치부해서 라고 생각한다.\n' +
        '\n' +
        '미안한(?) 이야기지만, 프론트엔드 개발자가 화면에 보이는 것만을 개발하지 않는다. middleware의\n' +
        '대표적인 사례가 아마도 인증 처리(authorization) 모듈일건데 이 인증 처리는 화면에 직접적으로\n' +
        '반영되는 코드가 아니다. 아래 다이어그램과 같은 눈에 보이지 않고, server/client-side\n' +
        '모두에서 수행되는 프로세스를 구현해야 한다는 거다.\n' +
        '\n' +
        '<figure class="figure">\n' +
        '  <img src="/upload/2020/auth-diagram.svg" alt="" />\n' +
        '  <figcaption class="figure__caption">\n' +
        '    authorization sequence diagram 예시\n' +
        '  </figcaption>\n' +
        '</figure>\n' +
        '\n' +
        '## Store 설계 및 구현\n' +
        '\n' +
        'React든 Vue든 이것들을 이용해서 프로덕트를 만들 때, store를 사용하지 않는 경우는 거의 없지\n' +
        '않을까?\n' +
        '\n' +
        '왠만큼 작은 규모의 프로덕트가 아닌 이상에야 store 역시 모듈화하여 분리시켜 관리하기 마련이고\n' +
        '그러자면 store를 어떻게 분류하고 구성할 것인지 설계해야 할거다. Todo App 만들어보기와 같은\n' +
        '튜토리얼이나 입문 강의에서 보던 그런 수준의 store가 아니다.\n' +
        '\n' +
        '더구나 store는 주로 flux 패턴의 구현체인 것들이기 때문에 JavaScript를 학습한들 이 패턴에\n' +
        '대한 학습이 없으면 store 코드 작성도 어렵다.\n' +
        '\n' +
        'SSR을 사용하는 경우에는 store가 서버에서 미리 채워져야 하고 그 채워진 것이 클라이언트에도\n' +
        '동일하게 적용되어야 하는 경우도 있다. 물론 이러한 것들은 프레임워크가 해결해주고 있고,\n' +
        '프레임워크를 학습하면서 해결 되는 부분이겠지만, 어떤 데이터를 그렇게 처리해야 하는가에 대한\n' +
        '설계 등은 JavaScript나 프레임워크 학습과는 별개 이야기다.\n' +
        '\n' +
        '## 결국 프로그래밍\n' +
        '\n' +
        '결국은 프로그래밍이다.  프로그래밍이기 때문에 프로그래밍에 관한 지식과 훈련 없이 언어에 대한\n' +
        '학습만 하는 것은 사전 학습만 하고 마는 것과 비슷하다.\n' +
        'JavaScript를 학습하는 건 단지 프로그래밍 과정에서 대화를 위한 "언어"가 JavaScript이기\n' +
        '때문에 JavaScript를 학습하는 것이지 JavaScript를 학습한다고 해서 프로그래밍이 이루어지지\n' +
        '않는다.\n' +
        '\n' +
        '더구나 JavaScript를 학습한다고 하면 문법 학습에서 그치는 경우가 많다. (그래서 하코사에서\n' +
        '종종 보이는 질문 중 하나는 JavaScript를 공부했는데 그래서 이제 뭘 해야 하나요?다) 이것은\n' +
        '마치 통역사로 취업하려고 영어를 학습한다면서 영문법을 공부하고 그치는 것과 같다.\n' +
        '\n' +
        '결국은 프로그래밍이기 때문에 퍼블리셔를 하다가 넘어가겠다라는 건 망상에 가깝다. 물론\n' +
        '프론트엔드 개발의 일부에는 퍼블리싱 영역이 포함된다. 위 에서 보자면 component의 템플릿을\n' +
        '작성하고 CSS 전처리 언어를 작성하는 정도다. 사실상 많은 부분을 차지 하지 않는다.\n' +
        '프론트엔드 개발자로 방향을 잡을 거라면 퍼블리셔로 근무하는 기간을 차라리 학습 시간으로\n' +
        '돌리는게 더 낫겠다.\n' +
        '\n' +
        '종종 돈을 벌어야 하기 때문에 일단 퍼블리셔로 일을 하면서 공부해서 프론트엔드 개발자가\n' +
        '되겠다는 경우도 있는데, 일해본 사람들은 알거다. 일하면서 공부한다는게 실상 뜻대로 될 수 없다는\n' +
        '것을. 더구나 그것이 20대 후반 ~ 30대 중반이라면 더더욱.\n' +
        '독한(?) 사람이거나 취미가 개발, 공부인 사람이 아니고서야 그 플랜은 깨지기 쉽다.\n' +
        '\n' +
        '종종 단순하게 프론트엔드 개발자가 연봉이 더 높으니까, 퍼블리셔는 미래가 없어 보여서 등을\n' +
        '이유로 들어서 프론트엔드 개발자가 되겠다는 생각을 하는 이들도 보인다. 그런데 저 위의 것들을\n' +
        '할 수 있기는 한지, 저 위의 것들을 해야 한다는 건 알고 프론트엔드 개발자를 하겠다는 것인지는\n' +
        '모르겠다. 사실 마크업만으로도 네이버, 카카오 가는 사람도 있는데 말이다...\n' +
        '\n' +
        '더구나 ECMA 업데이트는 매 년 이루어지고, 더불어 프론트엔드 개발에 관련 된 프레임워크,\n' +
        '라이브러리, 개발 환경의 변화도 빠른 편이다. 당장 현재 회사 프로덕트에 관련해서만도\n' +
        'webpack이 5로 메이저 업데이트가 이루어졌고, Vue 역시 3으로 메이저 업데이트가 되었으며\n' +
        'moment는 deprecate 되었고 storybook도 4로 메이저 업데이트가 일어났다.\n' +
        '프론트엔드 개발자가 되겠다면 그 빠른 변화를 쫓아가기까지 해야 한다.\n' +
        '\n' +
        '그러한 모든 것들을 고려하고 프론트엔드 개발자로 전향할 것인지를 고민해 보았으면 좋겠다.',
      source: '_posts/2020-10-31-see-what-does-front-end-developer-do-through-nuxt.md',
      raw: '---\n' +
        'title: Nuxt를 통해 보는 프론트엔드 개발자가 하는 일\n' +
        'tags:\n' +
        '  - Front-End Developer\n' +
        '  - 프론트엔드 개발자\n' +
        '  - 웹 퍼블리셔\n' +
        '  - 언어는 도구일 뿐\n' +
        'subtitle: 흔한 착각 in 하코사 (1)\n' +
        'categories:\n' +
        '  - 생각노트\n' +
        '  - in occupation\n' +
        'thumbnail:\n' +
        '  - /upload/2020/thumbs/front-end-developer.jpg\n' +
        'hero: /upload/2020/front-end-developer.jpg\n' +
        'seo:\n' +
        '  description: |\n' +
        '    웹 퍼블리셔로 근무하다가 자바스크립트를 공부하면 프론트엔드 개발자가 될 수 있을 거라는\n' +
        '    생각은 큰 착각이고 과장을 덧붙이면 오만한 이야기다.\n' +
        '  image: /upload/2020/front-end-developer.jpg\n' +
        'style: |\n' +
        '  .note {\n' +
        '    font-style: italic;\n' +
        '    font-size: .85em;\n' +
        '  }\n' +
        '  .article__content{\n' +
        '    .figure {\n' +
        '      margin: 0;\n' +
        '\n' +
        '      &__caption {\n' +
        '        margin-top: 1em;\n' +
        '        font-size: 0.85em;\n' +
        '        color: lighten(#000, 50%);\n' +
        '        text-align: center;\n' +
        '\n' +
        "        @include respond-to('x-small') {\n" +
        '          max-width: 100%;\n' +
        '          font-size: 0.75em;\n' +
        '        }\n' +
        '\n' +
        '        &::before {\n' +
        '          content:"[ ";\n' +
        '        }\n' +
        '        &::after {\n' +
        '          content:" ]";\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '  }\n' +
        'date: 2020-10-31 14:07:47\n' +
        '---\n' +
        '\n' +
        '\n' +
        '<div class="note">\n' +
        '* 미리 언급해두지만, 여기서 이야기하는 프론트엔드 개발자는 넓은 범위의 프론트엔드 개발자가\n' +
        '아니라 좁은 의미 — 소위 Front-End framework를 이용하며 JS(혹은 TS)를 주 언어로 프로덕트를\n' +
        '개발하는, 현재 기업들이 채용하고 있는 Front-End 개발자로 한정한다.\n' +
        '\n' +
        '또한, 내가 개발하고 있는 방법에서의 이야기이기 때문에 이것을 일반화 시킬 수 없고, 초급 수준의\n' +
        '프론트엔드 개발자로서 (내가 생각하는) 최소한 이 것들을 해야 함을 알고 시작하시라 이야기하기\n' +
        '위한 참고 정도로 보시라.\n' +
        '\n' +
        '이글의 목적은 오롯이 자바스크립트를 (추가로) 공부해서 프론트엔드 개발자가 되겠다고\n' +
        '이야기하는 퍼블리셔에게 그 속에 얼마나 많은 구멍이 있는가를 알리는데 있다. (무엇 무엇을\n' +
        '학습하세요~하는 글이 아니다)\n' +
        '</div>\n' +
        '\n' +
        '---\n' +
        '\n' +
        '하코사에서 활동하다보면 매우 종종 그리고 쉽게 볼 수 있는 글들 중 하나가 웹 퍼블리셔로 일하다가\n' +
        '자바스크립트를 공부해서 프론트엔드 개발자로 넘어가려고 한다거나 프론트엔드를 꿈꾸며(?)\n' +
        '퍼블리셔로 일단 시작하려고 한다는 식의 이야기다.\n' +
        '작년 2, 3번에 걸쳐 미니 세미나 형식으로 이것이 얼마나 착각 속의 이야기인지에 대해서 이야기\n' +
        '했었는데, 그 연장선 상에서 좀 더 실제적인 것을 가지고 이야기 해보려고 한다.\n' +
        '\n' +
        '우선 결론부터 이야기 하자면, 웹 퍼블리셔로 근무하다가 자바스크립트를 공부하면 프론트엔드\n' +
        '개발자가 될 수 있을 거라는 생각은 큰 착각이고 과장을 덧붙이면 오만한 이야기다.\n' +
        '\n' +
        '이야기들을 들어보면, 사실 프론트엔드 개발자가 무얼 하는지 알고 그런 이야기를 하는 사람은\n' +
        '없었다. 거짓말 하나 보태지 않고 정말 한 명도 없었다. 물론 내가 만났던 사람들이 프론트엔드를\n' +
        '준비하는 모두를 대변한다고 보기는 어렵다. 하지만 그렇다손 치더라도 한 명도 없는 것은 적잖이\n' +
        '문제가 있다고 밖에는 볼 수 없다.\n' +
        '\n' +
        '무튼, 그래서 Nuxt (Vue) 프로젝트 파일 구조를 통해서 프론트엔드 개발자가 무얼 하는지 하나씩\n' +
        '(디렉토리 순서에 따라) 짚어보려고 한다. 물론 이렇게 보는 것이 사실 적절하지는 않다고 생각한다.\n' +
        '하지만 이렇게 한정 된 사례라도 들지 않으면 "자바스크립트를 빡세게 공부해서 프론트엔드 개발자\n' +
        '될 거다"라는 빈약한 논리나 막연한 준비를 벗어나기 어려울 테니 말이다.\n' +
        '\n' +
        '{% raw %}\n' +
        '<figure class="figure">\n' +
        '  <img\n' +
        '    src="/upload/2020/nuxt-directory-structure.jpg"\n' +
        '    alt="" >\n' +
        '  <figcaption class="figure__caption">\n' +
        '    현재 내가 사용하고 있는 Nuxt 공통 파일 구조\n' +
        '  </figcaption>\n' +
        '</figure>\n' +
        '{% endraw %}\n' +
        '\n' +
        '## 개발 환경 및 프로젝트 설정\n' +
        '\n' +
        '70%의 확률로 장담하건대, 웹 퍼블리셔에서 자바스크립트를 공부해서 프론트엔드로 넘어가겠다고\n' +
        '이야기하는 사람의 대다수는 여기서부터가 이미 허들일거다.\n' +
        '\n' +
        'Node 기반의 개발 환경에 대한 이해도 없을 뿐더러 그러니 당연히 node modules에 대한 이해도\n' +
        '없고 당연히 그 외의 환경 설정들은 전혀 모르는 경우가 많다.\n' +
        '실제로 하코사에는 `npm install`부터가 허들인 경우를 쉽게 발견할 수 있고, 심각하게는(?)\n' +
        '로컬 서버에 대한 개념 자체가 없는 경우도 쉽게 발견된다.\n' +
        '\n' +
        '회사에서 채용을 진행하면서 과제를 받고 리뷰하며 다시 질문을 던져보면 브라우저 대응을\n' +
        '어디까지 했다고 하면서 그와 일치하는 설정은 코드 어디에도 없거나, lint 오류를 수정하는게\n' +
        '아니라 오류가 눈에 보이지 않게 하기 위해 lint를 꺼두는 일이 비일비재하게 일어났다.\n' +
        '\n' +
        '최소한 필요한 모듈을 어떻게 설치하고 설정해야 하는지, 프로덕트의 브라우저 대응 범위를\n' +
        '정했다면 그 브라우저 범위를 대응하기 위해 어떤 설정을 해주어야 하는지, 기본 설정을\n' +
        '변경해야 한다면 어떻게 설정 해야 하는지 등은 알고 있어야 하지 않을까?\n' +
        '\n' +
        '## APIs 구현\n' +
        '\n' +
        'REST API를 구현한다는 것이 아니라, REST API를 호출하고 응답을 처리하는 함수를 구현한다.\n' +
        '함수를 구현한다고 하니 뭐 별거 없겠거니 생각할지 모르겠지만, 왠만큼 작은(?) 프로덕트가\n' +
        '아닌 이상 사용해야 하는 API는 십 수개가 아니라 수 십개에 달한다.\n' +
        '\n' +
        '때문에 단순히 `index.js`파일 하나에 API를 호출하는 함수를 작성하면 되는게 아니라, 어떻게\n' +
        '분류하고 모듈화 해서 어느 수준까지 directory를 나누고 file을 어떻게 구성할지 등을 설계하고\n' +
        '구현해야 한다.\n' +
        '\n' +
        '그 뿐일까?\n' +
        'API를 호출하는데 있어 HEADER 정보를 조작해야 할 때도 있고, 응답에 실패했다 하더라도\n' +
        'app이 crash 되지 않도록 처리해야 할 때도 있으며, 때로는 응답 데이터를 사용하기에 적절하게\n' +
        '가공해야 하는 경우도 있다.\n' +
        '\n' +
        '따라서 HTTP header, HTTP status code, HTTP methods, 비동기 통신, 비동기 처리, CORS\n' +
        '등을 다룰 수 있어야 한다.\n' +
        '\n' +
        '너무 당연하게 이것들은 웹 퍼블리셔를 하다가 자바스크립트나 React 등의 프레임워크를\n' +
        '공부한다고 학습되는 것들이 아니다.\n' +
        '\n' +
        '## assets (and static) 설계\n' +
        '\n' +
        'assets을 무슨 설계까지 하냐고?\n' +
        '아니, 무엇을 assets에 둘 것인지 무엇을 static에 둘 것인지의 결정은 오롯이 프론트엔드\n' +
        '개발자의 몫이다. 잘 설계하는 것은 둘째치더라도 static과 assets의 차이를 이해해야 반드시\n' +
        'static에 두어야 할 것을 올바르게 처리할 수 있다.\n' +
        '\n' +
        'SA(C)SS, Stylus 등을 사용하는 경우, 일반적으로 해당 파일들을 분류하여 관리한다\n' +
        '(e.g, variables, functions, mixins 등 등).\n' +
        '다시 말해, 프로젝트 규모에 따라 파일을 어떻게 분류하여 처리할 것인지 적절한 설계를 해야 하고\n' +
        '필요 시 전처리 언어(?)를 처리하기 위해 webpack에 필요한 loader를 설정할 수도 있어야 한다.\n' +
        '\n' +
        'loader 설정은 프레임워크를 학습하다가 얻어질 수 있는 것일지는 몰라도, 단순히 동영상을 따라\n' +
        '치는 수준으로 학습하는 경우에는 스스로 필요한 loader를 설정할 수 없을 소지가 높을 뿐더러,\n' +
        '어떤 파일을 asset으로 둘 것인지의 결정 그리고 전처리 언어의 모듈화는 (웹 퍼블리셔로 근무할\n' +
        '때 이미 전처리 언어를 모듈링 하고 있던 경우를 제외하고) 웹 퍼블리셔를 하다가 자바스크립트를\n' +
        '공부한다고 얻어지지 않는다.\n' +
        '\n' +
        '## components, layout, pages 설계 및 구현\n' +
        '\n' +
        'React든 Vue든 Angular든 모두 컴포넌트 관점에서 개발하고, 컴포넌트 단위로 개발한다.\n' +
        '1개 컴포넌트에 관련된 템플릿을 짜고, 스타일을 정의하고, 데이터를 정의하고, 기능을 개발한다.\n' +
        '오롯이 이 컴포넌트에만 관련해서 말이다.\n' +
        '\n' +
        '대부분의 퍼블리셔는 컴포넌트 단위로 퍼블리싱 하거나, 컴포넌트 단위로 고민해 본 경험이 없는\n' +
        '경우가 많다. 생각의 틀 자체가 컴포넌트 단위가 아니라 전체로부터 영향을 받는 부분이다.\n' +
        '그렇다보니 외부의 영향 없이 컴포넌트만을 단독으로 개발하는 것 자체에 이질감과 어려움을\n' +
        '느끼는 경우가 많다. 오히려 이제는 각 개별 컴포넌트들이 모여서 한 페이지를 구성하게 될 때의\n' +
        '연결성을 고려하지 못하는 경우도 쉽게 발견 되기도 한다.\n' +
        '\n' +
        '템플릿을 짜는데  pug 같은 템플릿 언어를 사용하고 있다면 해당 템플릿 언어도 다룰 수 있어야\n' +
        '한다. 템플릿 언어를 사용하지 않는다 하더라도 보간법, `v-for` 같은 것을 쓰기만 해도\n' +
        '하코사에서 쉽게 발견 할 수 있는 그 말, “그건 개발자가 하는거 아닌가요?”를 해야 하는거다.\n' +
        '(뭐... 프론트엔드 개발자로 가기로 했다면 그건 이제 감수하기로 한 걸로 봐야 하려나...?)\n' +
        '\n' +
        'UI를 만드는 건 또 어떠할까? 퍼블리셔는 DOM을 제어 해왔지 data를 컨트롤 해 오지 않았다.\n' +
        '지금도 jQuery가 아니면 UI를 개발할 수 없는 이들이 많다.\n' +
        '\n' +
        'jQuery를 vanilla JavaScript로 할 수 있으면 되는 것 아니냐 하는 이도 더러 있는데 아니,\n' +
        '애초에 jQuery로 하던 것을 vanilla로 한다고 해서 크게 바뀌지 않는다. 결국에 퍼블리셔가 UI를\n' +
        '제어하는 것은 DOM을 제어하는 것에서 크게 벗어나지 않기 때문이다.\n' +
        '\n' +
        '그런데 Front-End Framework들에서 DOM을 제어하는 경우는 없다. 오로지 데이터를 변경할\n' +
        '뿐이고,  변경 된 데이터가 템플릿에 반영되는 등의 프로세스를 거쳐 최종적으로 DOM이 업데이트\n' +
        '될 뿐이다.  이 관점을 바꾸지 못하니 학습 중에 자꾸 React(혹은 Vue)에 jQuery를 들고와서\n' +
        'DOM을 제어하려고 하는 퍼블리셔들이 많다. (그리고 실제로 채용 중 그렇게 구현 한 과제도\n' +
        '받아봤다.)\n' +
        '\n' +
        '그 뿐일까?\n' +
        '어떤 컴포넌트를 (혹은 컴포넌트 내의 어떤 부분을) 서버에서 렌더링 하게 할 것인지 또는\n' +
        '클라이언트에서 렌더링 하게 할 것인지, 개별 컴포넌트를 넘어서 컴포넌트와 컴포넌트 간에\n' +
        '데이터를 어떻게 공유할 것인지, 이벤트를 어떻게 공유할 것인지 역시 설계되어야 하고 구현되어야\n' +
        '한다.\n' +
        '\n' +
        '즉, 무엇을 data에 넣을지 무엇을 props로 받을지 무엇을 computed로 관리할지 무엇을 watch로\n' +
        '관리할지, 각 데이터는 언제 채울지, 이벤트 핸들링은 상위 컴포넌트에서 처리할지 개별\n' +
        '컴포넌트에서 처리할지 등을 설계·구현 할 수 있어야 한다.\n' +
        '\n' +
        'Nuxt의 경우 layout 컴포넌트도 설계해야 하고, 라우터 구성을 어떻게 할 것인가에 따라 page\n' +
        '파일 구성도 달라진다.\n' +
        '\n' +
        '이것들이 과연 JavaScript를 더 공부한다고 될까?\n' +
        '\n' +
        '## middleware 구현\n' +
        '\n' +
        '이건 넣어야 할지 말지 약간 고민이었는데 일단 넣기로...\n' +
        '(넣지 말까 고민한 이유는 주니어가 이것들까지 할 줄 알아야 하느냐고 따질 사람들이 충분히\n' +
        '예상되기 때문이다. 하지만, 개발자 라면 응당 해야 하는 것이라 생각하기 때문에 글에 포함\n' +
        '시키기로 했다.)\n' +
        '\n' +
        '많은 퍼블리셔들이 퍼블리싱에 JavaScript를 더 공부하면 프론트엔드 개발을 할 수 있는 것으로\n' +
        '오해 하는 이유 중 하나가 "브라우저에서" 일어나는 일 — 화면에 보이는 것을 개발하는 정도로\n' +
        '치부해서 라고 생각한다.\n' +
        '\n' +
        '미안한(?) 이야기지만, 프론트엔드 개발자가 화면에 보이는 것만을 개발하지 않는다. middleware의\n' +
        '대표적인 사례가 아마도 인증 처리(authorization) 모듈일건데 이 인증 처리는 화면에 직접적으로\n' +
        '반영되는 코드가 아니다. 아래 다이어그램과 같은 눈에 보이지 않고, server/client-side\n' +
        '모두에서 수행되는 프로세스를 구현해야 한다는 거다.\n' +
        '\n' +
        '<figure class="figure">\n' +
        '  <img src="/upload/2020/auth-diagram.svg" alt="" />\n' +
        '  <figcaption class="figure__caption">\n' +
        '    authorization sequence diagram 예시\n' +
        '  </figcaption>\n' +
        '</figure>\n' +
        '\n' +
        '## Store 설계 및 구현\n' +
        '\n' +
        'React든 Vue든 이것들을 이용해서 프로덕트를 만들 때, store를 사용하지 않는 경우는 거의 없지\n' +
        '않을까?\n' +
        '\n' +
        '왠만큼 작은 규모의 프로덕트가 아닌 이상에야 store 역시 모듈화하여 분리시켜 관리하기 마련이고\n' +
        '그러자면 store를 어떻게 분류하고 구성할 것인지 설계해야 할거다. Todo App 만들어보기와 같은\n' +
        '튜토리얼이나 입문 강의에서 보던 그런 수준의 store가 아니다.\n' +
        '\n' +
        '더구나 store는 주로 flux 패턴의 구현체인 것들이기 때문에 JavaScript를 학습한들 이 패턴에\n' +
        '대한 학습이 없으면 store 코드 작성도 어렵다.\n' +
        '\n' +
        'SSR을 사용하는 경우에는 store가 서버에서 미리 채워져야 하고 그 채워진 것이 클라이언트에도\n' +
        '동일하게 적용되어야 하는 경우도 있다. 물론 이러한 것들은 프레임워크가 해결해주고 있고,\n' +
        '프레임워크를 학습하면서 해결 되는 부분이겠지만, 어떤 데이터를 그렇게 처리해야 하는가에 대한\n' +
        '설계 등은 JavaScript나 프레임워크 학습과는 별개 이야기다.\n' +
        '\n' +
        '## 결국 프로그래밍\n' +
        '\n' +
        '결국은 프로그래밍이다.  프로그래밍이기 때문에 프로그래밍에 관한 지식과 훈련 없이 언어에 대한\n' +
        '학습만 하는 것은 사전 학습만 하고 마는 것과 비슷하다.\n' +
        'JavaScript를 학습하는 건 단지 프로그래밍 과정에서 대화를 위한 "언어"가 JavaScript이기\n' +
        '때문에 JavaScript를 학습하는 것이지 JavaScript를 학습한다고 해서 프로그래밍이 이루어지지\n' +
        '않는다.\n' +
        '\n' +
        '더구나 JavaScript를 학습한다고 하면 문법 학습에서 그치는 경우가 많다. (그래서 하코사에서\n' +
        '종종 보이는 질문 중 하나는 JavaScript를 공부했는데 그래서 이제 뭘 해야 하나요?다) 이것은\n' +
        '마치 통역사로 취업하려고 영어를 학습한다면서 영문법을 공부하고 그치는 것과 같다.\n' +
        '\n' +
        '결국은 프로그래밍이기 때문에 퍼블리셔를 하다가 넘어가겠다라는 건 망상에 가깝다. 물론\n' +
        '프론트엔드 개발의 일부에는 퍼블리싱 영역이 포함된다. 위 에서 보자면 component의 템플릿을\n' +
        '작성하고 CSS 전처리 언어를 작성하는 정도다. 사실상 많은 부분을 차지 하지 않는다.\n' +
        '프론트엔드 개발자로 방향을 잡을 거라면 퍼블리셔로 근무하는 기간을 차라리 학습 시간으로\n' +
        '돌리는게 더 낫겠다.\n' +
        '\n' +
        '종종 돈을 벌어야 하기 때문에 일단 퍼블리셔로 일을 하면서 공부해서 프론트엔드 개발자가\n' +
        '되겠다는 경우도 있는데, 일해본 사람들은 알거다. 일하면서 공부한다는게 실상 뜻대로 될 수 없다는\n' +
        '것을. 더구나 그것이 20대 후반 ~ 30대 중반이라면 더더욱.\n' +
        '독한(?) 사람이거나 취미가 개발, 공부인 사람이 아니고서야 그 플랜은 깨지기 쉽다.\n' +
        '\n' +
        '종종 단순하게 프론트엔드 개발자가 연봉이 더 높으니까, 퍼블리셔는 미래가 없어 보여서 등을\n' +
        '이유로 들어서 프론트엔드 개발자가 되겠다는 생각을 하는 이들도 보인다. 그런데 저 위의 것들을\n' +
        '할 수 있기는 한지, 저 위의 것들을 해야 한다는 건 알고 프론트엔드 개발자를 하겠다는 것인지는\n' +
        '모르겠다. 사실 마크업만으로도 네이버, 카카오 가는 사람도 있는데 말이다...\n' +
        '\n' +
        '더구나 ECMA 업데이트는 매 년 이루어지고, 더불어 프론트엔드 개발에 관련 된 프레임워크,\n' +
        '라이브러리, 개발 환경의 변화도 빠른 편이다. 당장 현재 회사 프로덕트에 관련해서만도\n' +
        'webpack이 5로 메이저 업데이트가 이루어졌고, Vue 역시 3으로 메이저 업데이트가 되었으며\n' +
        'moment는 deprecate 되었고 storybook도 4로 메이저 업데이트가 일어났다.\n' +
        '프론트엔드 개발자가 되겠다면 그 빠른 변화를 쫓아가기까지 해야 한다.\n' +
        '\n' +
        '그러한 모든 것들을 고려하고 프론트엔드 개발자로 전향할 것인지를 고민해 보았으면 좋겠다.',
      slug: 'see-what-does-front-end-developer-do-through-nuxt',
      published: true,
      comments: true,
      layout: 'post',
      photos: [],
      link: '',
      _id: 'clcytfa4p009vtawwgqtc3qu7',
      content: '<div class="note">\n' +
        '* 미리 언급해두지만, 여기서 이야기하는 프론트엔드 개발자는 넓은 범위의 프론트엔드 개발자가\n' +
        '아니라 좁은 의미 — 소위 Front-End framework를 이용하며 JS(혹은 TS)를 주 언어로 프로덕트를\n' +
        '개발하는, 현재 기업들이 채용하고 있는 Front-End 개발자로 한정한다.\n' +
        '\n' +
        '<p>또한, 내가 개발하고 있는 방법에서의 이야기이기 때문에 이것을 일반화 시킬 수 없고, 초급 수준의\n' +
        '프론트엔드 개발자로서 (내가 생각하는) 최소한 이 것들을 해야 함을 알고 시작하시라 이야기하기\n' +
        '위한 참고 정도로 보시라.</p>\n' +
        '<p>이글의 목적은 오롯이 자바스크립트를 (추가로) 공부해서 프론트엔드 개발자가 되겠다고\n' +
        '이야기하는 퍼블리셔에게 그 속에 얼마나 많은 구멍이 있는가를 알리는데 있다. (무엇 무엇을\n' +
        '학습하세요~하는 글이 아니다)</p>\n' +
        '</div>\n' +
        '\n' +
        '<hr>\n' +
        '<p>하코사에서 활동하다보면 매우 종종 그리고 쉽게 볼 수 있는 글들 중 하나가 웹 퍼블리셔로 일하다가\n' +
        '자바스크립트를 공부해서 프론트엔드 개발자로 넘어가려고 한다거나 프론트엔드를 꿈꾸며(?)\n' +
        '퍼블리셔로 일단 시작하려고 한다는 식의 이야기다.\n' +
        '작년 2, 3번에 걸쳐 미니 세미나 형식으로 이것이 얼마나 착각 속의 이야기인지에 대해서 이야기\n' +
        '했었는데, 그 연장선 상에서 좀 더 실제적인 것을 가지고 이야기 해보려고 한다.</p>\n' +
        '<p>우선 결론부터 이야기 하자면, 웹 퍼블리셔로 근무하다가 자바스크립트를 공부하면 프론트엔드\n' +
        '개발자가 될 수 있을 거라는 생각은 큰 착각이고 과장을 덧붙이면 오만한 이야기다.</p>\n' +
        '<p>이야기들을 들어보면, 사실 프론트엔드 개발자가 무얼 하는지 알고 그런 이야기를 하는 사람은\n' +
        '없었다. 거짓말 하나 보태지 않고 정말 한 명도 없었다. 물론 내가 만났던 사람들이 프론트엔드를\n' +
        '준비하는 모두를 대변한다고 보기는 어렵다. 하지만 그렇다손 치더라도 한 명도 없는 것은 적잖이\n' +
        '문제가 있다고 밖에는 볼 수 없다.</p>\n' +
        '<p>무튼, 그래서 Nuxt (Vue) 프로젝트 파일 구조를 통해서 프론트엔드 개발자가 무얼 하는지 하나씩\n' +
        '(디렉토리 순서에 따라) 짚어보려고 한다. 물론 이렇게 보는 것이 사실 적절하지는 않다고 생각한다.\n' +
        '하지만 이렇게 한정 된 사례라도 들지 않으면 &quot;자바스크립트를 빡세게 공부해서 프론트엔드 개발자\n' +
        '될 거다&quot;라는 빈약한 논리나 막연한 준비를 벗어나기 어려울 테니 말이다.</p>\n' +
        '\n' +
        '<figure class="figure">\n' +
        '  <img\n' +
        '    src="/upload/2020/nuxt-directory-structure.jpg"\n' +
        '    alt="" >\n' +
        '  <figcaption class="figure__caption">\n' +
        '    현재 내가 사용하고 있는 Nuxt 공통 파일 구조\n' +
        '  </figcaption>\n' +
        '</figure>\n' +
        '\n' +
        '\n' +
        '<h2 id="개발-환경-및-프로젝트-설정"><a href="#개발-환경-및-프로젝트-설정" class="headerlink" title="개발 환경 및 프로젝트 설정"></a>개발 환경 및 프로젝트 설정</h2><p>70%의 확률로 장담하건대, 웹 퍼블리셔에서 자바스크립트를 공부해서 프론트엔드로 넘어가겠다고\n' +
        '이야기하는 사람의 대다수는 여기서부터가 이미 허들일거다.</p>\n' +
        '<p>Node 기반의 개발 환경에 대한 이해도 없을 뿐더러 그러니 당연히 node modules에 대한 이해도\n' +
        '없고 당연히 그 외의 환경 설정들은 전혀 모르는 경우가 많다.\n' +
        '실제로 하코사에는 <code>npm install</code>부터가 허들인 경우를 쉽게 발견할 수 있고, 심각하게는(?)\n' +
        '로컬 서버에 대한 개념 자체가 없는 경우도 쉽게 발견된다.</p>\n' +
        '<p>회사에서 채용을 진행하면서 과제를 받고 리뷰하며 다시 질문을 던져보면 브라우저 대응을\n' +
        '어디까지 했다고 하면서 그와 일치하는 설정은 코드 어디에도 없거나, lint 오류를 수정하는게\n' +
        '아니라 오류가 눈에 보이지 않게 하기 위해 lint를 꺼두는 일이 비일비재하게 일어났다.</p>\n' +
        '<p>최소한 필요한 모듈을 어떻게 설치하고 설정해야 하는지, 프로덕트의 브라우저 대응 범위를\n' +
        '정했다면 그 브라우저 범위를 대응하기 위해 어떤 설정을 해주어야 하는지, 기본 설정을\n' +
        '변경해야 한다면 어떻게 설정 해야 하는지 등은 알고 있어야 하지 않을까?</p>\n' +
        '<h2 id="APIs-구현"><a href="#APIs-구현" class="headerlink" title="APIs 구현"></a>APIs 구현</h2><p>REST API를 구현한다는 것이 아니라, REST API를 호출하고 응답을 처리하는 함수를 구현한다.\n' +
        '함수를 구현한다고 하니 뭐 별거 없겠거니 생각할지 모르겠지만, 왠만큼 작은(?) 프로덕트가\n' +
        '아닌 이상 사용해야 하는 API는 십 수개가 아니라 수 십개에 달한다.</p>\n' +
        '<p>때문에 단순히 <code>index.js</code>파일 하나에 API를 호출하는 함수를 작성하면 되는게 아니라, 어떻게\n' +
        '분류하고 모듈화 해서 어느 수준까지 directory를 나누고 file을 어떻게 구성할지 등을 설계하고\n' +
        '구현해야 한다.</p>\n' +
        '<p>그 뿐일까?\n' +
        'API를 호출하는데 있어 HEADER 정보를 조작해야 할 때도 있고, 응답에 실패했다 하더라도\n' +
        'app이 crash 되지 않도록 처리해야 할 때도 있으며, 때로는 응답 데이터를 사용하기에 적절하게\n' +
        '가공해야 하는 경우도 있다.</p>\n' +
        '<p>따라서 HTTP header, HTTP status code, HTTP methods, 비동기 통신, 비동기 처리, CORS\n' +
        '등을 다룰 수 있어야 한다.</p>\n' +
        '<p>너무 당연하게 이것들은 웹 퍼블리셔를 하다가 자바스크립트나 React 등의 프레임워크를\n' +
        '공부한다고 학습되는 것들이 아니다.</p>\n' +
        '<h2 id="assets-and-static-설계"><a href="#assets-and-static-설계" class="headerlink" title="assets (and static) 설계"></a>assets (and static) 설계</h2><p>assets을 무슨 설계까지 하냐고?\n' +
        '아니, 무엇을 assets에 둘 것인지 무엇을 static에 둘 것인지의 결정은 오롯이 프론트엔드\n' +
        '개발자의 몫이다. 잘 설계하는 것은 둘째치더라도 static과 assets의 차이를 이해해야 반드시\n' +
        'static에 두어야 할 것을 올바르게 처리할 수 있다.</p>\n' +
        '<p>SA(C)SS, Stylus 등을 사용하는 경우, 일반적으로 해당 파일들을 분류하여 관리한다\n' +
        '(e.g, variables, functions, mixins 등 등).\n' +
        '다시 말해, 프로젝트 규모에 따라 파일을 어떻게 분류하여 처리할 것인지 적절한 설계를 해야 하고\n' +
        '필요 시 전처리 언어(?)를 처리하기 위해 webpack에 필요한 loader를 설정할 수도 있어야 한다.</p>\n' +
        '<p>loader 설정은 프레임워크를 학습하다가 얻어질 수 있는 것일지는 몰라도, 단순히 동영상을 따라\n' +
        '치는 수준으로 학습하는 경우에는 스스로 필요한 loader를 설정할 수 없을 소지가 높을 뿐더러,\n' +
        '어떤 파일을 asset으로 둘 것인지의 결정 그리고 전처리 언어의 모듈화는 (웹 퍼블리셔로 근무할\n' +
        '때 이미 전처리 언어를 모듈링 하고 있던 경우를 제외하고) 웹 퍼블리셔를 하다가 자바스크립트를\n' +
        '공부한다고 얻어지지 않는다.</p>\n' +
        '<h2 id="components-layout-pages-설계-및-구현"><a href="#components-layout-pages-설계-및-구현" class="headerlink" title="components, layout, pages 설계 및 구현"></a>components, layout, pages 설계 및 구현</h2><p>React든 Vue든 Angular든 모두 컴포넌트 관점에서 개발하고, 컴포넌트 단위로 개발한다.\n' +
        '1개 컴포넌트에 관련된 템플릿을 짜고, 스타일을 정의하고, 데이터를 정의하고, 기능을 개발한다.\n' +
        '오롯이 이 컴포넌트에만 관련해서 말이다.</p>\n' +
        '<p>대부분의 퍼블리셔는 컴포넌트 단위로 퍼블리싱 하거나, 컴포넌트 단위로 고민해 본 경험이 없는\n' +
        '경우가 많다. 생각의 틀 자체가 컴포넌트 단위가 아니라 전체로부터 영향을 받는 부분이다.\n' +
        '그렇다보니 외부의 영향 없이 컴포넌트만을 단독으로 개발하는 것 자체에 이질감과 어려움을\n' +
        '느끼는 경우가 많다. 오히려 이제는 각 개별 컴포넌트들이 모여서 한 페이지를 구성하게 될 때의\n' +
        '연결성을 고려하지 못하는 경우도 쉽게 발견 되기도 한다.</p>\n' +
        '<p>템플릿을 짜는데  pug 같은 템플릿 언어를 사용하고 있다면 해당 템플릿 언어도 다룰 수 있어야\n' +
        '한다. 템플릿 언어를 사용하지 않는다 하더라도 보간법, <code>v-for</code> 같은 것을 쓰기만 해도\n' +
        '하코사에서 쉽게 발견 할 수 있는 그 말, “그건 개발자가 하는거 아닌가요?”를 해야 하는거다.\n' +
        '(뭐... 프론트엔드 개발자로 가기로 했다면 그건 이제 감수하기로 한 걸로 봐야 하려나...?)</p>\n' +
        '<p>UI를 만드는 건 또 어떠할까? 퍼블리셔는 DOM을 제어 해왔지 data를 컨트롤 해 오지 않았다.\n' +
        '지금도 jQuery가 아니면 UI를 개발할 수 없는 이들이 많다.</p>\n' +
        '<p>jQuery를 vanilla JavaScript로 할 수 있으면 되는 것 아니냐 하는 이도 더러 있는데 아니,\n' +
        '애초에 jQuery로 하던 것을 vanilla로 한다고 해서 크게 바뀌지 않는다. 결국에 퍼블리셔가 UI를\n' +
        '제어하는 것은 DOM을 제어하는 것에서 크게 벗어나지 않기 때문이다.</p>\n' +
        '<p>그런데 Front-End Framework들에서 DOM을 제어하는 경우는 없다. 오로지 데이터를 변경할\n' +
        '뿐이고,  변경 된 데이터가 템플릿에 반영되는 등의 프로세스를 거쳐 최종적으로 DOM이 업데이트\n' +
        '될 뿐이다.  이 관점을 바꾸지 못하니 학습 중에 자꾸 React(혹은 Vue)에 jQuery를 들고와서\n' +
        'DOM을 제어하려고 하는 퍼블리셔들이 많다. (그리고 실제로 채용 중 그렇게 구현 한 과제도\n' +
        '받아봤다.)</p>\n' +
        '<p>그 뿐일까?\n' +
        '어떤 컴포넌트를 (혹은 컴포넌트 내의 어떤 부분을) 서버에서 렌더링 하게 할 것인지 또는\n' +
        '클라이언트에서 렌더링 하게 할 것인지, 개별 컴포넌트를 넘어서 컴포넌트와 컴포넌트 간에\n' +
        '데이터를 어떻게 공유할 것인지, 이벤트를 어떻게 공유할 것인지 역시 설계되어야 하고 구현되어야\n' +
        '한다.</p>\n' +
        '<p>즉, 무엇을 data에 넣을지 무엇을 props로 받을지 무엇을 computed로 관리할지 무엇을 watch로\n' +
        '관리할지, 각 데이터는 언제 채울지, 이벤트 핸들링은 상위 컴포넌트에서 처리할지 개별\n' +
        '컴포넌트에서 처리할지 등을 설계·구현 할 수 있어야 한다.</p>\n' +
        '<p>Nuxt의 경우 layout 컴포넌트도 설계해야 하고, 라우터 구성을 어떻게 할 것인가에 따라 page\n' +
        '파일 구성도 달라진다.</p>\n' +
        '<p>이것들이 과연 JavaScript를 더 공부한다고 될까?</p>\n' +
        '<h2 id="middleware-구현"><a href="#middleware-구현" class="headerlink" title="middleware 구현"></a>middleware 구현</h2><p>이건 넣어야 할지 말지 약간 고민이었는데 일단 넣기로...\n' +
        '(넣지 말까 고민한 이유는 주니어가 이것들까지 할 줄 알아야 하느냐고 따질 사람들이 충분히\n' +
        '예상되기 때문이다. 하지만, 개발자 라면 응당 해야 하는 것이라 생각하기 때문에 글에 포함\n' +
        '시키기로 했다.)</p>\n' +
        '<p>많은 퍼블리셔들이 퍼블리싱에 JavaScript를 더 공부하면 프론트엔드 개발을 할 수 있는 것으로\n' +
        '오해 하는 이유 중 하나가 &quot;브라우저에서&quot; 일어나는 일 — 화면에 보이는 것을 개발하는 정도로\n' +
        '치부해서 라고 생각한다.</p>\n' +
        '<p>미안한(?) 이야기지만, 프론트엔드 개발자가 화면에 보이는 것만을 개발하지 않는다. middleware의\n' +
        '대표적인 사례가 아마도 인증 처리(authorization) 모듈일건데 이 인증 처리는 화면에 직접적으로\n' +
        '반영되는 코드가 아니다. 아래 다이어그램과 같은 눈에 보이지 않고, server&#x2F;client-side\n' +
        '모두에서 수행되는 프로세스를 구현해야 한다는 거다.</p>\n' +
        '<figure class="figure">\n' +
        '  <img src="/upload/2020/auth-diagram.svg" alt="" />\n' +
        '  <figcaption class="figure__caption">\n' +
        '    authorization sequence diagram 예시\n' +
        '  </figcaption>\n' +
        '</figure>\n' +
        '\n' +
        '<h2 id="Store-설계-및-구현"><a href="#Store-설계-및-구현" class="headerlink" title="Store 설계 및 구현"></a>Store 설계 및 구현</h2><p>React든 Vue든 이것들을 이용해서 프로덕트를 만들 때, store를 사용하지 않는 경우는 거의 없지\n' +
        '않을까?</p>\n' +
        '<p>왠만큼 작은 규모의 프로덕트가 아닌 이상에야 store 역시 모듈화하여 분리시켜 관리하기 마련이고\n' +
        '그러자면 store를 어떻게 분류하고 구성할 것인지 설계해야 할거다. Todo App 만들어보기와 같은\n' +
        '튜토리얼이나 입문 강의에서 보던 그런 수준의 store가 아니다.</p>\n' +
        '<p>더구나 store는 주로 flux 패턴의 구현체인 것들이기 때문에 JavaScript를 학습한들 이 패턴에\n' +
        '대한 학습이 없으면 store 코드 작성도 어렵다.</p>\n' +
        '<p>SSR을 사용하는 경우에는 store가 서버에서 미리 채워져야 하고 그 채워진 것이 클라이언트에도\n' +
        '동일하게 적용되어야 하는 경우도 있다. 물론 이러한 것들은 프레임워크가 해결해주고 있고,\n' +
        '프레임워크를 학습하면서 해결 되는 부분이겠지만, 어떤 데이터를 그렇게 처리해야 하는가에 대한\n' +
        '설계 등은 JavaScript나 프레임워크 학습과는 별개 이야기다.</p>\n' +
        '<h2 id="결국-프로그래밍"><a href="#결국-프로그래밍" class="headerlink" title="결국 프로그래밍"></a>결국 프로그래밍</h2><p>결국은 프로그래밍이다.  프로그래밍이기 때문에 프로그래밍에 관한 지식과 훈련 없이 언어에 대한\n' +
        '학습만 하는 것은 사전 학습만 하고 마는 것과 비슷하다.\n' +
        'JavaScript를 학습하는 건 단지 프로그래밍 과정에서 대화를 위한 &quot;언어&quot;가 JavaScript이기\n' +
        '때문에 JavaScript를 학습하는 것이지 JavaScript를 학습한다고 해서 프로그래밍이 이루어지지\n' +
        '않는다.</p>\n' +
        '<p>더구나 JavaScript를 학습한다고 하면 문법 학습에서 그치는 경우가 많다. (그래서 하코사에서\n' +
        '종종 보이는 질문 중 하나는 JavaScript를 공부했는데 그래서 이제 뭘 해야 하나요?다) 이것은\n' +
        '마치 통역사로 취업하려고 영어를 학습한다면서 영문법을 공부하고 그치는 것과 같다.</p>\n' +
        '<p>결국은 프로그래밍이기 때문에 퍼블리셔를 하다가 넘어가겠다라는 건 망상에 가깝다. 물론\n' +
        '프론트엔드 개발의 일부에는 퍼블리싱 영역이 포함된다. 위 에서 보자면 component의 템플릿을\n' +
        '작성하고 CSS 전처리 언어를 작성하는 정도다. 사실상 많은 부분을 차지 하지 않는다.\n' +
        '프론트엔드 개발자로 방향을 잡을 거라면 퍼블리셔로 근무하는 기간을 차라리 학습 시간으로\n' +
        '돌리는게 더 낫겠다.</p>\n' +
        '<p>종종 돈을 벌어야 하기 때문에 일단 퍼블리셔로 일을 하면서 공부해서 프론트엔드 개발자가\n' +
        '되겠다는 경우도 있는데, 일해본 사람들은 알거다. 일하면서 공부한다는게 실상 뜻대로 될 수 없다는\n' +
        '것을. 더구나 그것이 20대 후반 ~ 30대 중반이라면 더더욱.\n' +
        '독한(?) 사람이거나 취미가 개발, 공부인 사람이 아니고서야 그 플랜은 깨지기 쉽다.</p>\n' +
        '<p>종종 단순하게 프론트엔드 개발자가 연봉이 더 높으니까, 퍼블리셔는 미래가 없어 보여서 등을\n' +
        '이유로 들어서 프론트엔드 개발자가 되겠다는 생각을 하는 이들도 보인다. 그런데 저 위의 것들을\n' +
        '할 수 있기는 한지, 저 위의 것들을 해야 한다는 건 알고 프론트엔드 개발자를 하겠다는 것인지는\n' +
        '모르겠다. 사실 마크업만으로도 네이버, 카카오 가는 사람도 있는데 말이다...</p>\n' +
        '<p>더구나 ECMA 업데이트는 매 년 이루어지고, 더불어 프론트엔드 개발에 관련 된 프레임워크,\n' +
        '라이브러리, 개발 환경의 변화도 빠른 편이다. 당장 현재 회사 프로덕트에 관련해서만도\n' +
        'webpack이 5로 메이저 업데이트가 이루어졌고, Vue 역시 3으로 메이저 업데이트가 되었으며\n' +
        'moment는 deprecate 되었고 storybook도 4로 메이저 업데이트가 일어났다.\n' +
        '프론트엔드 개발자가 되겠다면 그 빠른 변화를 쫓아가기까지 해야 한다.</p>\n' +
        '<p>그러한 모든 것들을 고려하고 프론트엔드 개발자로 전향할 것인지를 고민해 보았으면 좋겠다.</p>\n',
      site: [Object],
      excerpt: '',
      more: '<div class="note">\n' +
        '* 미리 언급해두지만, 여기서 이야기하는 프론트엔드 개발자는 넓은 범위의 프론트엔드 개발자가\n' +
        '아니라 좁은 의미 — 소위 Front-End framework를 이용하며 JS(혹은 TS)를 주 언어로 프로덕트를\n' +
        '개발하는, 현재 기업들이 채용하고 있는 Front-End 개발자로 한정한다.\n' +
        '\n' +
        '<p>또한, 내가 개발하고 있는 방법에서의 이야기이기 때문에 이것을 일반화 시킬 수 없고, 초급 수준의\n' +
        '프론트엔드 개발자로서 (내가 생각하는) 최소한 이 것들을 해야 함을 알고 시작하시라 이야기하기\n' +
        '위한 참고 정도로 보시라.</p>\n' +
        '<p>이글의 목적은 오롯이 자바스크립트를 (추가로) 공부해서 프론트엔드 개발자가 되겠다고\n' +
        '이야기하는 퍼블리셔에게 그 속에 얼마나 많은 구멍이 있는가를 알리는데 있다. (무엇 무엇을\n' +
        '학습하세요~하는 글이 아니다)</p>\n' +
        '</div>\n' +
        '\n' +
        '<hr>\n' +
        '<p>하코사에서 활동하다보면 매우 종종 그리고 쉽게 볼 수 있는 글들 중 하나가 웹 퍼블리셔로 일하다가\n' +
        '자바스크립트를 공부해서 프론트엔드 개발자로 넘어가려고 한다거나 프론트엔드를 꿈꾸며(?)\n' +
        '퍼블리셔로 일단 시작하려고 한다는 식의 이야기다.\n' +
        '작년 2, 3번에 걸쳐 미니 세미나 형식으로 이것이 얼마나 착각 속의 이야기인지에 대해서 이야기\n' +
        '했었는데, 그 연장선 상에서 좀 더 실제적인 것을 가지고 이야기 해보려고 한다.</p>\n' +
        '<p>우선 결론부터 이야기 하자면, 웹 퍼블리셔로 근무하다가 자바스크립트를 공부하면 프론트엔드\n' +
        '개발자가 될 수 있을 거라는 생각은 큰 착각이고 과장을 덧붙이면 오만한 이야기다.</p>\n' +
        '<p>이야기들을 들어보면, 사실 프론트엔드 개발자가 무얼 하는지 알고 그런 이야기를 하는 사람은\n' +
        '없었다. 거짓말 하나 보태지 않고 정말 한 명도 없었다. 물론 내가 만났던 사람들이 프론트엔드를\n' +
        '준비하는 모두를 대변한다고 보기는 어렵다. 하지만 그렇다손 치더라도 한 명도 없는 것은 적잖이\n' +
        '문제가 있다고 밖에는 볼 수 없다.</p>\n' +
        '<p>무튼, 그래서 Nuxt (Vue) 프로젝트 파일 구조를 통해서 프론트엔드 개발자가 무얼 하는지 하나씩\n' +
        '(디렉토리 순서에 따라) 짚어보려고 한다. 물론 이렇게 보는 것이 사실 적절하지는 않다고 생각한다.\n' +
        '하지만 이렇게 한정 된 사례라도 들지 않으면 &quot;자바스크립트를 빡세게 공부해서 프론트엔드 개발자\n' +
        '될 거다&quot;라는 빈약한 논리나 막연한 준비를 벗어나기 어려울 테니 말이다.</p>\n' +
        '\n' +
        '<figure class="figure">\n' +
        '  <img\n' +
        '    src="/upload/2020/nuxt-directory-structure.jpg"\n' +
        '    alt="" >\n' +
        '  <figcaption class="figure__caption">\n' +
        '    현재 내가 사용하고 있는 Nuxt 공통 파일 구조\n' +
        '  </figcaption>\n' +
        '</figure>\n' +
        '\n' +
        '\n' +
        '<h2 id="개발-환경-및-프로젝트-설정"><a href="#개발-환경-및-프로젝트-설정" class="headerlink" title="개발 환경 및 프로젝트 설정"></a>개발 환경 및 프로젝트 설정</h2><p>70%의 확률로 장담하건대, 웹 퍼블리셔에서 자바스크립트를 공부해서 프론트엔드로 넘어가겠다고\n' +
        '이야기하는 사람의 대다수는 여기서부터가 이미 허들일거다.</p>\n' +
        '<p>Node 기반의 개발 환경에 대한 이해도 없을 뿐더러 그러니 당연히 node modules에 대한 이해도\n' +
        '없고 당연히 그 외의 환경 설정들은 전혀 모르는 경우가 많다.\n' +
        '실제로 하코사에는 <code>npm install</code>부터가 허들인 경우를 쉽게 발견할 수 있고, 심각하게는(?)\n' +
        '로컬 서버에 대한 개념 자체가 없는 경우도 쉽게 발견된다.</p>\n' +
        '<p>회사에서 채용을 진행하면서 과제를 받고 리뷰하며 다시 질문을 던져보면 브라우저 대응을\n' +
        '어디까지 했다고 하면서 그와 일치하는 설정은 코드 어디에도 없거나, lint 오류를 수정하는게\n' +
        '아니라 오류가 눈에 보이지 않게 하기 위해 lint를 꺼두는 일이 비일비재하게 일어났다.</p>\n' +
        '<p>최소한 필요한 모듈을 어떻게 설치하고 설정해야 하는지, 프로덕트의 브라우저 대응 범위를\n' +
        '정했다면 그 브라우저 범위를 대응하기 위해 어떤 설정을 해주어야 하는지, 기본 설정을\n' +
        '변경해야 한다면 어떻게 설정 해야 하는지 등은 알고 있어야 하지 않을까?</p>\n' +
        '<h2 id="APIs-구현"><a href="#APIs-구현" class="headerlink" title="APIs 구현"></a>APIs 구현</h2><p>REST API를 구현한다는 것이 아니라, REST API를 호출하고 응답을 처리하는 함수를 구현한다.\n' +
        '함수를 구현한다고 하니 뭐 별거 없겠거니 생각할지 모르겠지만, 왠만큼 작은(?) 프로덕트가\n' +
        '아닌 이상 사용해야 하는 API는 십 수개가 아니라 수 십개에 달한다.</p>\n' +
        '<p>때문에 단순히 <code>index.js</code>파일 하나에 API를 호출하는 함수를 작성하면 되는게 아니라, 어떻게\n' +
        '분류하고 모듈화 해서 어느 수준까지 directory를 나누고 file을 어떻게 구성할지 등을 설계하고\n' +
        '구현해야 한다.</p>\n' +
        '<p>그 뿐일까?\n' +
        'API를 호출하는데 있어 HEADER 정보를 조작해야 할 때도 있고, 응답에 실패했다 하더라도\n' +
        'app이 crash 되지 않도록 처리해야 할 때도 있으며, 때로는 응답 데이터를 사용하기에 적절하게\n' +
        '가공해야 하는 경우도 있다.</p>\n' +
        '<p>따라서 HTTP header, HTTP status code, HTTP methods, 비동기 통신, 비동기 처리, CORS\n' +
        '등을 다룰 수 있어야 한다.</p>\n' +
        '<p>너무 당연하게 이것들은 웹 퍼블리셔를 하다가 자바스크립트나 React 등의 프레임워크를\n' +
        '공부한다고 학습되는 것들이 아니다.</p>\n' +
        '<h2 id="assets-and-static-설계"><a href="#assets-and-static-설계" class="headerlink" title="assets (and static) 설계"></a>assets (and static) 설계</h2><p>assets을 무슨 설계까지 하냐고?\n' +
        '아니, 무엇을 assets에 둘 것인지 무엇을 static에 둘 것인지의 결정은 오롯이 프론트엔드\n' +
        '개발자의 몫이다. 잘 설계하는 것은 둘째치더라도 static과 assets의 차이를 이해해야 반드시\n' +
        'static에 두어야 할 것을 올바르게 처리할 수 있다.</p>\n' +
        '<p>SA(C)SS, Stylus 등을 사용하는 경우, 일반적으로 해당 파일들을 분류하여 관리한다\n' +
        '(e.g, variables, functions, mixins 등 등).\n' +
        '다시 말해, 프로젝트 규모에 따라 파일을 어떻게 분류하여 처리할 것인지 적절한 설계를 해야 하고\n' +
        '필요 시 전처리 언어(?)를 처리하기 위해 webpack에 필요한 loader를 설정할 수도 있어야 한다.</p>\n' +
        '<p>loader 설정은 프레임워크를 학습하다가 얻어질 수 있는 것일지는 몰라도, 단순히 동영상을 따라\n' +
        '치는 수준으로 학습하는 경우에는 스스로 필요한 loader를 설정할 수 없을 소지가 높을 뿐더러,\n' +
        '어떤 파일을 asset으로 둘 것인지의 결정 그리고 전처리 언어의 모듈화는 (웹 퍼블리셔로 근무할\n' +
        '때 이미 전처리 언어를 모듈링 하고 있던 경우를 제외하고) 웹 퍼블리셔를 하다가 자바스크립트를\n' +
        '공부한다고 얻어지지 않는다.</p>\n' +
        '<h2 id="components-layout-pages-설계-및-구현"><a href="#components-layout-pages-설계-및-구현" class="headerlink" title="components, layout, pages 설계 및 구현"></a>components, layout, pages 설계 및 구현</h2><p>React든 Vue든 Angular든 모두 컴포넌트 관점에서 개발하고, 컴포넌트 단위로 개발한다.\n' +
        '1개 컴포넌트에 관련된 템플릿을 짜고, 스타일을 정의하고, 데이터를 정의하고, 기능을 개발한다.\n' +
        '오롯이 이 컴포넌트에만 관련해서 말이다.</p>\n' +
        '<p>대부분의 퍼블리셔는 컴포넌트 단위로 퍼블리싱 하거나, 컴포넌트 단위로 고민해 본 경험이 없는\n' +
        '경우가 많다. 생각의 틀 자체가 컴포넌트 단위가 아니라 전체로부터 영향을 받는 부분이다.\n' +
        '그렇다보니 외부의 영향 없이 컴포넌트만을 단독으로 개발하는 것 자체에 이질감과 어려움을\n' +
        '느끼는 경우가 많다. 오히려 이제는 각 개별 컴포넌트들이 모여서 한 페이지를 구성하게 될 때의\n' +
        '연결성을 고려하지 못하는 경우도 쉽게 발견 되기도 한다.</p>\n' +
        '<p>템플릿을 짜는데  pug 같은 템플릿 언어를 사용하고 있다면 해당 템플릿 언어도 다룰 수 있어야\n' +
        '한다. 템플릿 언어를 사용하지 않는다 하더라도 보간법, <code>v-for</code> 같은 것을 쓰기만 해도\n' +
        '하코사에서 쉽게 발견 할 수 있는 그 말, “그건 개발자가 하는거 아닌가요?”를 해야 하는거다.\n' +
        '(뭐... 프론트엔드 개발자로 가기로 했다면 그건 이제 감수하기로 한 걸로 봐야 하려나...?)</p>\n' +
        '<p>UI를 만드는 건 또 어떠할까? 퍼블리셔는 DOM을 제어 해왔지 data를 컨트롤 해 오지 않았다.\n' +
        '지금도 jQuery가 아니면 UI를 개발할 수 없는 이들이 많다.</p>\n' +
        '<p>jQuery를 vanilla JavaScript로 할 수 있으면 되는 것 아니냐 하는 이도 더러 있는데 아니,\n' +
        '애초에 jQuery로 하던 것을 vanilla로 한다고 해서 크게 바뀌지 않는다. 결국에 퍼블리셔가 UI를\n' +
        '제어하는 것은 DOM을 제어하는 것에서 크게 벗어나지 않기 때문이다.</p>\n' +
        '<p>그런데 Front-End Framework들에서 DOM을 제어하는 경우는 없다. 오로지 데이터를 변경할\n' +
        '뿐이고,  변경 된 데이터가 템플릿에 반영되는 등의 프로세스를 거쳐 최종적으로 DOM이 업데이트\n' +
        '될 뿐이다.  이 관점을 바꾸지 못하니 학습 중에 자꾸 React(혹은 Vue)에 jQuery를 들고와서\n' +
        'DOM을 제어하려고 하는 퍼블리셔들이 많다. (그리고 실제로 채용 중 그렇게 구현 한 과제도\n' +
        '받아봤다.)</p>\n' +
        '<p>그 뿐일까?\n' +
        '어떤 컴포넌트를 (혹은 컴포넌트 내의 어떤 부분을) 서버에서 렌더링 하게 할 것인지 또는\n' +
        '클라이언트에서 렌더링 하게 할 것인지, 개별 컴포넌트를 넘어서 컴포넌트와 컴포넌트 간에\n' +
        '데이터를 어떻게 공유할 것인지, 이벤트를 어떻게 공유할 것인지 역시 설계되어야 하고 구현되어야\n' +
        '한다.</p>\n' +
        '<p>즉, 무엇을 data에 넣을지 무엇을 props로 받을지 무엇을 computed로 관리할지 무엇을 watch로\n' +
        '관리할지, 각 데이터는 언제 채울지, 이벤트 핸들링은 상위 컴포넌트에서 처리할지 개별\n' +
        '컴포넌트에서 처리할지 등을 설계·구현 할 수 있어야 한다.</p>\n' +
        '<p>Nuxt의 경우 layout 컴포넌트도 설계해야 하고, 라우터 구성을 어떻게 할 것인가에 따라 page\n' +
        '파일 구성도 달라진다.</p>\n' +
        '<p>이것들이 과연 JavaScript를 더 공부한다고 될까?</p>\n' +
        '<h2 id="middleware-구현"><a href="#middleware-구현" class="headerlink" title="middleware 구현"></a>middleware 구현</h2><p>이건 넣어야 할지 말지 약간 고민이었는데 일단 넣기로...\n' +
        '(넣지 말까 고민한 이유는 주니어가 이것들까지 할 줄 알아야 하느냐고 따질 사람들이 충분히\n' +
        '예상되기 때문이다. 하지만, 개발자 라면 응당 해야 하는 것이라 생각하기 때문에 글에 포함\n' +
        '시키기로 했다.)</p>\n' +
        '<p>많은 퍼블리셔들이 퍼블리싱에 JavaScript를 더 공부하면 프론트엔드 개발을 할 수 있는 것으로\n' +
        '오해 하는 이유 중 하나가 &quot;브라우저에서&quot; 일어나는 일 — 화면에 보이는 것을 개발하는 정도로\n' +
        '치부해서 라고 생각한다.</p>\n' +
        '<p>미안한(?) 이야기지만, 프론트엔드 개발자가 화면에 보이는 것만을 개발하지 않는다. middleware의\n' +
        '대표적인 사례가 아마도 인증 처리(authorization) 모듈일건데 이 인증 처리는 화면에 직접적으로\n' +
        '반영되는 코드가 아니다. 아래 다이어그램과 같은 눈에 보이지 않고, server&#x2F;client-side\n' +
        '모두에서 수행되는 프로세스를 구현해야 한다는 거다.</p>\n' +
        '<figure class="figure">\n' +
        '  <img src="/upload/2020/auth-diagram.svg" alt="" />\n' +
        '  <figcaption class="figure__caption">\n' +
        '    authorization sequence diagram 예시\n' +
        '  </figcaption>\n' +
        '</figure>\n' +
        '\n' +
        '<h2 id="Store-설계-및-구현"><a href="#Store-설계-및-구현" class="headerlink" title="Store 설계 및 구현"></a>Store 설계 및 구현</h2><p>React든 Vue든 이것들을 이용해서 프로덕트를 만들 때, store를 사용하지 않는 경우는 거의 없지\n' +
        '않을까?</p>\n' +
        '<p>왠만큼 작은 규모의 프로덕트가 아닌 이상에야 store 역시 모듈화하여 분리시켜 관리하기 마련이고\n' +
        '그러자면 store를 어떻게 분류하고 구성할 것인지 설계해야 할거다. Todo App 만들어보기와 같은\n' +
        '튜토리얼이나 입문 강의에서 보던 그런 수준의 store가 아니다.</p>\n' +
        '<p>더구나 store는 주로 flux 패턴의 구현체인 것들이기 때문에 JavaScript를 학습한들 이 패턴에\n' +
        '대한 학습이 없으면 store 코드 작성도 어렵다.</p>\n' +
        '<p>SSR을 사용하는 경우에는 store가 서버에서 미리 채워져야 하고 그 채워진 것이 클라이언트에도\n' +
        '동일하게 적용되어야 하는 경우도 있다. 물론 이러한 것들은 프레임워크가 해결해주고 있고,\n' +
        '프레임워크를 학습하면서 해결 되는 부분이겠지만, 어떤 데이터를 그렇게 처리해야 하는가에 대한\n' +
        '설계 등은 JavaScript나 프레임워크 학습과는 별개 이야기다.</p>\n' +
        '<h2 id="결국-프로그래밍"><a href="#결국-프로그래밍" class="headerlink" title="결국 프로그래밍"></a>결국 프로그래밍</h2><p>결국은 프로그래밍이다.  프로그래밍이기 때문에 프로그래밍에 관한 지식과 훈련 없이 언어에 대한\n' +
        '학습만 하는 것은 사전 학습만 하고 마는 것과 비슷하다.\n' +
        'JavaScript를 학습하는 건 단지 프로그래밍 과정에서 대화를 위한 &quot;언어&quot;가 JavaScript이기\n' +
        '때문에 JavaScript를 학습하는 것이지 JavaScript를 학습한다고 해서 프로그래밍이 이루어지지\n' +
        '않는다.</p>\n' +
        '<p>더구나 JavaScript를 학습한다고 하면 문법 학습에서 그치는 경우가 많다. (그래서 하코사에서\n' +
        '종종 보이는 질문 중 하나는 JavaScript를 공부했는데 그래서 이제 뭘 해야 하나요?다) 이것은\n' +
        '마치 통역사로 취업하려고 영어를 학습한다면서 영문법을 공부하고 그치는 것과 같다.</p>\n' +
        '<p>결국은 프로그래밍이기 때문에 퍼블리셔를 하다가 넘어가겠다라는 건 망상에 가깝다. 물론\n' +
        '프론트엔드 개발의 일부에는 퍼블리싱 영역이 포함된다. 위 에서 보자면 component의 템플릿을\n' +
        '작성하고 CSS 전처리 언어를 작성하는 정도다. 사실상 많은 부분을 차지 하지 않는다.\n' +
        '프론트엔드 개발자로 방향을 잡을 거라면 퍼블리셔로 근무하는 기간을 차라리 학습 시간으로\n' +
        '돌리는게 더 낫겠다.</p>\n' +
        '<p>종종 돈을 벌어야 하기 때문에 일단 퍼블리셔로 일을 하면서 공부해서 프론트엔드 개발자가\n' +
        '되겠다는 경우도 있는데, 일해본 사람들은 알거다. 일하면서 공부한다는게 실상 뜻대로 될 수 없다는\n' +
        '것을. 더구나 그것이 20대 후반 ~ 30대 중반이라면 더더욱.\n' +
        '독한(?) 사람이거나 취미가 개발, 공부인 사람이 아니고서야 그 플랜은 깨지기 쉽다.</p>\n' +
        '<p>종종 단순하게 프론트엔드 개발자가 연봉이 더 높으니까, 퍼블리셔는 미래가 없어 보여서 등을\n' +
        '이유로 들어서 프론트엔드 개발자가 되겠다는 생각을 하는 이들도 보인다. 그런데 저 위의 것들을\n' +
        '할 수 있기는 한지, 저 위의 것들을 해야 한다는 건 알고 프론트엔드 개발자를 하겠다는 것인지는\n' +
        '모르겠다. 사실 마크업만으로도 네이버, 카카오 가는 사람도 있는데 말이다...</p>\n' +
        '<p>더구나 ECMA 업데이트는 매 년 이루어지고, 더불어 프론트엔드 개발에 관련 된 프레임워크,\n' +
        '라이브러리, 개발 환경의 변화도 빠른 편이다. 당장 현재 회사 프로덕트에 관련해서만도\n' +
        'webpack이 5로 메이저 업데이트가 이루어졌고, Vue 역시 3으로 메이저 업데이트가 되었으며\n' +
        'moment는 deprecate 되었고 storybook도 4로 메이저 업데이트가 일어났다.\n' +
        '프론트엔드 개발자가 되겠다면 그 빠른 변화를 쫓아가기까지 해야 한다.</p>\n' +
        '<p>그러한 모든 것들을 고려하고 프론트엔드 개발자로 전향할 것인지를 고민해 보았으면 좋겠다.</p>\n',
      path: [Getter],
      permalink: [Getter],
      full_source: [Getter],
      asset_dir: [Getter],
      tags: [Getter],
      categories: [Getter],
      prev: [Circular *3],
      next: [_Document],
      __post: true
    },
    __post: true
  },
  __post: true
}
INFO  Component's JavaScript is Updated. It started re-bundling
INFO  Successfully Component's JavaScript Bundled
INFO  Component's JavaScript is Updated. It started re-bundling
INFO  Successfully Component's JavaScript Bundled
